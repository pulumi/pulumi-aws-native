// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotfleetwise

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CampaignCollectionScheme0Properties struct {
	TimeBasedCollectionScheme CampaignTimeBasedCollectionScheme `pulumi:"timeBasedCollectionScheme"`
}

// CampaignCollectionScheme0PropertiesInput is an input type that accepts CampaignCollectionScheme0PropertiesArgs and CampaignCollectionScheme0PropertiesOutput values.
// You can construct a concrete instance of `CampaignCollectionScheme0PropertiesInput` via:
//
//	CampaignCollectionScheme0PropertiesArgs{...}
type CampaignCollectionScheme0PropertiesInput interface {
	pulumi.Input

	ToCampaignCollectionScheme0PropertiesOutput() CampaignCollectionScheme0PropertiesOutput
	ToCampaignCollectionScheme0PropertiesOutputWithContext(context.Context) CampaignCollectionScheme0PropertiesOutput
}

type CampaignCollectionScheme0PropertiesArgs struct {
	TimeBasedCollectionScheme CampaignTimeBasedCollectionSchemeInput `pulumi:"timeBasedCollectionScheme"`
}

func (CampaignCollectionScheme0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignCollectionScheme0Properties)(nil)).Elem()
}

func (i CampaignCollectionScheme0PropertiesArgs) ToCampaignCollectionScheme0PropertiesOutput() CampaignCollectionScheme0PropertiesOutput {
	return i.ToCampaignCollectionScheme0PropertiesOutputWithContext(context.Background())
}

func (i CampaignCollectionScheme0PropertiesArgs) ToCampaignCollectionScheme0PropertiesOutputWithContext(ctx context.Context) CampaignCollectionScheme0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignCollectionScheme0PropertiesOutput)
}

type CampaignCollectionScheme0PropertiesOutput struct{ *pulumi.OutputState }

func (CampaignCollectionScheme0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignCollectionScheme0Properties)(nil)).Elem()
}

func (o CampaignCollectionScheme0PropertiesOutput) ToCampaignCollectionScheme0PropertiesOutput() CampaignCollectionScheme0PropertiesOutput {
	return o
}

func (o CampaignCollectionScheme0PropertiesOutput) ToCampaignCollectionScheme0PropertiesOutputWithContext(ctx context.Context) CampaignCollectionScheme0PropertiesOutput {
	return o
}

func (o CampaignCollectionScheme0PropertiesOutput) TimeBasedCollectionScheme() CampaignTimeBasedCollectionSchemeOutput {
	return o.ApplyT(func(v CampaignCollectionScheme0Properties) CampaignTimeBasedCollectionScheme {
		return v.TimeBasedCollectionScheme
	}).(CampaignTimeBasedCollectionSchemeOutput)
}

type CampaignCollectionScheme1Properties struct {
	ConditionBasedCollectionScheme CampaignConditionBasedCollectionScheme `pulumi:"conditionBasedCollectionScheme"`
}

// CampaignCollectionScheme1PropertiesInput is an input type that accepts CampaignCollectionScheme1PropertiesArgs and CampaignCollectionScheme1PropertiesOutput values.
// You can construct a concrete instance of `CampaignCollectionScheme1PropertiesInput` via:
//
//	CampaignCollectionScheme1PropertiesArgs{...}
type CampaignCollectionScheme1PropertiesInput interface {
	pulumi.Input

	ToCampaignCollectionScheme1PropertiesOutput() CampaignCollectionScheme1PropertiesOutput
	ToCampaignCollectionScheme1PropertiesOutputWithContext(context.Context) CampaignCollectionScheme1PropertiesOutput
}

type CampaignCollectionScheme1PropertiesArgs struct {
	ConditionBasedCollectionScheme CampaignConditionBasedCollectionSchemeInput `pulumi:"conditionBasedCollectionScheme"`
}

func (CampaignCollectionScheme1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignCollectionScheme1Properties)(nil)).Elem()
}

func (i CampaignCollectionScheme1PropertiesArgs) ToCampaignCollectionScheme1PropertiesOutput() CampaignCollectionScheme1PropertiesOutput {
	return i.ToCampaignCollectionScheme1PropertiesOutputWithContext(context.Background())
}

func (i CampaignCollectionScheme1PropertiesArgs) ToCampaignCollectionScheme1PropertiesOutputWithContext(ctx context.Context) CampaignCollectionScheme1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignCollectionScheme1PropertiesOutput)
}

type CampaignCollectionScheme1PropertiesOutput struct{ *pulumi.OutputState }

func (CampaignCollectionScheme1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignCollectionScheme1Properties)(nil)).Elem()
}

func (o CampaignCollectionScheme1PropertiesOutput) ToCampaignCollectionScheme1PropertiesOutput() CampaignCollectionScheme1PropertiesOutput {
	return o
}

func (o CampaignCollectionScheme1PropertiesOutput) ToCampaignCollectionScheme1PropertiesOutputWithContext(ctx context.Context) CampaignCollectionScheme1PropertiesOutput {
	return o
}

func (o CampaignCollectionScheme1PropertiesOutput) ConditionBasedCollectionScheme() CampaignConditionBasedCollectionSchemeOutput {
	return o.ApplyT(func(v CampaignCollectionScheme1Properties) CampaignConditionBasedCollectionScheme {
		return v.ConditionBasedCollectionScheme
	}).(CampaignConditionBasedCollectionSchemeOutput)
}

type CampaignConditionBasedCollectionScheme struct {
	ConditionLanguageVersion *int                 `pulumi:"conditionLanguageVersion"`
	Expression               string               `pulumi:"expression"`
	MinimumTriggerIntervalMs *float64             `pulumi:"minimumTriggerIntervalMs"`
	TriggerMode              *CampaignTriggerMode `pulumi:"triggerMode"`
}

// CampaignConditionBasedCollectionSchemeInput is an input type that accepts CampaignConditionBasedCollectionSchemeArgs and CampaignConditionBasedCollectionSchemeOutput values.
// You can construct a concrete instance of `CampaignConditionBasedCollectionSchemeInput` via:
//
//	CampaignConditionBasedCollectionSchemeArgs{...}
type CampaignConditionBasedCollectionSchemeInput interface {
	pulumi.Input

	ToCampaignConditionBasedCollectionSchemeOutput() CampaignConditionBasedCollectionSchemeOutput
	ToCampaignConditionBasedCollectionSchemeOutputWithContext(context.Context) CampaignConditionBasedCollectionSchemeOutput
}

type CampaignConditionBasedCollectionSchemeArgs struct {
	ConditionLanguageVersion pulumi.IntPtrInput          `pulumi:"conditionLanguageVersion"`
	Expression               pulumi.StringInput          `pulumi:"expression"`
	MinimumTriggerIntervalMs pulumi.Float64PtrInput      `pulumi:"minimumTriggerIntervalMs"`
	TriggerMode              CampaignTriggerModePtrInput `pulumi:"triggerMode"`
}

func (CampaignConditionBasedCollectionSchemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignConditionBasedCollectionScheme)(nil)).Elem()
}

func (i CampaignConditionBasedCollectionSchemeArgs) ToCampaignConditionBasedCollectionSchemeOutput() CampaignConditionBasedCollectionSchemeOutput {
	return i.ToCampaignConditionBasedCollectionSchemeOutputWithContext(context.Background())
}

func (i CampaignConditionBasedCollectionSchemeArgs) ToCampaignConditionBasedCollectionSchemeOutputWithContext(ctx context.Context) CampaignConditionBasedCollectionSchemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignConditionBasedCollectionSchemeOutput)
}

type CampaignConditionBasedCollectionSchemeOutput struct{ *pulumi.OutputState }

func (CampaignConditionBasedCollectionSchemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignConditionBasedCollectionScheme)(nil)).Elem()
}

func (o CampaignConditionBasedCollectionSchemeOutput) ToCampaignConditionBasedCollectionSchemeOutput() CampaignConditionBasedCollectionSchemeOutput {
	return o
}

func (o CampaignConditionBasedCollectionSchemeOutput) ToCampaignConditionBasedCollectionSchemeOutputWithContext(ctx context.Context) CampaignConditionBasedCollectionSchemeOutput {
	return o
}

func (o CampaignConditionBasedCollectionSchemeOutput) ConditionLanguageVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CampaignConditionBasedCollectionScheme) *int { return v.ConditionLanguageVersion }).(pulumi.IntPtrOutput)
}

func (o CampaignConditionBasedCollectionSchemeOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignConditionBasedCollectionScheme) string { return v.Expression }).(pulumi.StringOutput)
}

func (o CampaignConditionBasedCollectionSchemeOutput) MinimumTriggerIntervalMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CampaignConditionBasedCollectionScheme) *float64 { return v.MinimumTriggerIntervalMs }).(pulumi.Float64PtrOutput)
}

func (o CampaignConditionBasedCollectionSchemeOutput) TriggerMode() CampaignTriggerModePtrOutput {
	return o.ApplyT(func(v CampaignConditionBasedCollectionScheme) *CampaignTriggerMode { return v.TriggerMode }).(CampaignTriggerModePtrOutput)
}

type CampaignDataDestinationConfig0Properties struct {
	S3Config CampaignS3Config `pulumi:"s3Config"`
}

// CampaignDataDestinationConfig0PropertiesInput is an input type that accepts CampaignDataDestinationConfig0PropertiesArgs and CampaignDataDestinationConfig0PropertiesOutput values.
// You can construct a concrete instance of `CampaignDataDestinationConfig0PropertiesInput` via:
//
//	CampaignDataDestinationConfig0PropertiesArgs{...}
type CampaignDataDestinationConfig0PropertiesInput interface {
	pulumi.Input

	ToCampaignDataDestinationConfig0PropertiesOutput() CampaignDataDestinationConfig0PropertiesOutput
	ToCampaignDataDestinationConfig0PropertiesOutputWithContext(context.Context) CampaignDataDestinationConfig0PropertiesOutput
}

type CampaignDataDestinationConfig0PropertiesArgs struct {
	S3Config CampaignS3ConfigInput `pulumi:"s3Config"`
}

func (CampaignDataDestinationConfig0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignDataDestinationConfig0Properties)(nil)).Elem()
}

func (i CampaignDataDestinationConfig0PropertiesArgs) ToCampaignDataDestinationConfig0PropertiesOutput() CampaignDataDestinationConfig0PropertiesOutput {
	return i.ToCampaignDataDestinationConfig0PropertiesOutputWithContext(context.Background())
}

func (i CampaignDataDestinationConfig0PropertiesArgs) ToCampaignDataDestinationConfig0PropertiesOutputWithContext(ctx context.Context) CampaignDataDestinationConfig0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignDataDestinationConfig0PropertiesOutput)
}

type CampaignDataDestinationConfig0PropertiesOutput struct{ *pulumi.OutputState }

func (CampaignDataDestinationConfig0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignDataDestinationConfig0Properties)(nil)).Elem()
}

func (o CampaignDataDestinationConfig0PropertiesOutput) ToCampaignDataDestinationConfig0PropertiesOutput() CampaignDataDestinationConfig0PropertiesOutput {
	return o
}

func (o CampaignDataDestinationConfig0PropertiesOutput) ToCampaignDataDestinationConfig0PropertiesOutputWithContext(ctx context.Context) CampaignDataDestinationConfig0PropertiesOutput {
	return o
}

func (o CampaignDataDestinationConfig0PropertiesOutput) S3Config() CampaignS3ConfigOutput {
	return o.ApplyT(func(v CampaignDataDestinationConfig0Properties) CampaignS3Config { return v.S3Config }).(CampaignS3ConfigOutput)
}

type CampaignDataDestinationConfig1Properties struct {
	TimestreamConfig CampaignTimestreamConfig `pulumi:"timestreamConfig"`
}

// CampaignDataDestinationConfig1PropertiesInput is an input type that accepts CampaignDataDestinationConfig1PropertiesArgs and CampaignDataDestinationConfig1PropertiesOutput values.
// You can construct a concrete instance of `CampaignDataDestinationConfig1PropertiesInput` via:
//
//	CampaignDataDestinationConfig1PropertiesArgs{...}
type CampaignDataDestinationConfig1PropertiesInput interface {
	pulumi.Input

	ToCampaignDataDestinationConfig1PropertiesOutput() CampaignDataDestinationConfig1PropertiesOutput
	ToCampaignDataDestinationConfig1PropertiesOutputWithContext(context.Context) CampaignDataDestinationConfig1PropertiesOutput
}

type CampaignDataDestinationConfig1PropertiesArgs struct {
	TimestreamConfig CampaignTimestreamConfigInput `pulumi:"timestreamConfig"`
}

func (CampaignDataDestinationConfig1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignDataDestinationConfig1Properties)(nil)).Elem()
}

func (i CampaignDataDestinationConfig1PropertiesArgs) ToCampaignDataDestinationConfig1PropertiesOutput() CampaignDataDestinationConfig1PropertiesOutput {
	return i.ToCampaignDataDestinationConfig1PropertiesOutputWithContext(context.Background())
}

func (i CampaignDataDestinationConfig1PropertiesArgs) ToCampaignDataDestinationConfig1PropertiesOutputWithContext(ctx context.Context) CampaignDataDestinationConfig1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignDataDestinationConfig1PropertiesOutput)
}

type CampaignDataDestinationConfig1PropertiesOutput struct{ *pulumi.OutputState }

func (CampaignDataDestinationConfig1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignDataDestinationConfig1Properties)(nil)).Elem()
}

func (o CampaignDataDestinationConfig1PropertiesOutput) ToCampaignDataDestinationConfig1PropertiesOutput() CampaignDataDestinationConfig1PropertiesOutput {
	return o
}

func (o CampaignDataDestinationConfig1PropertiesOutput) ToCampaignDataDestinationConfig1PropertiesOutputWithContext(ctx context.Context) CampaignDataDestinationConfig1PropertiesOutput {
	return o
}

func (o CampaignDataDestinationConfig1PropertiesOutput) TimestreamConfig() CampaignTimestreamConfigOutput {
	return o.ApplyT(func(v CampaignDataDestinationConfig1Properties) CampaignTimestreamConfig { return v.TimestreamConfig }).(CampaignTimestreamConfigOutput)
}

type CampaignS3Config struct {
	BucketArn                string                            `pulumi:"bucketArn"`
	DataFormat               *CampaignDataFormat               `pulumi:"dataFormat"`
	Prefix                   *string                           `pulumi:"prefix"`
	StorageCompressionFormat *CampaignStorageCompressionFormat `pulumi:"storageCompressionFormat"`
}

// CampaignS3ConfigInput is an input type that accepts CampaignS3ConfigArgs and CampaignS3ConfigOutput values.
// You can construct a concrete instance of `CampaignS3ConfigInput` via:
//
//	CampaignS3ConfigArgs{...}
type CampaignS3ConfigInput interface {
	pulumi.Input

	ToCampaignS3ConfigOutput() CampaignS3ConfigOutput
	ToCampaignS3ConfigOutputWithContext(context.Context) CampaignS3ConfigOutput
}

type CampaignS3ConfigArgs struct {
	BucketArn                pulumi.StringInput                       `pulumi:"bucketArn"`
	DataFormat               CampaignDataFormatPtrInput               `pulumi:"dataFormat"`
	Prefix                   pulumi.StringPtrInput                    `pulumi:"prefix"`
	StorageCompressionFormat CampaignStorageCompressionFormatPtrInput `pulumi:"storageCompressionFormat"`
}

func (CampaignS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignS3Config)(nil)).Elem()
}

func (i CampaignS3ConfigArgs) ToCampaignS3ConfigOutput() CampaignS3ConfigOutput {
	return i.ToCampaignS3ConfigOutputWithContext(context.Background())
}

func (i CampaignS3ConfigArgs) ToCampaignS3ConfigOutputWithContext(ctx context.Context) CampaignS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignS3ConfigOutput)
}

type CampaignS3ConfigOutput struct{ *pulumi.OutputState }

func (CampaignS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignS3Config)(nil)).Elem()
}

func (o CampaignS3ConfigOutput) ToCampaignS3ConfigOutput() CampaignS3ConfigOutput {
	return o
}

func (o CampaignS3ConfigOutput) ToCampaignS3ConfigOutputWithContext(ctx context.Context) CampaignS3ConfigOutput {
	return o
}

func (o CampaignS3ConfigOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignS3Config) string { return v.BucketArn }).(pulumi.StringOutput)
}

func (o CampaignS3ConfigOutput) DataFormat() CampaignDataFormatPtrOutput {
	return o.ApplyT(func(v CampaignS3Config) *CampaignDataFormat { return v.DataFormat }).(CampaignDataFormatPtrOutput)
}

func (o CampaignS3ConfigOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CampaignS3Config) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o CampaignS3ConfigOutput) StorageCompressionFormat() CampaignStorageCompressionFormatPtrOutput {
	return o.ApplyT(func(v CampaignS3Config) *CampaignStorageCompressionFormat { return v.StorageCompressionFormat }).(CampaignStorageCompressionFormatPtrOutput)
}

type CampaignSignalInformation struct {
	MaxSampleCount            *float64 `pulumi:"maxSampleCount"`
	MinimumSamplingIntervalMs *float64 `pulumi:"minimumSamplingIntervalMs"`
	Name                      string   `pulumi:"name"`
}

// CampaignSignalInformationInput is an input type that accepts CampaignSignalInformationArgs and CampaignSignalInformationOutput values.
// You can construct a concrete instance of `CampaignSignalInformationInput` via:
//
//	CampaignSignalInformationArgs{...}
type CampaignSignalInformationInput interface {
	pulumi.Input

	ToCampaignSignalInformationOutput() CampaignSignalInformationOutput
	ToCampaignSignalInformationOutputWithContext(context.Context) CampaignSignalInformationOutput
}

type CampaignSignalInformationArgs struct {
	MaxSampleCount            pulumi.Float64PtrInput `pulumi:"maxSampleCount"`
	MinimumSamplingIntervalMs pulumi.Float64PtrInput `pulumi:"minimumSamplingIntervalMs"`
	Name                      pulumi.StringInput     `pulumi:"name"`
}

func (CampaignSignalInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignSignalInformation)(nil)).Elem()
}

func (i CampaignSignalInformationArgs) ToCampaignSignalInformationOutput() CampaignSignalInformationOutput {
	return i.ToCampaignSignalInformationOutputWithContext(context.Background())
}

func (i CampaignSignalInformationArgs) ToCampaignSignalInformationOutputWithContext(ctx context.Context) CampaignSignalInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignSignalInformationOutput)
}

// CampaignSignalInformationArrayInput is an input type that accepts CampaignSignalInformationArray and CampaignSignalInformationArrayOutput values.
// You can construct a concrete instance of `CampaignSignalInformationArrayInput` via:
//
//	CampaignSignalInformationArray{ CampaignSignalInformationArgs{...} }
type CampaignSignalInformationArrayInput interface {
	pulumi.Input

	ToCampaignSignalInformationArrayOutput() CampaignSignalInformationArrayOutput
	ToCampaignSignalInformationArrayOutputWithContext(context.Context) CampaignSignalInformationArrayOutput
}

type CampaignSignalInformationArray []CampaignSignalInformationInput

func (CampaignSignalInformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CampaignSignalInformation)(nil)).Elem()
}

func (i CampaignSignalInformationArray) ToCampaignSignalInformationArrayOutput() CampaignSignalInformationArrayOutput {
	return i.ToCampaignSignalInformationArrayOutputWithContext(context.Background())
}

func (i CampaignSignalInformationArray) ToCampaignSignalInformationArrayOutputWithContext(ctx context.Context) CampaignSignalInformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignSignalInformationArrayOutput)
}

type CampaignSignalInformationOutput struct{ *pulumi.OutputState }

func (CampaignSignalInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignSignalInformation)(nil)).Elem()
}

func (o CampaignSignalInformationOutput) ToCampaignSignalInformationOutput() CampaignSignalInformationOutput {
	return o
}

func (o CampaignSignalInformationOutput) ToCampaignSignalInformationOutputWithContext(ctx context.Context) CampaignSignalInformationOutput {
	return o
}

func (o CampaignSignalInformationOutput) MaxSampleCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CampaignSignalInformation) *float64 { return v.MaxSampleCount }).(pulumi.Float64PtrOutput)
}

func (o CampaignSignalInformationOutput) MinimumSamplingIntervalMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CampaignSignalInformation) *float64 { return v.MinimumSamplingIntervalMs }).(pulumi.Float64PtrOutput)
}

func (o CampaignSignalInformationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignSignalInformation) string { return v.Name }).(pulumi.StringOutput)
}

type CampaignSignalInformationArrayOutput struct{ *pulumi.OutputState }

func (CampaignSignalInformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CampaignSignalInformation)(nil)).Elem()
}

func (o CampaignSignalInformationArrayOutput) ToCampaignSignalInformationArrayOutput() CampaignSignalInformationArrayOutput {
	return o
}

func (o CampaignSignalInformationArrayOutput) ToCampaignSignalInformationArrayOutputWithContext(ctx context.Context) CampaignSignalInformationArrayOutput {
	return o
}

func (o CampaignSignalInformationArrayOutput) Index(i pulumi.IntInput) CampaignSignalInformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CampaignSignalInformation {
		return vs[0].([]CampaignSignalInformation)[vs[1].(int)]
	}).(CampaignSignalInformationOutput)
}

type CampaignTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type CampaignTimeBasedCollectionScheme struct {
	PeriodMs float64 `pulumi:"periodMs"`
}

// CampaignTimeBasedCollectionSchemeInput is an input type that accepts CampaignTimeBasedCollectionSchemeArgs and CampaignTimeBasedCollectionSchemeOutput values.
// You can construct a concrete instance of `CampaignTimeBasedCollectionSchemeInput` via:
//
//	CampaignTimeBasedCollectionSchemeArgs{...}
type CampaignTimeBasedCollectionSchemeInput interface {
	pulumi.Input

	ToCampaignTimeBasedCollectionSchemeOutput() CampaignTimeBasedCollectionSchemeOutput
	ToCampaignTimeBasedCollectionSchemeOutputWithContext(context.Context) CampaignTimeBasedCollectionSchemeOutput
}

type CampaignTimeBasedCollectionSchemeArgs struct {
	PeriodMs pulumi.Float64Input `pulumi:"periodMs"`
}

func (CampaignTimeBasedCollectionSchemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignTimeBasedCollectionScheme)(nil)).Elem()
}

func (i CampaignTimeBasedCollectionSchemeArgs) ToCampaignTimeBasedCollectionSchemeOutput() CampaignTimeBasedCollectionSchemeOutput {
	return i.ToCampaignTimeBasedCollectionSchemeOutputWithContext(context.Background())
}

func (i CampaignTimeBasedCollectionSchemeArgs) ToCampaignTimeBasedCollectionSchemeOutputWithContext(ctx context.Context) CampaignTimeBasedCollectionSchemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignTimeBasedCollectionSchemeOutput)
}

type CampaignTimeBasedCollectionSchemeOutput struct{ *pulumi.OutputState }

func (CampaignTimeBasedCollectionSchemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignTimeBasedCollectionScheme)(nil)).Elem()
}

func (o CampaignTimeBasedCollectionSchemeOutput) ToCampaignTimeBasedCollectionSchemeOutput() CampaignTimeBasedCollectionSchemeOutput {
	return o
}

func (o CampaignTimeBasedCollectionSchemeOutput) ToCampaignTimeBasedCollectionSchemeOutputWithContext(ctx context.Context) CampaignTimeBasedCollectionSchemeOutput {
	return o
}

func (o CampaignTimeBasedCollectionSchemeOutput) PeriodMs() pulumi.Float64Output {
	return o.ApplyT(func(v CampaignTimeBasedCollectionScheme) float64 { return v.PeriodMs }).(pulumi.Float64Output)
}

type CampaignTimestreamConfig struct {
	ExecutionRoleArn   string `pulumi:"executionRoleArn"`
	TimestreamTableArn string `pulumi:"timestreamTableArn"`
}

// CampaignTimestreamConfigInput is an input type that accepts CampaignTimestreamConfigArgs and CampaignTimestreamConfigOutput values.
// You can construct a concrete instance of `CampaignTimestreamConfigInput` via:
//
//	CampaignTimestreamConfigArgs{...}
type CampaignTimestreamConfigInput interface {
	pulumi.Input

	ToCampaignTimestreamConfigOutput() CampaignTimestreamConfigOutput
	ToCampaignTimestreamConfigOutputWithContext(context.Context) CampaignTimestreamConfigOutput
}

type CampaignTimestreamConfigArgs struct {
	ExecutionRoleArn   pulumi.StringInput `pulumi:"executionRoleArn"`
	TimestreamTableArn pulumi.StringInput `pulumi:"timestreamTableArn"`
}

func (CampaignTimestreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignTimestreamConfig)(nil)).Elem()
}

func (i CampaignTimestreamConfigArgs) ToCampaignTimestreamConfigOutput() CampaignTimestreamConfigOutput {
	return i.ToCampaignTimestreamConfigOutputWithContext(context.Background())
}

func (i CampaignTimestreamConfigArgs) ToCampaignTimestreamConfigOutputWithContext(ctx context.Context) CampaignTimestreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignTimestreamConfigOutput)
}

type CampaignTimestreamConfigOutput struct{ *pulumi.OutputState }

func (CampaignTimestreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignTimestreamConfig)(nil)).Elem()
}

func (o CampaignTimestreamConfigOutput) ToCampaignTimestreamConfigOutput() CampaignTimestreamConfigOutput {
	return o
}

func (o CampaignTimestreamConfigOutput) ToCampaignTimestreamConfigOutputWithContext(ctx context.Context) CampaignTimestreamConfigOutput {
	return o
}

func (o CampaignTimestreamConfigOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignTimestreamConfig) string { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

func (o CampaignTimestreamConfigOutput) TimestreamTableArn() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignTimestreamConfig) string { return v.TimestreamTableArn }).(pulumi.StringOutput)
}

type DecoderManifestCanInterface struct {
	Name            string  `pulumi:"name"`
	ProtocolName    *string `pulumi:"protocolName"`
	ProtocolVersion *string `pulumi:"protocolVersion"`
}

// DecoderManifestCanInterfaceInput is an input type that accepts DecoderManifestCanInterfaceArgs and DecoderManifestCanInterfaceOutput values.
// You can construct a concrete instance of `DecoderManifestCanInterfaceInput` via:
//
//	DecoderManifestCanInterfaceArgs{...}
type DecoderManifestCanInterfaceInput interface {
	pulumi.Input

	ToDecoderManifestCanInterfaceOutput() DecoderManifestCanInterfaceOutput
	ToDecoderManifestCanInterfaceOutputWithContext(context.Context) DecoderManifestCanInterfaceOutput
}

type DecoderManifestCanInterfaceArgs struct {
	Name            pulumi.StringInput    `pulumi:"name"`
	ProtocolName    pulumi.StringPtrInput `pulumi:"protocolName"`
	ProtocolVersion pulumi.StringPtrInput `pulumi:"protocolVersion"`
}

func (DecoderManifestCanInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanInterface)(nil)).Elem()
}

func (i DecoderManifestCanInterfaceArgs) ToDecoderManifestCanInterfaceOutput() DecoderManifestCanInterfaceOutput {
	return i.ToDecoderManifestCanInterfaceOutputWithContext(context.Background())
}

func (i DecoderManifestCanInterfaceArgs) ToDecoderManifestCanInterfaceOutputWithContext(ctx context.Context) DecoderManifestCanInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestCanInterfaceOutput)
}

type DecoderManifestCanInterfaceOutput struct{ *pulumi.OutputState }

func (DecoderManifestCanInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanInterface)(nil)).Elem()
}

func (o DecoderManifestCanInterfaceOutput) ToDecoderManifestCanInterfaceOutput() DecoderManifestCanInterfaceOutput {
	return o
}

func (o DecoderManifestCanInterfaceOutput) ToDecoderManifestCanInterfaceOutputWithContext(ctx context.Context) DecoderManifestCanInterfaceOutput {
	return o
}

func (o DecoderManifestCanInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestCanInterface) string { return v.Name }).(pulumi.StringOutput)
}

func (o DecoderManifestCanInterfaceOutput) ProtocolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DecoderManifestCanInterface) *string { return v.ProtocolName }).(pulumi.StringPtrOutput)
}

func (o DecoderManifestCanInterfaceOutput) ProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DecoderManifestCanInterface) *string { return v.ProtocolVersion }).(pulumi.StringPtrOutput)
}

type DecoderManifestCanNetworkInterface struct {
	CanInterface DecoderManifestCanInterface            `pulumi:"canInterface"`
	InterfaceId  string                                 `pulumi:"interfaceId"`
	Type         DecoderManifestCanNetworkInterfaceType `pulumi:"type"`
}

// DecoderManifestCanNetworkInterfaceInput is an input type that accepts DecoderManifestCanNetworkInterfaceArgs and DecoderManifestCanNetworkInterfaceOutput values.
// You can construct a concrete instance of `DecoderManifestCanNetworkInterfaceInput` via:
//
//	DecoderManifestCanNetworkInterfaceArgs{...}
type DecoderManifestCanNetworkInterfaceInput interface {
	pulumi.Input

	ToDecoderManifestCanNetworkInterfaceOutput() DecoderManifestCanNetworkInterfaceOutput
	ToDecoderManifestCanNetworkInterfaceOutputWithContext(context.Context) DecoderManifestCanNetworkInterfaceOutput
}

type DecoderManifestCanNetworkInterfaceArgs struct {
	CanInterface DecoderManifestCanInterfaceInput            `pulumi:"canInterface"`
	InterfaceId  pulumi.StringInput                          `pulumi:"interfaceId"`
	Type         DecoderManifestCanNetworkInterfaceTypeInput `pulumi:"type"`
}

func (DecoderManifestCanNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanNetworkInterface)(nil)).Elem()
}

func (i DecoderManifestCanNetworkInterfaceArgs) ToDecoderManifestCanNetworkInterfaceOutput() DecoderManifestCanNetworkInterfaceOutput {
	return i.ToDecoderManifestCanNetworkInterfaceOutputWithContext(context.Background())
}

func (i DecoderManifestCanNetworkInterfaceArgs) ToDecoderManifestCanNetworkInterfaceOutputWithContext(ctx context.Context) DecoderManifestCanNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestCanNetworkInterfaceOutput)
}

type DecoderManifestCanNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (DecoderManifestCanNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanNetworkInterface)(nil)).Elem()
}

func (o DecoderManifestCanNetworkInterfaceOutput) ToDecoderManifestCanNetworkInterfaceOutput() DecoderManifestCanNetworkInterfaceOutput {
	return o
}

func (o DecoderManifestCanNetworkInterfaceOutput) ToDecoderManifestCanNetworkInterfaceOutputWithContext(ctx context.Context) DecoderManifestCanNetworkInterfaceOutput {
	return o
}

func (o DecoderManifestCanNetworkInterfaceOutput) CanInterface() DecoderManifestCanInterfaceOutput {
	return o.ApplyT(func(v DecoderManifestCanNetworkInterface) DecoderManifestCanInterface { return v.CanInterface }).(DecoderManifestCanInterfaceOutput)
}

func (o DecoderManifestCanNetworkInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestCanNetworkInterface) string { return v.InterfaceId }).(pulumi.StringOutput)
}

func (o DecoderManifestCanNetworkInterfaceOutput) Type() DecoderManifestCanNetworkInterfaceTypeOutput {
	return o.ApplyT(func(v DecoderManifestCanNetworkInterface) DecoderManifestCanNetworkInterfaceType { return v.Type }).(DecoderManifestCanNetworkInterfaceTypeOutput)
}

type DecoderManifestCanSignal struct {
	Factor      float64 `pulumi:"factor"`
	IsBigEndian bool    `pulumi:"isBigEndian"`
	IsSigned    bool    `pulumi:"isSigned"`
	Length      int     `pulumi:"length"`
	MessageId   int     `pulumi:"messageId"`
	Name        *string `pulumi:"name"`
	Offset      float64 `pulumi:"offset"`
	StartBit    int     `pulumi:"startBit"`
}

// DecoderManifestCanSignalInput is an input type that accepts DecoderManifestCanSignalArgs and DecoderManifestCanSignalOutput values.
// You can construct a concrete instance of `DecoderManifestCanSignalInput` via:
//
//	DecoderManifestCanSignalArgs{...}
type DecoderManifestCanSignalInput interface {
	pulumi.Input

	ToDecoderManifestCanSignalOutput() DecoderManifestCanSignalOutput
	ToDecoderManifestCanSignalOutputWithContext(context.Context) DecoderManifestCanSignalOutput
}

type DecoderManifestCanSignalArgs struct {
	Factor      pulumi.Float64Input   `pulumi:"factor"`
	IsBigEndian pulumi.BoolInput      `pulumi:"isBigEndian"`
	IsSigned    pulumi.BoolInput      `pulumi:"isSigned"`
	Length      pulumi.IntInput       `pulumi:"length"`
	MessageId   pulumi.IntInput       `pulumi:"messageId"`
	Name        pulumi.StringPtrInput `pulumi:"name"`
	Offset      pulumi.Float64Input   `pulumi:"offset"`
	StartBit    pulumi.IntInput       `pulumi:"startBit"`
}

func (DecoderManifestCanSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanSignal)(nil)).Elem()
}

func (i DecoderManifestCanSignalArgs) ToDecoderManifestCanSignalOutput() DecoderManifestCanSignalOutput {
	return i.ToDecoderManifestCanSignalOutputWithContext(context.Background())
}

func (i DecoderManifestCanSignalArgs) ToDecoderManifestCanSignalOutputWithContext(ctx context.Context) DecoderManifestCanSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestCanSignalOutput)
}

type DecoderManifestCanSignalOutput struct{ *pulumi.OutputState }

func (DecoderManifestCanSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanSignal)(nil)).Elem()
}

func (o DecoderManifestCanSignalOutput) ToDecoderManifestCanSignalOutput() DecoderManifestCanSignalOutput {
	return o
}

func (o DecoderManifestCanSignalOutput) ToDecoderManifestCanSignalOutputWithContext(ctx context.Context) DecoderManifestCanSignalOutput {
	return o
}

func (o DecoderManifestCanSignalOutput) Factor() pulumi.Float64Output {
	return o.ApplyT(func(v DecoderManifestCanSignal) float64 { return v.Factor }).(pulumi.Float64Output)
}

func (o DecoderManifestCanSignalOutput) IsBigEndian() pulumi.BoolOutput {
	return o.ApplyT(func(v DecoderManifestCanSignal) bool { return v.IsBigEndian }).(pulumi.BoolOutput)
}

func (o DecoderManifestCanSignalOutput) IsSigned() pulumi.BoolOutput {
	return o.ApplyT(func(v DecoderManifestCanSignal) bool { return v.IsSigned }).(pulumi.BoolOutput)
}

func (o DecoderManifestCanSignalOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestCanSignal) int { return v.Length }).(pulumi.IntOutput)
}

func (o DecoderManifestCanSignalOutput) MessageId() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestCanSignal) int { return v.MessageId }).(pulumi.IntOutput)
}

func (o DecoderManifestCanSignalOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DecoderManifestCanSignal) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DecoderManifestCanSignalOutput) Offset() pulumi.Float64Output {
	return o.ApplyT(func(v DecoderManifestCanSignal) float64 { return v.Offset }).(pulumi.Float64Output)
}

func (o DecoderManifestCanSignalOutput) StartBit() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestCanSignal) int { return v.StartBit }).(pulumi.IntOutput)
}

type DecoderManifestCanSignalDecoder struct {
	CanSignal          DecoderManifestCanSignal            `pulumi:"canSignal"`
	FullyQualifiedName string                              `pulumi:"fullyQualifiedName"`
	InterfaceId        string                              `pulumi:"interfaceId"`
	Type               DecoderManifestCanSignalDecoderType `pulumi:"type"`
}

// DecoderManifestCanSignalDecoderInput is an input type that accepts DecoderManifestCanSignalDecoderArgs and DecoderManifestCanSignalDecoderOutput values.
// You can construct a concrete instance of `DecoderManifestCanSignalDecoderInput` via:
//
//	DecoderManifestCanSignalDecoderArgs{...}
type DecoderManifestCanSignalDecoderInput interface {
	pulumi.Input

	ToDecoderManifestCanSignalDecoderOutput() DecoderManifestCanSignalDecoderOutput
	ToDecoderManifestCanSignalDecoderOutputWithContext(context.Context) DecoderManifestCanSignalDecoderOutput
}

type DecoderManifestCanSignalDecoderArgs struct {
	CanSignal          DecoderManifestCanSignalInput            `pulumi:"canSignal"`
	FullyQualifiedName pulumi.StringInput                       `pulumi:"fullyQualifiedName"`
	InterfaceId        pulumi.StringInput                       `pulumi:"interfaceId"`
	Type               DecoderManifestCanSignalDecoderTypeInput `pulumi:"type"`
}

func (DecoderManifestCanSignalDecoderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanSignalDecoder)(nil)).Elem()
}

func (i DecoderManifestCanSignalDecoderArgs) ToDecoderManifestCanSignalDecoderOutput() DecoderManifestCanSignalDecoderOutput {
	return i.ToDecoderManifestCanSignalDecoderOutputWithContext(context.Background())
}

func (i DecoderManifestCanSignalDecoderArgs) ToDecoderManifestCanSignalDecoderOutputWithContext(ctx context.Context) DecoderManifestCanSignalDecoderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestCanSignalDecoderOutput)
}

type DecoderManifestCanSignalDecoderOutput struct{ *pulumi.OutputState }

func (DecoderManifestCanSignalDecoderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestCanSignalDecoder)(nil)).Elem()
}

func (o DecoderManifestCanSignalDecoderOutput) ToDecoderManifestCanSignalDecoderOutput() DecoderManifestCanSignalDecoderOutput {
	return o
}

func (o DecoderManifestCanSignalDecoderOutput) ToDecoderManifestCanSignalDecoderOutputWithContext(ctx context.Context) DecoderManifestCanSignalDecoderOutput {
	return o
}

func (o DecoderManifestCanSignalDecoderOutput) CanSignal() DecoderManifestCanSignalOutput {
	return o.ApplyT(func(v DecoderManifestCanSignalDecoder) DecoderManifestCanSignal { return v.CanSignal }).(DecoderManifestCanSignalOutput)
}

func (o DecoderManifestCanSignalDecoderOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestCanSignalDecoder) string { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

func (o DecoderManifestCanSignalDecoderOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestCanSignalDecoder) string { return v.InterfaceId }).(pulumi.StringOutput)
}

func (o DecoderManifestCanSignalDecoderOutput) Type() DecoderManifestCanSignalDecoderTypeOutput {
	return o.ApplyT(func(v DecoderManifestCanSignalDecoder) DecoderManifestCanSignalDecoderType { return v.Type }).(DecoderManifestCanSignalDecoderTypeOutput)
}

type DecoderManifestObdInterface struct {
	DtcRequestIntervalSeconds *int    `pulumi:"dtcRequestIntervalSeconds"`
	HasTransmissionEcu        *bool   `pulumi:"hasTransmissionEcu"`
	Name                      string  `pulumi:"name"`
	ObdStandard               *string `pulumi:"obdStandard"`
	PidRequestIntervalSeconds *int    `pulumi:"pidRequestIntervalSeconds"`
	RequestMessageId          int     `pulumi:"requestMessageId"`
	UseExtendedIds            *bool   `pulumi:"useExtendedIds"`
}

// DecoderManifestObdInterfaceInput is an input type that accepts DecoderManifestObdInterfaceArgs and DecoderManifestObdInterfaceOutput values.
// You can construct a concrete instance of `DecoderManifestObdInterfaceInput` via:
//
//	DecoderManifestObdInterfaceArgs{...}
type DecoderManifestObdInterfaceInput interface {
	pulumi.Input

	ToDecoderManifestObdInterfaceOutput() DecoderManifestObdInterfaceOutput
	ToDecoderManifestObdInterfaceOutputWithContext(context.Context) DecoderManifestObdInterfaceOutput
}

type DecoderManifestObdInterfaceArgs struct {
	DtcRequestIntervalSeconds pulumi.IntPtrInput    `pulumi:"dtcRequestIntervalSeconds"`
	HasTransmissionEcu        pulumi.BoolPtrInput   `pulumi:"hasTransmissionEcu"`
	Name                      pulumi.StringInput    `pulumi:"name"`
	ObdStandard               pulumi.StringPtrInput `pulumi:"obdStandard"`
	PidRequestIntervalSeconds pulumi.IntPtrInput    `pulumi:"pidRequestIntervalSeconds"`
	RequestMessageId          pulumi.IntInput       `pulumi:"requestMessageId"`
	UseExtendedIds            pulumi.BoolPtrInput   `pulumi:"useExtendedIds"`
}

func (DecoderManifestObdInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdInterface)(nil)).Elem()
}

func (i DecoderManifestObdInterfaceArgs) ToDecoderManifestObdInterfaceOutput() DecoderManifestObdInterfaceOutput {
	return i.ToDecoderManifestObdInterfaceOutputWithContext(context.Background())
}

func (i DecoderManifestObdInterfaceArgs) ToDecoderManifestObdInterfaceOutputWithContext(ctx context.Context) DecoderManifestObdInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestObdInterfaceOutput)
}

type DecoderManifestObdInterfaceOutput struct{ *pulumi.OutputState }

func (DecoderManifestObdInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdInterface)(nil)).Elem()
}

func (o DecoderManifestObdInterfaceOutput) ToDecoderManifestObdInterfaceOutput() DecoderManifestObdInterfaceOutput {
	return o
}

func (o DecoderManifestObdInterfaceOutput) ToDecoderManifestObdInterfaceOutputWithContext(ctx context.Context) DecoderManifestObdInterfaceOutput {
	return o
}

func (o DecoderManifestObdInterfaceOutput) DtcRequestIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) *int { return v.DtcRequestIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o DecoderManifestObdInterfaceOutput) HasTransmissionEcu() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) *bool { return v.HasTransmissionEcu }).(pulumi.BoolPtrOutput)
}

func (o DecoderManifestObdInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) string { return v.Name }).(pulumi.StringOutput)
}

func (o DecoderManifestObdInterfaceOutput) ObdStandard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) *string { return v.ObdStandard }).(pulumi.StringPtrOutput)
}

func (o DecoderManifestObdInterfaceOutput) PidRequestIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) *int { return v.PidRequestIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o DecoderManifestObdInterfaceOutput) RequestMessageId() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) int { return v.RequestMessageId }).(pulumi.IntOutput)
}

func (o DecoderManifestObdInterfaceOutput) UseExtendedIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdInterface) *bool { return v.UseExtendedIds }).(pulumi.BoolPtrOutput)
}

type DecoderManifestObdNetworkInterface struct {
	InterfaceId  string                                 `pulumi:"interfaceId"`
	ObdInterface DecoderManifestObdInterface            `pulumi:"obdInterface"`
	Type         DecoderManifestObdNetworkInterfaceType `pulumi:"type"`
}

// DecoderManifestObdNetworkInterfaceInput is an input type that accepts DecoderManifestObdNetworkInterfaceArgs and DecoderManifestObdNetworkInterfaceOutput values.
// You can construct a concrete instance of `DecoderManifestObdNetworkInterfaceInput` via:
//
//	DecoderManifestObdNetworkInterfaceArgs{...}
type DecoderManifestObdNetworkInterfaceInput interface {
	pulumi.Input

	ToDecoderManifestObdNetworkInterfaceOutput() DecoderManifestObdNetworkInterfaceOutput
	ToDecoderManifestObdNetworkInterfaceOutputWithContext(context.Context) DecoderManifestObdNetworkInterfaceOutput
}

type DecoderManifestObdNetworkInterfaceArgs struct {
	InterfaceId  pulumi.StringInput                          `pulumi:"interfaceId"`
	ObdInterface DecoderManifestObdInterfaceInput            `pulumi:"obdInterface"`
	Type         DecoderManifestObdNetworkInterfaceTypeInput `pulumi:"type"`
}

func (DecoderManifestObdNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdNetworkInterface)(nil)).Elem()
}

func (i DecoderManifestObdNetworkInterfaceArgs) ToDecoderManifestObdNetworkInterfaceOutput() DecoderManifestObdNetworkInterfaceOutput {
	return i.ToDecoderManifestObdNetworkInterfaceOutputWithContext(context.Background())
}

func (i DecoderManifestObdNetworkInterfaceArgs) ToDecoderManifestObdNetworkInterfaceOutputWithContext(ctx context.Context) DecoderManifestObdNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestObdNetworkInterfaceOutput)
}

type DecoderManifestObdNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (DecoderManifestObdNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdNetworkInterface)(nil)).Elem()
}

func (o DecoderManifestObdNetworkInterfaceOutput) ToDecoderManifestObdNetworkInterfaceOutput() DecoderManifestObdNetworkInterfaceOutput {
	return o
}

func (o DecoderManifestObdNetworkInterfaceOutput) ToDecoderManifestObdNetworkInterfaceOutputWithContext(ctx context.Context) DecoderManifestObdNetworkInterfaceOutput {
	return o
}

func (o DecoderManifestObdNetworkInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestObdNetworkInterface) string { return v.InterfaceId }).(pulumi.StringOutput)
}

func (o DecoderManifestObdNetworkInterfaceOutput) ObdInterface() DecoderManifestObdInterfaceOutput {
	return o.ApplyT(func(v DecoderManifestObdNetworkInterface) DecoderManifestObdInterface { return v.ObdInterface }).(DecoderManifestObdInterfaceOutput)
}

func (o DecoderManifestObdNetworkInterfaceOutput) Type() DecoderManifestObdNetworkInterfaceTypeOutput {
	return o.ApplyT(func(v DecoderManifestObdNetworkInterface) DecoderManifestObdNetworkInterfaceType { return v.Type }).(DecoderManifestObdNetworkInterfaceTypeOutput)
}

type DecoderManifestObdSignal struct {
	BitMaskLength     *int    `pulumi:"bitMaskLength"`
	BitRightShift     *int    `pulumi:"bitRightShift"`
	ByteLength        int     `pulumi:"byteLength"`
	Offset            float64 `pulumi:"offset"`
	Pid               int     `pulumi:"pid"`
	PidResponseLength int     `pulumi:"pidResponseLength"`
	Scaling           float64 `pulumi:"scaling"`
	ServiceMode       int     `pulumi:"serviceMode"`
	StartByte         int     `pulumi:"startByte"`
}

// DecoderManifestObdSignalInput is an input type that accepts DecoderManifestObdSignalArgs and DecoderManifestObdSignalOutput values.
// You can construct a concrete instance of `DecoderManifestObdSignalInput` via:
//
//	DecoderManifestObdSignalArgs{...}
type DecoderManifestObdSignalInput interface {
	pulumi.Input

	ToDecoderManifestObdSignalOutput() DecoderManifestObdSignalOutput
	ToDecoderManifestObdSignalOutputWithContext(context.Context) DecoderManifestObdSignalOutput
}

type DecoderManifestObdSignalArgs struct {
	BitMaskLength     pulumi.IntPtrInput  `pulumi:"bitMaskLength"`
	BitRightShift     pulumi.IntPtrInput  `pulumi:"bitRightShift"`
	ByteLength        pulumi.IntInput     `pulumi:"byteLength"`
	Offset            pulumi.Float64Input `pulumi:"offset"`
	Pid               pulumi.IntInput     `pulumi:"pid"`
	PidResponseLength pulumi.IntInput     `pulumi:"pidResponseLength"`
	Scaling           pulumi.Float64Input `pulumi:"scaling"`
	ServiceMode       pulumi.IntInput     `pulumi:"serviceMode"`
	StartByte         pulumi.IntInput     `pulumi:"startByte"`
}

func (DecoderManifestObdSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdSignal)(nil)).Elem()
}

func (i DecoderManifestObdSignalArgs) ToDecoderManifestObdSignalOutput() DecoderManifestObdSignalOutput {
	return i.ToDecoderManifestObdSignalOutputWithContext(context.Background())
}

func (i DecoderManifestObdSignalArgs) ToDecoderManifestObdSignalOutputWithContext(ctx context.Context) DecoderManifestObdSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestObdSignalOutput)
}

type DecoderManifestObdSignalOutput struct{ *pulumi.OutputState }

func (DecoderManifestObdSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdSignal)(nil)).Elem()
}

func (o DecoderManifestObdSignalOutput) ToDecoderManifestObdSignalOutput() DecoderManifestObdSignalOutput {
	return o
}

func (o DecoderManifestObdSignalOutput) ToDecoderManifestObdSignalOutputWithContext(ctx context.Context) DecoderManifestObdSignalOutput {
	return o
}

func (o DecoderManifestObdSignalOutput) BitMaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) *int { return v.BitMaskLength }).(pulumi.IntPtrOutput)
}

func (o DecoderManifestObdSignalOutput) BitRightShift() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) *int { return v.BitRightShift }).(pulumi.IntPtrOutput)
}

func (o DecoderManifestObdSignalOutput) ByteLength() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) int { return v.ByteLength }).(pulumi.IntOutput)
}

func (o DecoderManifestObdSignalOutput) Offset() pulumi.Float64Output {
	return o.ApplyT(func(v DecoderManifestObdSignal) float64 { return v.Offset }).(pulumi.Float64Output)
}

func (o DecoderManifestObdSignalOutput) Pid() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) int { return v.Pid }).(pulumi.IntOutput)
}

func (o DecoderManifestObdSignalOutput) PidResponseLength() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) int { return v.PidResponseLength }).(pulumi.IntOutput)
}

func (o DecoderManifestObdSignalOutput) Scaling() pulumi.Float64Output {
	return o.ApplyT(func(v DecoderManifestObdSignal) float64 { return v.Scaling }).(pulumi.Float64Output)
}

func (o DecoderManifestObdSignalOutput) ServiceMode() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) int { return v.ServiceMode }).(pulumi.IntOutput)
}

func (o DecoderManifestObdSignalOutput) StartByte() pulumi.IntOutput {
	return o.ApplyT(func(v DecoderManifestObdSignal) int { return v.StartByte }).(pulumi.IntOutput)
}

type DecoderManifestObdSignalDecoder struct {
	FullyQualifiedName string                              `pulumi:"fullyQualifiedName"`
	InterfaceId        string                              `pulumi:"interfaceId"`
	ObdSignal          DecoderManifestObdSignal            `pulumi:"obdSignal"`
	Type               DecoderManifestObdSignalDecoderType `pulumi:"type"`
}

// DecoderManifestObdSignalDecoderInput is an input type that accepts DecoderManifestObdSignalDecoderArgs and DecoderManifestObdSignalDecoderOutput values.
// You can construct a concrete instance of `DecoderManifestObdSignalDecoderInput` via:
//
//	DecoderManifestObdSignalDecoderArgs{...}
type DecoderManifestObdSignalDecoderInput interface {
	pulumi.Input

	ToDecoderManifestObdSignalDecoderOutput() DecoderManifestObdSignalDecoderOutput
	ToDecoderManifestObdSignalDecoderOutputWithContext(context.Context) DecoderManifestObdSignalDecoderOutput
}

type DecoderManifestObdSignalDecoderArgs struct {
	FullyQualifiedName pulumi.StringInput                       `pulumi:"fullyQualifiedName"`
	InterfaceId        pulumi.StringInput                       `pulumi:"interfaceId"`
	ObdSignal          DecoderManifestObdSignalInput            `pulumi:"obdSignal"`
	Type               DecoderManifestObdSignalDecoderTypeInput `pulumi:"type"`
}

func (DecoderManifestObdSignalDecoderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdSignalDecoder)(nil)).Elem()
}

func (i DecoderManifestObdSignalDecoderArgs) ToDecoderManifestObdSignalDecoderOutput() DecoderManifestObdSignalDecoderOutput {
	return i.ToDecoderManifestObdSignalDecoderOutputWithContext(context.Background())
}

func (i DecoderManifestObdSignalDecoderArgs) ToDecoderManifestObdSignalDecoderOutputWithContext(ctx context.Context) DecoderManifestObdSignalDecoderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestObdSignalDecoderOutput)
}

type DecoderManifestObdSignalDecoderOutput struct{ *pulumi.OutputState }

func (DecoderManifestObdSignalDecoderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestObdSignalDecoder)(nil)).Elem()
}

func (o DecoderManifestObdSignalDecoderOutput) ToDecoderManifestObdSignalDecoderOutput() DecoderManifestObdSignalDecoderOutput {
	return o
}

func (o DecoderManifestObdSignalDecoderOutput) ToDecoderManifestObdSignalDecoderOutputWithContext(ctx context.Context) DecoderManifestObdSignalDecoderOutput {
	return o
}

func (o DecoderManifestObdSignalDecoderOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestObdSignalDecoder) string { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

func (o DecoderManifestObdSignalDecoderOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestObdSignalDecoder) string { return v.InterfaceId }).(pulumi.StringOutput)
}

func (o DecoderManifestObdSignalDecoderOutput) ObdSignal() DecoderManifestObdSignalOutput {
	return o.ApplyT(func(v DecoderManifestObdSignalDecoder) DecoderManifestObdSignal { return v.ObdSignal }).(DecoderManifestObdSignalOutput)
}

func (o DecoderManifestObdSignalDecoderOutput) Type() DecoderManifestObdSignalDecoderTypeOutput {
	return o.ApplyT(func(v DecoderManifestObdSignalDecoder) DecoderManifestObdSignalDecoderType { return v.Type }).(DecoderManifestObdSignalDecoderTypeOutput)
}

type DecoderManifestTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type FleetTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type ModelManifestTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SignalCatalogActuator struct {
	AllowedValues      []string                  `pulumi:"allowedValues"`
	AssignedValue      *string                   `pulumi:"assignedValue"`
	DataType           SignalCatalogNodeDataType `pulumi:"dataType"`
	Description        *string                   `pulumi:"description"`
	FullyQualifiedName string                    `pulumi:"fullyQualifiedName"`
	Max                *float64                  `pulumi:"max"`
	Min                *float64                  `pulumi:"min"`
	Unit               *string                   `pulumi:"unit"`
}

// SignalCatalogActuatorInput is an input type that accepts SignalCatalogActuatorArgs and SignalCatalogActuatorOutput values.
// You can construct a concrete instance of `SignalCatalogActuatorInput` via:
//
//	SignalCatalogActuatorArgs{...}
type SignalCatalogActuatorInput interface {
	pulumi.Input

	ToSignalCatalogActuatorOutput() SignalCatalogActuatorOutput
	ToSignalCatalogActuatorOutputWithContext(context.Context) SignalCatalogActuatorOutput
}

type SignalCatalogActuatorArgs struct {
	AllowedValues      pulumi.StringArrayInput        `pulumi:"allowedValues"`
	AssignedValue      pulumi.StringPtrInput          `pulumi:"assignedValue"`
	DataType           SignalCatalogNodeDataTypeInput `pulumi:"dataType"`
	Description        pulumi.StringPtrInput          `pulumi:"description"`
	FullyQualifiedName pulumi.StringInput             `pulumi:"fullyQualifiedName"`
	Max                pulumi.Float64PtrInput         `pulumi:"max"`
	Min                pulumi.Float64PtrInput         `pulumi:"min"`
	Unit               pulumi.StringPtrInput          `pulumi:"unit"`
}

func (SignalCatalogActuatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogActuator)(nil)).Elem()
}

func (i SignalCatalogActuatorArgs) ToSignalCatalogActuatorOutput() SignalCatalogActuatorOutput {
	return i.ToSignalCatalogActuatorOutputWithContext(context.Background())
}

func (i SignalCatalogActuatorArgs) ToSignalCatalogActuatorOutputWithContext(ctx context.Context) SignalCatalogActuatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogActuatorOutput)
}

func (i SignalCatalogActuatorArgs) ToSignalCatalogActuatorPtrOutput() SignalCatalogActuatorPtrOutput {
	return i.ToSignalCatalogActuatorPtrOutputWithContext(context.Background())
}

func (i SignalCatalogActuatorArgs) ToSignalCatalogActuatorPtrOutputWithContext(ctx context.Context) SignalCatalogActuatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogActuatorOutput).ToSignalCatalogActuatorPtrOutputWithContext(ctx)
}

// SignalCatalogActuatorPtrInput is an input type that accepts SignalCatalogActuatorArgs, SignalCatalogActuatorPtr and SignalCatalogActuatorPtrOutput values.
// You can construct a concrete instance of `SignalCatalogActuatorPtrInput` via:
//
//	        SignalCatalogActuatorArgs{...}
//
//	or:
//
//	        nil
type SignalCatalogActuatorPtrInput interface {
	pulumi.Input

	ToSignalCatalogActuatorPtrOutput() SignalCatalogActuatorPtrOutput
	ToSignalCatalogActuatorPtrOutputWithContext(context.Context) SignalCatalogActuatorPtrOutput
}

type signalCatalogActuatorPtrType SignalCatalogActuatorArgs

func SignalCatalogActuatorPtr(v *SignalCatalogActuatorArgs) SignalCatalogActuatorPtrInput {
	return (*signalCatalogActuatorPtrType)(v)
}

func (*signalCatalogActuatorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogActuator)(nil)).Elem()
}

func (i *signalCatalogActuatorPtrType) ToSignalCatalogActuatorPtrOutput() SignalCatalogActuatorPtrOutput {
	return i.ToSignalCatalogActuatorPtrOutputWithContext(context.Background())
}

func (i *signalCatalogActuatorPtrType) ToSignalCatalogActuatorPtrOutputWithContext(ctx context.Context) SignalCatalogActuatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogActuatorPtrOutput)
}

type SignalCatalogActuatorOutput struct{ *pulumi.OutputState }

func (SignalCatalogActuatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogActuator)(nil)).Elem()
}

func (o SignalCatalogActuatorOutput) ToSignalCatalogActuatorOutput() SignalCatalogActuatorOutput {
	return o
}

func (o SignalCatalogActuatorOutput) ToSignalCatalogActuatorOutputWithContext(ctx context.Context) SignalCatalogActuatorOutput {
	return o
}

func (o SignalCatalogActuatorOutput) ToSignalCatalogActuatorPtrOutput() SignalCatalogActuatorPtrOutput {
	return o.ToSignalCatalogActuatorPtrOutputWithContext(context.Background())
}

func (o SignalCatalogActuatorOutput) ToSignalCatalogActuatorPtrOutputWithContext(ctx context.Context) SignalCatalogActuatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalCatalogActuator) *SignalCatalogActuator {
		return &v
	}).(SignalCatalogActuatorPtrOutput)
}

func (o SignalCatalogActuatorOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalCatalogActuator) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

func (o SignalCatalogActuatorOutput) AssignedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogActuator) *string { return v.AssignedValue }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogActuatorOutput) DataType() SignalCatalogNodeDataTypeOutput {
	return o.ApplyT(func(v SignalCatalogActuator) SignalCatalogNodeDataType { return v.DataType }).(SignalCatalogNodeDataTypeOutput)
}

func (o SignalCatalogActuatorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogActuator) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogActuatorOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v SignalCatalogActuator) string { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

func (o SignalCatalogActuatorOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogActuator) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogActuatorOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogActuator) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogActuatorOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogActuator) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SignalCatalogActuatorPtrOutput struct{ *pulumi.OutputState }

func (SignalCatalogActuatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogActuator)(nil)).Elem()
}

func (o SignalCatalogActuatorPtrOutput) ToSignalCatalogActuatorPtrOutput() SignalCatalogActuatorPtrOutput {
	return o
}

func (o SignalCatalogActuatorPtrOutput) ToSignalCatalogActuatorPtrOutputWithContext(ctx context.Context) SignalCatalogActuatorPtrOutput {
	return o
}

func (o SignalCatalogActuatorPtrOutput) Elem() SignalCatalogActuatorOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) SignalCatalogActuator {
		if v != nil {
			return *v
		}
		var ret SignalCatalogActuator
		return ret
	}).(SignalCatalogActuatorOutput)
}

func (o SignalCatalogActuatorPtrOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) []string {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

func (o SignalCatalogActuatorPtrOutput) AssignedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *string {
		if v == nil {
			return nil
		}
		return v.AssignedValue
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogActuatorPtrOutput) DataType() SignalCatalogNodeDataTypePtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *SignalCatalogNodeDataType {
		if v == nil {
			return nil
		}
		return &v.DataType
	}).(SignalCatalogNodeDataTypePtrOutput)
}

func (o SignalCatalogActuatorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogActuatorPtrOutput) FullyQualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *string {
		if v == nil {
			return nil
		}
		return &v.FullyQualifiedName
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogActuatorPtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogActuatorPtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogActuatorPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogActuator) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

type SignalCatalogAttribute struct {
	AllowedValues      []string                  `pulumi:"allowedValues"`
	AssignedValue      *string                   `pulumi:"assignedValue"`
	DataType           SignalCatalogNodeDataType `pulumi:"dataType"`
	DefaultValue       *string                   `pulumi:"defaultValue"`
	Description        *string                   `pulumi:"description"`
	FullyQualifiedName string                    `pulumi:"fullyQualifiedName"`
	Max                *float64                  `pulumi:"max"`
	Min                *float64                  `pulumi:"min"`
	Unit               *string                   `pulumi:"unit"`
}

// SignalCatalogAttributeInput is an input type that accepts SignalCatalogAttributeArgs and SignalCatalogAttributeOutput values.
// You can construct a concrete instance of `SignalCatalogAttributeInput` via:
//
//	SignalCatalogAttributeArgs{...}
type SignalCatalogAttributeInput interface {
	pulumi.Input

	ToSignalCatalogAttributeOutput() SignalCatalogAttributeOutput
	ToSignalCatalogAttributeOutputWithContext(context.Context) SignalCatalogAttributeOutput
}

type SignalCatalogAttributeArgs struct {
	AllowedValues      pulumi.StringArrayInput        `pulumi:"allowedValues"`
	AssignedValue      pulumi.StringPtrInput          `pulumi:"assignedValue"`
	DataType           SignalCatalogNodeDataTypeInput `pulumi:"dataType"`
	DefaultValue       pulumi.StringPtrInput          `pulumi:"defaultValue"`
	Description        pulumi.StringPtrInput          `pulumi:"description"`
	FullyQualifiedName pulumi.StringInput             `pulumi:"fullyQualifiedName"`
	Max                pulumi.Float64PtrInput         `pulumi:"max"`
	Min                pulumi.Float64PtrInput         `pulumi:"min"`
	Unit               pulumi.StringPtrInput          `pulumi:"unit"`
}

func (SignalCatalogAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogAttribute)(nil)).Elem()
}

func (i SignalCatalogAttributeArgs) ToSignalCatalogAttributeOutput() SignalCatalogAttributeOutput {
	return i.ToSignalCatalogAttributeOutputWithContext(context.Background())
}

func (i SignalCatalogAttributeArgs) ToSignalCatalogAttributeOutputWithContext(ctx context.Context) SignalCatalogAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogAttributeOutput)
}

func (i SignalCatalogAttributeArgs) ToSignalCatalogAttributePtrOutput() SignalCatalogAttributePtrOutput {
	return i.ToSignalCatalogAttributePtrOutputWithContext(context.Background())
}

func (i SignalCatalogAttributeArgs) ToSignalCatalogAttributePtrOutputWithContext(ctx context.Context) SignalCatalogAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogAttributeOutput).ToSignalCatalogAttributePtrOutputWithContext(ctx)
}

// SignalCatalogAttributePtrInput is an input type that accepts SignalCatalogAttributeArgs, SignalCatalogAttributePtr and SignalCatalogAttributePtrOutput values.
// You can construct a concrete instance of `SignalCatalogAttributePtrInput` via:
//
//	        SignalCatalogAttributeArgs{...}
//
//	or:
//
//	        nil
type SignalCatalogAttributePtrInput interface {
	pulumi.Input

	ToSignalCatalogAttributePtrOutput() SignalCatalogAttributePtrOutput
	ToSignalCatalogAttributePtrOutputWithContext(context.Context) SignalCatalogAttributePtrOutput
}

type signalCatalogAttributePtrType SignalCatalogAttributeArgs

func SignalCatalogAttributePtr(v *SignalCatalogAttributeArgs) SignalCatalogAttributePtrInput {
	return (*signalCatalogAttributePtrType)(v)
}

func (*signalCatalogAttributePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogAttribute)(nil)).Elem()
}

func (i *signalCatalogAttributePtrType) ToSignalCatalogAttributePtrOutput() SignalCatalogAttributePtrOutput {
	return i.ToSignalCatalogAttributePtrOutputWithContext(context.Background())
}

func (i *signalCatalogAttributePtrType) ToSignalCatalogAttributePtrOutputWithContext(ctx context.Context) SignalCatalogAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogAttributePtrOutput)
}

type SignalCatalogAttributeOutput struct{ *pulumi.OutputState }

func (SignalCatalogAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogAttribute)(nil)).Elem()
}

func (o SignalCatalogAttributeOutput) ToSignalCatalogAttributeOutput() SignalCatalogAttributeOutput {
	return o
}

func (o SignalCatalogAttributeOutput) ToSignalCatalogAttributeOutputWithContext(ctx context.Context) SignalCatalogAttributeOutput {
	return o
}

func (o SignalCatalogAttributeOutput) ToSignalCatalogAttributePtrOutput() SignalCatalogAttributePtrOutput {
	return o.ToSignalCatalogAttributePtrOutputWithContext(context.Background())
}

func (o SignalCatalogAttributeOutput) ToSignalCatalogAttributePtrOutputWithContext(ctx context.Context) SignalCatalogAttributePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalCatalogAttribute) *SignalCatalogAttribute {
		return &v
	}).(SignalCatalogAttributePtrOutput)
}

func (o SignalCatalogAttributeOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

func (o SignalCatalogAttributeOutput) AssignedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) *string { return v.AssignedValue }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributeOutput) DataType() SignalCatalogNodeDataTypeOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) SignalCatalogNodeDataType { return v.DataType }).(SignalCatalogNodeDataTypeOutput)
}

func (o SignalCatalogAttributeOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributeOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) string { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

func (o SignalCatalogAttributeOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogAttributeOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogAttributeOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogAttribute) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SignalCatalogAttributePtrOutput struct{ *pulumi.OutputState }

func (SignalCatalogAttributePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogAttribute)(nil)).Elem()
}

func (o SignalCatalogAttributePtrOutput) ToSignalCatalogAttributePtrOutput() SignalCatalogAttributePtrOutput {
	return o
}

func (o SignalCatalogAttributePtrOutput) ToSignalCatalogAttributePtrOutputWithContext(ctx context.Context) SignalCatalogAttributePtrOutput {
	return o
}

func (o SignalCatalogAttributePtrOutput) Elem() SignalCatalogAttributeOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) SignalCatalogAttribute {
		if v != nil {
			return *v
		}
		var ret SignalCatalogAttribute
		return ret
	}).(SignalCatalogAttributeOutput)
}

func (o SignalCatalogAttributePtrOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) []string {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

func (o SignalCatalogAttributePtrOutput) AssignedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *string {
		if v == nil {
			return nil
		}
		return v.AssignedValue
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributePtrOutput) DataType() SignalCatalogNodeDataTypePtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *SignalCatalogNodeDataType {
		if v == nil {
			return nil
		}
		return &v.DataType
	}).(SignalCatalogNodeDataTypePtrOutput)
}

func (o SignalCatalogAttributePtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributePtrOutput) FullyQualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *string {
		if v == nil {
			return nil
		}
		return &v.FullyQualifiedName
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogAttributePtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogAttributePtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogAttributePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogAttribute) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

type SignalCatalogBranch struct {
	Description        *string `pulumi:"description"`
	FullyQualifiedName string  `pulumi:"fullyQualifiedName"`
}

// SignalCatalogBranchInput is an input type that accepts SignalCatalogBranchArgs and SignalCatalogBranchOutput values.
// You can construct a concrete instance of `SignalCatalogBranchInput` via:
//
//	SignalCatalogBranchArgs{...}
type SignalCatalogBranchInput interface {
	pulumi.Input

	ToSignalCatalogBranchOutput() SignalCatalogBranchOutput
	ToSignalCatalogBranchOutputWithContext(context.Context) SignalCatalogBranchOutput
}

type SignalCatalogBranchArgs struct {
	Description        pulumi.StringPtrInput `pulumi:"description"`
	FullyQualifiedName pulumi.StringInput    `pulumi:"fullyQualifiedName"`
}

func (SignalCatalogBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogBranch)(nil)).Elem()
}

func (i SignalCatalogBranchArgs) ToSignalCatalogBranchOutput() SignalCatalogBranchOutput {
	return i.ToSignalCatalogBranchOutputWithContext(context.Background())
}

func (i SignalCatalogBranchArgs) ToSignalCatalogBranchOutputWithContext(ctx context.Context) SignalCatalogBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogBranchOutput)
}

func (i SignalCatalogBranchArgs) ToSignalCatalogBranchPtrOutput() SignalCatalogBranchPtrOutput {
	return i.ToSignalCatalogBranchPtrOutputWithContext(context.Background())
}

func (i SignalCatalogBranchArgs) ToSignalCatalogBranchPtrOutputWithContext(ctx context.Context) SignalCatalogBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogBranchOutput).ToSignalCatalogBranchPtrOutputWithContext(ctx)
}

// SignalCatalogBranchPtrInput is an input type that accepts SignalCatalogBranchArgs, SignalCatalogBranchPtr and SignalCatalogBranchPtrOutput values.
// You can construct a concrete instance of `SignalCatalogBranchPtrInput` via:
//
//	        SignalCatalogBranchArgs{...}
//
//	or:
//
//	        nil
type SignalCatalogBranchPtrInput interface {
	pulumi.Input

	ToSignalCatalogBranchPtrOutput() SignalCatalogBranchPtrOutput
	ToSignalCatalogBranchPtrOutputWithContext(context.Context) SignalCatalogBranchPtrOutput
}

type signalCatalogBranchPtrType SignalCatalogBranchArgs

func SignalCatalogBranchPtr(v *SignalCatalogBranchArgs) SignalCatalogBranchPtrInput {
	return (*signalCatalogBranchPtrType)(v)
}

func (*signalCatalogBranchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogBranch)(nil)).Elem()
}

func (i *signalCatalogBranchPtrType) ToSignalCatalogBranchPtrOutput() SignalCatalogBranchPtrOutput {
	return i.ToSignalCatalogBranchPtrOutputWithContext(context.Background())
}

func (i *signalCatalogBranchPtrType) ToSignalCatalogBranchPtrOutputWithContext(ctx context.Context) SignalCatalogBranchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogBranchPtrOutput)
}

type SignalCatalogBranchOutput struct{ *pulumi.OutputState }

func (SignalCatalogBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogBranch)(nil)).Elem()
}

func (o SignalCatalogBranchOutput) ToSignalCatalogBranchOutput() SignalCatalogBranchOutput {
	return o
}

func (o SignalCatalogBranchOutput) ToSignalCatalogBranchOutputWithContext(ctx context.Context) SignalCatalogBranchOutput {
	return o
}

func (o SignalCatalogBranchOutput) ToSignalCatalogBranchPtrOutput() SignalCatalogBranchPtrOutput {
	return o.ToSignalCatalogBranchPtrOutputWithContext(context.Background())
}

func (o SignalCatalogBranchOutput) ToSignalCatalogBranchPtrOutputWithContext(ctx context.Context) SignalCatalogBranchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalCatalogBranch) *SignalCatalogBranch {
		return &v
	}).(SignalCatalogBranchPtrOutput)
}

func (o SignalCatalogBranchOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogBranch) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogBranchOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v SignalCatalogBranch) string { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

type SignalCatalogBranchPtrOutput struct{ *pulumi.OutputState }

func (SignalCatalogBranchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogBranch)(nil)).Elem()
}

func (o SignalCatalogBranchPtrOutput) ToSignalCatalogBranchPtrOutput() SignalCatalogBranchPtrOutput {
	return o
}

func (o SignalCatalogBranchPtrOutput) ToSignalCatalogBranchPtrOutputWithContext(ctx context.Context) SignalCatalogBranchPtrOutput {
	return o
}

func (o SignalCatalogBranchPtrOutput) Elem() SignalCatalogBranchOutput {
	return o.ApplyT(func(v *SignalCatalogBranch) SignalCatalogBranch {
		if v != nil {
			return *v
		}
		var ret SignalCatalogBranch
		return ret
	}).(SignalCatalogBranchOutput)
}

func (o SignalCatalogBranchPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogBranch) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogBranchPtrOutput) FullyQualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogBranch) *string {
		if v == nil {
			return nil
		}
		return &v.FullyQualifiedName
	}).(pulumi.StringPtrOutput)
}

type SignalCatalogNode0Properties struct {
	Branch *SignalCatalogBranch `pulumi:"branch"`
}

// SignalCatalogNode0PropertiesInput is an input type that accepts SignalCatalogNode0PropertiesArgs and SignalCatalogNode0PropertiesOutput values.
// You can construct a concrete instance of `SignalCatalogNode0PropertiesInput` via:
//
//	SignalCatalogNode0PropertiesArgs{...}
type SignalCatalogNode0PropertiesInput interface {
	pulumi.Input

	ToSignalCatalogNode0PropertiesOutput() SignalCatalogNode0PropertiesOutput
	ToSignalCatalogNode0PropertiesOutputWithContext(context.Context) SignalCatalogNode0PropertiesOutput
}

type SignalCatalogNode0PropertiesArgs struct {
	Branch SignalCatalogBranchPtrInput `pulumi:"branch"`
}

func (SignalCatalogNode0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode0Properties)(nil)).Elem()
}

func (i SignalCatalogNode0PropertiesArgs) ToSignalCatalogNode0PropertiesOutput() SignalCatalogNode0PropertiesOutput {
	return i.ToSignalCatalogNode0PropertiesOutputWithContext(context.Background())
}

func (i SignalCatalogNode0PropertiesArgs) ToSignalCatalogNode0PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNode0PropertiesOutput)
}

type SignalCatalogNode0PropertiesOutput struct{ *pulumi.OutputState }

func (SignalCatalogNode0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode0Properties)(nil)).Elem()
}

func (o SignalCatalogNode0PropertiesOutput) ToSignalCatalogNode0PropertiesOutput() SignalCatalogNode0PropertiesOutput {
	return o
}

func (o SignalCatalogNode0PropertiesOutput) ToSignalCatalogNode0PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode0PropertiesOutput {
	return o
}

func (o SignalCatalogNode0PropertiesOutput) Branch() SignalCatalogBranchPtrOutput {
	return o.ApplyT(func(v SignalCatalogNode0Properties) *SignalCatalogBranch { return v.Branch }).(SignalCatalogBranchPtrOutput)
}

type SignalCatalogNode1Properties struct {
	Sensor *SignalCatalogSensor `pulumi:"sensor"`
}

// SignalCatalogNode1PropertiesInput is an input type that accepts SignalCatalogNode1PropertiesArgs and SignalCatalogNode1PropertiesOutput values.
// You can construct a concrete instance of `SignalCatalogNode1PropertiesInput` via:
//
//	SignalCatalogNode1PropertiesArgs{...}
type SignalCatalogNode1PropertiesInput interface {
	pulumi.Input

	ToSignalCatalogNode1PropertiesOutput() SignalCatalogNode1PropertiesOutput
	ToSignalCatalogNode1PropertiesOutputWithContext(context.Context) SignalCatalogNode1PropertiesOutput
}

type SignalCatalogNode1PropertiesArgs struct {
	Sensor SignalCatalogSensorPtrInput `pulumi:"sensor"`
}

func (SignalCatalogNode1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode1Properties)(nil)).Elem()
}

func (i SignalCatalogNode1PropertiesArgs) ToSignalCatalogNode1PropertiesOutput() SignalCatalogNode1PropertiesOutput {
	return i.ToSignalCatalogNode1PropertiesOutputWithContext(context.Background())
}

func (i SignalCatalogNode1PropertiesArgs) ToSignalCatalogNode1PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNode1PropertiesOutput)
}

type SignalCatalogNode1PropertiesOutput struct{ *pulumi.OutputState }

func (SignalCatalogNode1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode1Properties)(nil)).Elem()
}

func (o SignalCatalogNode1PropertiesOutput) ToSignalCatalogNode1PropertiesOutput() SignalCatalogNode1PropertiesOutput {
	return o
}

func (o SignalCatalogNode1PropertiesOutput) ToSignalCatalogNode1PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode1PropertiesOutput {
	return o
}

func (o SignalCatalogNode1PropertiesOutput) Sensor() SignalCatalogSensorPtrOutput {
	return o.ApplyT(func(v SignalCatalogNode1Properties) *SignalCatalogSensor { return v.Sensor }).(SignalCatalogSensorPtrOutput)
}

type SignalCatalogNode2Properties struct {
	Actuator *SignalCatalogActuator `pulumi:"actuator"`
}

// SignalCatalogNode2PropertiesInput is an input type that accepts SignalCatalogNode2PropertiesArgs and SignalCatalogNode2PropertiesOutput values.
// You can construct a concrete instance of `SignalCatalogNode2PropertiesInput` via:
//
//	SignalCatalogNode2PropertiesArgs{...}
type SignalCatalogNode2PropertiesInput interface {
	pulumi.Input

	ToSignalCatalogNode2PropertiesOutput() SignalCatalogNode2PropertiesOutput
	ToSignalCatalogNode2PropertiesOutputWithContext(context.Context) SignalCatalogNode2PropertiesOutput
}

type SignalCatalogNode2PropertiesArgs struct {
	Actuator SignalCatalogActuatorPtrInput `pulumi:"actuator"`
}

func (SignalCatalogNode2PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode2Properties)(nil)).Elem()
}

func (i SignalCatalogNode2PropertiesArgs) ToSignalCatalogNode2PropertiesOutput() SignalCatalogNode2PropertiesOutput {
	return i.ToSignalCatalogNode2PropertiesOutputWithContext(context.Background())
}

func (i SignalCatalogNode2PropertiesArgs) ToSignalCatalogNode2PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode2PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNode2PropertiesOutput)
}

type SignalCatalogNode2PropertiesOutput struct{ *pulumi.OutputState }

func (SignalCatalogNode2PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode2Properties)(nil)).Elem()
}

func (o SignalCatalogNode2PropertiesOutput) ToSignalCatalogNode2PropertiesOutput() SignalCatalogNode2PropertiesOutput {
	return o
}

func (o SignalCatalogNode2PropertiesOutput) ToSignalCatalogNode2PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode2PropertiesOutput {
	return o
}

func (o SignalCatalogNode2PropertiesOutput) Actuator() SignalCatalogActuatorPtrOutput {
	return o.ApplyT(func(v SignalCatalogNode2Properties) *SignalCatalogActuator { return v.Actuator }).(SignalCatalogActuatorPtrOutput)
}

type SignalCatalogNode3Properties struct {
	Attribute *SignalCatalogAttribute `pulumi:"attribute"`
}

// SignalCatalogNode3PropertiesInput is an input type that accepts SignalCatalogNode3PropertiesArgs and SignalCatalogNode3PropertiesOutput values.
// You can construct a concrete instance of `SignalCatalogNode3PropertiesInput` via:
//
//	SignalCatalogNode3PropertiesArgs{...}
type SignalCatalogNode3PropertiesInput interface {
	pulumi.Input

	ToSignalCatalogNode3PropertiesOutput() SignalCatalogNode3PropertiesOutput
	ToSignalCatalogNode3PropertiesOutputWithContext(context.Context) SignalCatalogNode3PropertiesOutput
}

type SignalCatalogNode3PropertiesArgs struct {
	Attribute SignalCatalogAttributePtrInput `pulumi:"attribute"`
}

func (SignalCatalogNode3PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode3Properties)(nil)).Elem()
}

func (i SignalCatalogNode3PropertiesArgs) ToSignalCatalogNode3PropertiesOutput() SignalCatalogNode3PropertiesOutput {
	return i.ToSignalCatalogNode3PropertiesOutputWithContext(context.Background())
}

func (i SignalCatalogNode3PropertiesArgs) ToSignalCatalogNode3PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode3PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNode3PropertiesOutput)
}

type SignalCatalogNode3PropertiesOutput struct{ *pulumi.OutputState }

func (SignalCatalogNode3PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNode3Properties)(nil)).Elem()
}

func (o SignalCatalogNode3PropertiesOutput) ToSignalCatalogNode3PropertiesOutput() SignalCatalogNode3PropertiesOutput {
	return o
}

func (o SignalCatalogNode3PropertiesOutput) ToSignalCatalogNode3PropertiesOutputWithContext(ctx context.Context) SignalCatalogNode3PropertiesOutput {
	return o
}

func (o SignalCatalogNode3PropertiesOutput) Attribute() SignalCatalogAttributePtrOutput {
	return o.ApplyT(func(v SignalCatalogNode3Properties) *SignalCatalogAttribute { return v.Attribute }).(SignalCatalogAttributePtrOutput)
}

type SignalCatalogNodeCounts struct {
	TotalActuators  *float64 `pulumi:"totalActuators"`
	TotalAttributes *float64 `pulumi:"totalAttributes"`
	TotalBranches   *float64 `pulumi:"totalBranches"`
	TotalNodes      *float64 `pulumi:"totalNodes"`
	TotalSensors    *float64 `pulumi:"totalSensors"`
}

// SignalCatalogNodeCountsInput is an input type that accepts SignalCatalogNodeCountsArgs and SignalCatalogNodeCountsOutput values.
// You can construct a concrete instance of `SignalCatalogNodeCountsInput` via:
//
//	SignalCatalogNodeCountsArgs{...}
type SignalCatalogNodeCountsInput interface {
	pulumi.Input

	ToSignalCatalogNodeCountsOutput() SignalCatalogNodeCountsOutput
	ToSignalCatalogNodeCountsOutputWithContext(context.Context) SignalCatalogNodeCountsOutput
}

type SignalCatalogNodeCountsArgs struct {
	TotalActuators  pulumi.Float64PtrInput `pulumi:"totalActuators"`
	TotalAttributes pulumi.Float64PtrInput `pulumi:"totalAttributes"`
	TotalBranches   pulumi.Float64PtrInput `pulumi:"totalBranches"`
	TotalNodes      pulumi.Float64PtrInput `pulumi:"totalNodes"`
	TotalSensors    pulumi.Float64PtrInput `pulumi:"totalSensors"`
}

func (SignalCatalogNodeCountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNodeCounts)(nil)).Elem()
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsOutput() SignalCatalogNodeCountsOutput {
	return i.ToSignalCatalogNodeCountsOutputWithContext(context.Background())
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsOutputWithContext(ctx context.Context) SignalCatalogNodeCountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNodeCountsOutput)
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return i.ToSignalCatalogNodeCountsPtrOutputWithContext(context.Background())
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNodeCountsOutput).ToSignalCatalogNodeCountsPtrOutputWithContext(ctx)
}

// SignalCatalogNodeCountsPtrInput is an input type that accepts SignalCatalogNodeCountsArgs, SignalCatalogNodeCountsPtr and SignalCatalogNodeCountsPtrOutput values.
// You can construct a concrete instance of `SignalCatalogNodeCountsPtrInput` via:
//
//	        SignalCatalogNodeCountsArgs{...}
//
//	or:
//
//	        nil
type SignalCatalogNodeCountsPtrInput interface {
	pulumi.Input

	ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput
	ToSignalCatalogNodeCountsPtrOutputWithContext(context.Context) SignalCatalogNodeCountsPtrOutput
}

type signalCatalogNodeCountsPtrType SignalCatalogNodeCountsArgs

func SignalCatalogNodeCountsPtr(v *SignalCatalogNodeCountsArgs) SignalCatalogNodeCountsPtrInput {
	return (*signalCatalogNodeCountsPtrType)(v)
}

func (*signalCatalogNodeCountsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogNodeCounts)(nil)).Elem()
}

func (i *signalCatalogNodeCountsPtrType) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return i.ToSignalCatalogNodeCountsPtrOutputWithContext(context.Background())
}

func (i *signalCatalogNodeCountsPtrType) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNodeCountsPtrOutput)
}

type SignalCatalogNodeCountsOutput struct{ *pulumi.OutputState }

func (SignalCatalogNodeCountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNodeCounts)(nil)).Elem()
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsOutput() SignalCatalogNodeCountsOutput {
	return o
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsOutputWithContext(ctx context.Context) SignalCatalogNodeCountsOutput {
	return o
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return o.ToSignalCatalogNodeCountsPtrOutputWithContext(context.Background())
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalCatalogNodeCounts) *SignalCatalogNodeCounts {
		return &v
	}).(SignalCatalogNodeCountsPtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalActuators() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalActuators }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalAttributes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalAttributes }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalBranches() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalBranches }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalNodes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalNodes }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalSensors() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalSensors }).(pulumi.Float64PtrOutput)
}

type SignalCatalogNodeCountsPtrOutput struct{ *pulumi.OutputState }

func (SignalCatalogNodeCountsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogNodeCounts)(nil)).Elem()
}

func (o SignalCatalogNodeCountsPtrOutput) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return o
}

func (o SignalCatalogNodeCountsPtrOutput) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return o
}

func (o SignalCatalogNodeCountsPtrOutput) Elem() SignalCatalogNodeCountsOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) SignalCatalogNodeCounts {
		if v != nil {
			return *v
		}
		var ret SignalCatalogNodeCounts
		return ret
	}).(SignalCatalogNodeCountsOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalActuators() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalActuators
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalAttributes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalAttributes
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalBranches() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalBranches
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalNodes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalNodes
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalSensors() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalSensors
	}).(pulumi.Float64PtrOutput)
}

type SignalCatalogSensor struct {
	AllowedValues      []string                  `pulumi:"allowedValues"`
	DataType           SignalCatalogNodeDataType `pulumi:"dataType"`
	Description        *string                   `pulumi:"description"`
	FullyQualifiedName string                    `pulumi:"fullyQualifiedName"`
	Max                *float64                  `pulumi:"max"`
	Min                *float64                  `pulumi:"min"`
	Unit               *string                   `pulumi:"unit"`
}

// SignalCatalogSensorInput is an input type that accepts SignalCatalogSensorArgs and SignalCatalogSensorOutput values.
// You can construct a concrete instance of `SignalCatalogSensorInput` via:
//
//	SignalCatalogSensorArgs{...}
type SignalCatalogSensorInput interface {
	pulumi.Input

	ToSignalCatalogSensorOutput() SignalCatalogSensorOutput
	ToSignalCatalogSensorOutputWithContext(context.Context) SignalCatalogSensorOutput
}

type SignalCatalogSensorArgs struct {
	AllowedValues      pulumi.StringArrayInput        `pulumi:"allowedValues"`
	DataType           SignalCatalogNodeDataTypeInput `pulumi:"dataType"`
	Description        pulumi.StringPtrInput          `pulumi:"description"`
	FullyQualifiedName pulumi.StringInput             `pulumi:"fullyQualifiedName"`
	Max                pulumi.Float64PtrInput         `pulumi:"max"`
	Min                pulumi.Float64PtrInput         `pulumi:"min"`
	Unit               pulumi.StringPtrInput          `pulumi:"unit"`
}

func (SignalCatalogSensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogSensor)(nil)).Elem()
}

func (i SignalCatalogSensorArgs) ToSignalCatalogSensorOutput() SignalCatalogSensorOutput {
	return i.ToSignalCatalogSensorOutputWithContext(context.Background())
}

func (i SignalCatalogSensorArgs) ToSignalCatalogSensorOutputWithContext(ctx context.Context) SignalCatalogSensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogSensorOutput)
}

func (i SignalCatalogSensorArgs) ToSignalCatalogSensorPtrOutput() SignalCatalogSensorPtrOutput {
	return i.ToSignalCatalogSensorPtrOutputWithContext(context.Background())
}

func (i SignalCatalogSensorArgs) ToSignalCatalogSensorPtrOutputWithContext(ctx context.Context) SignalCatalogSensorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogSensorOutput).ToSignalCatalogSensorPtrOutputWithContext(ctx)
}

// SignalCatalogSensorPtrInput is an input type that accepts SignalCatalogSensorArgs, SignalCatalogSensorPtr and SignalCatalogSensorPtrOutput values.
// You can construct a concrete instance of `SignalCatalogSensorPtrInput` via:
//
//	        SignalCatalogSensorArgs{...}
//
//	or:
//
//	        nil
type SignalCatalogSensorPtrInput interface {
	pulumi.Input

	ToSignalCatalogSensorPtrOutput() SignalCatalogSensorPtrOutput
	ToSignalCatalogSensorPtrOutputWithContext(context.Context) SignalCatalogSensorPtrOutput
}

type signalCatalogSensorPtrType SignalCatalogSensorArgs

func SignalCatalogSensorPtr(v *SignalCatalogSensorArgs) SignalCatalogSensorPtrInput {
	return (*signalCatalogSensorPtrType)(v)
}

func (*signalCatalogSensorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogSensor)(nil)).Elem()
}

func (i *signalCatalogSensorPtrType) ToSignalCatalogSensorPtrOutput() SignalCatalogSensorPtrOutput {
	return i.ToSignalCatalogSensorPtrOutputWithContext(context.Background())
}

func (i *signalCatalogSensorPtrType) ToSignalCatalogSensorPtrOutputWithContext(ctx context.Context) SignalCatalogSensorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogSensorPtrOutput)
}

type SignalCatalogSensorOutput struct{ *pulumi.OutputState }

func (SignalCatalogSensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogSensor)(nil)).Elem()
}

func (o SignalCatalogSensorOutput) ToSignalCatalogSensorOutput() SignalCatalogSensorOutput {
	return o
}

func (o SignalCatalogSensorOutput) ToSignalCatalogSensorOutputWithContext(ctx context.Context) SignalCatalogSensorOutput {
	return o
}

func (o SignalCatalogSensorOutput) ToSignalCatalogSensorPtrOutput() SignalCatalogSensorPtrOutput {
	return o.ToSignalCatalogSensorPtrOutputWithContext(context.Background())
}

func (o SignalCatalogSensorOutput) ToSignalCatalogSensorPtrOutputWithContext(ctx context.Context) SignalCatalogSensorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalCatalogSensor) *SignalCatalogSensor {
		return &v
	}).(SignalCatalogSensorPtrOutput)
}

func (o SignalCatalogSensorOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalCatalogSensor) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

func (o SignalCatalogSensorOutput) DataType() SignalCatalogNodeDataTypeOutput {
	return o.ApplyT(func(v SignalCatalogSensor) SignalCatalogNodeDataType { return v.DataType }).(SignalCatalogNodeDataTypeOutput)
}

func (o SignalCatalogSensorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogSensor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SignalCatalogSensorOutput) FullyQualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v SignalCatalogSensor) string { return v.FullyQualifiedName }).(pulumi.StringOutput)
}

func (o SignalCatalogSensorOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogSensor) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogSensorOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogSensor) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogSensorOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SignalCatalogSensor) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type SignalCatalogSensorPtrOutput struct{ *pulumi.OutputState }

func (SignalCatalogSensorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogSensor)(nil)).Elem()
}

func (o SignalCatalogSensorPtrOutput) ToSignalCatalogSensorPtrOutput() SignalCatalogSensorPtrOutput {
	return o
}

func (o SignalCatalogSensorPtrOutput) ToSignalCatalogSensorPtrOutputWithContext(ctx context.Context) SignalCatalogSensorPtrOutput {
	return o
}

func (o SignalCatalogSensorPtrOutput) Elem() SignalCatalogSensorOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) SignalCatalogSensor {
		if v != nil {
			return *v
		}
		var ret SignalCatalogSensor
		return ret
	}).(SignalCatalogSensorOutput)
}

func (o SignalCatalogSensorPtrOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) []string {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(pulumi.StringArrayOutput)
}

func (o SignalCatalogSensorPtrOutput) DataType() SignalCatalogNodeDataTypePtrOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) *SignalCatalogNodeDataType {
		if v == nil {
			return nil
		}
		return &v.DataType
	}).(SignalCatalogNodeDataTypePtrOutput)
}

func (o SignalCatalogSensorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogSensorPtrOutput) FullyQualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) *string {
		if v == nil {
			return nil
		}
		return &v.FullyQualifiedName
	}).(pulumi.StringPtrOutput)
}

func (o SignalCatalogSensorPtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogSensorPtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogSensorPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalCatalogSensor) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

type SignalCatalogTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type VehicleTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type VehicleattributesMap struct {
}

// VehicleattributesMapInput is an input type that accepts VehicleattributesMap and VehicleattributesMapOutput values.
// You can construct a concrete instance of `VehicleattributesMapInput` via:
//
//	VehicleattributesMap{ "key": VehicleattributesArgs{...} }
type VehicleattributesMapInput interface {
	pulumi.Input

	ToVehicleattributesMapOutput() VehicleattributesMapOutput
	ToVehicleattributesMapOutputWithContext(context.Context) VehicleattributesMapOutput
}

type VehicleattributesMapArgs struct {
}

func (VehicleattributesMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VehicleattributesMap)(nil)).Elem()
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapOutput() VehicleattributesMapOutput {
	return i.ToVehicleattributesMapOutputWithContext(context.Background())
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapOutputWithContext(ctx context.Context) VehicleattributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleattributesMapOutput)
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return i.ToVehicleattributesMapPtrOutputWithContext(context.Background())
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleattributesMapOutput).ToVehicleattributesMapPtrOutputWithContext(ctx)
}

// VehicleattributesMapPtrInput is an input type that accepts VehicleattributesMapArgs, VehicleattributesMapPtr and VehicleattributesMapPtrOutput values.
// You can construct a concrete instance of `VehicleattributesMapPtrInput` via:
//
//	        VehicleattributesMapArgs{...}
//
//	or:
//
//	        nil
type VehicleattributesMapPtrInput interface {
	pulumi.Input

	ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput
	ToVehicleattributesMapPtrOutputWithContext(context.Context) VehicleattributesMapPtrOutput
}

type vehicleattributesMapPtrType VehicleattributesMapArgs

func VehicleattributesMapPtr(v *VehicleattributesMapArgs) VehicleattributesMapPtrInput {
	return (*vehicleattributesMapPtrType)(v)
}

func (*vehicleattributesMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VehicleattributesMap)(nil)).Elem()
}

func (i *vehicleattributesMapPtrType) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return i.ToVehicleattributesMapPtrOutputWithContext(context.Background())
}

func (i *vehicleattributesMapPtrType) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleattributesMapPtrOutput)
}

type VehicleattributesMapOutput struct{ *pulumi.OutputState }

func (VehicleattributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VehicleattributesMap)(nil)).Elem()
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapOutput() VehicleattributesMapOutput {
	return o
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapOutputWithContext(ctx context.Context) VehicleattributesMapOutput {
	return o
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return o.ToVehicleattributesMapPtrOutputWithContext(context.Background())
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VehicleattributesMap) *VehicleattributesMap {
		return &v
	}).(VehicleattributesMapPtrOutput)
}

type VehicleattributesMapPtrOutput struct{ *pulumi.OutputState }

func (VehicleattributesMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VehicleattributesMap)(nil)).Elem()
}

func (o VehicleattributesMapPtrOutput) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return o
}

func (o VehicleattributesMapPtrOutput) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return o
}

func (o VehicleattributesMapPtrOutput) Elem() VehicleattributesMapOutput {
	return o.ApplyT(func(v *VehicleattributesMap) VehicleattributesMap {
		if v != nil {
			return *v
		}
		var ret VehicleattributesMap
		return ret
	}).(VehicleattributesMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignCollectionScheme0PropertiesInput)(nil)).Elem(), CampaignCollectionScheme0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignCollectionScheme1PropertiesInput)(nil)).Elem(), CampaignCollectionScheme1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignConditionBasedCollectionSchemeInput)(nil)).Elem(), CampaignConditionBasedCollectionSchemeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignDataDestinationConfig0PropertiesInput)(nil)).Elem(), CampaignDataDestinationConfig0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignDataDestinationConfig1PropertiesInput)(nil)).Elem(), CampaignDataDestinationConfig1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignS3ConfigInput)(nil)).Elem(), CampaignS3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignSignalInformationInput)(nil)).Elem(), CampaignSignalInformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignSignalInformationArrayInput)(nil)).Elem(), CampaignSignalInformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignTimeBasedCollectionSchemeInput)(nil)).Elem(), CampaignTimeBasedCollectionSchemeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignTimestreamConfigInput)(nil)).Elem(), CampaignTimestreamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestCanInterfaceInput)(nil)).Elem(), DecoderManifestCanInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestCanNetworkInterfaceInput)(nil)).Elem(), DecoderManifestCanNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestCanSignalInput)(nil)).Elem(), DecoderManifestCanSignalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestCanSignalDecoderInput)(nil)).Elem(), DecoderManifestCanSignalDecoderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestObdInterfaceInput)(nil)).Elem(), DecoderManifestObdInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestObdNetworkInterfaceInput)(nil)).Elem(), DecoderManifestObdNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestObdSignalInput)(nil)).Elem(), DecoderManifestObdSignalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestObdSignalDecoderInput)(nil)).Elem(), DecoderManifestObdSignalDecoderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogActuatorInput)(nil)).Elem(), SignalCatalogActuatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogActuatorPtrInput)(nil)).Elem(), SignalCatalogActuatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogAttributeInput)(nil)).Elem(), SignalCatalogAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogAttributePtrInput)(nil)).Elem(), SignalCatalogAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogBranchInput)(nil)).Elem(), SignalCatalogBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogBranchPtrInput)(nil)).Elem(), SignalCatalogBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNode0PropertiesInput)(nil)).Elem(), SignalCatalogNode0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNode1PropertiesInput)(nil)).Elem(), SignalCatalogNode1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNode2PropertiesInput)(nil)).Elem(), SignalCatalogNode2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNode3PropertiesInput)(nil)).Elem(), SignalCatalogNode3PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNodeCountsInput)(nil)).Elem(), SignalCatalogNodeCountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNodeCountsPtrInput)(nil)).Elem(), SignalCatalogNodeCountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogSensorInput)(nil)).Elem(), SignalCatalogSensorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogSensorPtrInput)(nil)).Elem(), SignalCatalogSensorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VehicleattributesMapInput)(nil)).Elem(), VehicleattributesMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VehicleattributesMapPtrInput)(nil)).Elem(), VehicleattributesMapArgs{})
	pulumi.RegisterOutputType(CampaignCollectionScheme0PropertiesOutput{})
	pulumi.RegisterOutputType(CampaignCollectionScheme1PropertiesOutput{})
	pulumi.RegisterOutputType(CampaignConditionBasedCollectionSchemeOutput{})
	pulumi.RegisterOutputType(CampaignDataDestinationConfig0PropertiesOutput{})
	pulumi.RegisterOutputType(CampaignDataDestinationConfig1PropertiesOutput{})
	pulumi.RegisterOutputType(CampaignS3ConfigOutput{})
	pulumi.RegisterOutputType(CampaignSignalInformationOutput{})
	pulumi.RegisterOutputType(CampaignSignalInformationArrayOutput{})
	pulumi.RegisterOutputType(CampaignTimeBasedCollectionSchemeOutput{})
	pulumi.RegisterOutputType(CampaignTimestreamConfigOutput{})
	pulumi.RegisterOutputType(DecoderManifestCanInterfaceOutput{})
	pulumi.RegisterOutputType(DecoderManifestCanNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(DecoderManifestCanSignalOutput{})
	pulumi.RegisterOutputType(DecoderManifestCanSignalDecoderOutput{})
	pulumi.RegisterOutputType(DecoderManifestObdInterfaceOutput{})
	pulumi.RegisterOutputType(DecoderManifestObdNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(DecoderManifestObdSignalOutput{})
	pulumi.RegisterOutputType(DecoderManifestObdSignalDecoderOutput{})
	pulumi.RegisterOutputType(SignalCatalogActuatorOutput{})
	pulumi.RegisterOutputType(SignalCatalogActuatorPtrOutput{})
	pulumi.RegisterOutputType(SignalCatalogAttributeOutput{})
	pulumi.RegisterOutputType(SignalCatalogAttributePtrOutput{})
	pulumi.RegisterOutputType(SignalCatalogBranchOutput{})
	pulumi.RegisterOutputType(SignalCatalogBranchPtrOutput{})
	pulumi.RegisterOutputType(SignalCatalogNode0PropertiesOutput{})
	pulumi.RegisterOutputType(SignalCatalogNode1PropertiesOutput{})
	pulumi.RegisterOutputType(SignalCatalogNode2PropertiesOutput{})
	pulumi.RegisterOutputType(SignalCatalogNode3PropertiesOutput{})
	pulumi.RegisterOutputType(SignalCatalogNodeCountsOutput{})
	pulumi.RegisterOutputType(SignalCatalogNodeCountsPtrOutput{})
	pulumi.RegisterOutputType(SignalCatalogSensorOutput{})
	pulumi.RegisterOutputType(SignalCatalogSensorPtrOutput{})
	pulumi.RegisterOutputType(VehicleattributesMapOutput{})
	pulumi.RegisterOutputType(VehicleattributesMapPtrOutput{})
}
