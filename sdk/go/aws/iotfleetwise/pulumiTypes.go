// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotfleetwise

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CampaignCollectionScheme0Properties struct {
	TimeBasedCollectionScheme CampaignTimeBasedCollectionScheme `pulumi:"timeBasedCollectionScheme"`
}

type CampaignCollectionScheme1Properties struct {
	ConditionBasedCollectionScheme CampaignConditionBasedCollectionScheme `pulumi:"conditionBasedCollectionScheme"`
}

type CampaignConditionBasedCollectionScheme struct {
	ConditionLanguageVersion *int                 `pulumi:"conditionLanguageVersion"`
	Expression               string               `pulumi:"expression"`
	MinimumTriggerIntervalMs *float64             `pulumi:"minimumTriggerIntervalMs"`
	TriggerMode              *CampaignTriggerMode `pulumi:"triggerMode"`
}

type CampaignDataDestinationConfig0Properties struct {
	S3Config CampaignS3Config `pulumi:"s3Config"`
}

type CampaignDataDestinationConfig1Properties struct {
	TimestreamConfig CampaignTimestreamConfig `pulumi:"timestreamConfig"`
}

type CampaignS3Config struct {
	BucketArn                string                            `pulumi:"bucketArn"`
	DataFormat               *CampaignDataFormat               `pulumi:"dataFormat"`
	Prefix                   *string                           `pulumi:"prefix"`
	StorageCompressionFormat *CampaignStorageCompressionFormat `pulumi:"storageCompressionFormat"`
}

type CampaignSignalInformation struct {
	MaxSampleCount            *float64 `pulumi:"maxSampleCount"`
	MinimumSamplingIntervalMs *float64 `pulumi:"minimumSamplingIntervalMs"`
	Name                      string   `pulumi:"name"`
}

// CampaignSignalInformationInput is an input type that accepts CampaignSignalInformationArgs and CampaignSignalInformationOutput values.
// You can construct a concrete instance of `CampaignSignalInformationInput` via:
//
//	CampaignSignalInformationArgs{...}
type CampaignSignalInformationInput interface {
	pulumi.Input

	ToCampaignSignalInformationOutput() CampaignSignalInformationOutput
	ToCampaignSignalInformationOutputWithContext(context.Context) CampaignSignalInformationOutput
}

type CampaignSignalInformationArgs struct {
	MaxSampleCount            pulumi.Float64PtrInput `pulumi:"maxSampleCount"`
	MinimumSamplingIntervalMs pulumi.Float64PtrInput `pulumi:"minimumSamplingIntervalMs"`
	Name                      pulumi.StringInput     `pulumi:"name"`
}

func (CampaignSignalInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignSignalInformation)(nil)).Elem()
}

func (i CampaignSignalInformationArgs) ToCampaignSignalInformationOutput() CampaignSignalInformationOutput {
	return i.ToCampaignSignalInformationOutputWithContext(context.Background())
}

func (i CampaignSignalInformationArgs) ToCampaignSignalInformationOutputWithContext(ctx context.Context) CampaignSignalInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignSignalInformationOutput)
}

// CampaignSignalInformationArrayInput is an input type that accepts CampaignSignalInformationArray and CampaignSignalInformationArrayOutput values.
// You can construct a concrete instance of `CampaignSignalInformationArrayInput` via:
//
//	CampaignSignalInformationArray{ CampaignSignalInformationArgs{...} }
type CampaignSignalInformationArrayInput interface {
	pulumi.Input

	ToCampaignSignalInformationArrayOutput() CampaignSignalInformationArrayOutput
	ToCampaignSignalInformationArrayOutputWithContext(context.Context) CampaignSignalInformationArrayOutput
}

type CampaignSignalInformationArray []CampaignSignalInformationInput

func (CampaignSignalInformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CampaignSignalInformation)(nil)).Elem()
}

func (i CampaignSignalInformationArray) ToCampaignSignalInformationArrayOutput() CampaignSignalInformationArrayOutput {
	return i.ToCampaignSignalInformationArrayOutputWithContext(context.Background())
}

func (i CampaignSignalInformationArray) ToCampaignSignalInformationArrayOutputWithContext(ctx context.Context) CampaignSignalInformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignSignalInformationArrayOutput)
}

type CampaignSignalInformationOutput struct{ *pulumi.OutputState }

func (CampaignSignalInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignSignalInformation)(nil)).Elem()
}

func (o CampaignSignalInformationOutput) ToCampaignSignalInformationOutput() CampaignSignalInformationOutput {
	return o
}

func (o CampaignSignalInformationOutput) ToCampaignSignalInformationOutputWithContext(ctx context.Context) CampaignSignalInformationOutput {
	return o
}

func (o CampaignSignalInformationOutput) MaxSampleCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CampaignSignalInformation) *float64 { return v.MaxSampleCount }).(pulumi.Float64PtrOutput)
}

func (o CampaignSignalInformationOutput) MinimumSamplingIntervalMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CampaignSignalInformation) *float64 { return v.MinimumSamplingIntervalMs }).(pulumi.Float64PtrOutput)
}

func (o CampaignSignalInformationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignSignalInformation) string { return v.Name }).(pulumi.StringOutput)
}

type CampaignSignalInformationArrayOutput struct{ *pulumi.OutputState }

func (CampaignSignalInformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CampaignSignalInformation)(nil)).Elem()
}

func (o CampaignSignalInformationArrayOutput) ToCampaignSignalInformationArrayOutput() CampaignSignalInformationArrayOutput {
	return o
}

func (o CampaignSignalInformationArrayOutput) ToCampaignSignalInformationArrayOutputWithContext(ctx context.Context) CampaignSignalInformationArrayOutput {
	return o
}

func (o CampaignSignalInformationArrayOutput) Index(i pulumi.IntInput) CampaignSignalInformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CampaignSignalInformation {
		return vs[0].([]CampaignSignalInformation)[vs[1].(int)]
	}).(CampaignSignalInformationOutput)
}

type CampaignTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// CampaignTagInput is an input type that accepts CampaignTagArgs and CampaignTagOutput values.
// You can construct a concrete instance of `CampaignTagInput` via:
//
//	CampaignTagArgs{...}
type CampaignTagInput interface {
	pulumi.Input

	ToCampaignTagOutput() CampaignTagOutput
	ToCampaignTagOutputWithContext(context.Context) CampaignTagOutput
}

type CampaignTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (CampaignTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignTag)(nil)).Elem()
}

func (i CampaignTagArgs) ToCampaignTagOutput() CampaignTagOutput {
	return i.ToCampaignTagOutputWithContext(context.Background())
}

func (i CampaignTagArgs) ToCampaignTagOutputWithContext(ctx context.Context) CampaignTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignTagOutput)
}

// CampaignTagArrayInput is an input type that accepts CampaignTagArray and CampaignTagArrayOutput values.
// You can construct a concrete instance of `CampaignTagArrayInput` via:
//
//	CampaignTagArray{ CampaignTagArgs{...} }
type CampaignTagArrayInput interface {
	pulumi.Input

	ToCampaignTagArrayOutput() CampaignTagArrayOutput
	ToCampaignTagArrayOutputWithContext(context.Context) CampaignTagArrayOutput
}

type CampaignTagArray []CampaignTagInput

func (CampaignTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CampaignTag)(nil)).Elem()
}

func (i CampaignTagArray) ToCampaignTagArrayOutput() CampaignTagArrayOutput {
	return i.ToCampaignTagArrayOutputWithContext(context.Background())
}

func (i CampaignTagArray) ToCampaignTagArrayOutputWithContext(ctx context.Context) CampaignTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CampaignTagArrayOutput)
}

type CampaignTagOutput struct{ *pulumi.OutputState }

func (CampaignTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CampaignTag)(nil)).Elem()
}

func (o CampaignTagOutput) ToCampaignTagOutput() CampaignTagOutput {
	return o
}

func (o CampaignTagOutput) ToCampaignTagOutputWithContext(ctx context.Context) CampaignTagOutput {
	return o
}

func (o CampaignTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o CampaignTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CampaignTag) string { return v.Value }).(pulumi.StringOutput)
}

type CampaignTagArrayOutput struct{ *pulumi.OutputState }

func (CampaignTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CampaignTag)(nil)).Elem()
}

func (o CampaignTagArrayOutput) ToCampaignTagArrayOutput() CampaignTagArrayOutput {
	return o
}

func (o CampaignTagArrayOutput) ToCampaignTagArrayOutputWithContext(ctx context.Context) CampaignTagArrayOutput {
	return o
}

func (o CampaignTagArrayOutput) Index(i pulumi.IntInput) CampaignTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CampaignTag {
		return vs[0].([]CampaignTag)[vs[1].(int)]
	}).(CampaignTagOutput)
}

type CampaignTimeBasedCollectionScheme struct {
	PeriodMs float64 `pulumi:"periodMs"`
}

type CampaignTimestreamConfig struct {
	ExecutionRoleArn   string `pulumi:"executionRoleArn"`
	TimestreamTableArn string `pulumi:"timestreamTableArn"`
}

type DecoderManifestCanInterface struct {
	Name            string  `pulumi:"name"`
	ProtocolName    *string `pulumi:"protocolName"`
	ProtocolVersion *string `pulumi:"protocolVersion"`
}

type DecoderManifestCanNetworkInterface struct {
	CanInterface DecoderManifestCanInterface            `pulumi:"canInterface"`
	InterfaceId  string                                 `pulumi:"interfaceId"`
	Type         DecoderManifestCanNetworkInterfaceType `pulumi:"type"`
}

type DecoderManifestCanSignal struct {
	Factor      float64 `pulumi:"factor"`
	IsBigEndian bool    `pulumi:"isBigEndian"`
	IsSigned    bool    `pulumi:"isSigned"`
	Length      int     `pulumi:"length"`
	MessageId   int     `pulumi:"messageId"`
	Name        *string `pulumi:"name"`
	Offset      float64 `pulumi:"offset"`
	StartBit    int     `pulumi:"startBit"`
}

type DecoderManifestCanSignalDecoder struct {
	CanSignal          DecoderManifestCanSignal            `pulumi:"canSignal"`
	FullyQualifiedName string                              `pulumi:"fullyQualifiedName"`
	InterfaceId        string                              `pulumi:"interfaceId"`
	Type               DecoderManifestCanSignalDecoderType `pulumi:"type"`
}

type DecoderManifestObdInterface struct {
	DtcRequestIntervalSeconds *int    `pulumi:"dtcRequestIntervalSeconds"`
	HasTransmissionEcu        *bool   `pulumi:"hasTransmissionEcu"`
	Name                      string  `pulumi:"name"`
	ObdStandard               *string `pulumi:"obdStandard"`
	PidRequestIntervalSeconds *int    `pulumi:"pidRequestIntervalSeconds"`
	RequestMessageId          int     `pulumi:"requestMessageId"`
	UseExtendedIds            *bool   `pulumi:"useExtendedIds"`
}

type DecoderManifestObdNetworkInterface struct {
	InterfaceId  string                                 `pulumi:"interfaceId"`
	ObdInterface DecoderManifestObdInterface            `pulumi:"obdInterface"`
	Type         DecoderManifestObdNetworkInterfaceType `pulumi:"type"`
}

type DecoderManifestObdSignal struct {
	BitMaskLength     *int    `pulumi:"bitMaskLength"`
	BitRightShift     *int    `pulumi:"bitRightShift"`
	ByteLength        int     `pulumi:"byteLength"`
	Offset            float64 `pulumi:"offset"`
	Pid               int     `pulumi:"pid"`
	PidResponseLength int     `pulumi:"pidResponseLength"`
	Scaling           float64 `pulumi:"scaling"`
	ServiceMode       int     `pulumi:"serviceMode"`
	StartByte         int     `pulumi:"startByte"`
}

type DecoderManifestObdSignalDecoder struct {
	FullyQualifiedName string                              `pulumi:"fullyQualifiedName"`
	InterfaceId        string                              `pulumi:"interfaceId"`
	ObdSignal          DecoderManifestObdSignal            `pulumi:"obdSignal"`
	Type               DecoderManifestObdSignalDecoderType `pulumi:"type"`
}

type DecoderManifestTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DecoderManifestTagInput is an input type that accepts DecoderManifestTagArgs and DecoderManifestTagOutput values.
// You can construct a concrete instance of `DecoderManifestTagInput` via:
//
//	DecoderManifestTagArgs{...}
type DecoderManifestTagInput interface {
	pulumi.Input

	ToDecoderManifestTagOutput() DecoderManifestTagOutput
	ToDecoderManifestTagOutputWithContext(context.Context) DecoderManifestTagOutput
}

type DecoderManifestTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DecoderManifestTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestTag)(nil)).Elem()
}

func (i DecoderManifestTagArgs) ToDecoderManifestTagOutput() DecoderManifestTagOutput {
	return i.ToDecoderManifestTagOutputWithContext(context.Background())
}

func (i DecoderManifestTagArgs) ToDecoderManifestTagOutputWithContext(ctx context.Context) DecoderManifestTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestTagOutput)
}

// DecoderManifestTagArrayInput is an input type that accepts DecoderManifestTagArray and DecoderManifestTagArrayOutput values.
// You can construct a concrete instance of `DecoderManifestTagArrayInput` via:
//
//	DecoderManifestTagArray{ DecoderManifestTagArgs{...} }
type DecoderManifestTagArrayInput interface {
	pulumi.Input

	ToDecoderManifestTagArrayOutput() DecoderManifestTagArrayOutput
	ToDecoderManifestTagArrayOutputWithContext(context.Context) DecoderManifestTagArrayOutput
}

type DecoderManifestTagArray []DecoderManifestTagInput

func (DecoderManifestTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DecoderManifestTag)(nil)).Elem()
}

func (i DecoderManifestTagArray) ToDecoderManifestTagArrayOutput() DecoderManifestTagArrayOutput {
	return i.ToDecoderManifestTagArrayOutputWithContext(context.Background())
}

func (i DecoderManifestTagArray) ToDecoderManifestTagArrayOutputWithContext(ctx context.Context) DecoderManifestTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DecoderManifestTagArrayOutput)
}

type DecoderManifestTagOutput struct{ *pulumi.OutputState }

func (DecoderManifestTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DecoderManifestTag)(nil)).Elem()
}

func (o DecoderManifestTagOutput) ToDecoderManifestTagOutput() DecoderManifestTagOutput {
	return o
}

func (o DecoderManifestTagOutput) ToDecoderManifestTagOutputWithContext(ctx context.Context) DecoderManifestTagOutput {
	return o
}

func (o DecoderManifestTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DecoderManifestTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DecoderManifestTag) string { return v.Value }).(pulumi.StringOutput)
}

type DecoderManifestTagArrayOutput struct{ *pulumi.OutputState }

func (DecoderManifestTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DecoderManifestTag)(nil)).Elem()
}

func (o DecoderManifestTagArrayOutput) ToDecoderManifestTagArrayOutput() DecoderManifestTagArrayOutput {
	return o
}

func (o DecoderManifestTagArrayOutput) ToDecoderManifestTagArrayOutputWithContext(ctx context.Context) DecoderManifestTagArrayOutput {
	return o
}

func (o DecoderManifestTagArrayOutput) Index(i pulumi.IntInput) DecoderManifestTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DecoderManifestTag {
		return vs[0].([]DecoderManifestTag)[vs[1].(int)]
	}).(DecoderManifestTagOutput)
}

type FleetTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// FleetTagInput is an input type that accepts FleetTagArgs and FleetTagOutput values.
// You can construct a concrete instance of `FleetTagInput` via:
//
//	FleetTagArgs{...}
type FleetTagInput interface {
	pulumi.Input

	ToFleetTagOutput() FleetTagOutput
	ToFleetTagOutputWithContext(context.Context) FleetTagOutput
}

type FleetTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (FleetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetTag)(nil)).Elem()
}

func (i FleetTagArgs) ToFleetTagOutput() FleetTagOutput {
	return i.ToFleetTagOutputWithContext(context.Background())
}

func (i FleetTagArgs) ToFleetTagOutputWithContext(ctx context.Context) FleetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetTagOutput)
}

// FleetTagArrayInput is an input type that accepts FleetTagArray and FleetTagArrayOutput values.
// You can construct a concrete instance of `FleetTagArrayInput` via:
//
//	FleetTagArray{ FleetTagArgs{...} }
type FleetTagArrayInput interface {
	pulumi.Input

	ToFleetTagArrayOutput() FleetTagArrayOutput
	ToFleetTagArrayOutputWithContext(context.Context) FleetTagArrayOutput
}

type FleetTagArray []FleetTagInput

func (FleetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FleetTag)(nil)).Elem()
}

func (i FleetTagArray) ToFleetTagArrayOutput() FleetTagArrayOutput {
	return i.ToFleetTagArrayOutputWithContext(context.Background())
}

func (i FleetTagArray) ToFleetTagArrayOutputWithContext(ctx context.Context) FleetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetTagArrayOutput)
}

type FleetTagOutput struct{ *pulumi.OutputState }

func (FleetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetTag)(nil)).Elem()
}

func (o FleetTagOutput) ToFleetTagOutput() FleetTagOutput {
	return o
}

func (o FleetTagOutput) ToFleetTagOutputWithContext(ctx context.Context) FleetTagOutput {
	return o
}

func (o FleetTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FleetTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o FleetTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FleetTag) string { return v.Value }).(pulumi.StringOutput)
}

type FleetTagArrayOutput struct{ *pulumi.OutputState }

func (FleetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FleetTag)(nil)).Elem()
}

func (o FleetTagArrayOutput) ToFleetTagArrayOutput() FleetTagArrayOutput {
	return o
}

func (o FleetTagArrayOutput) ToFleetTagArrayOutputWithContext(ctx context.Context) FleetTagArrayOutput {
	return o
}

func (o FleetTagArrayOutput) Index(i pulumi.IntInput) FleetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FleetTag {
		return vs[0].([]FleetTag)[vs[1].(int)]
	}).(FleetTagOutput)
}

type ModelManifestTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ModelManifestTagInput is an input type that accepts ModelManifestTagArgs and ModelManifestTagOutput values.
// You can construct a concrete instance of `ModelManifestTagInput` via:
//
//	ModelManifestTagArgs{...}
type ModelManifestTagInput interface {
	pulumi.Input

	ToModelManifestTagOutput() ModelManifestTagOutput
	ToModelManifestTagOutputWithContext(context.Context) ModelManifestTagOutput
}

type ModelManifestTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ModelManifestTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelManifestTag)(nil)).Elem()
}

func (i ModelManifestTagArgs) ToModelManifestTagOutput() ModelManifestTagOutput {
	return i.ToModelManifestTagOutputWithContext(context.Background())
}

func (i ModelManifestTagArgs) ToModelManifestTagOutputWithContext(ctx context.Context) ModelManifestTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelManifestTagOutput)
}

// ModelManifestTagArrayInput is an input type that accepts ModelManifestTagArray and ModelManifestTagArrayOutput values.
// You can construct a concrete instance of `ModelManifestTagArrayInput` via:
//
//	ModelManifestTagArray{ ModelManifestTagArgs{...} }
type ModelManifestTagArrayInput interface {
	pulumi.Input

	ToModelManifestTagArrayOutput() ModelManifestTagArrayOutput
	ToModelManifestTagArrayOutputWithContext(context.Context) ModelManifestTagArrayOutput
}

type ModelManifestTagArray []ModelManifestTagInput

func (ModelManifestTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelManifestTag)(nil)).Elem()
}

func (i ModelManifestTagArray) ToModelManifestTagArrayOutput() ModelManifestTagArrayOutput {
	return i.ToModelManifestTagArrayOutputWithContext(context.Background())
}

func (i ModelManifestTagArray) ToModelManifestTagArrayOutputWithContext(ctx context.Context) ModelManifestTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelManifestTagArrayOutput)
}

type ModelManifestTagOutput struct{ *pulumi.OutputState }

func (ModelManifestTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelManifestTag)(nil)).Elem()
}

func (o ModelManifestTagOutput) ToModelManifestTagOutput() ModelManifestTagOutput {
	return o
}

func (o ModelManifestTagOutput) ToModelManifestTagOutputWithContext(ctx context.Context) ModelManifestTagOutput {
	return o
}

func (o ModelManifestTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ModelManifestTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ModelManifestTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ModelManifestTag) string { return v.Value }).(pulumi.StringOutput)
}

type ModelManifestTagArrayOutput struct{ *pulumi.OutputState }

func (ModelManifestTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelManifestTag)(nil)).Elem()
}

func (o ModelManifestTagArrayOutput) ToModelManifestTagArrayOutput() ModelManifestTagArrayOutput {
	return o
}

func (o ModelManifestTagArrayOutput) ToModelManifestTagArrayOutputWithContext(ctx context.Context) ModelManifestTagArrayOutput {
	return o
}

func (o ModelManifestTagArrayOutput) Index(i pulumi.IntInput) ModelManifestTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ModelManifestTag {
		return vs[0].([]ModelManifestTag)[vs[1].(int)]
	}).(ModelManifestTagOutput)
}

type SignalCatalogActuator struct {
	AllowedValues      []string                  `pulumi:"allowedValues"`
	AssignedValue      *string                   `pulumi:"assignedValue"`
	DataType           SignalCatalogNodeDataType `pulumi:"dataType"`
	Description        *string                   `pulumi:"description"`
	FullyQualifiedName string                    `pulumi:"fullyQualifiedName"`
	Max                *float64                  `pulumi:"max"`
	Min                *float64                  `pulumi:"min"`
	Unit               *string                   `pulumi:"unit"`
}

type SignalCatalogAttribute struct {
	AllowedValues      []string                  `pulumi:"allowedValues"`
	AssignedValue      *string                   `pulumi:"assignedValue"`
	DataType           SignalCatalogNodeDataType `pulumi:"dataType"`
	DefaultValue       *string                   `pulumi:"defaultValue"`
	Description        *string                   `pulumi:"description"`
	FullyQualifiedName string                    `pulumi:"fullyQualifiedName"`
	Max                *float64                  `pulumi:"max"`
	Min                *float64                  `pulumi:"min"`
	Unit               *string                   `pulumi:"unit"`
}

type SignalCatalogBranch struct {
	Description        *string `pulumi:"description"`
	FullyQualifiedName string  `pulumi:"fullyQualifiedName"`
}

type SignalCatalogNode0Properties struct {
	Branch *SignalCatalogBranch `pulumi:"branch"`
}

type SignalCatalogNode1Properties struct {
	Sensor *SignalCatalogSensor `pulumi:"sensor"`
}

type SignalCatalogNode2Properties struct {
	Actuator *SignalCatalogActuator `pulumi:"actuator"`
}

type SignalCatalogNode3Properties struct {
	Attribute *SignalCatalogAttribute `pulumi:"attribute"`
}

type SignalCatalogNodeCounts struct {
	TotalActuators  *float64 `pulumi:"totalActuators"`
	TotalAttributes *float64 `pulumi:"totalAttributes"`
	TotalBranches   *float64 `pulumi:"totalBranches"`
	TotalNodes      *float64 `pulumi:"totalNodes"`
	TotalSensors    *float64 `pulumi:"totalSensors"`
}

// SignalCatalogNodeCountsInput is an input type that accepts SignalCatalogNodeCountsArgs and SignalCatalogNodeCountsOutput values.
// You can construct a concrete instance of `SignalCatalogNodeCountsInput` via:
//
//	SignalCatalogNodeCountsArgs{...}
type SignalCatalogNodeCountsInput interface {
	pulumi.Input

	ToSignalCatalogNodeCountsOutput() SignalCatalogNodeCountsOutput
	ToSignalCatalogNodeCountsOutputWithContext(context.Context) SignalCatalogNodeCountsOutput
}

type SignalCatalogNodeCountsArgs struct {
	TotalActuators  pulumi.Float64PtrInput `pulumi:"totalActuators"`
	TotalAttributes pulumi.Float64PtrInput `pulumi:"totalAttributes"`
	TotalBranches   pulumi.Float64PtrInput `pulumi:"totalBranches"`
	TotalNodes      pulumi.Float64PtrInput `pulumi:"totalNodes"`
	TotalSensors    pulumi.Float64PtrInput `pulumi:"totalSensors"`
}

func (SignalCatalogNodeCountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNodeCounts)(nil)).Elem()
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsOutput() SignalCatalogNodeCountsOutput {
	return i.ToSignalCatalogNodeCountsOutputWithContext(context.Background())
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsOutputWithContext(ctx context.Context) SignalCatalogNodeCountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNodeCountsOutput)
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return i.ToSignalCatalogNodeCountsPtrOutputWithContext(context.Background())
}

func (i SignalCatalogNodeCountsArgs) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNodeCountsOutput).ToSignalCatalogNodeCountsPtrOutputWithContext(ctx)
}

// SignalCatalogNodeCountsPtrInput is an input type that accepts SignalCatalogNodeCountsArgs, SignalCatalogNodeCountsPtr and SignalCatalogNodeCountsPtrOutput values.
// You can construct a concrete instance of `SignalCatalogNodeCountsPtrInput` via:
//
//	        SignalCatalogNodeCountsArgs{...}
//
//	or:
//
//	        nil
type SignalCatalogNodeCountsPtrInput interface {
	pulumi.Input

	ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput
	ToSignalCatalogNodeCountsPtrOutputWithContext(context.Context) SignalCatalogNodeCountsPtrOutput
}

type signalCatalogNodeCountsPtrType SignalCatalogNodeCountsArgs

func SignalCatalogNodeCountsPtr(v *SignalCatalogNodeCountsArgs) SignalCatalogNodeCountsPtrInput {
	return (*signalCatalogNodeCountsPtrType)(v)
}

func (*signalCatalogNodeCountsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogNodeCounts)(nil)).Elem()
}

func (i *signalCatalogNodeCountsPtrType) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return i.ToSignalCatalogNodeCountsPtrOutputWithContext(context.Background())
}

func (i *signalCatalogNodeCountsPtrType) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogNodeCountsPtrOutput)
}

type SignalCatalogNodeCountsOutput struct{ *pulumi.OutputState }

func (SignalCatalogNodeCountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogNodeCounts)(nil)).Elem()
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsOutput() SignalCatalogNodeCountsOutput {
	return o
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsOutputWithContext(ctx context.Context) SignalCatalogNodeCountsOutput {
	return o
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return o.ToSignalCatalogNodeCountsPtrOutputWithContext(context.Background())
}

func (o SignalCatalogNodeCountsOutput) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalCatalogNodeCounts) *SignalCatalogNodeCounts {
		return &v
	}).(SignalCatalogNodeCountsPtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalActuators() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalActuators }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalAttributes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalAttributes }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalBranches() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalBranches }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalNodes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalNodes }).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsOutput) TotalSensors() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SignalCatalogNodeCounts) *float64 { return v.TotalSensors }).(pulumi.Float64PtrOutput)
}

type SignalCatalogNodeCountsPtrOutput struct{ *pulumi.OutputState }

func (SignalCatalogNodeCountsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalCatalogNodeCounts)(nil)).Elem()
}

func (o SignalCatalogNodeCountsPtrOutput) ToSignalCatalogNodeCountsPtrOutput() SignalCatalogNodeCountsPtrOutput {
	return o
}

func (o SignalCatalogNodeCountsPtrOutput) ToSignalCatalogNodeCountsPtrOutputWithContext(ctx context.Context) SignalCatalogNodeCountsPtrOutput {
	return o
}

func (o SignalCatalogNodeCountsPtrOutput) Elem() SignalCatalogNodeCountsOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) SignalCatalogNodeCounts {
		if v != nil {
			return *v
		}
		var ret SignalCatalogNodeCounts
		return ret
	}).(SignalCatalogNodeCountsOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalActuators() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalActuators
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalAttributes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalAttributes
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalBranches() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalBranches
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalNodes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalNodes
	}).(pulumi.Float64PtrOutput)
}

func (o SignalCatalogNodeCountsPtrOutput) TotalSensors() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SignalCatalogNodeCounts) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalSensors
	}).(pulumi.Float64PtrOutput)
}

type SignalCatalogSensor struct {
	AllowedValues      []string                  `pulumi:"allowedValues"`
	DataType           SignalCatalogNodeDataType `pulumi:"dataType"`
	Description        *string                   `pulumi:"description"`
	FullyQualifiedName string                    `pulumi:"fullyQualifiedName"`
	Max                *float64                  `pulumi:"max"`
	Min                *float64                  `pulumi:"min"`
	Unit               *string                   `pulumi:"unit"`
}

type SignalCatalogTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SignalCatalogTagInput is an input type that accepts SignalCatalogTagArgs and SignalCatalogTagOutput values.
// You can construct a concrete instance of `SignalCatalogTagInput` via:
//
//	SignalCatalogTagArgs{...}
type SignalCatalogTagInput interface {
	pulumi.Input

	ToSignalCatalogTagOutput() SignalCatalogTagOutput
	ToSignalCatalogTagOutputWithContext(context.Context) SignalCatalogTagOutput
}

type SignalCatalogTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SignalCatalogTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogTag)(nil)).Elem()
}

func (i SignalCatalogTagArgs) ToSignalCatalogTagOutput() SignalCatalogTagOutput {
	return i.ToSignalCatalogTagOutputWithContext(context.Background())
}

func (i SignalCatalogTagArgs) ToSignalCatalogTagOutputWithContext(ctx context.Context) SignalCatalogTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogTagOutput)
}

// SignalCatalogTagArrayInput is an input type that accepts SignalCatalogTagArray and SignalCatalogTagArrayOutput values.
// You can construct a concrete instance of `SignalCatalogTagArrayInput` via:
//
//	SignalCatalogTagArray{ SignalCatalogTagArgs{...} }
type SignalCatalogTagArrayInput interface {
	pulumi.Input

	ToSignalCatalogTagArrayOutput() SignalCatalogTagArrayOutput
	ToSignalCatalogTagArrayOutputWithContext(context.Context) SignalCatalogTagArrayOutput
}

type SignalCatalogTagArray []SignalCatalogTagInput

func (SignalCatalogTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalCatalogTag)(nil)).Elem()
}

func (i SignalCatalogTagArray) ToSignalCatalogTagArrayOutput() SignalCatalogTagArrayOutput {
	return i.ToSignalCatalogTagArrayOutputWithContext(context.Background())
}

func (i SignalCatalogTagArray) ToSignalCatalogTagArrayOutputWithContext(ctx context.Context) SignalCatalogTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalCatalogTagArrayOutput)
}

type SignalCatalogTagOutput struct{ *pulumi.OutputState }

func (SignalCatalogTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalCatalogTag)(nil)).Elem()
}

func (o SignalCatalogTagOutput) ToSignalCatalogTagOutput() SignalCatalogTagOutput {
	return o
}

func (o SignalCatalogTagOutput) ToSignalCatalogTagOutputWithContext(ctx context.Context) SignalCatalogTagOutput {
	return o
}

func (o SignalCatalogTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SignalCatalogTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o SignalCatalogTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SignalCatalogTag) string { return v.Value }).(pulumi.StringOutput)
}

type SignalCatalogTagArrayOutput struct{ *pulumi.OutputState }

func (SignalCatalogTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalCatalogTag)(nil)).Elem()
}

func (o SignalCatalogTagArrayOutput) ToSignalCatalogTagArrayOutput() SignalCatalogTagArrayOutput {
	return o
}

func (o SignalCatalogTagArrayOutput) ToSignalCatalogTagArrayOutputWithContext(ctx context.Context) SignalCatalogTagArrayOutput {
	return o
}

func (o SignalCatalogTagArrayOutput) Index(i pulumi.IntInput) SignalCatalogTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalCatalogTag {
		return vs[0].([]SignalCatalogTag)[vs[1].(int)]
	}).(SignalCatalogTagOutput)
}

type VehicleTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VehicleTagInput is an input type that accepts VehicleTagArgs and VehicleTagOutput values.
// You can construct a concrete instance of `VehicleTagInput` via:
//
//	VehicleTagArgs{...}
type VehicleTagInput interface {
	pulumi.Input

	ToVehicleTagOutput() VehicleTagOutput
	ToVehicleTagOutputWithContext(context.Context) VehicleTagOutput
}

type VehicleTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VehicleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VehicleTag)(nil)).Elem()
}

func (i VehicleTagArgs) ToVehicleTagOutput() VehicleTagOutput {
	return i.ToVehicleTagOutputWithContext(context.Background())
}

func (i VehicleTagArgs) ToVehicleTagOutputWithContext(ctx context.Context) VehicleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleTagOutput)
}

// VehicleTagArrayInput is an input type that accepts VehicleTagArray and VehicleTagArrayOutput values.
// You can construct a concrete instance of `VehicleTagArrayInput` via:
//
//	VehicleTagArray{ VehicleTagArgs{...} }
type VehicleTagArrayInput interface {
	pulumi.Input

	ToVehicleTagArrayOutput() VehicleTagArrayOutput
	ToVehicleTagArrayOutputWithContext(context.Context) VehicleTagArrayOutput
}

type VehicleTagArray []VehicleTagInput

func (VehicleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VehicleTag)(nil)).Elem()
}

func (i VehicleTagArray) ToVehicleTagArrayOutput() VehicleTagArrayOutput {
	return i.ToVehicleTagArrayOutputWithContext(context.Background())
}

func (i VehicleTagArray) ToVehicleTagArrayOutputWithContext(ctx context.Context) VehicleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleTagArrayOutput)
}

type VehicleTagOutput struct{ *pulumi.OutputState }

func (VehicleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VehicleTag)(nil)).Elem()
}

func (o VehicleTagOutput) ToVehicleTagOutput() VehicleTagOutput {
	return o
}

func (o VehicleTagOutput) ToVehicleTagOutputWithContext(ctx context.Context) VehicleTagOutput {
	return o
}

func (o VehicleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VehicleTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o VehicleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VehicleTag) string { return v.Value }).(pulumi.StringOutput)
}

type VehicleTagArrayOutput struct{ *pulumi.OutputState }

func (VehicleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VehicleTag)(nil)).Elem()
}

func (o VehicleTagArrayOutput) ToVehicleTagArrayOutput() VehicleTagArrayOutput {
	return o
}

func (o VehicleTagArrayOutput) ToVehicleTagArrayOutputWithContext(ctx context.Context) VehicleTagArrayOutput {
	return o
}

func (o VehicleTagArrayOutput) Index(i pulumi.IntInput) VehicleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VehicleTag {
		return vs[0].([]VehicleTag)[vs[1].(int)]
	}).(VehicleTagOutput)
}

type VehicleattributesMap struct {
}

// VehicleattributesMapInput is an input type that accepts VehicleattributesMap and VehicleattributesMapOutput values.
// You can construct a concrete instance of `VehicleattributesMapInput` via:
//
//	VehicleattributesMap{ "key": VehicleattributesArgs{...} }
type VehicleattributesMapInput interface {
	pulumi.Input

	ToVehicleattributesMapOutput() VehicleattributesMapOutput
	ToVehicleattributesMapOutputWithContext(context.Context) VehicleattributesMapOutput
}

type VehicleattributesMapArgs struct {
}

func (VehicleattributesMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VehicleattributesMap)(nil)).Elem()
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapOutput() VehicleattributesMapOutput {
	return i.ToVehicleattributesMapOutputWithContext(context.Background())
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapOutputWithContext(ctx context.Context) VehicleattributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleattributesMapOutput)
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return i.ToVehicleattributesMapPtrOutputWithContext(context.Background())
}

func (i VehicleattributesMapArgs) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleattributesMapOutput).ToVehicleattributesMapPtrOutputWithContext(ctx)
}

// VehicleattributesMapPtrInput is an input type that accepts VehicleattributesMapArgs, VehicleattributesMapPtr and VehicleattributesMapPtrOutput values.
// You can construct a concrete instance of `VehicleattributesMapPtrInput` via:
//
//	        VehicleattributesMapArgs{...}
//
//	or:
//
//	        nil
type VehicleattributesMapPtrInput interface {
	pulumi.Input

	ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput
	ToVehicleattributesMapPtrOutputWithContext(context.Context) VehicleattributesMapPtrOutput
}

type vehicleattributesMapPtrType VehicleattributesMapArgs

func VehicleattributesMapPtr(v *VehicleattributesMapArgs) VehicleattributesMapPtrInput {
	return (*vehicleattributesMapPtrType)(v)
}

func (*vehicleattributesMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VehicleattributesMap)(nil)).Elem()
}

func (i *vehicleattributesMapPtrType) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return i.ToVehicleattributesMapPtrOutputWithContext(context.Background())
}

func (i *vehicleattributesMapPtrType) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VehicleattributesMapPtrOutput)
}

type VehicleattributesMapOutput struct{ *pulumi.OutputState }

func (VehicleattributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VehicleattributesMap)(nil)).Elem()
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapOutput() VehicleattributesMapOutput {
	return o
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapOutputWithContext(ctx context.Context) VehicleattributesMapOutput {
	return o
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return o.ToVehicleattributesMapPtrOutputWithContext(context.Background())
}

func (o VehicleattributesMapOutput) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VehicleattributesMap) *VehicleattributesMap {
		return &v
	}).(VehicleattributesMapPtrOutput)
}

type VehicleattributesMapPtrOutput struct{ *pulumi.OutputState }

func (VehicleattributesMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VehicleattributesMap)(nil)).Elem()
}

func (o VehicleattributesMapPtrOutput) ToVehicleattributesMapPtrOutput() VehicleattributesMapPtrOutput {
	return o
}

func (o VehicleattributesMapPtrOutput) ToVehicleattributesMapPtrOutputWithContext(ctx context.Context) VehicleattributesMapPtrOutput {
	return o
}

func (o VehicleattributesMapPtrOutput) Elem() VehicleattributesMapOutput {
	return o.ApplyT(func(v *VehicleattributesMap) VehicleattributesMap {
		if v != nil {
			return *v
		}
		var ret VehicleattributesMap
		return ret
	}).(VehicleattributesMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignSignalInformationInput)(nil)).Elem(), CampaignSignalInformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignSignalInformationArrayInput)(nil)).Elem(), CampaignSignalInformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignTagInput)(nil)).Elem(), CampaignTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CampaignTagArrayInput)(nil)).Elem(), CampaignTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestTagInput)(nil)).Elem(), DecoderManifestTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DecoderManifestTagArrayInput)(nil)).Elem(), DecoderManifestTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetTagInput)(nil)).Elem(), FleetTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetTagArrayInput)(nil)).Elem(), FleetTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelManifestTagInput)(nil)).Elem(), ModelManifestTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelManifestTagArrayInput)(nil)).Elem(), ModelManifestTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNodeCountsInput)(nil)).Elem(), SignalCatalogNodeCountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogNodeCountsPtrInput)(nil)).Elem(), SignalCatalogNodeCountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogTagInput)(nil)).Elem(), SignalCatalogTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignalCatalogTagArrayInput)(nil)).Elem(), SignalCatalogTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VehicleTagInput)(nil)).Elem(), VehicleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VehicleTagArrayInput)(nil)).Elem(), VehicleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VehicleattributesMapInput)(nil)).Elem(), VehicleattributesMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VehicleattributesMapPtrInput)(nil)).Elem(), VehicleattributesMapArgs{})
	pulumi.RegisterOutputType(CampaignSignalInformationOutput{})
	pulumi.RegisterOutputType(CampaignSignalInformationArrayOutput{})
	pulumi.RegisterOutputType(CampaignTagOutput{})
	pulumi.RegisterOutputType(CampaignTagArrayOutput{})
	pulumi.RegisterOutputType(DecoderManifestTagOutput{})
	pulumi.RegisterOutputType(DecoderManifestTagArrayOutput{})
	pulumi.RegisterOutputType(FleetTagOutput{})
	pulumi.RegisterOutputType(FleetTagArrayOutput{})
	pulumi.RegisterOutputType(ModelManifestTagOutput{})
	pulumi.RegisterOutputType(ModelManifestTagArrayOutput{})
	pulumi.RegisterOutputType(SignalCatalogNodeCountsOutput{})
	pulumi.RegisterOutputType(SignalCatalogNodeCountsPtrOutput{})
	pulumi.RegisterOutputType(SignalCatalogTagOutput{})
	pulumi.RegisterOutputType(SignalCatalogTagArrayOutput{})
	pulumi.RegisterOutputType(VehicleTagOutput{})
	pulumi.RegisterOutputType(VehicleTagArrayOutput{})
	pulumi.RegisterOutputType(VehicleattributesMapOutput{})
	pulumi.RegisterOutputType(VehicleattributesMapPtrOutput{})
}
