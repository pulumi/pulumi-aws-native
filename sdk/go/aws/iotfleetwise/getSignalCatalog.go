// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotfleetwise

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::IoTFleetWise::SignalCatalog Resource Type
func LookupSignalCatalog(ctx *pulumi.Context, args *LookupSignalCatalogArgs, opts ...pulumi.InvokeOption) (*LookupSignalCatalogResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSignalCatalogResult
	err := ctx.Invoke("aws-native:iotfleetwise:getSignalCatalog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSignalCatalogArgs struct {
	Name string `pulumi:"name"`
}

type LookupSignalCatalogResult struct {
	Arn                  *string                  `pulumi:"arn"`
	CreationTime         *string                  `pulumi:"creationTime"`
	Description          *string                  `pulumi:"description"`
	LastModificationTime *string                  `pulumi:"lastModificationTime"`
	NodeCounts           *SignalCatalogNodeCounts `pulumi:"nodeCounts"`
	Nodes                []SignalCatalogNode      `pulumi:"nodes"`
	Tags                 []SignalCatalogTag       `pulumi:"tags"`
}

func LookupSignalCatalogOutput(ctx *pulumi.Context, args LookupSignalCatalogOutputArgs, opts ...pulumi.InvokeOption) LookupSignalCatalogResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSignalCatalogResult, error) {
			args := v.(LookupSignalCatalogArgs)
			r, err := LookupSignalCatalog(ctx, &args, opts...)
			var s LookupSignalCatalogResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSignalCatalogResultOutput)
}

type LookupSignalCatalogOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSignalCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSignalCatalogArgs)(nil)).Elem()
}

type LookupSignalCatalogResultOutput struct{ *pulumi.OutputState }

func (LookupSignalCatalogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSignalCatalogResult)(nil)).Elem()
}

func (o LookupSignalCatalogResultOutput) ToLookupSignalCatalogResultOutput() LookupSignalCatalogResultOutput {
	return o
}

func (o LookupSignalCatalogResultOutput) ToLookupSignalCatalogResultOutputWithContext(ctx context.Context) LookupSignalCatalogResultOutput {
	return o
}

func (o LookupSignalCatalogResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupSignalCatalogResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

func (o LookupSignalCatalogResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupSignalCatalogResultOutput) LastModificationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) *string { return v.LastModificationTime }).(pulumi.StringPtrOutput)
}

func (o LookupSignalCatalogResultOutput) NodeCounts() SignalCatalogNodeCountsPtrOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) *SignalCatalogNodeCounts { return v.NodeCounts }).(SignalCatalogNodeCountsPtrOutput)
}

func (o LookupSignalCatalogResultOutput) Nodes() SignalCatalogNodeArrayOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) []SignalCatalogNode { return v.Nodes }).(SignalCatalogNodeArrayOutput)
}

func (o LookupSignalCatalogResultOutput) Tags() SignalCatalogTagArrayOutput {
	return o.ApplyT(func(v LookupSignalCatalogResult) []SignalCatalogTag { return v.Tags }).(SignalCatalogTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSignalCatalogResultOutput{})
}
