// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotfleetwise

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::IoTFleetWise::ModelManifest Resource Type
func LookupModelManifest(ctx *pulumi.Context, args *LookupModelManifestArgs, opts ...pulumi.InvokeOption) (*LookupModelManifestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupModelManifestResult
	err := ctx.Invoke("aws-native:iotfleetwise:getModelManifest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupModelManifestArgs struct {
	Name string `pulumi:"name"`
}

type LookupModelManifestResult struct {
	Arn                  *string                      `pulumi:"arn"`
	CreationTime         *string                      `pulumi:"creationTime"`
	Description          *string                      `pulumi:"description"`
	LastModificationTime *string                      `pulumi:"lastModificationTime"`
	Nodes                []string                     `pulumi:"nodes"`
	SignalCatalogArn     *string                      `pulumi:"signalCatalogArn"`
	Status               *ModelManifestManifestStatus `pulumi:"status"`
	Tags                 []ModelManifestTag           `pulumi:"tags"`
}

func LookupModelManifestOutput(ctx *pulumi.Context, args LookupModelManifestOutputArgs, opts ...pulumi.InvokeOption) LookupModelManifestResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupModelManifestResult, error) {
			args := v.(LookupModelManifestArgs)
			r, err := LookupModelManifest(ctx, &args, opts...)
			var s LookupModelManifestResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupModelManifestResultOutput)
}

type LookupModelManifestOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupModelManifestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelManifestArgs)(nil)).Elem()
}

type LookupModelManifestResultOutput struct{ *pulumi.OutputState }

func (LookupModelManifestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelManifestResult)(nil)).Elem()
}

func (o LookupModelManifestResultOutput) ToLookupModelManifestResultOutput() LookupModelManifestResultOutput {
	return o
}

func (o LookupModelManifestResultOutput) ToLookupModelManifestResultOutputWithContext(ctx context.Context) LookupModelManifestResultOutput {
	return o
}

func (o LookupModelManifestResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelManifestResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupModelManifestResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelManifestResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

func (o LookupModelManifestResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelManifestResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupModelManifestResultOutput) LastModificationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelManifestResult) *string { return v.LastModificationTime }).(pulumi.StringPtrOutput)
}

func (o LookupModelManifestResultOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupModelManifestResult) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

func (o LookupModelManifestResultOutput) SignalCatalogArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelManifestResult) *string { return v.SignalCatalogArn }).(pulumi.StringPtrOutput)
}

func (o LookupModelManifestResultOutput) Status() ModelManifestManifestStatusPtrOutput {
	return o.ApplyT(func(v LookupModelManifestResult) *ModelManifestManifestStatus { return v.Status }).(ModelManifestManifestStatusPtrOutput)
}

func (o LookupModelManifestResultOutput) Tags() ModelManifestTagArrayOutput {
	return o.ApplyT(func(v LookupModelManifestResult) []ModelManifestTag { return v.Tags }).(ModelManifestTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModelManifestResultOutput{})
}
