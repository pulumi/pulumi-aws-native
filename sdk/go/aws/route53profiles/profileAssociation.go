// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53profiles

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Route53Profiles::ProfileAssociation
type ProfileAssociation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the  profile association.
	Arn pulumi.StringPtrOutput `pulumi:"arn"`
	// Primary Identifier for  Profile Association
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The name of an association between a  Profile and a VPC.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the  profile that you associated with the resource that is specified by ResourceId.
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// The resource that you associated the  profile with.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewProfileAssociation registers a new resource with the given unique name, arguments, and options.
func NewProfileAssociation(ctx *pulumi.Context,
	name string, args *ProfileAssociationArgs, opts ...pulumi.ResourceOption) (*ProfileAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"profileId",
		"resourceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProfileAssociation
	err := ctx.RegisterResource("aws-native:route53profiles:ProfileAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileAssociation gets an existing ProfileAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileAssociationState, opts ...pulumi.ResourceOption) (*ProfileAssociation, error) {
	var resource ProfileAssociation
	err := ctx.ReadResource("aws-native:route53profiles:ProfileAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileAssociation resources.
type profileAssociationState struct {
}

type ProfileAssociationState struct {
}

func (ProfileAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileAssociationState)(nil)).Elem()
}

type profileAssociationArgs struct {
	// The Amazon Resource Name (ARN) of the  profile association.
	Arn *string `pulumi:"arn"`
	// The name of an association between a  Profile and a VPC.
	Name *string `pulumi:"name"`
	// The ID of the  profile that you associated with the resource that is specified by ResourceId.
	ProfileId string `pulumi:"profileId"`
	// The resource that you associated the  profile with.
	ResourceId string `pulumi:"resourceId"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a ProfileAssociation resource.
type ProfileAssociationArgs struct {
	// The Amazon Resource Name (ARN) of the  profile association.
	Arn pulumi.StringPtrInput
	// The name of an association between a  Profile and a VPC.
	Name pulumi.StringPtrInput
	// The ID of the  profile that you associated with the resource that is specified by ResourceId.
	ProfileId pulumi.StringInput
	// The resource that you associated the  profile with.
	ResourceId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (ProfileAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileAssociationArgs)(nil)).Elem()
}

type ProfileAssociationInput interface {
	pulumi.Input

	ToProfileAssociationOutput() ProfileAssociationOutput
	ToProfileAssociationOutputWithContext(ctx context.Context) ProfileAssociationOutput
}

func (*ProfileAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileAssociation)(nil)).Elem()
}

func (i *ProfileAssociation) ToProfileAssociationOutput() ProfileAssociationOutput {
	return i.ToProfileAssociationOutputWithContext(context.Background())
}

func (i *ProfileAssociation) ToProfileAssociationOutputWithContext(ctx context.Context) ProfileAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileAssociationOutput)
}

type ProfileAssociationOutput struct{ *pulumi.OutputState }

func (ProfileAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileAssociation)(nil)).Elem()
}

func (o ProfileAssociationOutput) ToProfileAssociationOutput() ProfileAssociationOutput {
	return o
}

func (o ProfileAssociationOutput) ToProfileAssociationOutputWithContext(ctx context.Context) ProfileAssociationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the  profile association.
func (o ProfileAssociationOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileAssociation) pulumi.StringPtrOutput { return v.Arn }).(pulumi.StringPtrOutput)
}

// Primary Identifier for  Profile Association
func (o ProfileAssociationOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileAssociation) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The name of an association between a  Profile and a VPC.
func (o ProfileAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the  profile that you associated with the resource that is specified by ResourceId.
func (o ProfileAssociationOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileAssociation) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// The resource that you associated the  profile with.
func (o ProfileAssociationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileAssociation) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ProfileAssociationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *ProfileAssociation) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileAssociationInput)(nil)).Elem(), &ProfileAssociation{})
	pulumi.RegisterOutputType(ProfileAssociationOutput{})
}
