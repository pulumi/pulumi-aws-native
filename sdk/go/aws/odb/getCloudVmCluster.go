// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package odb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster
func LookupCloudVmCluster(ctx *pulumi.Context, args *LookupCloudVmClusterArgs, opts ...pulumi.InvokeOption) (*LookupCloudVmClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudVmClusterResult
	err := ctx.Invoke("aws-native:odb:getCloudVmCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCloudVmClusterArgs struct {
	// The Amazon Resource Name (ARN) of the VM cluster.
	CloudVmClusterArn string `pulumi:"cloudVmClusterArn"`
}

type LookupCloudVmClusterResult struct {
	// The Amazon Resource Name (ARN) of the VM cluster.
	CloudVmClusterArn *string `pulumi:"cloudVmClusterArn"`
	// The unique identifier of the VM cluster.
	CloudVmClusterId *string `pulumi:"cloudVmClusterId"`
	// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
	ComputeModel *string `pulumi:"computeModel"`
	// The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
	DiskRedundancy *string `pulumi:"diskRedundancy"`
	// The domain of the VM cluster.
	Domain *string `pulumi:"domain"`
	// The port number configured for the listener on the VM cluster.
	ListenerPort *int `pulumi:"listenerPort"`
	// The number of nodes in the VM cluster.
	NodeCount *int `pulumi:"nodeCount"`
	// The name of the OCI resource anchor for the VM cluster.
	OciResourceAnchorName *string `pulumi:"ociResourceAnchorName"`
	// The HTTPS link to the VM cluster in OCI.
	OciUrl *string `pulumi:"ociUrl"`
	// The OCID of the VM cluster.
	Ocid *string `pulumi:"ocid"`
	// The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
	ScanDnsName *string `pulumi:"scanDnsName"`
	// The OCID of the SCAN IP addresses that are associated with the VM cluster.
	ScanIpIds []string `pulumi:"scanIpIds"`
	// The hardware model name of the Exadata infrastructure that's running the VM cluster.
	Shape *string `pulumi:"shape"`
	// The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
	StorageSizeInGbs *int `pulumi:"storageSizeInGbs"`
	// Tags to assign to the Vm Cluster.
	Tags []aws.Tag `pulumi:"tags"`
	// The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
	VipIds []string `pulumi:"vipIds"`
}

func LookupCloudVmClusterOutput(ctx *pulumi.Context, args LookupCloudVmClusterOutputArgs, opts ...pulumi.InvokeOption) LookupCloudVmClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCloudVmClusterResultOutput, error) {
			args := v.(LookupCloudVmClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:odb:getCloudVmCluster", args, LookupCloudVmClusterResultOutput{}, options).(LookupCloudVmClusterResultOutput), nil
		}).(LookupCloudVmClusterResultOutput)
}

type LookupCloudVmClusterOutputArgs struct {
	// The Amazon Resource Name (ARN) of the VM cluster.
	CloudVmClusterArn pulumi.StringInput `pulumi:"cloudVmClusterArn"`
}

func (LookupCloudVmClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudVmClusterArgs)(nil)).Elem()
}

type LookupCloudVmClusterResultOutput struct{ *pulumi.OutputState }

func (LookupCloudVmClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudVmClusterResult)(nil)).Elem()
}

func (o LookupCloudVmClusterResultOutput) ToLookupCloudVmClusterResultOutput() LookupCloudVmClusterResultOutput {
	return o
}

func (o LookupCloudVmClusterResultOutput) ToLookupCloudVmClusterResultOutputWithContext(ctx context.Context) LookupCloudVmClusterResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the VM cluster.
func (o LookupCloudVmClusterResultOutput) CloudVmClusterArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.CloudVmClusterArn }).(pulumi.StringPtrOutput)
}

// The unique identifier of the VM cluster.
func (o LookupCloudVmClusterResultOutput) CloudVmClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.CloudVmClusterId }).(pulumi.StringPtrOutput)
}

// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
func (o LookupCloudVmClusterResultOutput) ComputeModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.ComputeModel }).(pulumi.StringPtrOutput)
}

// The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
func (o LookupCloudVmClusterResultOutput) DiskRedundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.DiskRedundancy }).(pulumi.StringPtrOutput)
}

// The domain of the VM cluster.
func (o LookupCloudVmClusterResultOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The port number configured for the listener on the VM cluster.
func (o LookupCloudVmClusterResultOutput) ListenerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *int { return v.ListenerPort }).(pulumi.IntPtrOutput)
}

// The number of nodes in the VM cluster.
func (o LookupCloudVmClusterResultOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// The name of the OCI resource anchor for the VM cluster.
func (o LookupCloudVmClusterResultOutput) OciResourceAnchorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.OciResourceAnchorName }).(pulumi.StringPtrOutput)
}

// The HTTPS link to the VM cluster in OCI.
func (o LookupCloudVmClusterResultOutput) OciUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.OciUrl }).(pulumi.StringPtrOutput)
}

// The OCID of the VM cluster.
func (o LookupCloudVmClusterResultOutput) Ocid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.Ocid }).(pulumi.StringPtrOutput)
}

// The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
func (o LookupCloudVmClusterResultOutput) ScanDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.ScanDnsName }).(pulumi.StringPtrOutput)
}

// The OCID of the SCAN IP addresses that are associated with the VM cluster.
func (o LookupCloudVmClusterResultOutput) ScanIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) []string { return v.ScanIpIds }).(pulumi.StringArrayOutput)
}

// The hardware model name of the Exadata infrastructure that's running the VM cluster.
func (o LookupCloudVmClusterResultOutput) Shape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *string { return v.Shape }).(pulumi.StringPtrOutput)
}

// The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
func (o LookupCloudVmClusterResultOutput) StorageSizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) *int { return v.StorageSizeInGbs }).(pulumi.IntPtrOutput)
}

// Tags to assign to the Vm Cluster.
func (o LookupCloudVmClusterResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
func (o LookupCloudVmClusterResultOutput) VipIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCloudVmClusterResult) []string { return v.VipIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudVmClusterResultOutput{})
}
