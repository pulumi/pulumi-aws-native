// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package odb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure
func LookupCloudExadataInfrastructure(ctx *pulumi.Context, args *LookupCloudExadataInfrastructureArgs, opts ...pulumi.InvokeOption) (*LookupCloudExadataInfrastructureResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudExadataInfrastructureResult
	err := ctx.Invoke("aws-native:odb:getCloudExadataInfrastructure", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCloudExadataInfrastructureArgs struct {
	// The Amazon Resource Name (ARN) for the Exadata infrastructure.
	CloudExadataInfrastructureArn string `pulumi:"cloudExadataInfrastructureArn"`
}

type LookupCloudExadataInfrastructureResult struct {
	// The number of storage servers requested for the Exadata infrastructure.
	ActivatedStorageCount *int `pulumi:"activatedStorageCount"`
	// The number of storage servers requested for the Exadata infrastructure.
	AdditionalStorageCount *int `pulumi:"additionalStorageCount"`
	// The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.
	AvailableStorageSizeInGbs *int `pulumi:"availableStorageSizeInGbs"`
	// The Amazon Resource Name (ARN) for the Exadata infrastructure.
	CloudExadataInfrastructureArn *string `pulumi:"cloudExadataInfrastructureArn"`
	// The unique identifier for the Exadata infrastructure.
	CloudExadataInfrastructureId *string `pulumi:"cloudExadataInfrastructureId"`
	// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
	ComputeModel *string `pulumi:"computeModel"`
	// The total number of CPU cores that are allocated to the Exadata infrastructure.
	CpuCount *int `pulumi:"cpuCount"`
	// The size of the Exadata infrastructure's data disk group, in terabytes (TB).
	DataStorageSizeInTbs *float64 `pulumi:"dataStorageSizeInTbs"`
	// The size of the Exadata infrastructure's local node storage, in gigabytes (GB).
	DbNodeStorageSizeInGbs *int `pulumi:"dbNodeStorageSizeInGbs"`
	// The list of database server identifiers for the Exadata infrastructure.
	DbServerIds []string `pulumi:"dbServerIds"`
	// The software version of the database servers (dom0) in the Exadata infrastructure.
	DbServerVersion *string `pulumi:"dbServerVersion"`
	// The total number of CPU cores available on the Exadata infrastructure.
	MaxCpuCount *int `pulumi:"maxCpuCount"`
	// The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.
	MaxDataStorageInTbs *float64 `pulumi:"maxDataStorageInTbs"`
	// The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.
	MaxDbNodeStorageSizeInGbs *int `pulumi:"maxDbNodeStorageSizeInGbs"`
	// The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.
	MaxMemoryInGbs *int `pulumi:"maxMemoryInGbs"`
	// The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.
	MemorySizeInGbs *int `pulumi:"memorySizeInGbs"`
	// The name of the OCI resource anchor for the Exadata infrastructure.
	OciResourceAnchorName *string `pulumi:"ociResourceAnchorName"`
	// The HTTPS link to the Exadata infrastructure in OCI.
	OciUrl *string `pulumi:"ociUrl"`
	// The OCID of the Exadata infrastructure.
	Ocid *string `pulumi:"ocid"`
	// The software version of the storage servers on the Exadata infrastructure.
	StorageServerVersion *string `pulumi:"storageServerVersion"`
	// Tags to assign to the Exadata Infrastructure.
	Tags []aws.Tag `pulumi:"tags"`
	// The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.
	TotalStorageSizeInGbs *int `pulumi:"totalStorageSizeInGbs"`
}

func LookupCloudExadataInfrastructureOutput(ctx *pulumi.Context, args LookupCloudExadataInfrastructureOutputArgs, opts ...pulumi.InvokeOption) LookupCloudExadataInfrastructureResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCloudExadataInfrastructureResultOutput, error) {
			args := v.(LookupCloudExadataInfrastructureArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:odb:getCloudExadataInfrastructure", args, LookupCloudExadataInfrastructureResultOutput{}, options).(LookupCloudExadataInfrastructureResultOutput), nil
		}).(LookupCloudExadataInfrastructureResultOutput)
}

type LookupCloudExadataInfrastructureOutputArgs struct {
	// The Amazon Resource Name (ARN) for the Exadata infrastructure.
	CloudExadataInfrastructureArn pulumi.StringInput `pulumi:"cloudExadataInfrastructureArn"`
}

func (LookupCloudExadataInfrastructureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudExadataInfrastructureArgs)(nil)).Elem()
}

type LookupCloudExadataInfrastructureResultOutput struct{ *pulumi.OutputState }

func (LookupCloudExadataInfrastructureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudExadataInfrastructureResult)(nil)).Elem()
}

func (o LookupCloudExadataInfrastructureResultOutput) ToLookupCloudExadataInfrastructureResultOutput() LookupCloudExadataInfrastructureResultOutput {
	return o
}

func (o LookupCloudExadataInfrastructureResultOutput) ToLookupCloudExadataInfrastructureResultOutputWithContext(ctx context.Context) LookupCloudExadataInfrastructureResultOutput {
	return o
}

// The number of storage servers requested for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) ActivatedStorageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.ActivatedStorageCount }).(pulumi.IntPtrOutput)
}

// The number of storage servers requested for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) AdditionalStorageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.AdditionalStorageCount }).(pulumi.IntPtrOutput)
}

// The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) AvailableStorageSizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.AvailableStorageSizeInGbs }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) CloudExadataInfrastructureArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.CloudExadataInfrastructureArn }).(pulumi.StringPtrOutput)
}

// The unique identifier for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) CloudExadataInfrastructureId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.CloudExadataInfrastructureId }).(pulumi.StringPtrOutput)
}

// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
func (o LookupCloudExadataInfrastructureResultOutput) ComputeModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.ComputeModel }).(pulumi.StringPtrOutput)
}

// The total number of CPU cores that are allocated to the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

// The size of the Exadata infrastructure's data disk group, in terabytes (TB).
func (o LookupCloudExadataInfrastructureResultOutput) DataStorageSizeInTbs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *float64 { return v.DataStorageSizeInTbs }).(pulumi.Float64PtrOutput)
}

// The size of the Exadata infrastructure's local node storage, in gigabytes (GB).
func (o LookupCloudExadataInfrastructureResultOutput) DbNodeStorageSizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.DbNodeStorageSizeInGbs }).(pulumi.IntPtrOutput)
}

// The list of database server identifiers for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) DbServerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) []string { return v.DbServerIds }).(pulumi.StringArrayOutput)
}

// The software version of the database servers (dom0) in the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) DbServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.DbServerVersion }).(pulumi.StringPtrOutput)
}

// The total number of CPU cores available on the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) MaxCpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.MaxCpuCount }).(pulumi.IntPtrOutput)
}

// The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) MaxDataStorageInTbs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *float64 { return v.MaxDataStorageInTbs }).(pulumi.Float64PtrOutput)
}

// The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) MaxDbNodeStorageSizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.MaxDbNodeStorageSizeInGbs }).(pulumi.IntPtrOutput)
}

// The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) MaxMemoryInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.MaxMemoryInGbs }).(pulumi.IntPtrOutput)
}

// The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) MemorySizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.MemorySizeInGbs }).(pulumi.IntPtrOutput)
}

// The name of the OCI resource anchor for the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) OciResourceAnchorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.OciResourceAnchorName }).(pulumi.StringPtrOutput)
}

// The HTTPS link to the Exadata infrastructure in OCI.
func (o LookupCloudExadataInfrastructureResultOutput) OciUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.OciUrl }).(pulumi.StringPtrOutput)
}

// The OCID of the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) Ocid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.Ocid }).(pulumi.StringPtrOutput)
}

// The software version of the storage servers on the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) StorageServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *string { return v.StorageServerVersion }).(pulumi.StringPtrOutput)
}

// Tags to assign to the Exadata Infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.
func (o LookupCloudExadataInfrastructureResultOutput) TotalStorageSizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudExadataInfrastructureResult) *int { return v.TotalStorageSizeInGbs }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudExadataInfrastructureResultOutput{})
}
