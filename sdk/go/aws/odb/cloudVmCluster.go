// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package odb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster
type CloudVmCluster struct {
	pulumi.CustomResourceState

	// The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
	CloudExadataInfrastructureId pulumi.StringPtrOutput `pulumi:"cloudExadataInfrastructureId"`
	// The Amazon Resource Name (ARN) of the VM cluster.
	CloudVmClusterArn pulumi.StringOutput `pulumi:"cloudVmClusterArn"`
	// The unique identifier of the VM cluster.
	CloudVmClusterId pulumi.StringOutput `pulumi:"cloudVmClusterId"`
	// The name of the Grid Infrastructure (GI) cluster.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
	ComputeModel pulumi.StringOutput `pulumi:"computeModel"`
	// The number of CPU cores enabled on the VM cluster.
	CpuCoreCount pulumi.IntPtrOutput `pulumi:"cpuCoreCount"`
	// The set of diagnostic collection options enabled for the VM cluster.
	DataCollectionOptions CloudVmClusterDataCollectionOptionsPtrOutput `pulumi:"dataCollectionOptions"`
	// The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
	DataStorageSizeInTbs pulumi.Float64PtrOutput `pulumi:"dataStorageSizeInTbs"`
	// The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
	DbNodeStorageSizeInGbs pulumi.IntPtrOutput `pulumi:"dbNodeStorageSizeInGbs"`
	// The DB nodes that are implicitly created and managed as part of this VM Cluster.
	DbNodes CloudVmClusterDbNodeArrayOutput `pulumi:"dbNodes"`
	// The list of database servers for the VM cluster.
	DbServers pulumi.StringArrayOutput `pulumi:"dbServers"`
	// The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
	DiskRedundancy pulumi.StringOutput `pulumi:"diskRedundancy"`
	// The user-friendly name for the VM cluster.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The domain of the VM cluster.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
	GiVersion pulumi.StringPtrOutput `pulumi:"giVersion"`
	// The host name for the VM cluster.
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
	IsLocalBackupEnabled pulumi.BoolPtrOutput `pulumi:"isLocalBackupEnabled"`
	// Indicates whether the VM cluster is configured with a sparse disk group.
	IsSparseDiskgroupEnabled pulumi.BoolPtrOutput `pulumi:"isSparseDiskgroupEnabled"`
	// The Oracle license model applied to the VM cluster.
	LicenseModel CloudVmClusterLicenseModelPtrOutput `pulumi:"licenseModel"`
	// The port number configured for the listener on the VM cluster.
	ListenerPort pulumi.IntOutput `pulumi:"listenerPort"`
	// The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
	MemorySizeInGbs pulumi.IntPtrOutput `pulumi:"memorySizeInGbs"`
	// The number of nodes in the VM cluster.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// The name of the OCI resource anchor for the VM cluster.
	OciResourceAnchorName pulumi.StringOutput `pulumi:"ociResourceAnchorName"`
	// The HTTPS link to the VM cluster in OCI.
	OciUrl pulumi.StringOutput `pulumi:"ociUrl"`
	// The OCID of the VM cluster.
	Ocid pulumi.StringOutput `pulumi:"ocid"`
	// The unique identifier of the ODB network for the VM cluster.
	OdbNetworkId pulumi.StringPtrOutput `pulumi:"odbNetworkId"`
	// The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
	ScanDnsName pulumi.StringOutput `pulumi:"scanDnsName"`
	// The OCID of the SCAN IP addresses that are associated with the VM cluster.
	ScanIpIds pulumi.StringArrayOutput `pulumi:"scanIpIds"`
	// Property description not available.
	ScanListenerPortTcp pulumi.IntPtrOutput `pulumi:"scanListenerPortTcp"`
	// The hardware model name of the Exadata infrastructure that's running the VM cluster.
	Shape pulumi.StringOutput `pulumi:"shape"`
	// The public key portion of one or more key pairs used for SSH access to the VM cluster.
	SshPublicKeys pulumi.StringArrayOutput `pulumi:"sshPublicKeys"`
	// The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
	StorageSizeInGbs pulumi.IntOutput `pulumi:"storageSizeInGbs"`
	// The operating system version of the image chosen for the VM cluster.
	SystemVersion pulumi.StringPtrOutput `pulumi:"systemVersion"`
	// Tags to assign to the Vm Cluster.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The time zone of the VM cluster.
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
	// The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
	VipIds pulumi.StringArrayOutput `pulumi:"vipIds"`
}

// NewCloudVmCluster registers a new resource with the given unique name, arguments, and options.
func NewCloudVmCluster(ctx *pulumi.Context,
	name string, args *CloudVmClusterArgs, opts ...pulumi.ResourceOption) (*CloudVmCluster, error) {
	if args == nil {
		args = &CloudVmClusterArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cloudExadataInfrastructureId",
		"clusterName",
		"cpuCoreCount",
		"dataCollectionOptions",
		"dataStorageSizeInTbs",
		"dbNodeStorageSizeInGbs",
		"dbNodes[*].dbServerId",
		"dbServers[*]",
		"displayName",
		"giVersion",
		"hostname",
		"isLocalBackupEnabled",
		"isSparseDiskgroupEnabled",
		"licenseModel",
		"memorySizeInGbs",
		"odbNetworkId",
		"scanListenerPortTcp",
		"sshPublicKeys[*]",
		"systemVersion",
		"timeZone",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudVmCluster
	err := ctx.RegisterResource("aws-native:odb:CloudVmCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudVmCluster gets an existing CloudVmCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudVmCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudVmClusterState, opts ...pulumi.ResourceOption) (*CloudVmCluster, error) {
	var resource CloudVmCluster
	err := ctx.ReadResource("aws-native:odb:CloudVmCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudVmCluster resources.
type cloudVmClusterState struct {
}

type CloudVmClusterState struct {
}

func (CloudVmClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudVmClusterState)(nil)).Elem()
}

type cloudVmClusterArgs struct {
	// The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
	CloudExadataInfrastructureId *string `pulumi:"cloudExadataInfrastructureId"`
	// The name of the Grid Infrastructure (GI) cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The number of CPU cores enabled on the VM cluster.
	CpuCoreCount *int `pulumi:"cpuCoreCount"`
	// The set of diagnostic collection options enabled for the VM cluster.
	DataCollectionOptions *CloudVmClusterDataCollectionOptions `pulumi:"dataCollectionOptions"`
	// The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
	DataStorageSizeInTbs *float64 `pulumi:"dataStorageSizeInTbs"`
	// The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
	DbNodeStorageSizeInGbs *int `pulumi:"dbNodeStorageSizeInGbs"`
	// The DB nodes that are implicitly created and managed as part of this VM Cluster.
	DbNodes []CloudVmClusterDbNode `pulumi:"dbNodes"`
	// The list of database servers for the VM cluster.
	DbServers []string `pulumi:"dbServers"`
	// The user-friendly name for the VM cluster.
	DisplayName *string `pulumi:"displayName"`
	// The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
	GiVersion *string `pulumi:"giVersion"`
	// The host name for the VM cluster.
	Hostname *string `pulumi:"hostname"`
	// Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
	IsLocalBackupEnabled *bool `pulumi:"isLocalBackupEnabled"`
	// Indicates whether the VM cluster is configured with a sparse disk group.
	IsSparseDiskgroupEnabled *bool `pulumi:"isSparseDiskgroupEnabled"`
	// The Oracle license model applied to the VM cluster.
	LicenseModel *CloudVmClusterLicenseModel `pulumi:"licenseModel"`
	// The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
	MemorySizeInGbs *int `pulumi:"memorySizeInGbs"`
	// The unique identifier of the ODB network for the VM cluster.
	OdbNetworkId *string `pulumi:"odbNetworkId"`
	// Property description not available.
	ScanListenerPortTcp *int `pulumi:"scanListenerPortTcp"`
	// The public key portion of one or more key pairs used for SSH access to the VM cluster.
	SshPublicKeys []string `pulumi:"sshPublicKeys"`
	// The operating system version of the image chosen for the VM cluster.
	SystemVersion *string `pulumi:"systemVersion"`
	// Tags to assign to the Vm Cluster.
	Tags []aws.Tag `pulumi:"tags"`
	// The time zone of the VM cluster.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a CloudVmCluster resource.
type CloudVmClusterArgs struct {
	// The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
	CloudExadataInfrastructureId pulumi.StringPtrInput
	// The name of the Grid Infrastructure (GI) cluster.
	ClusterName pulumi.StringPtrInput
	// The number of CPU cores enabled on the VM cluster.
	CpuCoreCount pulumi.IntPtrInput
	// The set of diagnostic collection options enabled for the VM cluster.
	DataCollectionOptions CloudVmClusterDataCollectionOptionsPtrInput
	// The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
	DataStorageSizeInTbs pulumi.Float64PtrInput
	// The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
	DbNodeStorageSizeInGbs pulumi.IntPtrInput
	// The DB nodes that are implicitly created and managed as part of this VM Cluster.
	DbNodes CloudVmClusterDbNodeArrayInput
	// The list of database servers for the VM cluster.
	DbServers pulumi.StringArrayInput
	// The user-friendly name for the VM cluster.
	DisplayName pulumi.StringPtrInput
	// The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
	GiVersion pulumi.StringPtrInput
	// The host name for the VM cluster.
	Hostname pulumi.StringPtrInput
	// Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
	IsLocalBackupEnabled pulumi.BoolPtrInput
	// Indicates whether the VM cluster is configured with a sparse disk group.
	IsSparseDiskgroupEnabled pulumi.BoolPtrInput
	// The Oracle license model applied to the VM cluster.
	LicenseModel CloudVmClusterLicenseModelPtrInput
	// The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
	MemorySizeInGbs pulumi.IntPtrInput
	// The unique identifier of the ODB network for the VM cluster.
	OdbNetworkId pulumi.StringPtrInput
	// Property description not available.
	ScanListenerPortTcp pulumi.IntPtrInput
	// The public key portion of one or more key pairs used for SSH access to the VM cluster.
	SshPublicKeys pulumi.StringArrayInput
	// The operating system version of the image chosen for the VM cluster.
	SystemVersion pulumi.StringPtrInput
	// Tags to assign to the Vm Cluster.
	Tags aws.TagArrayInput
	// The time zone of the VM cluster.
	TimeZone pulumi.StringPtrInput
}

func (CloudVmClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudVmClusterArgs)(nil)).Elem()
}

type CloudVmClusterInput interface {
	pulumi.Input

	ToCloudVmClusterOutput() CloudVmClusterOutput
	ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput
}

func (*CloudVmCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudVmCluster)(nil)).Elem()
}

func (i *CloudVmCluster) ToCloudVmClusterOutput() CloudVmClusterOutput {
	return i.ToCloudVmClusterOutputWithContext(context.Background())
}

func (i *CloudVmCluster) ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterOutput)
}

type CloudVmClusterOutput struct{ *pulumi.OutputState }

func (CloudVmClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterOutput) ToCloudVmClusterOutput() CloudVmClusterOutput {
	return o
}

func (o CloudVmClusterOutput) ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput {
	return o
}

// The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
func (o CloudVmClusterOutput) CloudExadataInfrastructureId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.CloudExadataInfrastructureId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the VM cluster.
func (o CloudVmClusterOutput) CloudVmClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.CloudVmClusterArn }).(pulumi.StringOutput)
}

// The unique identifier of the VM cluster.
func (o CloudVmClusterOutput) CloudVmClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.CloudVmClusterId }).(pulumi.StringOutput)
}

// The name of the Grid Infrastructure (GI) cluster.
func (o CloudVmClusterOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
func (o CloudVmClusterOutput) ComputeModel() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.ComputeModel }).(pulumi.StringOutput)
}

// The number of CPU cores enabled on the VM cluster.
func (o CloudVmClusterOutput) CpuCoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntPtrOutput { return v.CpuCoreCount }).(pulumi.IntPtrOutput)
}

// The set of diagnostic collection options enabled for the VM cluster.
func (o CloudVmClusterOutput) DataCollectionOptions() CloudVmClusterDataCollectionOptionsPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) CloudVmClusterDataCollectionOptionsPtrOutput { return v.DataCollectionOptions }).(CloudVmClusterDataCollectionOptionsPtrOutput)
}

// The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
func (o CloudVmClusterOutput) DataStorageSizeInTbs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.Float64PtrOutput { return v.DataStorageSizeInTbs }).(pulumi.Float64PtrOutput)
}

// The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
func (o CloudVmClusterOutput) DbNodeStorageSizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntPtrOutput { return v.DbNodeStorageSizeInGbs }).(pulumi.IntPtrOutput)
}

// The DB nodes that are implicitly created and managed as part of this VM Cluster.
func (o CloudVmClusterOutput) DbNodes() CloudVmClusterDbNodeArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) CloudVmClusterDbNodeArrayOutput { return v.DbNodes }).(CloudVmClusterDbNodeArrayOutput)
}

// The list of database servers for the VM cluster.
func (o CloudVmClusterOutput) DbServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringArrayOutput { return v.DbServers }).(pulumi.StringArrayOutput)
}

// The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
func (o CloudVmClusterOutput) DiskRedundancy() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.DiskRedundancy }).(pulumi.StringOutput)
}

// The user-friendly name for the VM cluster.
func (o CloudVmClusterOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The domain of the VM cluster.
func (o CloudVmClusterOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
func (o CloudVmClusterOutput) GiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.GiVersion }).(pulumi.StringPtrOutput)
}

// The host name for the VM cluster.
func (o CloudVmClusterOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
func (o CloudVmClusterOutput) IsLocalBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.BoolPtrOutput { return v.IsLocalBackupEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether the VM cluster is configured with a sparse disk group.
func (o CloudVmClusterOutput) IsSparseDiskgroupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.BoolPtrOutput { return v.IsSparseDiskgroupEnabled }).(pulumi.BoolPtrOutput)
}

// The Oracle license model applied to the VM cluster.
func (o CloudVmClusterOutput) LicenseModel() CloudVmClusterLicenseModelPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) CloudVmClusterLicenseModelPtrOutput { return v.LicenseModel }).(CloudVmClusterLicenseModelPtrOutput)
}

// The port number configured for the listener on the VM cluster.
func (o CloudVmClusterOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.ListenerPort }).(pulumi.IntOutput)
}

// The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
func (o CloudVmClusterOutput) MemorySizeInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntPtrOutput { return v.MemorySizeInGbs }).(pulumi.IntPtrOutput)
}

// The number of nodes in the VM cluster.
func (o CloudVmClusterOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// The name of the OCI resource anchor for the VM cluster.
func (o CloudVmClusterOutput) OciResourceAnchorName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.OciResourceAnchorName }).(pulumi.StringOutput)
}

// The HTTPS link to the VM cluster in OCI.
func (o CloudVmClusterOutput) OciUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.OciUrl }).(pulumi.StringOutput)
}

// The OCID of the VM cluster.
func (o CloudVmClusterOutput) Ocid() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Ocid }).(pulumi.StringOutput)
}

// The unique identifier of the ODB network for the VM cluster.
func (o CloudVmClusterOutput) OdbNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.OdbNetworkId }).(pulumi.StringPtrOutput)
}

// The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
func (o CloudVmClusterOutput) ScanDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.ScanDnsName }).(pulumi.StringOutput)
}

// The OCID of the SCAN IP addresses that are associated with the VM cluster.
func (o CloudVmClusterOutput) ScanIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringArrayOutput { return v.ScanIpIds }).(pulumi.StringArrayOutput)
}

// Property description not available.
func (o CloudVmClusterOutput) ScanListenerPortTcp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntPtrOutput { return v.ScanListenerPortTcp }).(pulumi.IntPtrOutput)
}

// The hardware model name of the Exadata infrastructure that's running the VM cluster.
func (o CloudVmClusterOutput) Shape() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Shape }).(pulumi.StringOutput)
}

// The public key portion of one or more key pairs used for SSH access to the VM cluster.
func (o CloudVmClusterOutput) SshPublicKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringArrayOutput { return v.SshPublicKeys }).(pulumi.StringArrayOutput)
}

// The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
func (o CloudVmClusterOutput) StorageSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.StorageSizeInGbs }).(pulumi.IntOutput)
}

// The operating system version of the image chosen for the VM cluster.
func (o CloudVmClusterOutput) SystemVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.SystemVersion }).(pulumi.StringPtrOutput)
}

// Tags to assign to the Vm Cluster.
func (o CloudVmClusterOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The time zone of the VM cluster.
func (o CloudVmClusterOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
func (o CloudVmClusterOutput) VipIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringArrayOutput { return v.VipIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterInput)(nil)).Elem(), &CloudVmCluster{})
	pulumi.RegisterOutputType(CloudVmClusterOutput{})
}
