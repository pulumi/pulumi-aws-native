// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package robomaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::RoboMaker::Fleet resource creates an AWS RoboMaker fleet. Fleets contain robots and can receive deployments.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := robomaker.NewFleet(ctx, "basicFleet", &robomaker.FleetArgs{
//				Name: pulumi.String("MyFleet"),
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("BasicFleet"),
//					"type": pulumi.String("CFN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("fleet", "BasicFleet")
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicFleet, err := robomaker.NewFleet(ctx, "basicFleet", &robomaker.FleetArgs{
//				Name: pulumi.String("MyFleet"),
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("BasicFleet"),
//					"type": pulumi.String("CFN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("fleet", basicFleet.ID())
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicFleet, err := robomaker.NewFleet(ctx, "basicFleet", &robomaker.FleetArgs{
//				Name: pulumi.String("MyFleet"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = robomaker.NewRobot(ctx, "basicRobot", &robomaker.RobotArgs{
//				Name:              pulumi.String("MyRobot"),
//				GreengrassGroupId: pulumi.String("51229986-abdc-4ca6-94f8-04735a0c9f07"),
//				Architecture:      robomaker.RobotArchitectureArmhf,
//				Fleet:             basicFleet.Arn,
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("BasicRobot"),
//					"type": pulumi.String("CFN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("robot", "BasicRobot")
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicFleet, err := robomaker.NewFleet(ctx, "basicFleet", &robomaker.FleetArgs{
//				Name: pulumi.String("MyFleet"),
//			})
//			if err != nil {
//				return err
//			}
//			basicRobot, err := robomaker.NewRobot(ctx, "basicRobot", &robomaker.RobotArgs{
//				Name:              pulumi.String("MyRobot"),
//				GreengrassGroupId: pulumi.String("51229986-abdc-4ca6-94f8-04735a0c9f07"),
//				Architecture:      robomaker.RobotArchitectureArmhf,
//				Fleet:             basicFleet.Arn,
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("BasicRobot"),
//					"type": pulumi.String("CFN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("robot", basicRobot.ID())
//			return nil
//		})
//	}
//
// ```
type Fleet struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the fleet.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		args = &FleetArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws-native:robomaker:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws-native:robomaker:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
}

type FleetState struct {
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	// The name of the fleet.
	Name *string           `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// The name of the fleet.
	Name pulumi.StringPtrInput
	Tags pulumi.StringMapInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(ctx context.Context) FleetOutput
}

func (*Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *Fleet) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i *Fleet) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the fleet.
func (o FleetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), &Fleet{})
	pulumi.RegisterOutputType(FleetOutput{})
}
