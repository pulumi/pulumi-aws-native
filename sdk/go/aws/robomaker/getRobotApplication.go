// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package robomaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An example resource schema demonstrating some basic constructs and validation rules.
func LookupRobotApplication(ctx *pulumi.Context, args *LookupRobotApplicationArgs, opts ...pulumi.InvokeOption) (*LookupRobotApplicationResult, error) {
	var rv LookupRobotApplicationResult
	err := ctx.Invoke("aws-native:robomaker:getRobotApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRobotApplicationArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupRobotApplicationResult struct {
	Arn *string `pulumi:"arn"`
	// The revision ID of robot application.
	CurrentRevisionId *string `pulumi:"currentRevisionId"`
	// The URI of the Docker image for the robot application.
	Environment        *string                             `pulumi:"environment"`
	RobotSoftwareSuite *RobotApplicationRobotSoftwareSuite `pulumi:"robotSoftwareSuite"`
	// The sources of the robot application.
	Sources []RobotApplicationSourceConfig `pulumi:"sources"`
	Tags    *RobotApplicationTags          `pulumi:"tags"`
}

func LookupRobotApplicationOutput(ctx *pulumi.Context, args LookupRobotApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupRobotApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRobotApplicationResult, error) {
			args := v.(LookupRobotApplicationArgs)
			r, err := LookupRobotApplication(ctx, &args, opts...)
			return *r, err
		}).(LookupRobotApplicationResultOutput)
}

type LookupRobotApplicationOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupRobotApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRobotApplicationArgs)(nil)).Elem()
}

type LookupRobotApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupRobotApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRobotApplicationResult)(nil)).Elem()
}

func (o LookupRobotApplicationResultOutput) ToLookupRobotApplicationResultOutput() LookupRobotApplicationResultOutput {
	return o
}

func (o LookupRobotApplicationResultOutput) ToLookupRobotApplicationResultOutputWithContext(ctx context.Context) LookupRobotApplicationResultOutput {
	return o
}

func (o LookupRobotApplicationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The revision ID of robot application.
func (o LookupRobotApplicationResultOutput) CurrentRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *string { return v.CurrentRevisionId }).(pulumi.StringPtrOutput)
}

// The URI of the Docker image for the robot application.
func (o LookupRobotApplicationResultOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

func (o LookupRobotApplicationResultOutput) RobotSoftwareSuite() RobotApplicationRobotSoftwareSuitePtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *RobotApplicationRobotSoftwareSuite { return v.RobotSoftwareSuite }).(RobotApplicationRobotSoftwareSuitePtrOutput)
}

// The sources of the robot application.
func (o LookupRobotApplicationResultOutput) Sources() RobotApplicationSourceConfigArrayOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) []RobotApplicationSourceConfig { return v.Sources }).(RobotApplicationSourceConfigArrayOutput)
}

func (o LookupRobotApplicationResultOutput) Tags() RobotApplicationTagsPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *RobotApplicationTags { return v.Tags }).(RobotApplicationTagsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRobotApplicationResultOutput{})
}
