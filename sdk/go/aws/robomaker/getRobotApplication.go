// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package robomaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This schema is for testing purpose only.
func LookupRobotApplication(ctx *pulumi.Context, args *LookupRobotApplicationArgs, opts ...pulumi.InvokeOption) (*LookupRobotApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRobotApplicationResult
	err := ctx.Invoke("aws-native:robomaker:getRobotApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRobotApplicationArgs struct {
	// The Amazon Resource Name (ARN) of the robot application.
	Arn string `pulumi:"arn"`
}

type LookupRobotApplicationResult struct {
	// The Amazon Resource Name (ARN) of the robot application.
	Arn *string `pulumi:"arn"`
	// The revision ID of robot application.
	CurrentRevisionId *string `pulumi:"currentRevisionId"`
	// The URI of the Docker image for the robot application.
	Environment *string `pulumi:"environment"`
	// The robot software suite used by the robot application.
	RobotSoftwareSuite *RobotApplicationRobotSoftwareSuite `pulumi:"robotSoftwareSuite"`
	// A map that contains tag keys and tag values that are attached to the robot application.
	Tags map[string]string `pulumi:"tags"`
}

func LookupRobotApplicationOutput(ctx *pulumi.Context, args LookupRobotApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupRobotApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRobotApplicationResult, error) {
			args := v.(LookupRobotApplicationArgs)
			r, err := LookupRobotApplication(ctx, &args, opts...)
			var s LookupRobotApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRobotApplicationResultOutput)
}

type LookupRobotApplicationOutputArgs struct {
	// The Amazon Resource Name (ARN) of the robot application.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupRobotApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRobotApplicationArgs)(nil)).Elem()
}

type LookupRobotApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupRobotApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRobotApplicationResult)(nil)).Elem()
}

func (o LookupRobotApplicationResultOutput) ToLookupRobotApplicationResultOutput() LookupRobotApplicationResultOutput {
	return o
}

func (o LookupRobotApplicationResultOutput) ToLookupRobotApplicationResultOutputWithContext(ctx context.Context) LookupRobotApplicationResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the robot application.
func (o LookupRobotApplicationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The revision ID of robot application.
func (o LookupRobotApplicationResultOutput) CurrentRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *string { return v.CurrentRevisionId }).(pulumi.StringPtrOutput)
}

// The URI of the Docker image for the robot application.
func (o LookupRobotApplicationResultOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The robot software suite used by the robot application.
func (o LookupRobotApplicationResultOutput) RobotSoftwareSuite() RobotApplicationRobotSoftwareSuitePtrOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) *RobotApplicationRobotSoftwareSuite { return v.RobotSoftwareSuite }).(RobotApplicationRobotSoftwareSuitePtrOutput)
}

// A map that contains tag keys and tag values that are attached to the robot application.
func (o LookupRobotApplicationResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRobotApplicationResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRobotApplicationResultOutput{})
}
