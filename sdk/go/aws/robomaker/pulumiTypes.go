// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package robomaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A key-value pair to associate with a resource.
type FleetTags struct {
}

// FleetTagsInput is an input type that accepts FleetTagsArgs and FleetTagsOutput values.
// You can construct a concrete instance of `FleetTagsInput` via:
//
//          FleetTagsArgs{...}
type FleetTagsInput interface {
	pulumi.Input

	ToFleetTagsOutput() FleetTagsOutput
	ToFleetTagsOutputWithContext(context.Context) FleetTagsOutput
}

// A key-value pair to associate with a resource.
type FleetTagsArgs struct {
}

func (FleetTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetTags)(nil)).Elem()
}

func (i FleetTagsArgs) ToFleetTagsOutput() FleetTagsOutput {
	return i.ToFleetTagsOutputWithContext(context.Background())
}

func (i FleetTagsArgs) ToFleetTagsOutputWithContext(ctx context.Context) FleetTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetTagsOutput)
}

func (i FleetTagsArgs) ToFleetTagsPtrOutput() FleetTagsPtrOutput {
	return i.ToFleetTagsPtrOutputWithContext(context.Background())
}

func (i FleetTagsArgs) ToFleetTagsPtrOutputWithContext(ctx context.Context) FleetTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetTagsOutput).ToFleetTagsPtrOutputWithContext(ctx)
}

// FleetTagsPtrInput is an input type that accepts FleetTagsArgs, FleetTagsPtr and FleetTagsPtrOutput values.
// You can construct a concrete instance of `FleetTagsPtrInput` via:
//
//          FleetTagsArgs{...}
//
//  or:
//
//          nil
type FleetTagsPtrInput interface {
	pulumi.Input

	ToFleetTagsPtrOutput() FleetTagsPtrOutput
	ToFleetTagsPtrOutputWithContext(context.Context) FleetTagsPtrOutput
}

type fleetTagsPtrType FleetTagsArgs

func FleetTagsPtr(v *FleetTagsArgs) FleetTagsPtrInput {
	return (*fleetTagsPtrType)(v)
}

func (*fleetTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetTags)(nil)).Elem()
}

func (i *fleetTagsPtrType) ToFleetTagsPtrOutput() FleetTagsPtrOutput {
	return i.ToFleetTagsPtrOutputWithContext(context.Background())
}

func (i *fleetTagsPtrType) ToFleetTagsPtrOutputWithContext(ctx context.Context) FleetTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetTagsPtrOutput)
}

// A key-value pair to associate with a resource.
type FleetTagsOutput struct{ *pulumi.OutputState }

func (FleetTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetTags)(nil)).Elem()
}

func (o FleetTagsOutput) ToFleetTagsOutput() FleetTagsOutput {
	return o
}

func (o FleetTagsOutput) ToFleetTagsOutputWithContext(ctx context.Context) FleetTagsOutput {
	return o
}

func (o FleetTagsOutput) ToFleetTagsPtrOutput() FleetTagsPtrOutput {
	return o.ToFleetTagsPtrOutputWithContext(context.Background())
}

func (o FleetTagsOutput) ToFleetTagsPtrOutputWithContext(ctx context.Context) FleetTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetTags) *FleetTags {
		return &v
	}).(FleetTagsPtrOutput)
}

type FleetTagsPtrOutput struct{ *pulumi.OutputState }

func (FleetTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetTags)(nil)).Elem()
}

func (o FleetTagsPtrOutput) ToFleetTagsPtrOutput() FleetTagsPtrOutput {
	return o
}

func (o FleetTagsPtrOutput) ToFleetTagsPtrOutputWithContext(ctx context.Context) FleetTagsPtrOutput {
	return o
}

func (o FleetTagsPtrOutput) Elem() FleetTagsOutput {
	return o.ApplyT(func(v *FleetTags) FleetTags {
		if v != nil {
			return *v
		}
		var ret FleetTags
		return ret
	}).(FleetTagsOutput)
}

type RobotApplicationRobotSoftwareSuite struct {
	Name    string `pulumi:"name"`
	Version string `pulumi:"version"`
}

// RobotApplicationRobotSoftwareSuiteInput is an input type that accepts RobotApplicationRobotSoftwareSuiteArgs and RobotApplicationRobotSoftwareSuiteOutput values.
// You can construct a concrete instance of `RobotApplicationRobotSoftwareSuiteInput` via:
//
//          RobotApplicationRobotSoftwareSuiteArgs{...}
type RobotApplicationRobotSoftwareSuiteInput interface {
	pulumi.Input

	ToRobotApplicationRobotSoftwareSuiteOutput() RobotApplicationRobotSoftwareSuiteOutput
	ToRobotApplicationRobotSoftwareSuiteOutputWithContext(context.Context) RobotApplicationRobotSoftwareSuiteOutput
}

type RobotApplicationRobotSoftwareSuiteArgs struct {
	Name    pulumi.StringInput `pulumi:"name"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (RobotApplicationRobotSoftwareSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (i RobotApplicationRobotSoftwareSuiteArgs) ToRobotApplicationRobotSoftwareSuiteOutput() RobotApplicationRobotSoftwareSuiteOutput {
	return i.ToRobotApplicationRobotSoftwareSuiteOutputWithContext(context.Background())
}

func (i RobotApplicationRobotSoftwareSuiteArgs) ToRobotApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationRobotSoftwareSuiteOutput)
}

func (i RobotApplicationRobotSoftwareSuiteArgs) ToRobotApplicationRobotSoftwareSuitePtrOutput() RobotApplicationRobotSoftwareSuitePtrOutput {
	return i.ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(context.Background())
}

func (i RobotApplicationRobotSoftwareSuiteArgs) ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationRobotSoftwareSuiteOutput).ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(ctx)
}

// RobotApplicationRobotSoftwareSuitePtrInput is an input type that accepts RobotApplicationRobotSoftwareSuiteArgs, RobotApplicationRobotSoftwareSuitePtr and RobotApplicationRobotSoftwareSuitePtrOutput values.
// You can construct a concrete instance of `RobotApplicationRobotSoftwareSuitePtrInput` via:
//
//          RobotApplicationRobotSoftwareSuiteArgs{...}
//
//  or:
//
//          nil
type RobotApplicationRobotSoftwareSuitePtrInput interface {
	pulumi.Input

	ToRobotApplicationRobotSoftwareSuitePtrOutput() RobotApplicationRobotSoftwareSuitePtrOutput
	ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(context.Context) RobotApplicationRobotSoftwareSuitePtrOutput
}

type robotApplicationRobotSoftwareSuitePtrType RobotApplicationRobotSoftwareSuiteArgs

func RobotApplicationRobotSoftwareSuitePtr(v *RobotApplicationRobotSoftwareSuiteArgs) RobotApplicationRobotSoftwareSuitePtrInput {
	return (*robotApplicationRobotSoftwareSuitePtrType)(v)
}

func (*robotApplicationRobotSoftwareSuitePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (i *robotApplicationRobotSoftwareSuitePtrType) ToRobotApplicationRobotSoftwareSuitePtrOutput() RobotApplicationRobotSoftwareSuitePtrOutput {
	return i.ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(context.Background())
}

func (i *robotApplicationRobotSoftwareSuitePtrType) ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationRobotSoftwareSuitePtrOutput)
}

type RobotApplicationRobotSoftwareSuiteOutput struct{ *pulumi.OutputState }

func (RobotApplicationRobotSoftwareSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o RobotApplicationRobotSoftwareSuiteOutput) ToRobotApplicationRobotSoftwareSuiteOutput() RobotApplicationRobotSoftwareSuiteOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuiteOutput) ToRobotApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuiteOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuiteOutput) ToRobotApplicationRobotSoftwareSuitePtrOutput() RobotApplicationRobotSoftwareSuitePtrOutput {
	return o.ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(context.Background())
}

func (o RobotApplicationRobotSoftwareSuiteOutput) ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuitePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RobotApplicationRobotSoftwareSuite) *RobotApplicationRobotSoftwareSuite {
		return &v
	}).(RobotApplicationRobotSoftwareSuitePtrOutput)
}

func (o RobotApplicationRobotSoftwareSuiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationRobotSoftwareSuite) string { return v.Name }).(pulumi.StringOutput)
}

func (o RobotApplicationRobotSoftwareSuiteOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationRobotSoftwareSuite) string { return v.Version }).(pulumi.StringOutput)
}

type RobotApplicationRobotSoftwareSuitePtrOutput struct{ *pulumi.OutputState }

func (RobotApplicationRobotSoftwareSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) ToRobotApplicationRobotSoftwareSuitePtrOutput() RobotApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) Elem() RobotApplicationRobotSoftwareSuiteOutput {
	return o.ApplyT(func(v *RobotApplicationRobotSoftwareSuite) RobotApplicationRobotSoftwareSuite {
		if v != nil {
			return *v
		}
		var ret RobotApplicationRobotSoftwareSuite
		return ret
	}).(RobotApplicationRobotSoftwareSuiteOutput)
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RobotApplicationRobotSoftwareSuite) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RobotApplicationRobotSoftwareSuite) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type RobotApplicationSourceConfig struct {
	Architecture string `pulumi:"architecture"`
	S3Bucket     string `pulumi:"s3Bucket"`
	S3Key        string `pulumi:"s3Key"`
}

// RobotApplicationSourceConfigInput is an input type that accepts RobotApplicationSourceConfigArgs and RobotApplicationSourceConfigOutput values.
// You can construct a concrete instance of `RobotApplicationSourceConfigInput` via:
//
//          RobotApplicationSourceConfigArgs{...}
type RobotApplicationSourceConfigInput interface {
	pulumi.Input

	ToRobotApplicationSourceConfigOutput() RobotApplicationSourceConfigOutput
	ToRobotApplicationSourceConfigOutputWithContext(context.Context) RobotApplicationSourceConfigOutput
}

type RobotApplicationSourceConfigArgs struct {
	Architecture pulumi.StringInput `pulumi:"architecture"`
	S3Bucket     pulumi.StringInput `pulumi:"s3Bucket"`
	S3Key        pulumi.StringInput `pulumi:"s3Key"`
}

func (RobotApplicationSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationSourceConfig)(nil)).Elem()
}

func (i RobotApplicationSourceConfigArgs) ToRobotApplicationSourceConfigOutput() RobotApplicationSourceConfigOutput {
	return i.ToRobotApplicationSourceConfigOutputWithContext(context.Background())
}

func (i RobotApplicationSourceConfigArgs) ToRobotApplicationSourceConfigOutputWithContext(ctx context.Context) RobotApplicationSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationSourceConfigOutput)
}

// RobotApplicationSourceConfigArrayInput is an input type that accepts RobotApplicationSourceConfigArray and RobotApplicationSourceConfigArrayOutput values.
// You can construct a concrete instance of `RobotApplicationSourceConfigArrayInput` via:
//
//          RobotApplicationSourceConfigArray{ RobotApplicationSourceConfigArgs{...} }
type RobotApplicationSourceConfigArrayInput interface {
	pulumi.Input

	ToRobotApplicationSourceConfigArrayOutput() RobotApplicationSourceConfigArrayOutput
	ToRobotApplicationSourceConfigArrayOutputWithContext(context.Context) RobotApplicationSourceConfigArrayOutput
}

type RobotApplicationSourceConfigArray []RobotApplicationSourceConfigInput

func (RobotApplicationSourceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotApplicationSourceConfig)(nil)).Elem()
}

func (i RobotApplicationSourceConfigArray) ToRobotApplicationSourceConfigArrayOutput() RobotApplicationSourceConfigArrayOutput {
	return i.ToRobotApplicationSourceConfigArrayOutputWithContext(context.Background())
}

func (i RobotApplicationSourceConfigArray) ToRobotApplicationSourceConfigArrayOutputWithContext(ctx context.Context) RobotApplicationSourceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationSourceConfigArrayOutput)
}

type RobotApplicationSourceConfigOutput struct{ *pulumi.OutputState }

func (RobotApplicationSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationSourceConfig)(nil)).Elem()
}

func (o RobotApplicationSourceConfigOutput) ToRobotApplicationSourceConfigOutput() RobotApplicationSourceConfigOutput {
	return o
}

func (o RobotApplicationSourceConfigOutput) ToRobotApplicationSourceConfigOutputWithContext(ctx context.Context) RobotApplicationSourceConfigOutput {
	return o
}

func (o RobotApplicationSourceConfigOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationSourceConfig) string { return v.Architecture }).(pulumi.StringOutput)
}

func (o RobotApplicationSourceConfigOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationSourceConfig) string { return v.S3Bucket }).(pulumi.StringOutput)
}

func (o RobotApplicationSourceConfigOutput) S3Key() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationSourceConfig) string { return v.S3Key }).(pulumi.StringOutput)
}

type RobotApplicationSourceConfigArrayOutput struct{ *pulumi.OutputState }

func (RobotApplicationSourceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotApplicationSourceConfig)(nil)).Elem()
}

func (o RobotApplicationSourceConfigArrayOutput) ToRobotApplicationSourceConfigArrayOutput() RobotApplicationSourceConfigArrayOutput {
	return o
}

func (o RobotApplicationSourceConfigArrayOutput) ToRobotApplicationSourceConfigArrayOutputWithContext(ctx context.Context) RobotApplicationSourceConfigArrayOutput {
	return o
}

func (o RobotApplicationSourceConfigArrayOutput) Index(i pulumi.IntInput) RobotApplicationSourceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RobotApplicationSourceConfig {
		return vs[0].([]RobotApplicationSourceConfig)[vs[1].(int)]
	}).(RobotApplicationSourceConfigOutput)
}

// A key-value pair to associate with a resource.
type RobotTags struct {
}

// RobotTagsInput is an input type that accepts RobotTagsArgs and RobotTagsOutput values.
// You can construct a concrete instance of `RobotTagsInput` via:
//
//          RobotTagsArgs{...}
type RobotTagsInput interface {
	pulumi.Input

	ToRobotTagsOutput() RobotTagsOutput
	ToRobotTagsOutputWithContext(context.Context) RobotTagsOutput
}

// A key-value pair to associate with a resource.
type RobotTagsArgs struct {
}

func (RobotTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotTags)(nil)).Elem()
}

func (i RobotTagsArgs) ToRobotTagsOutput() RobotTagsOutput {
	return i.ToRobotTagsOutputWithContext(context.Background())
}

func (i RobotTagsArgs) ToRobotTagsOutputWithContext(ctx context.Context) RobotTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotTagsOutput)
}

func (i RobotTagsArgs) ToRobotTagsPtrOutput() RobotTagsPtrOutput {
	return i.ToRobotTagsPtrOutputWithContext(context.Background())
}

func (i RobotTagsArgs) ToRobotTagsPtrOutputWithContext(ctx context.Context) RobotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotTagsOutput).ToRobotTagsPtrOutputWithContext(ctx)
}

// RobotTagsPtrInput is an input type that accepts RobotTagsArgs, RobotTagsPtr and RobotTagsPtrOutput values.
// You can construct a concrete instance of `RobotTagsPtrInput` via:
//
//          RobotTagsArgs{...}
//
//  or:
//
//          nil
type RobotTagsPtrInput interface {
	pulumi.Input

	ToRobotTagsPtrOutput() RobotTagsPtrOutput
	ToRobotTagsPtrOutputWithContext(context.Context) RobotTagsPtrOutput
}

type robotTagsPtrType RobotTagsArgs

func RobotTagsPtr(v *RobotTagsArgs) RobotTagsPtrInput {
	return (*robotTagsPtrType)(v)
}

func (*robotTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotTags)(nil)).Elem()
}

func (i *robotTagsPtrType) ToRobotTagsPtrOutput() RobotTagsPtrOutput {
	return i.ToRobotTagsPtrOutputWithContext(context.Background())
}

func (i *robotTagsPtrType) ToRobotTagsPtrOutputWithContext(ctx context.Context) RobotTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotTagsPtrOutput)
}

// A key-value pair to associate with a resource.
type RobotTagsOutput struct{ *pulumi.OutputState }

func (RobotTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotTags)(nil)).Elem()
}

func (o RobotTagsOutput) ToRobotTagsOutput() RobotTagsOutput {
	return o
}

func (o RobotTagsOutput) ToRobotTagsOutputWithContext(ctx context.Context) RobotTagsOutput {
	return o
}

func (o RobotTagsOutput) ToRobotTagsPtrOutput() RobotTagsPtrOutput {
	return o.ToRobotTagsPtrOutputWithContext(context.Background())
}

func (o RobotTagsOutput) ToRobotTagsPtrOutputWithContext(ctx context.Context) RobotTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RobotTags) *RobotTags {
		return &v
	}).(RobotTagsPtrOutput)
}

type RobotTagsPtrOutput struct{ *pulumi.OutputState }

func (RobotTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotTags)(nil)).Elem()
}

func (o RobotTagsPtrOutput) ToRobotTagsPtrOutput() RobotTagsPtrOutput {
	return o
}

func (o RobotTagsPtrOutput) ToRobotTagsPtrOutputWithContext(ctx context.Context) RobotTagsPtrOutput {
	return o
}

func (o RobotTagsPtrOutput) Elem() RobotTagsOutput {
	return o.ApplyT(func(v *RobotTags) RobotTags {
		if v != nil {
			return *v
		}
		var ret RobotTags
		return ret
	}).(RobotTagsOutput)
}

// Information about a rendering engine.
type SimulationApplicationRenderingEngine struct {
	// The name of the rendering engine.
	Name SimulationApplicationRenderingEngineName `pulumi:"name"`
	// The version of the rendering engine.
	Version string `pulumi:"version"`
}

// SimulationApplicationRenderingEngineInput is an input type that accepts SimulationApplicationRenderingEngineArgs and SimulationApplicationRenderingEngineOutput values.
// You can construct a concrete instance of `SimulationApplicationRenderingEngineInput` via:
//
//          SimulationApplicationRenderingEngineArgs{...}
type SimulationApplicationRenderingEngineInput interface {
	pulumi.Input

	ToSimulationApplicationRenderingEngineOutput() SimulationApplicationRenderingEngineOutput
	ToSimulationApplicationRenderingEngineOutputWithContext(context.Context) SimulationApplicationRenderingEngineOutput
}

// Information about a rendering engine.
type SimulationApplicationRenderingEngineArgs struct {
	// The name of the rendering engine.
	Name SimulationApplicationRenderingEngineNameInput `pulumi:"name"`
	// The version of the rendering engine.
	Version pulumi.StringInput `pulumi:"version"`
}

func (SimulationApplicationRenderingEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEngineOutput() SimulationApplicationRenderingEngineOutput {
	return i.ToSimulationApplicationRenderingEngineOutputWithContext(context.Background())
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEngineOutputWithContext(ctx context.Context) SimulationApplicationRenderingEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRenderingEngineOutput)
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return i.ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Background())
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRenderingEngineOutput).ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx)
}

// SimulationApplicationRenderingEnginePtrInput is an input type that accepts SimulationApplicationRenderingEngineArgs, SimulationApplicationRenderingEnginePtr and SimulationApplicationRenderingEnginePtrOutput values.
// You can construct a concrete instance of `SimulationApplicationRenderingEnginePtrInput` via:
//
//          SimulationApplicationRenderingEngineArgs{...}
//
//  or:
//
//          nil
type SimulationApplicationRenderingEnginePtrInput interface {
	pulumi.Input

	ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput
	ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Context) SimulationApplicationRenderingEnginePtrOutput
}

type simulationApplicationRenderingEnginePtrType SimulationApplicationRenderingEngineArgs

func SimulationApplicationRenderingEnginePtr(v *SimulationApplicationRenderingEngineArgs) SimulationApplicationRenderingEnginePtrInput {
	return (*simulationApplicationRenderingEnginePtrType)(v)
}

func (*simulationApplicationRenderingEnginePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (i *simulationApplicationRenderingEnginePtrType) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return i.ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Background())
}

func (i *simulationApplicationRenderingEnginePtrType) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRenderingEnginePtrOutput)
}

// Information about a rendering engine.
type SimulationApplicationRenderingEngineOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRenderingEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEngineOutput() SimulationApplicationRenderingEngineOutput {
	return o
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEngineOutputWithContext(ctx context.Context) SimulationApplicationRenderingEngineOutput {
	return o
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return o.ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Background())
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimulationApplicationRenderingEngine) *SimulationApplicationRenderingEngine {
		return &v
	}).(SimulationApplicationRenderingEnginePtrOutput)
}

// The name of the rendering engine.
func (o SimulationApplicationRenderingEngineOutput) Name() SimulationApplicationRenderingEngineNameOutput {
	return o.ApplyT(func(v SimulationApplicationRenderingEngine) SimulationApplicationRenderingEngineName { return v.Name }).(SimulationApplicationRenderingEngineNameOutput)
}

// The version of the rendering engine.
func (o SimulationApplicationRenderingEngineOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SimulationApplicationRenderingEngine) string { return v.Version }).(pulumi.StringOutput)
}

type SimulationApplicationRenderingEnginePtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRenderingEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (o SimulationApplicationRenderingEnginePtrOutput) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return o
}

func (o SimulationApplicationRenderingEnginePtrOutput) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return o
}

func (o SimulationApplicationRenderingEnginePtrOutput) Elem() SimulationApplicationRenderingEngineOutput {
	return o.ApplyT(func(v *SimulationApplicationRenderingEngine) SimulationApplicationRenderingEngine {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationRenderingEngine
		return ret
	}).(SimulationApplicationRenderingEngineOutput)
}

// The name of the rendering engine.
func (o SimulationApplicationRenderingEnginePtrOutput) Name() SimulationApplicationRenderingEngineNamePtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRenderingEngine) *SimulationApplicationRenderingEngineName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(SimulationApplicationRenderingEngineNamePtrOutput)
}

// The version of the rendering engine.
func (o SimulationApplicationRenderingEnginePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRenderingEngine) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Information about a robot software suite (ROS distribution).
type SimulationApplicationRobotSoftwareSuite struct {
	// The name of the robot software suite (ROS distribution).
	Name SimulationApplicationRobotSoftwareSuiteName `pulumi:"name"`
	// The version of the robot software suite (ROS distribution).
	Version SimulationApplicationRobotSoftwareSuiteVersion `pulumi:"version"`
}

// SimulationApplicationRobotSoftwareSuiteInput is an input type that accepts SimulationApplicationRobotSoftwareSuiteArgs and SimulationApplicationRobotSoftwareSuiteOutput values.
// You can construct a concrete instance of `SimulationApplicationRobotSoftwareSuiteInput` via:
//
//          SimulationApplicationRobotSoftwareSuiteArgs{...}
type SimulationApplicationRobotSoftwareSuiteInput interface {
	pulumi.Input

	ToSimulationApplicationRobotSoftwareSuiteOutput() SimulationApplicationRobotSoftwareSuiteOutput
	ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(context.Context) SimulationApplicationRobotSoftwareSuiteOutput
}

// Information about a robot software suite (ROS distribution).
type SimulationApplicationRobotSoftwareSuiteArgs struct {
	// The name of the robot software suite (ROS distribution).
	Name SimulationApplicationRobotSoftwareSuiteNameInput `pulumi:"name"`
	// The version of the robot software suite (ROS distribution).
	Version SimulationApplicationRobotSoftwareSuiteVersionInput `pulumi:"version"`
}

func (SimulationApplicationRobotSoftwareSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (i SimulationApplicationRobotSoftwareSuiteArgs) ToSimulationApplicationRobotSoftwareSuiteOutput() SimulationApplicationRobotSoftwareSuiteOutput {
	return i.ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(context.Background())
}

func (i SimulationApplicationRobotSoftwareSuiteArgs) ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRobotSoftwareSuiteOutput)
}

func (i SimulationApplicationRobotSoftwareSuiteArgs) ToSimulationApplicationRobotSoftwareSuitePtrOutput() SimulationApplicationRobotSoftwareSuitePtrOutput {
	return i.ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(context.Background())
}

func (i SimulationApplicationRobotSoftwareSuiteArgs) ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRobotSoftwareSuiteOutput).ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(ctx)
}

// SimulationApplicationRobotSoftwareSuitePtrInput is an input type that accepts SimulationApplicationRobotSoftwareSuiteArgs, SimulationApplicationRobotSoftwareSuitePtr and SimulationApplicationRobotSoftwareSuitePtrOutput values.
// You can construct a concrete instance of `SimulationApplicationRobotSoftwareSuitePtrInput` via:
//
//          SimulationApplicationRobotSoftwareSuiteArgs{...}
//
//  or:
//
//          nil
type SimulationApplicationRobotSoftwareSuitePtrInput interface {
	pulumi.Input

	ToSimulationApplicationRobotSoftwareSuitePtrOutput() SimulationApplicationRobotSoftwareSuitePtrOutput
	ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(context.Context) SimulationApplicationRobotSoftwareSuitePtrOutput
}

type simulationApplicationRobotSoftwareSuitePtrType SimulationApplicationRobotSoftwareSuiteArgs

func SimulationApplicationRobotSoftwareSuitePtr(v *SimulationApplicationRobotSoftwareSuiteArgs) SimulationApplicationRobotSoftwareSuitePtrInput {
	return (*simulationApplicationRobotSoftwareSuitePtrType)(v)
}

func (*simulationApplicationRobotSoftwareSuitePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (i *simulationApplicationRobotSoftwareSuitePtrType) ToSimulationApplicationRobotSoftwareSuitePtrOutput() SimulationApplicationRobotSoftwareSuitePtrOutput {
	return i.ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(context.Background())
}

func (i *simulationApplicationRobotSoftwareSuitePtrType) ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRobotSoftwareSuitePtrOutput)
}

// Information about a robot software suite (ROS distribution).
type SimulationApplicationRobotSoftwareSuiteOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRobotSoftwareSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationRobotSoftwareSuiteOutput) ToSimulationApplicationRobotSoftwareSuiteOutput() SimulationApplicationRobotSoftwareSuiteOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuiteOutput) ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuiteOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuiteOutput) ToSimulationApplicationRobotSoftwareSuitePtrOutput() SimulationApplicationRobotSoftwareSuitePtrOutput {
	return o.ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(context.Background())
}

func (o SimulationApplicationRobotSoftwareSuiteOutput) ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuitePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimulationApplicationRobotSoftwareSuite) *SimulationApplicationRobotSoftwareSuite {
		return &v
	}).(SimulationApplicationRobotSoftwareSuitePtrOutput)
}

// The name of the robot software suite (ROS distribution).
func (o SimulationApplicationRobotSoftwareSuiteOutput) Name() SimulationApplicationRobotSoftwareSuiteNameOutput {
	return o.ApplyT(func(v SimulationApplicationRobotSoftwareSuite) SimulationApplicationRobotSoftwareSuiteName {
		return v.Name
	}).(SimulationApplicationRobotSoftwareSuiteNameOutput)
}

// The version of the robot software suite (ROS distribution).
func (o SimulationApplicationRobotSoftwareSuiteOutput) Version() SimulationApplicationRobotSoftwareSuiteVersionOutput {
	return o.ApplyT(func(v SimulationApplicationRobotSoftwareSuite) SimulationApplicationRobotSoftwareSuiteVersion {
		return v.Version
	}).(SimulationApplicationRobotSoftwareSuiteVersionOutput)
}

type SimulationApplicationRobotSoftwareSuitePtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRobotSoftwareSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationRobotSoftwareSuitePtrOutput) ToSimulationApplicationRobotSoftwareSuitePtrOutput() SimulationApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuitePtrOutput) ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuitePtrOutput) Elem() SimulationApplicationRobotSoftwareSuiteOutput {
	return o.ApplyT(func(v *SimulationApplicationRobotSoftwareSuite) SimulationApplicationRobotSoftwareSuite {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationRobotSoftwareSuite
		return ret
	}).(SimulationApplicationRobotSoftwareSuiteOutput)
}

// The name of the robot software suite (ROS distribution).
func (o SimulationApplicationRobotSoftwareSuitePtrOutput) Name() SimulationApplicationRobotSoftwareSuiteNamePtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRobotSoftwareSuite) *SimulationApplicationRobotSoftwareSuiteName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(SimulationApplicationRobotSoftwareSuiteNamePtrOutput)
}

// The version of the robot software suite (ROS distribution).
func (o SimulationApplicationRobotSoftwareSuitePtrOutput) Version() SimulationApplicationRobotSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRobotSoftwareSuite) *SimulationApplicationRobotSoftwareSuiteVersion {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(SimulationApplicationRobotSoftwareSuiteVersionPtrOutput)
}

// Information about a simulation software suite.
type SimulationApplicationSimulationSoftwareSuite struct {
	// The name of the simulation software suite.
	Name SimulationApplicationSimulationSoftwareSuiteName `pulumi:"name"`
	// The version of the simulation software suite.
	Version SimulationApplicationSimulationSoftwareSuiteVersion `pulumi:"version"`
}

// SimulationApplicationSimulationSoftwareSuiteInput is an input type that accepts SimulationApplicationSimulationSoftwareSuiteArgs and SimulationApplicationSimulationSoftwareSuiteOutput values.
// You can construct a concrete instance of `SimulationApplicationSimulationSoftwareSuiteInput` via:
//
//          SimulationApplicationSimulationSoftwareSuiteArgs{...}
type SimulationApplicationSimulationSoftwareSuiteInput interface {
	pulumi.Input

	ToSimulationApplicationSimulationSoftwareSuiteOutput() SimulationApplicationSimulationSoftwareSuiteOutput
	ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(context.Context) SimulationApplicationSimulationSoftwareSuiteOutput
}

// Information about a simulation software suite.
type SimulationApplicationSimulationSoftwareSuiteArgs struct {
	// The name of the simulation software suite.
	Name SimulationApplicationSimulationSoftwareSuiteNameInput `pulumi:"name"`
	// The version of the simulation software suite.
	Version SimulationApplicationSimulationSoftwareSuiteVersionInput `pulumi:"version"`
}

func (SimulationApplicationSimulationSoftwareSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (i SimulationApplicationSimulationSoftwareSuiteArgs) ToSimulationApplicationSimulationSoftwareSuiteOutput() SimulationApplicationSimulationSoftwareSuiteOutput {
	return i.ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(context.Background())
}

func (i SimulationApplicationSimulationSoftwareSuiteArgs) ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSimulationSoftwareSuiteOutput)
}

func (i SimulationApplicationSimulationSoftwareSuiteArgs) ToSimulationApplicationSimulationSoftwareSuitePtrOutput() SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return i.ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(context.Background())
}

func (i SimulationApplicationSimulationSoftwareSuiteArgs) ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSimulationSoftwareSuiteOutput).ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(ctx)
}

// SimulationApplicationSimulationSoftwareSuitePtrInput is an input type that accepts SimulationApplicationSimulationSoftwareSuiteArgs, SimulationApplicationSimulationSoftwareSuitePtr and SimulationApplicationSimulationSoftwareSuitePtrOutput values.
// You can construct a concrete instance of `SimulationApplicationSimulationSoftwareSuitePtrInput` via:
//
//          SimulationApplicationSimulationSoftwareSuiteArgs{...}
//
//  or:
//
//          nil
type SimulationApplicationSimulationSoftwareSuitePtrInput interface {
	pulumi.Input

	ToSimulationApplicationSimulationSoftwareSuitePtrOutput() SimulationApplicationSimulationSoftwareSuitePtrOutput
	ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(context.Context) SimulationApplicationSimulationSoftwareSuitePtrOutput
}

type simulationApplicationSimulationSoftwareSuitePtrType SimulationApplicationSimulationSoftwareSuiteArgs

func SimulationApplicationSimulationSoftwareSuitePtr(v *SimulationApplicationSimulationSoftwareSuiteArgs) SimulationApplicationSimulationSoftwareSuitePtrInput {
	return (*simulationApplicationSimulationSoftwareSuitePtrType)(v)
}

func (*simulationApplicationSimulationSoftwareSuitePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (i *simulationApplicationSimulationSoftwareSuitePtrType) ToSimulationApplicationSimulationSoftwareSuitePtrOutput() SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return i.ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(context.Background())
}

func (i *simulationApplicationSimulationSoftwareSuitePtrType) ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSimulationSoftwareSuitePtrOutput)
}

// Information about a simulation software suite.
type SimulationApplicationSimulationSoftwareSuiteOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSimulationSoftwareSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationSimulationSoftwareSuiteOutput) ToSimulationApplicationSimulationSoftwareSuiteOutput() SimulationApplicationSimulationSoftwareSuiteOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuiteOutput) ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuiteOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuiteOutput) ToSimulationApplicationSimulationSoftwareSuitePtrOutput() SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return o.ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(context.Background())
}

func (o SimulationApplicationSimulationSoftwareSuiteOutput) ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimulationApplicationSimulationSoftwareSuite) *SimulationApplicationSimulationSoftwareSuite {
		return &v
	}).(SimulationApplicationSimulationSoftwareSuitePtrOutput)
}

// The name of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuiteOutput) Name() SimulationApplicationSimulationSoftwareSuiteNameOutput {
	return o.ApplyT(func(v SimulationApplicationSimulationSoftwareSuite) SimulationApplicationSimulationSoftwareSuiteName {
		return v.Name
	}).(SimulationApplicationSimulationSoftwareSuiteNameOutput)
}

// The version of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuiteOutput) Version() SimulationApplicationSimulationSoftwareSuiteVersionOutput {
	return o.ApplyT(func(v SimulationApplicationSimulationSoftwareSuite) SimulationApplicationSimulationSoftwareSuiteVersion {
		return v.Version
	}).(SimulationApplicationSimulationSoftwareSuiteVersionOutput)
}

type SimulationApplicationSimulationSoftwareSuitePtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSimulationSoftwareSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) ToSimulationApplicationSimulationSoftwareSuitePtrOutput() SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) Elem() SimulationApplicationSimulationSoftwareSuiteOutput {
	return o.ApplyT(func(v *SimulationApplicationSimulationSoftwareSuite) SimulationApplicationSimulationSoftwareSuite {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationSimulationSoftwareSuite
		return ret
	}).(SimulationApplicationSimulationSoftwareSuiteOutput)
}

// The name of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) Name() SimulationApplicationSimulationSoftwareSuiteNamePtrOutput {
	return o.ApplyT(func(v *SimulationApplicationSimulationSoftwareSuite) *SimulationApplicationSimulationSoftwareSuiteName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(SimulationApplicationSimulationSoftwareSuiteNamePtrOutput)
}

// The version of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) Version() SimulationApplicationSimulationSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v *SimulationApplicationSimulationSoftwareSuite) *SimulationApplicationSimulationSoftwareSuiteVersion {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(SimulationApplicationSimulationSoftwareSuiteVersionPtrOutput)
}

// Information about a source configuration.
type SimulationApplicationSourceConfig struct {
	// The target processor architecture for the application.
	Architecture SimulationApplicationSourceConfigArchitecture `pulumi:"architecture"`
	// The Amazon S3 bucket name.
	S3Bucket string `pulumi:"s3Bucket"`
	// The s3 object key.
	S3Key string `pulumi:"s3Key"`
}

// SimulationApplicationSourceConfigInput is an input type that accepts SimulationApplicationSourceConfigArgs and SimulationApplicationSourceConfigOutput values.
// You can construct a concrete instance of `SimulationApplicationSourceConfigInput` via:
//
//          SimulationApplicationSourceConfigArgs{...}
type SimulationApplicationSourceConfigInput interface {
	pulumi.Input

	ToSimulationApplicationSourceConfigOutput() SimulationApplicationSourceConfigOutput
	ToSimulationApplicationSourceConfigOutputWithContext(context.Context) SimulationApplicationSourceConfigOutput
}

// Information about a source configuration.
type SimulationApplicationSourceConfigArgs struct {
	// The target processor architecture for the application.
	Architecture SimulationApplicationSourceConfigArchitectureInput `pulumi:"architecture"`
	// The Amazon S3 bucket name.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The s3 object key.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
}

func (SimulationApplicationSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSourceConfig)(nil)).Elem()
}

func (i SimulationApplicationSourceConfigArgs) ToSimulationApplicationSourceConfigOutput() SimulationApplicationSourceConfigOutput {
	return i.ToSimulationApplicationSourceConfigOutputWithContext(context.Background())
}

func (i SimulationApplicationSourceConfigArgs) ToSimulationApplicationSourceConfigOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSourceConfigOutput)
}

// SimulationApplicationSourceConfigArrayInput is an input type that accepts SimulationApplicationSourceConfigArray and SimulationApplicationSourceConfigArrayOutput values.
// You can construct a concrete instance of `SimulationApplicationSourceConfigArrayInput` via:
//
//          SimulationApplicationSourceConfigArray{ SimulationApplicationSourceConfigArgs{...} }
type SimulationApplicationSourceConfigArrayInput interface {
	pulumi.Input

	ToSimulationApplicationSourceConfigArrayOutput() SimulationApplicationSourceConfigArrayOutput
	ToSimulationApplicationSourceConfigArrayOutputWithContext(context.Context) SimulationApplicationSourceConfigArrayOutput
}

type SimulationApplicationSourceConfigArray []SimulationApplicationSourceConfigInput

func (SimulationApplicationSourceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SimulationApplicationSourceConfig)(nil)).Elem()
}

func (i SimulationApplicationSourceConfigArray) ToSimulationApplicationSourceConfigArrayOutput() SimulationApplicationSourceConfigArrayOutput {
	return i.ToSimulationApplicationSourceConfigArrayOutputWithContext(context.Background())
}

func (i SimulationApplicationSourceConfigArray) ToSimulationApplicationSourceConfigArrayOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSourceConfigArrayOutput)
}

// Information about a source configuration.
type SimulationApplicationSourceConfigOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSourceConfig)(nil)).Elem()
}

func (o SimulationApplicationSourceConfigOutput) ToSimulationApplicationSourceConfigOutput() SimulationApplicationSourceConfigOutput {
	return o
}

func (o SimulationApplicationSourceConfigOutput) ToSimulationApplicationSourceConfigOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigOutput {
	return o
}

// The target processor architecture for the application.
func (o SimulationApplicationSourceConfigOutput) Architecture() SimulationApplicationSourceConfigArchitectureOutput {
	return o.ApplyT(func(v SimulationApplicationSourceConfig) SimulationApplicationSourceConfigArchitecture {
		return v.Architecture
	}).(SimulationApplicationSourceConfigArchitectureOutput)
}

// The Amazon S3 bucket name.
func (o SimulationApplicationSourceConfigOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v SimulationApplicationSourceConfig) string { return v.S3Bucket }).(pulumi.StringOutput)
}

// The s3 object key.
func (o SimulationApplicationSourceConfigOutput) S3Key() pulumi.StringOutput {
	return o.ApplyT(func(v SimulationApplicationSourceConfig) string { return v.S3Key }).(pulumi.StringOutput)
}

type SimulationApplicationSourceConfigArrayOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSourceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SimulationApplicationSourceConfig)(nil)).Elem()
}

func (o SimulationApplicationSourceConfigArrayOutput) ToSimulationApplicationSourceConfigArrayOutput() SimulationApplicationSourceConfigArrayOutput {
	return o
}

func (o SimulationApplicationSourceConfigArrayOutput) ToSimulationApplicationSourceConfigArrayOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigArrayOutput {
	return o
}

func (o SimulationApplicationSourceConfigArrayOutput) Index(i pulumi.IntInput) SimulationApplicationSourceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SimulationApplicationSourceConfig {
		return vs[0].([]SimulationApplicationSourceConfig)[vs[1].(int)]
	}).(SimulationApplicationSourceConfigOutput)
}

// A key-value pair to associate with a resource.
type SimulationApplicationTags struct {
}

// SimulationApplicationTagsInput is an input type that accepts SimulationApplicationTagsArgs and SimulationApplicationTagsOutput values.
// You can construct a concrete instance of `SimulationApplicationTagsInput` via:
//
//          SimulationApplicationTagsArgs{...}
type SimulationApplicationTagsInput interface {
	pulumi.Input

	ToSimulationApplicationTagsOutput() SimulationApplicationTagsOutput
	ToSimulationApplicationTagsOutputWithContext(context.Context) SimulationApplicationTagsOutput
}

// A key-value pair to associate with a resource.
type SimulationApplicationTagsArgs struct {
}

func (SimulationApplicationTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationTags)(nil)).Elem()
}

func (i SimulationApplicationTagsArgs) ToSimulationApplicationTagsOutput() SimulationApplicationTagsOutput {
	return i.ToSimulationApplicationTagsOutputWithContext(context.Background())
}

func (i SimulationApplicationTagsArgs) ToSimulationApplicationTagsOutputWithContext(ctx context.Context) SimulationApplicationTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationTagsOutput)
}

func (i SimulationApplicationTagsArgs) ToSimulationApplicationTagsPtrOutput() SimulationApplicationTagsPtrOutput {
	return i.ToSimulationApplicationTagsPtrOutputWithContext(context.Background())
}

func (i SimulationApplicationTagsArgs) ToSimulationApplicationTagsPtrOutputWithContext(ctx context.Context) SimulationApplicationTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationTagsOutput).ToSimulationApplicationTagsPtrOutputWithContext(ctx)
}

// SimulationApplicationTagsPtrInput is an input type that accepts SimulationApplicationTagsArgs, SimulationApplicationTagsPtr and SimulationApplicationTagsPtrOutput values.
// You can construct a concrete instance of `SimulationApplicationTagsPtrInput` via:
//
//          SimulationApplicationTagsArgs{...}
//
//  or:
//
//          nil
type SimulationApplicationTagsPtrInput interface {
	pulumi.Input

	ToSimulationApplicationTagsPtrOutput() SimulationApplicationTagsPtrOutput
	ToSimulationApplicationTagsPtrOutputWithContext(context.Context) SimulationApplicationTagsPtrOutput
}

type simulationApplicationTagsPtrType SimulationApplicationTagsArgs

func SimulationApplicationTagsPtr(v *SimulationApplicationTagsArgs) SimulationApplicationTagsPtrInput {
	return (*simulationApplicationTagsPtrType)(v)
}

func (*simulationApplicationTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationTags)(nil)).Elem()
}

func (i *simulationApplicationTagsPtrType) ToSimulationApplicationTagsPtrOutput() SimulationApplicationTagsPtrOutput {
	return i.ToSimulationApplicationTagsPtrOutputWithContext(context.Background())
}

func (i *simulationApplicationTagsPtrType) ToSimulationApplicationTagsPtrOutputWithContext(ctx context.Context) SimulationApplicationTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationTagsPtrOutput)
}

// A key-value pair to associate with a resource.
type SimulationApplicationTagsOutput struct{ *pulumi.OutputState }

func (SimulationApplicationTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationTags)(nil)).Elem()
}

func (o SimulationApplicationTagsOutput) ToSimulationApplicationTagsOutput() SimulationApplicationTagsOutput {
	return o
}

func (o SimulationApplicationTagsOutput) ToSimulationApplicationTagsOutputWithContext(ctx context.Context) SimulationApplicationTagsOutput {
	return o
}

func (o SimulationApplicationTagsOutput) ToSimulationApplicationTagsPtrOutput() SimulationApplicationTagsPtrOutput {
	return o.ToSimulationApplicationTagsPtrOutputWithContext(context.Background())
}

func (o SimulationApplicationTagsOutput) ToSimulationApplicationTagsPtrOutputWithContext(ctx context.Context) SimulationApplicationTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimulationApplicationTags) *SimulationApplicationTags {
		return &v
	}).(SimulationApplicationTagsPtrOutput)
}

type SimulationApplicationTagsPtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationTags)(nil)).Elem()
}

func (o SimulationApplicationTagsPtrOutput) ToSimulationApplicationTagsPtrOutput() SimulationApplicationTagsPtrOutput {
	return o
}

func (o SimulationApplicationTagsPtrOutput) ToSimulationApplicationTagsPtrOutputWithContext(ctx context.Context) SimulationApplicationTagsPtrOutput {
	return o
}

func (o SimulationApplicationTagsPtrOutput) Elem() SimulationApplicationTagsOutput {
	return o.ApplyT(func(v *SimulationApplicationTags) SimulationApplicationTags {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationTags
		return ret
	}).(SimulationApplicationTagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetTagsInput)(nil)).Elem(), FleetTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetTagsPtrInput)(nil)).Elem(), FleetTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationRobotSoftwareSuiteInput)(nil)).Elem(), RobotApplicationRobotSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationRobotSoftwareSuitePtrInput)(nil)).Elem(), RobotApplicationRobotSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationSourceConfigInput)(nil)).Elem(), RobotApplicationSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationSourceConfigArrayInput)(nil)).Elem(), RobotApplicationSourceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotTagsInput)(nil)).Elem(), RobotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotTagsPtrInput)(nil)).Elem(), RobotTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRenderingEngineInput)(nil)).Elem(), SimulationApplicationRenderingEngineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRenderingEnginePtrInput)(nil)).Elem(), SimulationApplicationRenderingEngineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRobotSoftwareSuiteInput)(nil)).Elem(), SimulationApplicationRobotSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRobotSoftwareSuitePtrInput)(nil)).Elem(), SimulationApplicationRobotSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuiteInput)(nil)).Elem(), SimulationApplicationSimulationSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuitePtrInput)(nil)).Elem(), SimulationApplicationSimulationSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSourceConfigInput)(nil)).Elem(), SimulationApplicationSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSourceConfigArrayInput)(nil)).Elem(), SimulationApplicationSourceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationTagsInput)(nil)).Elem(), SimulationApplicationTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationTagsPtrInput)(nil)).Elem(), SimulationApplicationTagsArgs{})
	pulumi.RegisterOutputType(FleetTagsOutput{})
	pulumi.RegisterOutputType(FleetTagsPtrOutput{})
	pulumi.RegisterOutputType(RobotApplicationRobotSoftwareSuiteOutput{})
	pulumi.RegisterOutputType(RobotApplicationRobotSoftwareSuitePtrOutput{})
	pulumi.RegisterOutputType(RobotApplicationSourceConfigOutput{})
	pulumi.RegisterOutputType(RobotApplicationSourceConfigArrayOutput{})
	pulumi.RegisterOutputType(RobotTagsOutput{})
	pulumi.RegisterOutputType(RobotTagsPtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRenderingEngineOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRenderingEnginePtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRobotSoftwareSuiteOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRobotSoftwareSuitePtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSimulationSoftwareSuiteOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSimulationSoftwareSuitePtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSourceConfigOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSourceConfigArrayOutput{})
	pulumi.RegisterOutputType(SimulationApplicationTagsOutput{})
	pulumi.RegisterOutputType(SimulationApplicationTagsPtrOutput{})
}
