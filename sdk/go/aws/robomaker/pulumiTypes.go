// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package robomaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The robot software suite used by the robot application.
type RobotApplicationRobotSoftwareSuite struct {
	// The name of robot software suite.
	Name RobotApplicationRobotSoftwareSuiteName `pulumi:"name"`
	// The version of robot software suite.
	Version *RobotApplicationRobotSoftwareSuiteVersion `pulumi:"version"`
}

// RobotApplicationRobotSoftwareSuiteInput is an input type that accepts RobotApplicationRobotSoftwareSuiteArgs and RobotApplicationRobotSoftwareSuiteOutput values.
// You can construct a concrete instance of `RobotApplicationRobotSoftwareSuiteInput` via:
//
//	RobotApplicationRobotSoftwareSuiteArgs{...}
type RobotApplicationRobotSoftwareSuiteInput interface {
	pulumi.Input

	ToRobotApplicationRobotSoftwareSuiteOutput() RobotApplicationRobotSoftwareSuiteOutput
	ToRobotApplicationRobotSoftwareSuiteOutputWithContext(context.Context) RobotApplicationRobotSoftwareSuiteOutput
}

// The robot software suite used by the robot application.
type RobotApplicationRobotSoftwareSuiteArgs struct {
	// The name of robot software suite.
	Name RobotApplicationRobotSoftwareSuiteNameInput `pulumi:"name"`
	// The version of robot software suite.
	Version RobotApplicationRobotSoftwareSuiteVersionPtrInput `pulumi:"version"`
}

func (RobotApplicationRobotSoftwareSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (i RobotApplicationRobotSoftwareSuiteArgs) ToRobotApplicationRobotSoftwareSuiteOutput() RobotApplicationRobotSoftwareSuiteOutput {
	return i.ToRobotApplicationRobotSoftwareSuiteOutputWithContext(context.Background())
}

func (i RobotApplicationRobotSoftwareSuiteArgs) ToRobotApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationRobotSoftwareSuiteOutput)
}

// The robot software suite used by the robot application.
type RobotApplicationRobotSoftwareSuiteOutput struct{ *pulumi.OutputState }

func (RobotApplicationRobotSoftwareSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o RobotApplicationRobotSoftwareSuiteOutput) ToRobotApplicationRobotSoftwareSuiteOutput() RobotApplicationRobotSoftwareSuiteOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuiteOutput) ToRobotApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuiteOutput {
	return o
}

// The name of robot software suite.
func (o RobotApplicationRobotSoftwareSuiteOutput) Name() RobotApplicationRobotSoftwareSuiteNameOutput {
	return o.ApplyT(func(v RobotApplicationRobotSoftwareSuite) RobotApplicationRobotSoftwareSuiteName { return v.Name }).(RobotApplicationRobotSoftwareSuiteNameOutput)
}

// The version of robot software suite.
func (o RobotApplicationRobotSoftwareSuiteOutput) Version() RobotApplicationRobotSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v RobotApplicationRobotSoftwareSuite) *RobotApplicationRobotSoftwareSuiteVersion {
		return v.Version
	}).(RobotApplicationRobotSoftwareSuiteVersionPtrOutput)
}

type RobotApplicationRobotSoftwareSuitePtrOutput struct{ *pulumi.OutputState }

func (RobotApplicationRobotSoftwareSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) ToRobotApplicationRobotSoftwareSuitePtrOutput() RobotApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) ToRobotApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) RobotApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o RobotApplicationRobotSoftwareSuitePtrOutput) Elem() RobotApplicationRobotSoftwareSuiteOutput {
	return o.ApplyT(func(v *RobotApplicationRobotSoftwareSuite) RobotApplicationRobotSoftwareSuite {
		if v != nil {
			return *v
		}
		var ret RobotApplicationRobotSoftwareSuite
		return ret
	}).(RobotApplicationRobotSoftwareSuiteOutput)
}

// The name of robot software suite.
func (o RobotApplicationRobotSoftwareSuitePtrOutput) Name() RobotApplicationRobotSoftwareSuiteNamePtrOutput {
	return o.ApplyT(func(v *RobotApplicationRobotSoftwareSuite) *RobotApplicationRobotSoftwareSuiteName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(RobotApplicationRobotSoftwareSuiteNamePtrOutput)
}

// The version of robot software suite.
func (o RobotApplicationRobotSoftwareSuitePtrOutput) Version() RobotApplicationRobotSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v *RobotApplicationRobotSoftwareSuite) *RobotApplicationRobotSoftwareSuiteVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(RobotApplicationRobotSoftwareSuiteVersionPtrOutput)
}

type RobotApplicationSourceConfig struct {
	// The architecture of robot application.
	Architecture RobotApplicationSourceConfigArchitecture `pulumi:"architecture"`
	// The Arn of the S3Bucket that stores the robot application source.
	S3Bucket string `pulumi:"s3Bucket"`
	// The s3 key of robot application source.
	S3Key string `pulumi:"s3Key"`
}

// RobotApplicationSourceConfigInput is an input type that accepts RobotApplicationSourceConfigArgs and RobotApplicationSourceConfigOutput values.
// You can construct a concrete instance of `RobotApplicationSourceConfigInput` via:
//
//	RobotApplicationSourceConfigArgs{...}
type RobotApplicationSourceConfigInput interface {
	pulumi.Input

	ToRobotApplicationSourceConfigOutput() RobotApplicationSourceConfigOutput
	ToRobotApplicationSourceConfigOutputWithContext(context.Context) RobotApplicationSourceConfigOutput
}

type RobotApplicationSourceConfigArgs struct {
	// The architecture of robot application.
	Architecture RobotApplicationSourceConfigArchitectureInput `pulumi:"architecture"`
	// The Arn of the S3Bucket that stores the robot application source.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The s3 key of robot application source.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
}

func (RobotApplicationSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationSourceConfig)(nil)).Elem()
}

func (i RobotApplicationSourceConfigArgs) ToRobotApplicationSourceConfigOutput() RobotApplicationSourceConfigOutput {
	return i.ToRobotApplicationSourceConfigOutputWithContext(context.Background())
}

func (i RobotApplicationSourceConfigArgs) ToRobotApplicationSourceConfigOutputWithContext(ctx context.Context) RobotApplicationSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationSourceConfigOutput)
}

// RobotApplicationSourceConfigArrayInput is an input type that accepts RobotApplicationSourceConfigArray and RobotApplicationSourceConfigArrayOutput values.
// You can construct a concrete instance of `RobotApplicationSourceConfigArrayInput` via:
//
//	RobotApplicationSourceConfigArray{ RobotApplicationSourceConfigArgs{...} }
type RobotApplicationSourceConfigArrayInput interface {
	pulumi.Input

	ToRobotApplicationSourceConfigArrayOutput() RobotApplicationSourceConfigArrayOutput
	ToRobotApplicationSourceConfigArrayOutputWithContext(context.Context) RobotApplicationSourceConfigArrayOutput
}

type RobotApplicationSourceConfigArray []RobotApplicationSourceConfigInput

func (RobotApplicationSourceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotApplicationSourceConfig)(nil)).Elem()
}

func (i RobotApplicationSourceConfigArray) ToRobotApplicationSourceConfigArrayOutput() RobotApplicationSourceConfigArrayOutput {
	return i.ToRobotApplicationSourceConfigArrayOutputWithContext(context.Background())
}

func (i RobotApplicationSourceConfigArray) ToRobotApplicationSourceConfigArrayOutputWithContext(ctx context.Context) RobotApplicationSourceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationSourceConfigArrayOutput)
}

type RobotApplicationSourceConfigOutput struct{ *pulumi.OutputState }

func (RobotApplicationSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RobotApplicationSourceConfig)(nil)).Elem()
}

func (o RobotApplicationSourceConfigOutput) ToRobotApplicationSourceConfigOutput() RobotApplicationSourceConfigOutput {
	return o
}

func (o RobotApplicationSourceConfigOutput) ToRobotApplicationSourceConfigOutputWithContext(ctx context.Context) RobotApplicationSourceConfigOutput {
	return o
}

// The architecture of robot application.
func (o RobotApplicationSourceConfigOutput) Architecture() RobotApplicationSourceConfigArchitectureOutput {
	return o.ApplyT(func(v RobotApplicationSourceConfig) RobotApplicationSourceConfigArchitecture { return v.Architecture }).(RobotApplicationSourceConfigArchitectureOutput)
}

// The Arn of the S3Bucket that stores the robot application source.
func (o RobotApplicationSourceConfigOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationSourceConfig) string { return v.S3Bucket }).(pulumi.StringOutput)
}

// The s3 key of robot application source.
func (o RobotApplicationSourceConfigOutput) S3Key() pulumi.StringOutput {
	return o.ApplyT(func(v RobotApplicationSourceConfig) string { return v.S3Key }).(pulumi.StringOutput)
}

type RobotApplicationSourceConfigArrayOutput struct{ *pulumi.OutputState }

func (RobotApplicationSourceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RobotApplicationSourceConfig)(nil)).Elem()
}

func (o RobotApplicationSourceConfigArrayOutput) ToRobotApplicationSourceConfigArrayOutput() RobotApplicationSourceConfigArrayOutput {
	return o
}

func (o RobotApplicationSourceConfigArrayOutput) ToRobotApplicationSourceConfigArrayOutputWithContext(ctx context.Context) RobotApplicationSourceConfigArrayOutput {
	return o
}

func (o RobotApplicationSourceConfigArrayOutput) Index(i pulumi.IntInput) RobotApplicationSourceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RobotApplicationSourceConfig {
		return vs[0].([]RobotApplicationSourceConfig)[vs[1].(int)]
	}).(RobotApplicationSourceConfigOutput)
}

// Information about a rendering engine.
type SimulationApplicationRenderingEngine struct {
	// The name of the rendering engine.
	Name SimulationApplicationRenderingEngineName `pulumi:"name"`
	// The version of the rendering engine.
	Version string `pulumi:"version"`
}

// SimulationApplicationRenderingEngineInput is an input type that accepts SimulationApplicationRenderingEngineArgs and SimulationApplicationRenderingEngineOutput values.
// You can construct a concrete instance of `SimulationApplicationRenderingEngineInput` via:
//
//	SimulationApplicationRenderingEngineArgs{...}
type SimulationApplicationRenderingEngineInput interface {
	pulumi.Input

	ToSimulationApplicationRenderingEngineOutput() SimulationApplicationRenderingEngineOutput
	ToSimulationApplicationRenderingEngineOutputWithContext(context.Context) SimulationApplicationRenderingEngineOutput
}

// Information about a rendering engine.
type SimulationApplicationRenderingEngineArgs struct {
	// The name of the rendering engine.
	Name SimulationApplicationRenderingEngineNameInput `pulumi:"name"`
	// The version of the rendering engine.
	Version pulumi.StringInput `pulumi:"version"`
}

func (SimulationApplicationRenderingEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEngineOutput() SimulationApplicationRenderingEngineOutput {
	return i.ToSimulationApplicationRenderingEngineOutputWithContext(context.Background())
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEngineOutputWithContext(ctx context.Context) SimulationApplicationRenderingEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRenderingEngineOutput)
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return i.ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Background())
}

func (i SimulationApplicationRenderingEngineArgs) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRenderingEngineOutput).ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx)
}

// SimulationApplicationRenderingEnginePtrInput is an input type that accepts SimulationApplicationRenderingEngineArgs, SimulationApplicationRenderingEnginePtr and SimulationApplicationRenderingEnginePtrOutput values.
// You can construct a concrete instance of `SimulationApplicationRenderingEnginePtrInput` via:
//
//	        SimulationApplicationRenderingEngineArgs{...}
//
//	or:
//
//	        nil
type SimulationApplicationRenderingEnginePtrInput interface {
	pulumi.Input

	ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput
	ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Context) SimulationApplicationRenderingEnginePtrOutput
}

type simulationApplicationRenderingEnginePtrType SimulationApplicationRenderingEngineArgs

func SimulationApplicationRenderingEnginePtr(v *SimulationApplicationRenderingEngineArgs) SimulationApplicationRenderingEnginePtrInput {
	return (*simulationApplicationRenderingEnginePtrType)(v)
}

func (*simulationApplicationRenderingEnginePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (i *simulationApplicationRenderingEnginePtrType) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return i.ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Background())
}

func (i *simulationApplicationRenderingEnginePtrType) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRenderingEnginePtrOutput)
}

// Information about a rendering engine.
type SimulationApplicationRenderingEngineOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRenderingEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEngineOutput() SimulationApplicationRenderingEngineOutput {
	return o
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEngineOutputWithContext(ctx context.Context) SimulationApplicationRenderingEngineOutput {
	return o
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return o.ToSimulationApplicationRenderingEnginePtrOutputWithContext(context.Background())
}

func (o SimulationApplicationRenderingEngineOutput) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimulationApplicationRenderingEngine) *SimulationApplicationRenderingEngine {
		return &v
	}).(SimulationApplicationRenderingEnginePtrOutput)
}

// The name of the rendering engine.
func (o SimulationApplicationRenderingEngineOutput) Name() SimulationApplicationRenderingEngineNameOutput {
	return o.ApplyT(func(v SimulationApplicationRenderingEngine) SimulationApplicationRenderingEngineName { return v.Name }).(SimulationApplicationRenderingEngineNameOutput)
}

// The version of the rendering engine.
func (o SimulationApplicationRenderingEngineOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SimulationApplicationRenderingEngine) string { return v.Version }).(pulumi.StringOutput)
}

type SimulationApplicationRenderingEnginePtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRenderingEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRenderingEngine)(nil)).Elem()
}

func (o SimulationApplicationRenderingEnginePtrOutput) ToSimulationApplicationRenderingEnginePtrOutput() SimulationApplicationRenderingEnginePtrOutput {
	return o
}

func (o SimulationApplicationRenderingEnginePtrOutput) ToSimulationApplicationRenderingEnginePtrOutputWithContext(ctx context.Context) SimulationApplicationRenderingEnginePtrOutput {
	return o
}

func (o SimulationApplicationRenderingEnginePtrOutput) Elem() SimulationApplicationRenderingEngineOutput {
	return o.ApplyT(func(v *SimulationApplicationRenderingEngine) SimulationApplicationRenderingEngine {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationRenderingEngine
		return ret
	}).(SimulationApplicationRenderingEngineOutput)
}

// The name of the rendering engine.
func (o SimulationApplicationRenderingEnginePtrOutput) Name() SimulationApplicationRenderingEngineNamePtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRenderingEngine) *SimulationApplicationRenderingEngineName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(SimulationApplicationRenderingEngineNamePtrOutput)
}

// The version of the rendering engine.
func (o SimulationApplicationRenderingEnginePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRenderingEngine) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Information about a robot software suite.
type SimulationApplicationRobotSoftwareSuite struct {
	// The name of the robot software suite.
	Name SimulationApplicationRobotSoftwareSuiteName `pulumi:"name"`
	// The version of the robot software suite.
	Version *SimulationApplicationRobotSoftwareSuiteVersion `pulumi:"version"`
}

// SimulationApplicationRobotSoftwareSuiteInput is an input type that accepts SimulationApplicationRobotSoftwareSuiteArgs and SimulationApplicationRobotSoftwareSuiteOutput values.
// You can construct a concrete instance of `SimulationApplicationRobotSoftwareSuiteInput` via:
//
//	SimulationApplicationRobotSoftwareSuiteArgs{...}
type SimulationApplicationRobotSoftwareSuiteInput interface {
	pulumi.Input

	ToSimulationApplicationRobotSoftwareSuiteOutput() SimulationApplicationRobotSoftwareSuiteOutput
	ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(context.Context) SimulationApplicationRobotSoftwareSuiteOutput
}

// Information about a robot software suite.
type SimulationApplicationRobotSoftwareSuiteArgs struct {
	// The name of the robot software suite.
	Name SimulationApplicationRobotSoftwareSuiteNameInput `pulumi:"name"`
	// The version of the robot software suite.
	Version SimulationApplicationRobotSoftwareSuiteVersionPtrInput `pulumi:"version"`
}

func (SimulationApplicationRobotSoftwareSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (i SimulationApplicationRobotSoftwareSuiteArgs) ToSimulationApplicationRobotSoftwareSuiteOutput() SimulationApplicationRobotSoftwareSuiteOutput {
	return i.ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(context.Background())
}

func (i SimulationApplicationRobotSoftwareSuiteArgs) ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationRobotSoftwareSuiteOutput)
}

// Information about a robot software suite.
type SimulationApplicationRobotSoftwareSuiteOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRobotSoftwareSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationRobotSoftwareSuiteOutput) ToSimulationApplicationRobotSoftwareSuiteOutput() SimulationApplicationRobotSoftwareSuiteOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuiteOutput) ToSimulationApplicationRobotSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuiteOutput {
	return o
}

// The name of the robot software suite.
func (o SimulationApplicationRobotSoftwareSuiteOutput) Name() SimulationApplicationRobotSoftwareSuiteNameOutput {
	return o.ApplyT(func(v SimulationApplicationRobotSoftwareSuite) SimulationApplicationRobotSoftwareSuiteName {
		return v.Name
	}).(SimulationApplicationRobotSoftwareSuiteNameOutput)
}

// The version of the robot software suite.
func (o SimulationApplicationRobotSoftwareSuiteOutput) Version() SimulationApplicationRobotSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v SimulationApplicationRobotSoftwareSuite) *SimulationApplicationRobotSoftwareSuiteVersion {
		return v.Version
	}).(SimulationApplicationRobotSoftwareSuiteVersionPtrOutput)
}

type SimulationApplicationRobotSoftwareSuitePtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationRobotSoftwareSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationRobotSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationRobotSoftwareSuitePtrOutput) ToSimulationApplicationRobotSoftwareSuitePtrOutput() SimulationApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuitePtrOutput) ToSimulationApplicationRobotSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationRobotSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationRobotSoftwareSuitePtrOutput) Elem() SimulationApplicationRobotSoftwareSuiteOutput {
	return o.ApplyT(func(v *SimulationApplicationRobotSoftwareSuite) SimulationApplicationRobotSoftwareSuite {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationRobotSoftwareSuite
		return ret
	}).(SimulationApplicationRobotSoftwareSuiteOutput)
}

// The name of the robot software suite.
func (o SimulationApplicationRobotSoftwareSuitePtrOutput) Name() SimulationApplicationRobotSoftwareSuiteNamePtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRobotSoftwareSuite) *SimulationApplicationRobotSoftwareSuiteName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(SimulationApplicationRobotSoftwareSuiteNamePtrOutput)
}

// The version of the robot software suite.
func (o SimulationApplicationRobotSoftwareSuitePtrOutput) Version() SimulationApplicationRobotSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v *SimulationApplicationRobotSoftwareSuite) *SimulationApplicationRobotSoftwareSuiteVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(SimulationApplicationRobotSoftwareSuiteVersionPtrOutput)
}

// Information about a simulation software suite.
type SimulationApplicationSimulationSoftwareSuite struct {
	// The name of the simulation software suite.
	Name SimulationApplicationSimulationSoftwareSuiteName `pulumi:"name"`
	// The version of the simulation software suite.
	Version *SimulationApplicationSimulationSoftwareSuiteVersion `pulumi:"version"`
}

// SimulationApplicationSimulationSoftwareSuiteInput is an input type that accepts SimulationApplicationSimulationSoftwareSuiteArgs and SimulationApplicationSimulationSoftwareSuiteOutput values.
// You can construct a concrete instance of `SimulationApplicationSimulationSoftwareSuiteInput` via:
//
//	SimulationApplicationSimulationSoftwareSuiteArgs{...}
type SimulationApplicationSimulationSoftwareSuiteInput interface {
	pulumi.Input

	ToSimulationApplicationSimulationSoftwareSuiteOutput() SimulationApplicationSimulationSoftwareSuiteOutput
	ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(context.Context) SimulationApplicationSimulationSoftwareSuiteOutput
}

// Information about a simulation software suite.
type SimulationApplicationSimulationSoftwareSuiteArgs struct {
	// The name of the simulation software suite.
	Name SimulationApplicationSimulationSoftwareSuiteNameInput `pulumi:"name"`
	// The version of the simulation software suite.
	Version SimulationApplicationSimulationSoftwareSuiteVersionPtrInput `pulumi:"version"`
}

func (SimulationApplicationSimulationSoftwareSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (i SimulationApplicationSimulationSoftwareSuiteArgs) ToSimulationApplicationSimulationSoftwareSuiteOutput() SimulationApplicationSimulationSoftwareSuiteOutput {
	return i.ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(context.Background())
}

func (i SimulationApplicationSimulationSoftwareSuiteArgs) ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSimulationSoftwareSuiteOutput)
}

// Information about a simulation software suite.
type SimulationApplicationSimulationSoftwareSuiteOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSimulationSoftwareSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationSimulationSoftwareSuiteOutput) ToSimulationApplicationSimulationSoftwareSuiteOutput() SimulationApplicationSimulationSoftwareSuiteOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuiteOutput) ToSimulationApplicationSimulationSoftwareSuiteOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuiteOutput {
	return o
}

// The name of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuiteOutput) Name() SimulationApplicationSimulationSoftwareSuiteNameOutput {
	return o.ApplyT(func(v SimulationApplicationSimulationSoftwareSuite) SimulationApplicationSimulationSoftwareSuiteName {
		return v.Name
	}).(SimulationApplicationSimulationSoftwareSuiteNameOutput)
}

// The version of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuiteOutput) Version() SimulationApplicationSimulationSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v SimulationApplicationSimulationSoftwareSuite) *SimulationApplicationSimulationSoftwareSuiteVersion {
		return v.Version
	}).(SimulationApplicationSimulationSoftwareSuiteVersionPtrOutput)
}

type SimulationApplicationSimulationSoftwareSuitePtrOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSimulationSoftwareSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimulationApplicationSimulationSoftwareSuite)(nil)).Elem()
}

func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) ToSimulationApplicationSimulationSoftwareSuitePtrOutput() SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) ToSimulationApplicationSimulationSoftwareSuitePtrOutputWithContext(ctx context.Context) SimulationApplicationSimulationSoftwareSuitePtrOutput {
	return o
}

func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) Elem() SimulationApplicationSimulationSoftwareSuiteOutput {
	return o.ApplyT(func(v *SimulationApplicationSimulationSoftwareSuite) SimulationApplicationSimulationSoftwareSuite {
		if v != nil {
			return *v
		}
		var ret SimulationApplicationSimulationSoftwareSuite
		return ret
	}).(SimulationApplicationSimulationSoftwareSuiteOutput)
}

// The name of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) Name() SimulationApplicationSimulationSoftwareSuiteNamePtrOutput {
	return o.ApplyT(func(v *SimulationApplicationSimulationSoftwareSuite) *SimulationApplicationSimulationSoftwareSuiteName {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(SimulationApplicationSimulationSoftwareSuiteNamePtrOutput)
}

// The version of the simulation software suite.
func (o SimulationApplicationSimulationSoftwareSuitePtrOutput) Version() SimulationApplicationSimulationSoftwareSuiteVersionPtrOutput {
	return o.ApplyT(func(v *SimulationApplicationSimulationSoftwareSuite) *SimulationApplicationSimulationSoftwareSuiteVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(SimulationApplicationSimulationSoftwareSuiteVersionPtrOutput)
}

// Information about a source configuration.
type SimulationApplicationSourceConfig struct {
	// The target processor architecture for the application.
	Architecture SimulationApplicationSourceConfigArchitecture `pulumi:"architecture"`
	// The Amazon S3 bucket name.
	S3Bucket string `pulumi:"s3Bucket"`
	// The s3 object key.
	S3Key string `pulumi:"s3Key"`
}

// SimulationApplicationSourceConfigInput is an input type that accepts SimulationApplicationSourceConfigArgs and SimulationApplicationSourceConfigOutput values.
// You can construct a concrete instance of `SimulationApplicationSourceConfigInput` via:
//
//	SimulationApplicationSourceConfigArgs{...}
type SimulationApplicationSourceConfigInput interface {
	pulumi.Input

	ToSimulationApplicationSourceConfigOutput() SimulationApplicationSourceConfigOutput
	ToSimulationApplicationSourceConfigOutputWithContext(context.Context) SimulationApplicationSourceConfigOutput
}

// Information about a source configuration.
type SimulationApplicationSourceConfigArgs struct {
	// The target processor architecture for the application.
	Architecture SimulationApplicationSourceConfigArchitectureInput `pulumi:"architecture"`
	// The Amazon S3 bucket name.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The s3 object key.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
}

func (SimulationApplicationSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSourceConfig)(nil)).Elem()
}

func (i SimulationApplicationSourceConfigArgs) ToSimulationApplicationSourceConfigOutput() SimulationApplicationSourceConfigOutput {
	return i.ToSimulationApplicationSourceConfigOutputWithContext(context.Background())
}

func (i SimulationApplicationSourceConfigArgs) ToSimulationApplicationSourceConfigOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSourceConfigOutput)
}

// SimulationApplicationSourceConfigArrayInput is an input type that accepts SimulationApplicationSourceConfigArray and SimulationApplicationSourceConfigArrayOutput values.
// You can construct a concrete instance of `SimulationApplicationSourceConfigArrayInput` via:
//
//	SimulationApplicationSourceConfigArray{ SimulationApplicationSourceConfigArgs{...} }
type SimulationApplicationSourceConfigArrayInput interface {
	pulumi.Input

	ToSimulationApplicationSourceConfigArrayOutput() SimulationApplicationSourceConfigArrayOutput
	ToSimulationApplicationSourceConfigArrayOutputWithContext(context.Context) SimulationApplicationSourceConfigArrayOutput
}

type SimulationApplicationSourceConfigArray []SimulationApplicationSourceConfigInput

func (SimulationApplicationSourceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SimulationApplicationSourceConfig)(nil)).Elem()
}

func (i SimulationApplicationSourceConfigArray) ToSimulationApplicationSourceConfigArrayOutput() SimulationApplicationSourceConfigArrayOutput {
	return i.ToSimulationApplicationSourceConfigArrayOutputWithContext(context.Background())
}

func (i SimulationApplicationSourceConfigArray) ToSimulationApplicationSourceConfigArrayOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationApplicationSourceConfigArrayOutput)
}

// Information about a source configuration.
type SimulationApplicationSourceConfigOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimulationApplicationSourceConfig)(nil)).Elem()
}

func (o SimulationApplicationSourceConfigOutput) ToSimulationApplicationSourceConfigOutput() SimulationApplicationSourceConfigOutput {
	return o
}

func (o SimulationApplicationSourceConfigOutput) ToSimulationApplicationSourceConfigOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigOutput {
	return o
}

// The target processor architecture for the application.
func (o SimulationApplicationSourceConfigOutput) Architecture() SimulationApplicationSourceConfigArchitectureOutput {
	return o.ApplyT(func(v SimulationApplicationSourceConfig) SimulationApplicationSourceConfigArchitecture {
		return v.Architecture
	}).(SimulationApplicationSourceConfigArchitectureOutput)
}

// The Amazon S3 bucket name.
func (o SimulationApplicationSourceConfigOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v SimulationApplicationSourceConfig) string { return v.S3Bucket }).(pulumi.StringOutput)
}

// The s3 object key.
func (o SimulationApplicationSourceConfigOutput) S3Key() pulumi.StringOutput {
	return o.ApplyT(func(v SimulationApplicationSourceConfig) string { return v.S3Key }).(pulumi.StringOutput)
}

type SimulationApplicationSourceConfigArrayOutput struct{ *pulumi.OutputState }

func (SimulationApplicationSourceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SimulationApplicationSourceConfig)(nil)).Elem()
}

func (o SimulationApplicationSourceConfigArrayOutput) ToSimulationApplicationSourceConfigArrayOutput() SimulationApplicationSourceConfigArrayOutput {
	return o
}

func (o SimulationApplicationSourceConfigArrayOutput) ToSimulationApplicationSourceConfigArrayOutputWithContext(ctx context.Context) SimulationApplicationSourceConfigArrayOutput {
	return o
}

func (o SimulationApplicationSourceConfigArrayOutput) Index(i pulumi.IntInput) SimulationApplicationSourceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SimulationApplicationSourceConfig {
		return vs[0].([]SimulationApplicationSourceConfig)[vs[1].(int)]
	}).(SimulationApplicationSourceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationRobotSoftwareSuiteInput)(nil)).Elem(), RobotApplicationRobotSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationSourceConfigInput)(nil)).Elem(), RobotApplicationSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationSourceConfigArrayInput)(nil)).Elem(), RobotApplicationSourceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRenderingEngineInput)(nil)).Elem(), SimulationApplicationRenderingEngineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRenderingEnginePtrInput)(nil)).Elem(), SimulationApplicationRenderingEngineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationRobotSoftwareSuiteInput)(nil)).Elem(), SimulationApplicationRobotSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSimulationSoftwareSuiteInput)(nil)).Elem(), SimulationApplicationSimulationSoftwareSuiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSourceConfigInput)(nil)).Elem(), SimulationApplicationSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationApplicationSourceConfigArrayInput)(nil)).Elem(), SimulationApplicationSourceConfigArray{})
	pulumi.RegisterOutputType(RobotApplicationRobotSoftwareSuiteOutput{})
	pulumi.RegisterOutputType(RobotApplicationRobotSoftwareSuitePtrOutput{})
	pulumi.RegisterOutputType(RobotApplicationSourceConfigOutput{})
	pulumi.RegisterOutputType(RobotApplicationSourceConfigArrayOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRenderingEngineOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRenderingEnginePtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRobotSoftwareSuiteOutput{})
	pulumi.RegisterOutputType(SimulationApplicationRobotSoftwareSuitePtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSimulationSoftwareSuiteOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSimulationSoftwareSuitePtrOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSourceConfigOutput{})
	pulumi.RegisterOutputType(SimulationApplicationSourceConfigArrayOutput{})
}
