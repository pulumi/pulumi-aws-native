// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package robomaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This schema is for testing purpose only.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := robomaker.NewRobotApplication(ctx, "basicRobotApplication", &robomaker.RobotApplicationArgs{
//				Name:        pulumi.String("MyRobotApplication"),
//				Environment: pulumi.String("111122223333.dkr.ecr.us-west-2.amazonaws.com/my-robot-app:latest"),
//				RobotSoftwareSuite: &robomaker.RobotApplicationRobotSoftwareSuiteArgs{
//					Name: robomaker.RobotApplicationRobotSoftwareSuiteNameGeneral,
//				},
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("BasicRobotApplication"),
//					"type": pulumi.String("CFN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("robotApplication", "BasicRobotApplication")
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicRobotApplication, err := robomaker.NewRobotApplication(ctx, "basicRobotApplication", &robomaker.RobotApplicationArgs{
//				Name:        pulumi.String("MyRobotApplication"),
//				Environment: pulumi.String("111122223333.dkr.ecr.us-west-2.amazonaws.com/my-robot-app:latest"),
//				RobotSoftwareSuite: &robomaker.RobotApplicationRobotSoftwareSuiteArgs{
//					Name: robomaker.RobotApplicationRobotSoftwareSuiteNameGeneral,
//				},
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("BasicRobotApplication"),
//					"type": pulumi.String("CFN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("robotApplication", basicRobotApplication.ID())
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicRobotApplication, err := robomaker.NewRobotApplication(ctx, "basicRobotApplication", &robomaker.RobotApplicationArgs{
//				Name:        pulumi.String("MyRobotApplication"),
//				Environment: pulumi.String("111122223333.dkr.ecr.us-west-2.amazonaws.com/my-robot-app:latest"),
//				RobotSoftwareSuite: &robomaker.RobotApplicationRobotSoftwareSuiteArgs{
//					Name: robomaker.RobotApplicationRobotSoftwareSuiteNameGeneral,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = robomaker.NewRobotApplicationVersion(ctx, "basicRobotApplicationVersion", &robomaker.RobotApplicationVersionArgs{
//				Application:       basicRobotApplication.Arn,
//				CurrentRevisionId: basicRobotApplication.CurrentRevisionId,
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("robotApplicationVersion", "BasicRobotApplicationVersion")
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/robomaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			basicRobotApplication, err := robomaker.NewRobotApplication(ctx, "basicRobotApplication", &robomaker.RobotApplicationArgs{
//				Name:        pulumi.String("MyRobotApplication"),
//				Environment: pulumi.String("111122223333.dkr.ecr.us-west-2.amazonaws.com/my-robot-app:latest"),
//				RobotSoftwareSuite: &robomaker.RobotApplicationRobotSoftwareSuiteArgs{
//					Name: robomaker.RobotApplicationRobotSoftwareSuiteNameGeneral,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			basicRobotApplicationVersion, err := robomaker.NewRobotApplicationVersion(ctx, "basicRobotApplicationVersion", &robomaker.RobotApplicationVersionArgs{
//				Application:       basicRobotApplication.Arn,
//				CurrentRevisionId: basicRobotApplication.CurrentRevisionId,
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("robotApplicationVersion", basicRobotApplicationVersion.ID())
//			return nil
//		})
//	}
//
// ```
type RobotApplication struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the robot application.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The revision ID of robot application.
	CurrentRevisionId pulumi.StringPtrOutput `pulumi:"currentRevisionId"`
	// The URI of the Docker image for the robot application.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// The name of the robot application.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Information about a robot software suite.
	RobotSoftwareSuite RobotApplicationRobotSoftwareSuiteOutput `pulumi:"robotSoftwareSuite"`
	// The sources of the robot application.
	Sources RobotApplicationSourceConfigArrayOutput `pulumi:"sources"`
	// A map that contains tag keys and tag values that are attached to the robot application.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewRobotApplication registers a new resource with the given unique name, arguments, and options.
func NewRobotApplication(ctx *pulumi.Context,
	name string, args *RobotApplicationArgs, opts ...pulumi.ResourceOption) (*RobotApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RobotSoftwareSuite == nil {
		return nil, errors.New("invalid value for required argument 'RobotSoftwareSuite'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RobotApplication
	err := ctx.RegisterResource("aws-native:robomaker:RobotApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRobotApplication gets an existing RobotApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRobotApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RobotApplicationState, opts ...pulumi.ResourceOption) (*RobotApplication, error) {
	var resource RobotApplication
	err := ctx.ReadResource("aws-native:robomaker:RobotApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RobotApplication resources.
type robotApplicationState struct {
}

type RobotApplicationState struct {
}

func (RobotApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*robotApplicationState)(nil)).Elem()
}

type robotApplicationArgs struct {
	// The revision ID of robot application.
	CurrentRevisionId *string `pulumi:"currentRevisionId"`
	// The URI of the Docker image for the robot application.
	Environment *string `pulumi:"environment"`
	// The name of the robot application.
	Name *string `pulumi:"name"`
	// Information about a robot software suite.
	RobotSoftwareSuite RobotApplicationRobotSoftwareSuite `pulumi:"robotSoftwareSuite"`
	// The sources of the robot application.
	Sources []RobotApplicationSourceConfig `pulumi:"sources"`
	// A map that contains tag keys and tag values that are attached to the robot application.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RobotApplication resource.
type RobotApplicationArgs struct {
	// The revision ID of robot application.
	CurrentRevisionId pulumi.StringPtrInput
	// The URI of the Docker image for the robot application.
	Environment pulumi.StringPtrInput
	// The name of the robot application.
	Name pulumi.StringPtrInput
	// Information about a robot software suite.
	RobotSoftwareSuite RobotApplicationRobotSoftwareSuiteInput
	// The sources of the robot application.
	Sources RobotApplicationSourceConfigArrayInput
	// A map that contains tag keys and tag values that are attached to the robot application.
	Tags pulumi.StringMapInput
}

func (RobotApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*robotApplicationArgs)(nil)).Elem()
}

type RobotApplicationInput interface {
	pulumi.Input

	ToRobotApplicationOutput() RobotApplicationOutput
	ToRobotApplicationOutputWithContext(ctx context.Context) RobotApplicationOutput
}

func (*RobotApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotApplication)(nil)).Elem()
}

func (i *RobotApplication) ToRobotApplicationOutput() RobotApplicationOutput {
	return i.ToRobotApplicationOutputWithContext(context.Background())
}

func (i *RobotApplication) ToRobotApplicationOutputWithContext(ctx context.Context) RobotApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RobotApplicationOutput)
}

type RobotApplicationOutput struct{ *pulumi.OutputState }

func (RobotApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RobotApplication)(nil)).Elem()
}

func (o RobotApplicationOutput) ToRobotApplicationOutput() RobotApplicationOutput {
	return o
}

func (o RobotApplicationOutput) ToRobotApplicationOutputWithContext(ctx context.Context) RobotApplicationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the robot application.
func (o RobotApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RobotApplication) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The revision ID of robot application.
func (o RobotApplicationOutput) CurrentRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RobotApplication) pulumi.StringPtrOutput { return v.CurrentRevisionId }).(pulumi.StringPtrOutput)
}

// The URI of the Docker image for the robot application.
func (o RobotApplicationOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RobotApplication) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// The name of the robot application.
func (o RobotApplicationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RobotApplication) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Information about a robot software suite.
func (o RobotApplicationOutput) RobotSoftwareSuite() RobotApplicationRobotSoftwareSuiteOutput {
	return o.ApplyT(func(v *RobotApplication) RobotApplicationRobotSoftwareSuiteOutput { return v.RobotSoftwareSuite }).(RobotApplicationRobotSoftwareSuiteOutput)
}

// The sources of the robot application.
func (o RobotApplicationOutput) Sources() RobotApplicationSourceConfigArrayOutput {
	return o.ApplyT(func(v *RobotApplication) RobotApplicationSourceConfigArrayOutput { return v.Sources }).(RobotApplicationSourceConfigArrayOutput)
}

// A map that contains tag keys and tag values that are attached to the robot application.
func (o RobotApplicationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RobotApplication) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RobotApplicationInput)(nil)).Elem(), &RobotApplication{})
	pulumi.RegisterOutputType(RobotApplicationOutput{})
}
