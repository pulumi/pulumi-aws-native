// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arcregionswitch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PlanArcRoutingControlConfiguration struct {
	CrossAccountRole         *string                `pulumi:"crossAccountRole"`
	ExternalId               *string                `pulumi:"externalId"`
	RegionAndRoutingControls map[string]interface{} `pulumi:"regionAndRoutingControls"`
	TimeoutMinutes           *float64               `pulumi:"timeoutMinutes"`
}

// PlanArcRoutingControlConfigurationInput is an input type that accepts PlanArcRoutingControlConfigurationArgs and PlanArcRoutingControlConfigurationOutput values.
// You can construct a concrete instance of `PlanArcRoutingControlConfigurationInput` via:
//
//	PlanArcRoutingControlConfigurationArgs{...}
type PlanArcRoutingControlConfigurationInput interface {
	pulumi.Input

	ToPlanArcRoutingControlConfigurationOutput() PlanArcRoutingControlConfigurationOutput
	ToPlanArcRoutingControlConfigurationOutputWithContext(context.Context) PlanArcRoutingControlConfigurationOutput
}

type PlanArcRoutingControlConfigurationArgs struct {
	CrossAccountRole         pulumi.StringPtrInput  `pulumi:"crossAccountRole"`
	ExternalId               pulumi.StringPtrInput  `pulumi:"externalId"`
	RegionAndRoutingControls pulumi.MapInput        `pulumi:"regionAndRoutingControls"`
	TimeoutMinutes           pulumi.Float64PtrInput `pulumi:"timeoutMinutes"`
}

func (PlanArcRoutingControlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanArcRoutingControlConfiguration)(nil)).Elem()
}

func (i PlanArcRoutingControlConfigurationArgs) ToPlanArcRoutingControlConfigurationOutput() PlanArcRoutingControlConfigurationOutput {
	return i.ToPlanArcRoutingControlConfigurationOutputWithContext(context.Background())
}

func (i PlanArcRoutingControlConfigurationArgs) ToPlanArcRoutingControlConfigurationOutputWithContext(ctx context.Context) PlanArcRoutingControlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanArcRoutingControlConfigurationOutput)
}

type PlanArcRoutingControlConfigurationOutput struct{ *pulumi.OutputState }

func (PlanArcRoutingControlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanArcRoutingControlConfiguration)(nil)).Elem()
}

func (o PlanArcRoutingControlConfigurationOutput) ToPlanArcRoutingControlConfigurationOutput() PlanArcRoutingControlConfigurationOutput {
	return o
}

func (o PlanArcRoutingControlConfigurationOutput) ToPlanArcRoutingControlConfigurationOutputWithContext(ctx context.Context) PlanArcRoutingControlConfigurationOutput {
	return o
}

func (o PlanArcRoutingControlConfigurationOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanArcRoutingControlConfiguration) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanArcRoutingControlConfigurationOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanArcRoutingControlConfiguration) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o PlanArcRoutingControlConfigurationOutput) RegionAndRoutingControls() pulumi.MapOutput {
	return o.ApplyT(func(v PlanArcRoutingControlConfiguration) map[string]interface{} { return v.RegionAndRoutingControls }).(pulumi.MapOutput)
}

func (o PlanArcRoutingControlConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanArcRoutingControlConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

type PlanArcRoutingControlState struct {
	RoutingControlArn string                        `pulumi:"routingControlArn"`
	State             PlanRoutingControlStateChange `pulumi:"state"`
}

type PlanAsg struct {
	Arn              *string `pulumi:"arn"`
	CrossAccountRole *string `pulumi:"crossAccountRole"`
	ExternalId       *string `pulumi:"externalId"`
}

// PlanAsgInput is an input type that accepts PlanAsgArgs and PlanAsgOutput values.
// You can construct a concrete instance of `PlanAsgInput` via:
//
//	PlanAsgArgs{...}
type PlanAsgInput interface {
	pulumi.Input

	ToPlanAsgOutput() PlanAsgOutput
	ToPlanAsgOutputWithContext(context.Context) PlanAsgOutput
}

type PlanAsgArgs struct {
	Arn              pulumi.StringPtrInput `pulumi:"arn"`
	CrossAccountRole pulumi.StringPtrInput `pulumi:"crossAccountRole"`
	ExternalId       pulumi.StringPtrInput `pulumi:"externalId"`
}

func (PlanAsgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAsg)(nil)).Elem()
}

func (i PlanAsgArgs) ToPlanAsgOutput() PlanAsgOutput {
	return i.ToPlanAsgOutputWithContext(context.Background())
}

func (i PlanAsgArgs) ToPlanAsgOutputWithContext(ctx context.Context) PlanAsgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAsgOutput)
}

// PlanAsgArrayInput is an input type that accepts PlanAsgArray and PlanAsgArrayOutput values.
// You can construct a concrete instance of `PlanAsgArrayInput` via:
//
//	PlanAsgArray{ PlanAsgArgs{...} }
type PlanAsgArrayInput interface {
	pulumi.Input

	ToPlanAsgArrayOutput() PlanAsgArrayOutput
	ToPlanAsgArrayOutputWithContext(context.Context) PlanAsgArrayOutput
}

type PlanAsgArray []PlanAsgInput

func (PlanAsgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanAsg)(nil)).Elem()
}

func (i PlanAsgArray) ToPlanAsgArrayOutput() PlanAsgArrayOutput {
	return i.ToPlanAsgArrayOutputWithContext(context.Background())
}

func (i PlanAsgArray) ToPlanAsgArrayOutputWithContext(ctx context.Context) PlanAsgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAsgArrayOutput)
}

type PlanAsgOutput struct{ *pulumi.OutputState }

func (PlanAsgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAsg)(nil)).Elem()
}

func (o PlanAsgOutput) ToPlanAsgOutput() PlanAsgOutput {
	return o
}

func (o PlanAsgOutput) ToPlanAsgOutputWithContext(ctx context.Context) PlanAsgOutput {
	return o
}

func (o PlanAsgOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanAsg) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o PlanAsgOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanAsg) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanAsgOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanAsg) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

type PlanAsgArrayOutput struct{ *pulumi.OutputState }

func (PlanAsgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanAsg)(nil)).Elem()
}

func (o PlanAsgArrayOutput) ToPlanAsgArrayOutput() PlanAsgArrayOutput {
	return o
}

func (o PlanAsgArrayOutput) ToPlanAsgArrayOutputWithContext(ctx context.Context) PlanAsgArrayOutput {
	return o
}

func (o PlanAsgArrayOutput) Index(i pulumi.IntInput) PlanAsgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanAsg {
		return vs[0].([]PlanAsg)[vs[1].(int)]
	}).(PlanAsgOutput)
}

type PlanAssociatedAlarm struct {
	// The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.
	AlarmType PlanAlarmType `pulumi:"alarmType"`
	// The cross account role for the configuration.
	CrossAccountRole *string `pulumi:"crossAccountRole"`
	// The external ID (secret key) for the configuration.
	ExternalId *string `pulumi:"externalId"`
	// The resource identifier for alarms that you associate with a plan.
	ResourceIdentifier string `pulumi:"resourceIdentifier"`
}

// PlanAssociatedAlarmInput is an input type that accepts PlanAssociatedAlarmArgs and PlanAssociatedAlarmOutput values.
// You can construct a concrete instance of `PlanAssociatedAlarmInput` via:
//
//	PlanAssociatedAlarmArgs{...}
type PlanAssociatedAlarmInput interface {
	pulumi.Input

	ToPlanAssociatedAlarmOutput() PlanAssociatedAlarmOutput
	ToPlanAssociatedAlarmOutputWithContext(context.Context) PlanAssociatedAlarmOutput
}

type PlanAssociatedAlarmArgs struct {
	// The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.
	AlarmType PlanAlarmTypeInput `pulumi:"alarmType"`
	// The cross account role for the configuration.
	CrossAccountRole pulumi.StringPtrInput `pulumi:"crossAccountRole"`
	// The external ID (secret key) for the configuration.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// The resource identifier for alarms that you associate with a plan.
	ResourceIdentifier pulumi.StringInput `pulumi:"resourceIdentifier"`
}

func (PlanAssociatedAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAssociatedAlarm)(nil)).Elem()
}

func (i PlanAssociatedAlarmArgs) ToPlanAssociatedAlarmOutput() PlanAssociatedAlarmOutput {
	return i.ToPlanAssociatedAlarmOutputWithContext(context.Background())
}

func (i PlanAssociatedAlarmArgs) ToPlanAssociatedAlarmOutputWithContext(ctx context.Context) PlanAssociatedAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAssociatedAlarmOutput)
}

// PlanAssociatedAlarmMapInput is an input type that accepts PlanAssociatedAlarmMap and PlanAssociatedAlarmMapOutput values.
// You can construct a concrete instance of `PlanAssociatedAlarmMapInput` via:
//
//	PlanAssociatedAlarmMap{ "key": PlanAssociatedAlarmArgs{...} }
type PlanAssociatedAlarmMapInput interface {
	pulumi.Input

	ToPlanAssociatedAlarmMapOutput() PlanAssociatedAlarmMapOutput
	ToPlanAssociatedAlarmMapOutputWithContext(context.Context) PlanAssociatedAlarmMapOutput
}

type PlanAssociatedAlarmMap map[string]PlanAssociatedAlarmInput

func (PlanAssociatedAlarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PlanAssociatedAlarm)(nil)).Elem()
}

func (i PlanAssociatedAlarmMap) ToPlanAssociatedAlarmMapOutput() PlanAssociatedAlarmMapOutput {
	return i.ToPlanAssociatedAlarmMapOutputWithContext(context.Background())
}

func (i PlanAssociatedAlarmMap) ToPlanAssociatedAlarmMapOutputWithContext(ctx context.Context) PlanAssociatedAlarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanAssociatedAlarmMapOutput)
}

type PlanAssociatedAlarmOutput struct{ *pulumi.OutputState }

func (PlanAssociatedAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAssociatedAlarm)(nil)).Elem()
}

func (o PlanAssociatedAlarmOutput) ToPlanAssociatedAlarmOutput() PlanAssociatedAlarmOutput {
	return o
}

func (o PlanAssociatedAlarmOutput) ToPlanAssociatedAlarmOutputWithContext(ctx context.Context) PlanAssociatedAlarmOutput {
	return o
}

// The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.
func (o PlanAssociatedAlarmOutput) AlarmType() PlanAlarmTypeOutput {
	return o.ApplyT(func(v PlanAssociatedAlarm) PlanAlarmType { return v.AlarmType }).(PlanAlarmTypeOutput)
}

// The cross account role for the configuration.
func (o PlanAssociatedAlarmOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanAssociatedAlarm) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

// The external ID (secret key) for the configuration.
func (o PlanAssociatedAlarmOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanAssociatedAlarm) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The resource identifier for alarms that you associate with a plan.
func (o PlanAssociatedAlarmOutput) ResourceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v PlanAssociatedAlarm) string { return v.ResourceIdentifier }).(pulumi.StringOutput)
}

type PlanAssociatedAlarmMapOutput struct{ *pulumi.OutputState }

func (PlanAssociatedAlarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PlanAssociatedAlarm)(nil)).Elem()
}

func (o PlanAssociatedAlarmMapOutput) ToPlanAssociatedAlarmMapOutput() PlanAssociatedAlarmMapOutput {
	return o
}

func (o PlanAssociatedAlarmMapOutput) ToPlanAssociatedAlarmMapOutputWithContext(ctx context.Context) PlanAssociatedAlarmMapOutput {
	return o
}

func (o PlanAssociatedAlarmMapOutput) MapIndex(k pulumi.StringInput) PlanAssociatedAlarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PlanAssociatedAlarm {
		return vs[0].(map[string]PlanAssociatedAlarm)[vs[1].(string)]
	}).(PlanAssociatedAlarmOutput)
}

type PlanCustomActionLambdaConfiguration struct {
	Lambdas              []PlanLambdas         `pulumi:"lambdas"`
	RegionToRun          PlanRegionToRunIn     `pulumi:"regionToRun"`
	RetryIntervalMinutes float64               `pulumi:"retryIntervalMinutes"`
	TimeoutMinutes       *float64              `pulumi:"timeoutMinutes"`
	Ungraceful           *PlanLambdaUngraceful `pulumi:"ungraceful"`
}

// PlanCustomActionLambdaConfigurationInput is an input type that accepts PlanCustomActionLambdaConfigurationArgs and PlanCustomActionLambdaConfigurationOutput values.
// You can construct a concrete instance of `PlanCustomActionLambdaConfigurationInput` via:
//
//	PlanCustomActionLambdaConfigurationArgs{...}
type PlanCustomActionLambdaConfigurationInput interface {
	pulumi.Input

	ToPlanCustomActionLambdaConfigurationOutput() PlanCustomActionLambdaConfigurationOutput
	ToPlanCustomActionLambdaConfigurationOutputWithContext(context.Context) PlanCustomActionLambdaConfigurationOutput
}

type PlanCustomActionLambdaConfigurationArgs struct {
	Lambdas              PlanLambdasArrayInput        `pulumi:"lambdas"`
	RegionToRun          PlanRegionToRunInInput       `pulumi:"regionToRun"`
	RetryIntervalMinutes pulumi.Float64Input          `pulumi:"retryIntervalMinutes"`
	TimeoutMinutes       pulumi.Float64PtrInput       `pulumi:"timeoutMinutes"`
	Ungraceful           PlanLambdaUngracefulPtrInput `pulumi:"ungraceful"`
}

func (PlanCustomActionLambdaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanCustomActionLambdaConfiguration)(nil)).Elem()
}

func (i PlanCustomActionLambdaConfigurationArgs) ToPlanCustomActionLambdaConfigurationOutput() PlanCustomActionLambdaConfigurationOutput {
	return i.ToPlanCustomActionLambdaConfigurationOutputWithContext(context.Background())
}

func (i PlanCustomActionLambdaConfigurationArgs) ToPlanCustomActionLambdaConfigurationOutputWithContext(ctx context.Context) PlanCustomActionLambdaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanCustomActionLambdaConfigurationOutput)
}

type PlanCustomActionLambdaConfigurationOutput struct{ *pulumi.OutputState }

func (PlanCustomActionLambdaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanCustomActionLambdaConfiguration)(nil)).Elem()
}

func (o PlanCustomActionLambdaConfigurationOutput) ToPlanCustomActionLambdaConfigurationOutput() PlanCustomActionLambdaConfigurationOutput {
	return o
}

func (o PlanCustomActionLambdaConfigurationOutput) ToPlanCustomActionLambdaConfigurationOutputWithContext(ctx context.Context) PlanCustomActionLambdaConfigurationOutput {
	return o
}

func (o PlanCustomActionLambdaConfigurationOutput) Lambdas() PlanLambdasArrayOutput {
	return o.ApplyT(func(v PlanCustomActionLambdaConfiguration) []PlanLambdas { return v.Lambdas }).(PlanLambdasArrayOutput)
}

func (o PlanCustomActionLambdaConfigurationOutput) RegionToRun() PlanRegionToRunInOutput {
	return o.ApplyT(func(v PlanCustomActionLambdaConfiguration) PlanRegionToRunIn { return v.RegionToRun }).(PlanRegionToRunInOutput)
}

func (o PlanCustomActionLambdaConfigurationOutput) RetryIntervalMinutes() pulumi.Float64Output {
	return o.ApplyT(func(v PlanCustomActionLambdaConfiguration) float64 { return v.RetryIntervalMinutes }).(pulumi.Float64Output)
}

func (o PlanCustomActionLambdaConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanCustomActionLambdaConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

func (o PlanCustomActionLambdaConfigurationOutput) Ungraceful() PlanLambdaUngracefulPtrOutput {
	return o.ApplyT(func(v PlanCustomActionLambdaConfiguration) *PlanLambdaUngraceful { return v.Ungraceful }).(PlanLambdaUngracefulPtrOutput)
}

type PlanEc2AsgCapacityIncreaseConfiguration struct {
	Asgs                       []PlanAsg          `pulumi:"asgs"`
	CapacityMonitoringApproach interface{}        `pulumi:"capacityMonitoringApproach"`
	TargetPercent              *float64           `pulumi:"targetPercent"`
	TimeoutMinutes             *float64           `pulumi:"timeoutMinutes"`
	Ungraceful                 *PlanEc2Ungraceful `pulumi:"ungraceful"`
}

// PlanEc2AsgCapacityIncreaseConfigurationInput is an input type that accepts PlanEc2AsgCapacityIncreaseConfigurationArgs and PlanEc2AsgCapacityIncreaseConfigurationOutput values.
// You can construct a concrete instance of `PlanEc2AsgCapacityIncreaseConfigurationInput` via:
//
//	PlanEc2AsgCapacityIncreaseConfigurationArgs{...}
type PlanEc2AsgCapacityIncreaseConfigurationInput interface {
	pulumi.Input

	ToPlanEc2AsgCapacityIncreaseConfigurationOutput() PlanEc2AsgCapacityIncreaseConfigurationOutput
	ToPlanEc2AsgCapacityIncreaseConfigurationOutputWithContext(context.Context) PlanEc2AsgCapacityIncreaseConfigurationOutput
}

type PlanEc2AsgCapacityIncreaseConfigurationArgs struct {
	Asgs                       PlanAsgArrayInput         `pulumi:"asgs"`
	CapacityMonitoringApproach pulumi.Input              `pulumi:"capacityMonitoringApproach"`
	TargetPercent              pulumi.Float64PtrInput    `pulumi:"targetPercent"`
	TimeoutMinutes             pulumi.Float64PtrInput    `pulumi:"timeoutMinutes"`
	Ungraceful                 PlanEc2UngracefulPtrInput `pulumi:"ungraceful"`
}

func (PlanEc2AsgCapacityIncreaseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEc2AsgCapacityIncreaseConfiguration)(nil)).Elem()
}

func (i PlanEc2AsgCapacityIncreaseConfigurationArgs) ToPlanEc2AsgCapacityIncreaseConfigurationOutput() PlanEc2AsgCapacityIncreaseConfigurationOutput {
	return i.ToPlanEc2AsgCapacityIncreaseConfigurationOutputWithContext(context.Background())
}

func (i PlanEc2AsgCapacityIncreaseConfigurationArgs) ToPlanEc2AsgCapacityIncreaseConfigurationOutputWithContext(ctx context.Context) PlanEc2AsgCapacityIncreaseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEc2AsgCapacityIncreaseConfigurationOutput)
}

type PlanEc2AsgCapacityIncreaseConfigurationOutput struct{ *pulumi.OutputState }

func (PlanEc2AsgCapacityIncreaseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEc2AsgCapacityIncreaseConfiguration)(nil)).Elem()
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) ToPlanEc2AsgCapacityIncreaseConfigurationOutput() PlanEc2AsgCapacityIncreaseConfigurationOutput {
	return o
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) ToPlanEc2AsgCapacityIncreaseConfigurationOutputWithContext(ctx context.Context) PlanEc2AsgCapacityIncreaseConfigurationOutput {
	return o
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) Asgs() PlanAsgArrayOutput {
	return o.ApplyT(func(v PlanEc2AsgCapacityIncreaseConfiguration) []PlanAsg { return v.Asgs }).(PlanAsgArrayOutput)
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) CapacityMonitoringApproach() pulumi.AnyOutput {
	return o.ApplyT(func(v PlanEc2AsgCapacityIncreaseConfiguration) interface{} { return v.CapacityMonitoringApproach }).(pulumi.AnyOutput)
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) TargetPercent() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanEc2AsgCapacityIncreaseConfiguration) *float64 { return v.TargetPercent }).(pulumi.Float64PtrOutput)
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanEc2AsgCapacityIncreaseConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

func (o PlanEc2AsgCapacityIncreaseConfigurationOutput) Ungraceful() PlanEc2UngracefulPtrOutput {
	return o.ApplyT(func(v PlanEc2AsgCapacityIncreaseConfiguration) *PlanEc2Ungraceful { return v.Ungraceful }).(PlanEc2UngracefulPtrOutput)
}

type PlanEc2Ungraceful struct {
	MinimumSuccessPercentage float64 `pulumi:"minimumSuccessPercentage"`
}

// PlanEc2UngracefulInput is an input type that accepts PlanEc2UngracefulArgs and PlanEc2UngracefulOutput values.
// You can construct a concrete instance of `PlanEc2UngracefulInput` via:
//
//	PlanEc2UngracefulArgs{...}
type PlanEc2UngracefulInput interface {
	pulumi.Input

	ToPlanEc2UngracefulOutput() PlanEc2UngracefulOutput
	ToPlanEc2UngracefulOutputWithContext(context.Context) PlanEc2UngracefulOutput
}

type PlanEc2UngracefulArgs struct {
	MinimumSuccessPercentage pulumi.Float64Input `pulumi:"minimumSuccessPercentage"`
}

func (PlanEc2UngracefulArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEc2Ungraceful)(nil)).Elem()
}

func (i PlanEc2UngracefulArgs) ToPlanEc2UngracefulOutput() PlanEc2UngracefulOutput {
	return i.ToPlanEc2UngracefulOutputWithContext(context.Background())
}

func (i PlanEc2UngracefulArgs) ToPlanEc2UngracefulOutputWithContext(ctx context.Context) PlanEc2UngracefulOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEc2UngracefulOutput)
}

func (i PlanEc2UngracefulArgs) ToPlanEc2UngracefulPtrOutput() PlanEc2UngracefulPtrOutput {
	return i.ToPlanEc2UngracefulPtrOutputWithContext(context.Background())
}

func (i PlanEc2UngracefulArgs) ToPlanEc2UngracefulPtrOutputWithContext(ctx context.Context) PlanEc2UngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEc2UngracefulOutput).ToPlanEc2UngracefulPtrOutputWithContext(ctx)
}

// PlanEc2UngracefulPtrInput is an input type that accepts PlanEc2UngracefulArgs, PlanEc2UngracefulPtr and PlanEc2UngracefulPtrOutput values.
// You can construct a concrete instance of `PlanEc2UngracefulPtrInput` via:
//
//	        PlanEc2UngracefulArgs{...}
//
//	or:
//
//	        nil
type PlanEc2UngracefulPtrInput interface {
	pulumi.Input

	ToPlanEc2UngracefulPtrOutput() PlanEc2UngracefulPtrOutput
	ToPlanEc2UngracefulPtrOutputWithContext(context.Context) PlanEc2UngracefulPtrOutput
}

type planEc2UngracefulPtrType PlanEc2UngracefulArgs

func PlanEc2UngracefulPtr(v *PlanEc2UngracefulArgs) PlanEc2UngracefulPtrInput {
	return (*planEc2UngracefulPtrType)(v)
}

func (*planEc2UngracefulPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanEc2Ungraceful)(nil)).Elem()
}

func (i *planEc2UngracefulPtrType) ToPlanEc2UngracefulPtrOutput() PlanEc2UngracefulPtrOutput {
	return i.ToPlanEc2UngracefulPtrOutputWithContext(context.Background())
}

func (i *planEc2UngracefulPtrType) ToPlanEc2UngracefulPtrOutputWithContext(ctx context.Context) PlanEc2UngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEc2UngracefulPtrOutput)
}

type PlanEc2UngracefulOutput struct{ *pulumi.OutputState }

func (PlanEc2UngracefulOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEc2Ungraceful)(nil)).Elem()
}

func (o PlanEc2UngracefulOutput) ToPlanEc2UngracefulOutput() PlanEc2UngracefulOutput {
	return o
}

func (o PlanEc2UngracefulOutput) ToPlanEc2UngracefulOutputWithContext(ctx context.Context) PlanEc2UngracefulOutput {
	return o
}

func (o PlanEc2UngracefulOutput) ToPlanEc2UngracefulPtrOutput() PlanEc2UngracefulPtrOutput {
	return o.ToPlanEc2UngracefulPtrOutputWithContext(context.Background())
}

func (o PlanEc2UngracefulOutput) ToPlanEc2UngracefulPtrOutputWithContext(ctx context.Context) PlanEc2UngracefulPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanEc2Ungraceful) *PlanEc2Ungraceful {
		return &v
	}).(PlanEc2UngracefulPtrOutput)
}

func (o PlanEc2UngracefulOutput) MinimumSuccessPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v PlanEc2Ungraceful) float64 { return v.MinimumSuccessPercentage }).(pulumi.Float64Output)
}

type PlanEc2UngracefulPtrOutput struct{ *pulumi.OutputState }

func (PlanEc2UngracefulPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanEc2Ungraceful)(nil)).Elem()
}

func (o PlanEc2UngracefulPtrOutput) ToPlanEc2UngracefulPtrOutput() PlanEc2UngracefulPtrOutput {
	return o
}

func (o PlanEc2UngracefulPtrOutput) ToPlanEc2UngracefulPtrOutputWithContext(ctx context.Context) PlanEc2UngracefulPtrOutput {
	return o
}

func (o PlanEc2UngracefulPtrOutput) Elem() PlanEc2UngracefulOutput {
	return o.ApplyT(func(v *PlanEc2Ungraceful) PlanEc2Ungraceful {
		if v != nil {
			return *v
		}
		var ret PlanEc2Ungraceful
		return ret
	}).(PlanEc2UngracefulOutput)
}

func (o PlanEc2UngracefulPtrOutput) MinimumSuccessPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PlanEc2Ungraceful) *float64 {
		if v == nil {
			return nil
		}
		return &v.MinimumSuccessPercentage
	}).(pulumi.Float64PtrOutput)
}

type PlanEcsCapacityIncreaseConfiguration struct {
	CapacityMonitoringApproach interface{}        `pulumi:"capacityMonitoringApproach"`
	Services                   []PlanService      `pulumi:"services"`
	TargetPercent              *float64           `pulumi:"targetPercent"`
	TimeoutMinutes             *float64           `pulumi:"timeoutMinutes"`
	Ungraceful                 *PlanEcsUngraceful `pulumi:"ungraceful"`
}

// PlanEcsCapacityIncreaseConfigurationInput is an input type that accepts PlanEcsCapacityIncreaseConfigurationArgs and PlanEcsCapacityIncreaseConfigurationOutput values.
// You can construct a concrete instance of `PlanEcsCapacityIncreaseConfigurationInput` via:
//
//	PlanEcsCapacityIncreaseConfigurationArgs{...}
type PlanEcsCapacityIncreaseConfigurationInput interface {
	pulumi.Input

	ToPlanEcsCapacityIncreaseConfigurationOutput() PlanEcsCapacityIncreaseConfigurationOutput
	ToPlanEcsCapacityIncreaseConfigurationOutputWithContext(context.Context) PlanEcsCapacityIncreaseConfigurationOutput
}

type PlanEcsCapacityIncreaseConfigurationArgs struct {
	CapacityMonitoringApproach pulumi.Input              `pulumi:"capacityMonitoringApproach"`
	Services                   PlanServiceArrayInput     `pulumi:"services"`
	TargetPercent              pulumi.Float64PtrInput    `pulumi:"targetPercent"`
	TimeoutMinutes             pulumi.Float64PtrInput    `pulumi:"timeoutMinutes"`
	Ungraceful                 PlanEcsUngracefulPtrInput `pulumi:"ungraceful"`
}

func (PlanEcsCapacityIncreaseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEcsCapacityIncreaseConfiguration)(nil)).Elem()
}

func (i PlanEcsCapacityIncreaseConfigurationArgs) ToPlanEcsCapacityIncreaseConfigurationOutput() PlanEcsCapacityIncreaseConfigurationOutput {
	return i.ToPlanEcsCapacityIncreaseConfigurationOutputWithContext(context.Background())
}

func (i PlanEcsCapacityIncreaseConfigurationArgs) ToPlanEcsCapacityIncreaseConfigurationOutputWithContext(ctx context.Context) PlanEcsCapacityIncreaseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEcsCapacityIncreaseConfigurationOutput)
}

type PlanEcsCapacityIncreaseConfigurationOutput struct{ *pulumi.OutputState }

func (PlanEcsCapacityIncreaseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEcsCapacityIncreaseConfiguration)(nil)).Elem()
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) ToPlanEcsCapacityIncreaseConfigurationOutput() PlanEcsCapacityIncreaseConfigurationOutput {
	return o
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) ToPlanEcsCapacityIncreaseConfigurationOutputWithContext(ctx context.Context) PlanEcsCapacityIncreaseConfigurationOutput {
	return o
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) CapacityMonitoringApproach() pulumi.AnyOutput {
	return o.ApplyT(func(v PlanEcsCapacityIncreaseConfiguration) interface{} { return v.CapacityMonitoringApproach }).(pulumi.AnyOutput)
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) Services() PlanServiceArrayOutput {
	return o.ApplyT(func(v PlanEcsCapacityIncreaseConfiguration) []PlanService { return v.Services }).(PlanServiceArrayOutput)
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) TargetPercent() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanEcsCapacityIncreaseConfiguration) *float64 { return v.TargetPercent }).(pulumi.Float64PtrOutput)
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanEcsCapacityIncreaseConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

func (o PlanEcsCapacityIncreaseConfigurationOutput) Ungraceful() PlanEcsUngracefulPtrOutput {
	return o.ApplyT(func(v PlanEcsCapacityIncreaseConfiguration) *PlanEcsUngraceful { return v.Ungraceful }).(PlanEcsUngracefulPtrOutput)
}

type PlanEcsUngraceful struct {
	MinimumSuccessPercentage float64 `pulumi:"minimumSuccessPercentage"`
}

// PlanEcsUngracefulInput is an input type that accepts PlanEcsUngracefulArgs and PlanEcsUngracefulOutput values.
// You can construct a concrete instance of `PlanEcsUngracefulInput` via:
//
//	PlanEcsUngracefulArgs{...}
type PlanEcsUngracefulInput interface {
	pulumi.Input

	ToPlanEcsUngracefulOutput() PlanEcsUngracefulOutput
	ToPlanEcsUngracefulOutputWithContext(context.Context) PlanEcsUngracefulOutput
}

type PlanEcsUngracefulArgs struct {
	MinimumSuccessPercentage pulumi.Float64Input `pulumi:"minimumSuccessPercentage"`
}

func (PlanEcsUngracefulArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEcsUngraceful)(nil)).Elem()
}

func (i PlanEcsUngracefulArgs) ToPlanEcsUngracefulOutput() PlanEcsUngracefulOutput {
	return i.ToPlanEcsUngracefulOutputWithContext(context.Background())
}

func (i PlanEcsUngracefulArgs) ToPlanEcsUngracefulOutputWithContext(ctx context.Context) PlanEcsUngracefulOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEcsUngracefulOutput)
}

func (i PlanEcsUngracefulArgs) ToPlanEcsUngracefulPtrOutput() PlanEcsUngracefulPtrOutput {
	return i.ToPlanEcsUngracefulPtrOutputWithContext(context.Background())
}

func (i PlanEcsUngracefulArgs) ToPlanEcsUngracefulPtrOutputWithContext(ctx context.Context) PlanEcsUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEcsUngracefulOutput).ToPlanEcsUngracefulPtrOutputWithContext(ctx)
}

// PlanEcsUngracefulPtrInput is an input type that accepts PlanEcsUngracefulArgs, PlanEcsUngracefulPtr and PlanEcsUngracefulPtrOutput values.
// You can construct a concrete instance of `PlanEcsUngracefulPtrInput` via:
//
//	        PlanEcsUngracefulArgs{...}
//
//	or:
//
//	        nil
type PlanEcsUngracefulPtrInput interface {
	pulumi.Input

	ToPlanEcsUngracefulPtrOutput() PlanEcsUngracefulPtrOutput
	ToPlanEcsUngracefulPtrOutputWithContext(context.Context) PlanEcsUngracefulPtrOutput
}

type planEcsUngracefulPtrType PlanEcsUngracefulArgs

func PlanEcsUngracefulPtr(v *PlanEcsUngracefulArgs) PlanEcsUngracefulPtrInput {
	return (*planEcsUngracefulPtrType)(v)
}

func (*planEcsUngracefulPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanEcsUngraceful)(nil)).Elem()
}

func (i *planEcsUngracefulPtrType) ToPlanEcsUngracefulPtrOutput() PlanEcsUngracefulPtrOutput {
	return i.ToPlanEcsUngracefulPtrOutputWithContext(context.Background())
}

func (i *planEcsUngracefulPtrType) ToPlanEcsUngracefulPtrOutputWithContext(ctx context.Context) PlanEcsUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEcsUngracefulPtrOutput)
}

type PlanEcsUngracefulOutput struct{ *pulumi.OutputState }

func (PlanEcsUngracefulOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEcsUngraceful)(nil)).Elem()
}

func (o PlanEcsUngracefulOutput) ToPlanEcsUngracefulOutput() PlanEcsUngracefulOutput {
	return o
}

func (o PlanEcsUngracefulOutput) ToPlanEcsUngracefulOutputWithContext(ctx context.Context) PlanEcsUngracefulOutput {
	return o
}

func (o PlanEcsUngracefulOutput) ToPlanEcsUngracefulPtrOutput() PlanEcsUngracefulPtrOutput {
	return o.ToPlanEcsUngracefulPtrOutputWithContext(context.Background())
}

func (o PlanEcsUngracefulOutput) ToPlanEcsUngracefulPtrOutputWithContext(ctx context.Context) PlanEcsUngracefulPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanEcsUngraceful) *PlanEcsUngraceful {
		return &v
	}).(PlanEcsUngracefulPtrOutput)
}

func (o PlanEcsUngracefulOutput) MinimumSuccessPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v PlanEcsUngraceful) float64 { return v.MinimumSuccessPercentage }).(pulumi.Float64Output)
}

type PlanEcsUngracefulPtrOutput struct{ *pulumi.OutputState }

func (PlanEcsUngracefulPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanEcsUngraceful)(nil)).Elem()
}

func (o PlanEcsUngracefulPtrOutput) ToPlanEcsUngracefulPtrOutput() PlanEcsUngracefulPtrOutput {
	return o
}

func (o PlanEcsUngracefulPtrOutput) ToPlanEcsUngracefulPtrOutputWithContext(ctx context.Context) PlanEcsUngracefulPtrOutput {
	return o
}

func (o PlanEcsUngracefulPtrOutput) Elem() PlanEcsUngracefulOutput {
	return o.ApplyT(func(v *PlanEcsUngraceful) PlanEcsUngraceful {
		if v != nil {
			return *v
		}
		var ret PlanEcsUngraceful
		return ret
	}).(PlanEcsUngracefulOutput)
}

func (o PlanEcsUngracefulPtrOutput) MinimumSuccessPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PlanEcsUngraceful) *float64 {
		if v == nil {
			return nil
		}
		return &v.MinimumSuccessPercentage
	}).(pulumi.Float64PtrOutput)
}

type PlanEksCluster struct {
	ClusterArn       string  `pulumi:"clusterArn"`
	CrossAccountRole *string `pulumi:"crossAccountRole"`
	ExternalId       *string `pulumi:"externalId"`
}

// PlanEksClusterInput is an input type that accepts PlanEksClusterArgs and PlanEksClusterOutput values.
// You can construct a concrete instance of `PlanEksClusterInput` via:
//
//	PlanEksClusterArgs{...}
type PlanEksClusterInput interface {
	pulumi.Input

	ToPlanEksClusterOutput() PlanEksClusterOutput
	ToPlanEksClusterOutputWithContext(context.Context) PlanEksClusterOutput
}

type PlanEksClusterArgs struct {
	ClusterArn       pulumi.StringInput    `pulumi:"clusterArn"`
	CrossAccountRole pulumi.StringPtrInput `pulumi:"crossAccountRole"`
	ExternalId       pulumi.StringPtrInput `pulumi:"externalId"`
}

func (PlanEksClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEksCluster)(nil)).Elem()
}

func (i PlanEksClusterArgs) ToPlanEksClusterOutput() PlanEksClusterOutput {
	return i.ToPlanEksClusterOutputWithContext(context.Background())
}

func (i PlanEksClusterArgs) ToPlanEksClusterOutputWithContext(ctx context.Context) PlanEksClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEksClusterOutput)
}

// PlanEksClusterArrayInput is an input type that accepts PlanEksClusterArray and PlanEksClusterArrayOutput values.
// You can construct a concrete instance of `PlanEksClusterArrayInput` via:
//
//	PlanEksClusterArray{ PlanEksClusterArgs{...} }
type PlanEksClusterArrayInput interface {
	pulumi.Input

	ToPlanEksClusterArrayOutput() PlanEksClusterArrayOutput
	ToPlanEksClusterArrayOutputWithContext(context.Context) PlanEksClusterArrayOutput
}

type PlanEksClusterArray []PlanEksClusterInput

func (PlanEksClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanEksCluster)(nil)).Elem()
}

func (i PlanEksClusterArray) ToPlanEksClusterArrayOutput() PlanEksClusterArrayOutput {
	return i.ToPlanEksClusterArrayOutputWithContext(context.Background())
}

func (i PlanEksClusterArray) ToPlanEksClusterArrayOutputWithContext(ctx context.Context) PlanEksClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEksClusterArrayOutput)
}

type PlanEksClusterOutput struct{ *pulumi.OutputState }

func (PlanEksClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEksCluster)(nil)).Elem()
}

func (o PlanEksClusterOutput) ToPlanEksClusterOutput() PlanEksClusterOutput {
	return o
}

func (o PlanEksClusterOutput) ToPlanEksClusterOutputWithContext(ctx context.Context) PlanEksClusterOutput {
	return o
}

func (o PlanEksClusterOutput) ClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v PlanEksCluster) string { return v.ClusterArn }).(pulumi.StringOutput)
}

func (o PlanEksClusterOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanEksCluster) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanEksClusterOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanEksCluster) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

type PlanEksClusterArrayOutput struct{ *pulumi.OutputState }

func (PlanEksClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanEksCluster)(nil)).Elem()
}

func (o PlanEksClusterArrayOutput) ToPlanEksClusterArrayOutput() PlanEksClusterArrayOutput {
	return o
}

func (o PlanEksClusterArrayOutput) ToPlanEksClusterArrayOutputWithContext(ctx context.Context) PlanEksClusterArrayOutput {
	return o
}

func (o PlanEksClusterArrayOutput) Index(i pulumi.IntInput) PlanEksClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanEksCluster {
		return vs[0].([]PlanEksCluster)[vs[1].(int)]
	}).(PlanEksClusterOutput)
}

type PlanEksResourceScalingConfiguration struct {
	CapacityMonitoringApproach interface{}                       `pulumi:"capacityMonitoringApproach"`
	EksClusters                []PlanEksCluster                  `pulumi:"eksClusters"`
	KubernetesResourceType     PlanKubernetesResourceType        `pulumi:"kubernetesResourceType"`
	ScalingResources           []map[string]interface{}          `pulumi:"scalingResources"`
	TargetPercent              *float64                          `pulumi:"targetPercent"`
	TimeoutMinutes             *float64                          `pulumi:"timeoutMinutes"`
	Ungraceful                 *PlanEksResourceScalingUngraceful `pulumi:"ungraceful"`
}

// PlanEksResourceScalingConfigurationInput is an input type that accepts PlanEksResourceScalingConfigurationArgs and PlanEksResourceScalingConfigurationOutput values.
// You can construct a concrete instance of `PlanEksResourceScalingConfigurationInput` via:
//
//	PlanEksResourceScalingConfigurationArgs{...}
type PlanEksResourceScalingConfigurationInput interface {
	pulumi.Input

	ToPlanEksResourceScalingConfigurationOutput() PlanEksResourceScalingConfigurationOutput
	ToPlanEksResourceScalingConfigurationOutputWithContext(context.Context) PlanEksResourceScalingConfigurationOutput
}

type PlanEksResourceScalingConfigurationArgs struct {
	CapacityMonitoringApproach pulumi.Input                             `pulumi:"capacityMonitoringApproach"`
	EksClusters                PlanEksClusterArrayInput                 `pulumi:"eksClusters"`
	KubernetesResourceType     PlanKubernetesResourceTypeInput          `pulumi:"kubernetesResourceType"`
	ScalingResources           pulumi.MapArrayInput                     `pulumi:"scalingResources"`
	TargetPercent              pulumi.Float64PtrInput                   `pulumi:"targetPercent"`
	TimeoutMinutes             pulumi.Float64PtrInput                   `pulumi:"timeoutMinutes"`
	Ungraceful                 PlanEksResourceScalingUngracefulPtrInput `pulumi:"ungraceful"`
}

func (PlanEksResourceScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEksResourceScalingConfiguration)(nil)).Elem()
}

func (i PlanEksResourceScalingConfigurationArgs) ToPlanEksResourceScalingConfigurationOutput() PlanEksResourceScalingConfigurationOutput {
	return i.ToPlanEksResourceScalingConfigurationOutputWithContext(context.Background())
}

func (i PlanEksResourceScalingConfigurationArgs) ToPlanEksResourceScalingConfigurationOutputWithContext(ctx context.Context) PlanEksResourceScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEksResourceScalingConfigurationOutput)
}

type PlanEksResourceScalingConfigurationOutput struct{ *pulumi.OutputState }

func (PlanEksResourceScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEksResourceScalingConfiguration)(nil)).Elem()
}

func (o PlanEksResourceScalingConfigurationOutput) ToPlanEksResourceScalingConfigurationOutput() PlanEksResourceScalingConfigurationOutput {
	return o
}

func (o PlanEksResourceScalingConfigurationOutput) ToPlanEksResourceScalingConfigurationOutputWithContext(ctx context.Context) PlanEksResourceScalingConfigurationOutput {
	return o
}

func (o PlanEksResourceScalingConfigurationOutput) CapacityMonitoringApproach() pulumi.AnyOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) interface{} { return v.CapacityMonitoringApproach }).(pulumi.AnyOutput)
}

func (o PlanEksResourceScalingConfigurationOutput) EksClusters() PlanEksClusterArrayOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) []PlanEksCluster { return v.EksClusters }).(PlanEksClusterArrayOutput)
}

func (o PlanEksResourceScalingConfigurationOutput) KubernetesResourceType() PlanKubernetesResourceTypeOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) PlanKubernetesResourceType {
		return v.KubernetesResourceType
	}).(PlanKubernetesResourceTypeOutput)
}

func (o PlanEksResourceScalingConfigurationOutput) ScalingResources() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) []map[string]interface{} { return v.ScalingResources }).(pulumi.MapArrayOutput)
}

func (o PlanEksResourceScalingConfigurationOutput) TargetPercent() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) *float64 { return v.TargetPercent }).(pulumi.Float64PtrOutput)
}

func (o PlanEksResourceScalingConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

func (o PlanEksResourceScalingConfigurationOutput) Ungraceful() PlanEksResourceScalingUngracefulPtrOutput {
	return o.ApplyT(func(v PlanEksResourceScalingConfiguration) *PlanEksResourceScalingUngraceful { return v.Ungraceful }).(PlanEksResourceScalingUngracefulPtrOutput)
}

type PlanEksResourceScalingUngraceful struct {
	MinimumSuccessPercentage float64 `pulumi:"minimumSuccessPercentage"`
}

// PlanEksResourceScalingUngracefulInput is an input type that accepts PlanEksResourceScalingUngracefulArgs and PlanEksResourceScalingUngracefulOutput values.
// You can construct a concrete instance of `PlanEksResourceScalingUngracefulInput` via:
//
//	PlanEksResourceScalingUngracefulArgs{...}
type PlanEksResourceScalingUngracefulInput interface {
	pulumi.Input

	ToPlanEksResourceScalingUngracefulOutput() PlanEksResourceScalingUngracefulOutput
	ToPlanEksResourceScalingUngracefulOutputWithContext(context.Context) PlanEksResourceScalingUngracefulOutput
}

type PlanEksResourceScalingUngracefulArgs struct {
	MinimumSuccessPercentage pulumi.Float64Input `pulumi:"minimumSuccessPercentage"`
}

func (PlanEksResourceScalingUngracefulArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEksResourceScalingUngraceful)(nil)).Elem()
}

func (i PlanEksResourceScalingUngracefulArgs) ToPlanEksResourceScalingUngracefulOutput() PlanEksResourceScalingUngracefulOutput {
	return i.ToPlanEksResourceScalingUngracefulOutputWithContext(context.Background())
}

func (i PlanEksResourceScalingUngracefulArgs) ToPlanEksResourceScalingUngracefulOutputWithContext(ctx context.Context) PlanEksResourceScalingUngracefulOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEksResourceScalingUngracefulOutput)
}

func (i PlanEksResourceScalingUngracefulArgs) ToPlanEksResourceScalingUngracefulPtrOutput() PlanEksResourceScalingUngracefulPtrOutput {
	return i.ToPlanEksResourceScalingUngracefulPtrOutputWithContext(context.Background())
}

func (i PlanEksResourceScalingUngracefulArgs) ToPlanEksResourceScalingUngracefulPtrOutputWithContext(ctx context.Context) PlanEksResourceScalingUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEksResourceScalingUngracefulOutput).ToPlanEksResourceScalingUngracefulPtrOutputWithContext(ctx)
}

// PlanEksResourceScalingUngracefulPtrInput is an input type that accepts PlanEksResourceScalingUngracefulArgs, PlanEksResourceScalingUngracefulPtr and PlanEksResourceScalingUngracefulPtrOutput values.
// You can construct a concrete instance of `PlanEksResourceScalingUngracefulPtrInput` via:
//
//	        PlanEksResourceScalingUngracefulArgs{...}
//
//	or:
//
//	        nil
type PlanEksResourceScalingUngracefulPtrInput interface {
	pulumi.Input

	ToPlanEksResourceScalingUngracefulPtrOutput() PlanEksResourceScalingUngracefulPtrOutput
	ToPlanEksResourceScalingUngracefulPtrOutputWithContext(context.Context) PlanEksResourceScalingUngracefulPtrOutput
}

type planEksResourceScalingUngracefulPtrType PlanEksResourceScalingUngracefulArgs

func PlanEksResourceScalingUngracefulPtr(v *PlanEksResourceScalingUngracefulArgs) PlanEksResourceScalingUngracefulPtrInput {
	return (*planEksResourceScalingUngracefulPtrType)(v)
}

func (*planEksResourceScalingUngracefulPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanEksResourceScalingUngraceful)(nil)).Elem()
}

func (i *planEksResourceScalingUngracefulPtrType) ToPlanEksResourceScalingUngracefulPtrOutput() PlanEksResourceScalingUngracefulPtrOutput {
	return i.ToPlanEksResourceScalingUngracefulPtrOutputWithContext(context.Background())
}

func (i *planEksResourceScalingUngracefulPtrType) ToPlanEksResourceScalingUngracefulPtrOutputWithContext(ctx context.Context) PlanEksResourceScalingUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanEksResourceScalingUngracefulPtrOutput)
}

type PlanEksResourceScalingUngracefulOutput struct{ *pulumi.OutputState }

func (PlanEksResourceScalingUngracefulOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanEksResourceScalingUngraceful)(nil)).Elem()
}

func (o PlanEksResourceScalingUngracefulOutput) ToPlanEksResourceScalingUngracefulOutput() PlanEksResourceScalingUngracefulOutput {
	return o
}

func (o PlanEksResourceScalingUngracefulOutput) ToPlanEksResourceScalingUngracefulOutputWithContext(ctx context.Context) PlanEksResourceScalingUngracefulOutput {
	return o
}

func (o PlanEksResourceScalingUngracefulOutput) ToPlanEksResourceScalingUngracefulPtrOutput() PlanEksResourceScalingUngracefulPtrOutput {
	return o.ToPlanEksResourceScalingUngracefulPtrOutputWithContext(context.Background())
}

func (o PlanEksResourceScalingUngracefulOutput) ToPlanEksResourceScalingUngracefulPtrOutputWithContext(ctx context.Context) PlanEksResourceScalingUngracefulPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanEksResourceScalingUngraceful) *PlanEksResourceScalingUngraceful {
		return &v
	}).(PlanEksResourceScalingUngracefulPtrOutput)
}

func (o PlanEksResourceScalingUngracefulOutput) MinimumSuccessPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v PlanEksResourceScalingUngraceful) float64 { return v.MinimumSuccessPercentage }).(pulumi.Float64Output)
}

type PlanEksResourceScalingUngracefulPtrOutput struct{ *pulumi.OutputState }

func (PlanEksResourceScalingUngracefulPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanEksResourceScalingUngraceful)(nil)).Elem()
}

func (o PlanEksResourceScalingUngracefulPtrOutput) ToPlanEksResourceScalingUngracefulPtrOutput() PlanEksResourceScalingUngracefulPtrOutput {
	return o
}

func (o PlanEksResourceScalingUngracefulPtrOutput) ToPlanEksResourceScalingUngracefulPtrOutputWithContext(ctx context.Context) PlanEksResourceScalingUngracefulPtrOutput {
	return o
}

func (o PlanEksResourceScalingUngracefulPtrOutput) Elem() PlanEksResourceScalingUngracefulOutput {
	return o.ApplyT(func(v *PlanEksResourceScalingUngraceful) PlanEksResourceScalingUngraceful {
		if v != nil {
			return *v
		}
		var ret PlanEksResourceScalingUngraceful
		return ret
	}).(PlanEksResourceScalingUngracefulOutput)
}

func (o PlanEksResourceScalingUngracefulPtrOutput) MinimumSuccessPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PlanEksResourceScalingUngraceful) *float64 {
		if v == nil {
			return nil
		}
		return &v.MinimumSuccessPercentage
	}).(pulumi.Float64PtrOutput)
}

type PlanExecutionApprovalConfiguration struct {
	ApprovalRole   string   `pulumi:"approvalRole"`
	TimeoutMinutes *float64 `pulumi:"timeoutMinutes"`
}

// PlanExecutionApprovalConfigurationInput is an input type that accepts PlanExecutionApprovalConfigurationArgs and PlanExecutionApprovalConfigurationOutput values.
// You can construct a concrete instance of `PlanExecutionApprovalConfigurationInput` via:
//
//	PlanExecutionApprovalConfigurationArgs{...}
type PlanExecutionApprovalConfigurationInput interface {
	pulumi.Input

	ToPlanExecutionApprovalConfigurationOutput() PlanExecutionApprovalConfigurationOutput
	ToPlanExecutionApprovalConfigurationOutputWithContext(context.Context) PlanExecutionApprovalConfigurationOutput
}

type PlanExecutionApprovalConfigurationArgs struct {
	ApprovalRole   pulumi.StringInput     `pulumi:"approvalRole"`
	TimeoutMinutes pulumi.Float64PtrInput `pulumi:"timeoutMinutes"`
}

func (PlanExecutionApprovalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionApprovalConfiguration)(nil)).Elem()
}

func (i PlanExecutionApprovalConfigurationArgs) ToPlanExecutionApprovalConfigurationOutput() PlanExecutionApprovalConfigurationOutput {
	return i.ToPlanExecutionApprovalConfigurationOutputWithContext(context.Background())
}

func (i PlanExecutionApprovalConfigurationArgs) ToPlanExecutionApprovalConfigurationOutputWithContext(ctx context.Context) PlanExecutionApprovalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionApprovalConfigurationOutput)
}

type PlanExecutionApprovalConfigurationOutput struct{ *pulumi.OutputState }

func (PlanExecutionApprovalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionApprovalConfiguration)(nil)).Elem()
}

func (o PlanExecutionApprovalConfigurationOutput) ToPlanExecutionApprovalConfigurationOutput() PlanExecutionApprovalConfigurationOutput {
	return o
}

func (o PlanExecutionApprovalConfigurationOutput) ToPlanExecutionApprovalConfigurationOutputWithContext(ctx context.Context) PlanExecutionApprovalConfigurationOutput {
	return o
}

func (o PlanExecutionApprovalConfigurationOutput) ApprovalRole() pulumi.StringOutput {
	return o.ApplyT(func(v PlanExecutionApprovalConfiguration) string { return v.ApprovalRole }).(pulumi.StringOutput)
}

func (o PlanExecutionApprovalConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanExecutionApprovalConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

type PlanExecutionBlockConfiguration0Properties struct {
	CustomActionLambdaConfig PlanCustomActionLambdaConfiguration `pulumi:"customActionLambdaConfig"`
}

// PlanExecutionBlockConfiguration0PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration0PropertiesArgs and PlanExecutionBlockConfiguration0PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration0PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration0PropertiesArgs{...}
type PlanExecutionBlockConfiguration0PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration0PropertiesOutput() PlanExecutionBlockConfiguration0PropertiesOutput
	ToPlanExecutionBlockConfiguration0PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration0PropertiesOutput
}

type PlanExecutionBlockConfiguration0PropertiesArgs struct {
	CustomActionLambdaConfig PlanCustomActionLambdaConfigurationInput `pulumi:"customActionLambdaConfig"`
}

func (PlanExecutionBlockConfiguration0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration0Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration0PropertiesArgs) ToPlanExecutionBlockConfiguration0PropertiesOutput() PlanExecutionBlockConfiguration0PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration0PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration0PropertiesArgs) ToPlanExecutionBlockConfiguration0PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration0PropertiesOutput)
}

type PlanExecutionBlockConfiguration0PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration0Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration0PropertiesOutput) ToPlanExecutionBlockConfiguration0PropertiesOutput() PlanExecutionBlockConfiguration0PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration0PropertiesOutput) ToPlanExecutionBlockConfiguration0PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration0PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration0PropertiesOutput) CustomActionLambdaConfig() PlanCustomActionLambdaConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration0Properties) PlanCustomActionLambdaConfiguration {
		return v.CustomActionLambdaConfig
	}).(PlanCustomActionLambdaConfigurationOutput)
}

type PlanExecutionBlockConfiguration1Properties struct {
	Ec2AsgCapacityIncreaseConfig PlanEc2AsgCapacityIncreaseConfiguration `pulumi:"ec2AsgCapacityIncreaseConfig"`
}

// PlanExecutionBlockConfiguration1PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration1PropertiesArgs and PlanExecutionBlockConfiguration1PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration1PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration1PropertiesArgs{...}
type PlanExecutionBlockConfiguration1PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration1PropertiesOutput() PlanExecutionBlockConfiguration1PropertiesOutput
	ToPlanExecutionBlockConfiguration1PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration1PropertiesOutput
}

type PlanExecutionBlockConfiguration1PropertiesArgs struct {
	Ec2AsgCapacityIncreaseConfig PlanEc2AsgCapacityIncreaseConfigurationInput `pulumi:"ec2AsgCapacityIncreaseConfig"`
}

func (PlanExecutionBlockConfiguration1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration1Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration1PropertiesArgs) ToPlanExecutionBlockConfiguration1PropertiesOutput() PlanExecutionBlockConfiguration1PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration1PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration1PropertiesArgs) ToPlanExecutionBlockConfiguration1PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration1PropertiesOutput)
}

type PlanExecutionBlockConfiguration1PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration1Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration1PropertiesOutput) ToPlanExecutionBlockConfiguration1PropertiesOutput() PlanExecutionBlockConfiguration1PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration1PropertiesOutput) ToPlanExecutionBlockConfiguration1PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration1PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration1PropertiesOutput) Ec2AsgCapacityIncreaseConfig() PlanEc2AsgCapacityIncreaseConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration1Properties) PlanEc2AsgCapacityIncreaseConfiguration {
		return v.Ec2AsgCapacityIncreaseConfig
	}).(PlanEc2AsgCapacityIncreaseConfigurationOutput)
}

type PlanExecutionBlockConfiguration2Properties struct {
	ExecutionApprovalConfig PlanExecutionApprovalConfiguration `pulumi:"executionApprovalConfig"`
}

// PlanExecutionBlockConfiguration2PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration2PropertiesArgs and PlanExecutionBlockConfiguration2PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration2PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration2PropertiesArgs{...}
type PlanExecutionBlockConfiguration2PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration2PropertiesOutput() PlanExecutionBlockConfiguration2PropertiesOutput
	ToPlanExecutionBlockConfiguration2PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration2PropertiesOutput
}

type PlanExecutionBlockConfiguration2PropertiesArgs struct {
	ExecutionApprovalConfig PlanExecutionApprovalConfigurationInput `pulumi:"executionApprovalConfig"`
}

func (PlanExecutionBlockConfiguration2PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration2Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration2PropertiesArgs) ToPlanExecutionBlockConfiguration2PropertiesOutput() PlanExecutionBlockConfiguration2PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration2PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration2PropertiesArgs) ToPlanExecutionBlockConfiguration2PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration2PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration2PropertiesOutput)
}

type PlanExecutionBlockConfiguration2PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration2PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration2Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration2PropertiesOutput) ToPlanExecutionBlockConfiguration2PropertiesOutput() PlanExecutionBlockConfiguration2PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration2PropertiesOutput) ToPlanExecutionBlockConfiguration2PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration2PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration2PropertiesOutput) ExecutionApprovalConfig() PlanExecutionApprovalConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration2Properties) PlanExecutionApprovalConfiguration {
		return v.ExecutionApprovalConfig
	}).(PlanExecutionApprovalConfigurationOutput)
}

type PlanExecutionBlockConfiguration3Properties struct {
	ArcRoutingControlConfig PlanArcRoutingControlConfiguration `pulumi:"arcRoutingControlConfig"`
}

// PlanExecutionBlockConfiguration3PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration3PropertiesArgs and PlanExecutionBlockConfiguration3PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration3PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration3PropertiesArgs{...}
type PlanExecutionBlockConfiguration3PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration3PropertiesOutput() PlanExecutionBlockConfiguration3PropertiesOutput
	ToPlanExecutionBlockConfiguration3PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration3PropertiesOutput
}

type PlanExecutionBlockConfiguration3PropertiesArgs struct {
	ArcRoutingControlConfig PlanArcRoutingControlConfigurationInput `pulumi:"arcRoutingControlConfig"`
}

func (PlanExecutionBlockConfiguration3PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration3Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration3PropertiesArgs) ToPlanExecutionBlockConfiguration3PropertiesOutput() PlanExecutionBlockConfiguration3PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration3PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration3PropertiesArgs) ToPlanExecutionBlockConfiguration3PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration3PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration3PropertiesOutput)
}

type PlanExecutionBlockConfiguration3PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration3PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration3Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration3PropertiesOutput) ToPlanExecutionBlockConfiguration3PropertiesOutput() PlanExecutionBlockConfiguration3PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration3PropertiesOutput) ToPlanExecutionBlockConfiguration3PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration3PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration3PropertiesOutput) ArcRoutingControlConfig() PlanArcRoutingControlConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration3Properties) PlanArcRoutingControlConfiguration {
		return v.ArcRoutingControlConfig
	}).(PlanArcRoutingControlConfigurationOutput)
}

type PlanExecutionBlockConfiguration4Properties struct {
	GlobalAuroraConfig PlanGlobalAuroraConfiguration `pulumi:"globalAuroraConfig"`
}

// PlanExecutionBlockConfiguration4PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration4PropertiesArgs and PlanExecutionBlockConfiguration4PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration4PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration4PropertiesArgs{...}
type PlanExecutionBlockConfiguration4PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration4PropertiesOutput() PlanExecutionBlockConfiguration4PropertiesOutput
	ToPlanExecutionBlockConfiguration4PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration4PropertiesOutput
}

type PlanExecutionBlockConfiguration4PropertiesArgs struct {
	GlobalAuroraConfig PlanGlobalAuroraConfigurationInput `pulumi:"globalAuroraConfig"`
}

func (PlanExecutionBlockConfiguration4PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration4Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration4PropertiesArgs) ToPlanExecutionBlockConfiguration4PropertiesOutput() PlanExecutionBlockConfiguration4PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration4PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration4PropertiesArgs) ToPlanExecutionBlockConfiguration4PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration4PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration4PropertiesOutput)
}

type PlanExecutionBlockConfiguration4PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration4PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration4Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration4PropertiesOutput) ToPlanExecutionBlockConfiguration4PropertiesOutput() PlanExecutionBlockConfiguration4PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration4PropertiesOutput) ToPlanExecutionBlockConfiguration4PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration4PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration4PropertiesOutput) GlobalAuroraConfig() PlanGlobalAuroraConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration4Properties) PlanGlobalAuroraConfiguration {
		return v.GlobalAuroraConfig
	}).(PlanGlobalAuroraConfigurationOutput)
}

type PlanExecutionBlockConfiguration5Properties struct {
	ParallelConfig PlanParallelExecutionBlockConfiguration `pulumi:"parallelConfig"`
}

// PlanExecutionBlockConfiguration5PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration5PropertiesArgs and PlanExecutionBlockConfiguration5PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration5PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration5PropertiesArgs{...}
type PlanExecutionBlockConfiguration5PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration5PropertiesOutput() PlanExecutionBlockConfiguration5PropertiesOutput
	ToPlanExecutionBlockConfiguration5PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration5PropertiesOutput
}

type PlanExecutionBlockConfiguration5PropertiesArgs struct {
	ParallelConfig PlanParallelExecutionBlockConfigurationInput `pulumi:"parallelConfig"`
}

func (PlanExecutionBlockConfiguration5PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration5Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration5PropertiesArgs) ToPlanExecutionBlockConfiguration5PropertiesOutput() PlanExecutionBlockConfiguration5PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration5PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration5PropertiesArgs) ToPlanExecutionBlockConfiguration5PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration5PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration5PropertiesOutput)
}

type PlanExecutionBlockConfiguration5PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration5PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration5Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration5PropertiesOutput) ToPlanExecutionBlockConfiguration5PropertiesOutput() PlanExecutionBlockConfiguration5PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration5PropertiesOutput) ToPlanExecutionBlockConfiguration5PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration5PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration5PropertiesOutput) ParallelConfig() PlanParallelExecutionBlockConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration5Properties) PlanParallelExecutionBlockConfiguration {
		return v.ParallelConfig
	}).(PlanParallelExecutionBlockConfigurationOutput)
}

type PlanExecutionBlockConfiguration6Properties struct {
	RegionSwitchPlanConfig PlanRegionSwitchPlanConfiguration `pulumi:"regionSwitchPlanConfig"`
}

// PlanExecutionBlockConfiguration6PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration6PropertiesArgs and PlanExecutionBlockConfiguration6PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration6PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration6PropertiesArgs{...}
type PlanExecutionBlockConfiguration6PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration6PropertiesOutput() PlanExecutionBlockConfiguration6PropertiesOutput
	ToPlanExecutionBlockConfiguration6PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration6PropertiesOutput
}

type PlanExecutionBlockConfiguration6PropertiesArgs struct {
	RegionSwitchPlanConfig PlanRegionSwitchPlanConfigurationInput `pulumi:"regionSwitchPlanConfig"`
}

func (PlanExecutionBlockConfiguration6PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration6Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration6PropertiesArgs) ToPlanExecutionBlockConfiguration6PropertiesOutput() PlanExecutionBlockConfiguration6PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration6PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration6PropertiesArgs) ToPlanExecutionBlockConfiguration6PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration6PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration6PropertiesOutput)
}

type PlanExecutionBlockConfiguration6PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration6PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration6Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration6PropertiesOutput) ToPlanExecutionBlockConfiguration6PropertiesOutput() PlanExecutionBlockConfiguration6PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration6PropertiesOutput) ToPlanExecutionBlockConfiguration6PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration6PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration6PropertiesOutput) RegionSwitchPlanConfig() PlanRegionSwitchPlanConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration6Properties) PlanRegionSwitchPlanConfiguration {
		return v.RegionSwitchPlanConfig
	}).(PlanRegionSwitchPlanConfigurationOutput)
}

type PlanExecutionBlockConfiguration7Properties struct {
	EcsCapacityIncreaseConfig PlanEcsCapacityIncreaseConfiguration `pulumi:"ecsCapacityIncreaseConfig"`
}

// PlanExecutionBlockConfiguration7PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration7PropertiesArgs and PlanExecutionBlockConfiguration7PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration7PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration7PropertiesArgs{...}
type PlanExecutionBlockConfiguration7PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration7PropertiesOutput() PlanExecutionBlockConfiguration7PropertiesOutput
	ToPlanExecutionBlockConfiguration7PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration7PropertiesOutput
}

type PlanExecutionBlockConfiguration7PropertiesArgs struct {
	EcsCapacityIncreaseConfig PlanEcsCapacityIncreaseConfigurationInput `pulumi:"ecsCapacityIncreaseConfig"`
}

func (PlanExecutionBlockConfiguration7PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration7Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration7PropertiesArgs) ToPlanExecutionBlockConfiguration7PropertiesOutput() PlanExecutionBlockConfiguration7PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration7PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration7PropertiesArgs) ToPlanExecutionBlockConfiguration7PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration7PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration7PropertiesOutput)
}

type PlanExecutionBlockConfiguration7PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration7PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration7Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration7PropertiesOutput) ToPlanExecutionBlockConfiguration7PropertiesOutput() PlanExecutionBlockConfiguration7PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration7PropertiesOutput) ToPlanExecutionBlockConfiguration7PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration7PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration7PropertiesOutput) EcsCapacityIncreaseConfig() PlanEcsCapacityIncreaseConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration7Properties) PlanEcsCapacityIncreaseConfiguration {
		return v.EcsCapacityIncreaseConfig
	}).(PlanEcsCapacityIncreaseConfigurationOutput)
}

type PlanExecutionBlockConfiguration8Properties struct {
	EksResourceScalingConfig PlanEksResourceScalingConfiguration `pulumi:"eksResourceScalingConfig"`
}

// PlanExecutionBlockConfiguration8PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration8PropertiesArgs and PlanExecutionBlockConfiguration8PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration8PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration8PropertiesArgs{...}
type PlanExecutionBlockConfiguration8PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration8PropertiesOutput() PlanExecutionBlockConfiguration8PropertiesOutput
	ToPlanExecutionBlockConfiguration8PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration8PropertiesOutput
}

type PlanExecutionBlockConfiguration8PropertiesArgs struct {
	EksResourceScalingConfig PlanEksResourceScalingConfigurationInput `pulumi:"eksResourceScalingConfig"`
}

func (PlanExecutionBlockConfiguration8PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration8Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration8PropertiesArgs) ToPlanExecutionBlockConfiguration8PropertiesOutput() PlanExecutionBlockConfiguration8PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration8PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration8PropertiesArgs) ToPlanExecutionBlockConfiguration8PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration8PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration8PropertiesOutput)
}

type PlanExecutionBlockConfiguration8PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration8PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration8Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration8PropertiesOutput) ToPlanExecutionBlockConfiguration8PropertiesOutput() PlanExecutionBlockConfiguration8PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration8PropertiesOutput) ToPlanExecutionBlockConfiguration8PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration8PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration8PropertiesOutput) EksResourceScalingConfig() PlanEksResourceScalingConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration8Properties) PlanEksResourceScalingConfiguration {
		return v.EksResourceScalingConfig
	}).(PlanEksResourceScalingConfigurationOutput)
}

type PlanExecutionBlockConfiguration9Properties struct {
	Route53HealthCheckConfig PlanRoute53HealthCheckConfiguration `pulumi:"route53HealthCheckConfig"`
}

// PlanExecutionBlockConfiguration9PropertiesInput is an input type that accepts PlanExecutionBlockConfiguration9PropertiesArgs and PlanExecutionBlockConfiguration9PropertiesOutput values.
// You can construct a concrete instance of `PlanExecutionBlockConfiguration9PropertiesInput` via:
//
//	PlanExecutionBlockConfiguration9PropertiesArgs{...}
type PlanExecutionBlockConfiguration9PropertiesInput interface {
	pulumi.Input

	ToPlanExecutionBlockConfiguration9PropertiesOutput() PlanExecutionBlockConfiguration9PropertiesOutput
	ToPlanExecutionBlockConfiguration9PropertiesOutputWithContext(context.Context) PlanExecutionBlockConfiguration9PropertiesOutput
}

type PlanExecutionBlockConfiguration9PropertiesArgs struct {
	Route53HealthCheckConfig PlanRoute53HealthCheckConfigurationInput `pulumi:"route53HealthCheckConfig"`
}

func (PlanExecutionBlockConfiguration9PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration9Properties)(nil)).Elem()
}

func (i PlanExecutionBlockConfiguration9PropertiesArgs) ToPlanExecutionBlockConfiguration9PropertiesOutput() PlanExecutionBlockConfiguration9PropertiesOutput {
	return i.ToPlanExecutionBlockConfiguration9PropertiesOutputWithContext(context.Background())
}

func (i PlanExecutionBlockConfiguration9PropertiesArgs) ToPlanExecutionBlockConfiguration9PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration9PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanExecutionBlockConfiguration9PropertiesOutput)
}

type PlanExecutionBlockConfiguration9PropertiesOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockConfiguration9PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockConfiguration9Properties)(nil)).Elem()
}

func (o PlanExecutionBlockConfiguration9PropertiesOutput) ToPlanExecutionBlockConfiguration9PropertiesOutput() PlanExecutionBlockConfiguration9PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration9PropertiesOutput) ToPlanExecutionBlockConfiguration9PropertiesOutputWithContext(ctx context.Context) PlanExecutionBlockConfiguration9PropertiesOutput {
	return o
}

func (o PlanExecutionBlockConfiguration9PropertiesOutput) Route53HealthCheckConfig() PlanRoute53HealthCheckConfigurationOutput {
	return o.ApplyT(func(v PlanExecutionBlockConfiguration9Properties) PlanRoute53HealthCheckConfiguration {
		return v.Route53HealthCheckConfig
	}).(PlanRoute53HealthCheckConfigurationOutput)
}

type PlanGlobalAuroraConfiguration struct {
	Behavior                interface{}                 `pulumi:"behavior"`
	CrossAccountRole        *string                     `pulumi:"crossAccountRole"`
	DatabaseClusterArns     []string                    `pulumi:"databaseClusterArns"`
	ExternalId              *string                     `pulumi:"externalId"`
	GlobalClusterIdentifier string                      `pulumi:"globalClusterIdentifier"`
	TimeoutMinutes          *float64                    `pulumi:"timeoutMinutes"`
	Ungraceful              *PlanGlobalAuroraUngraceful `pulumi:"ungraceful"`
}

// PlanGlobalAuroraConfigurationInput is an input type that accepts PlanGlobalAuroraConfigurationArgs and PlanGlobalAuroraConfigurationOutput values.
// You can construct a concrete instance of `PlanGlobalAuroraConfigurationInput` via:
//
//	PlanGlobalAuroraConfigurationArgs{...}
type PlanGlobalAuroraConfigurationInput interface {
	pulumi.Input

	ToPlanGlobalAuroraConfigurationOutput() PlanGlobalAuroraConfigurationOutput
	ToPlanGlobalAuroraConfigurationOutputWithContext(context.Context) PlanGlobalAuroraConfigurationOutput
}

type PlanGlobalAuroraConfigurationArgs struct {
	Behavior                pulumi.Input                       `pulumi:"behavior"`
	CrossAccountRole        pulumi.StringPtrInput              `pulumi:"crossAccountRole"`
	DatabaseClusterArns     pulumi.StringArrayInput            `pulumi:"databaseClusterArns"`
	ExternalId              pulumi.StringPtrInput              `pulumi:"externalId"`
	GlobalClusterIdentifier pulumi.StringInput                 `pulumi:"globalClusterIdentifier"`
	TimeoutMinutes          pulumi.Float64PtrInput             `pulumi:"timeoutMinutes"`
	Ungraceful              PlanGlobalAuroraUngracefulPtrInput `pulumi:"ungraceful"`
}

func (PlanGlobalAuroraConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanGlobalAuroraConfiguration)(nil)).Elem()
}

func (i PlanGlobalAuroraConfigurationArgs) ToPlanGlobalAuroraConfigurationOutput() PlanGlobalAuroraConfigurationOutput {
	return i.ToPlanGlobalAuroraConfigurationOutputWithContext(context.Background())
}

func (i PlanGlobalAuroraConfigurationArgs) ToPlanGlobalAuroraConfigurationOutputWithContext(ctx context.Context) PlanGlobalAuroraConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanGlobalAuroraConfigurationOutput)
}

type PlanGlobalAuroraConfigurationOutput struct{ *pulumi.OutputState }

func (PlanGlobalAuroraConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanGlobalAuroraConfiguration)(nil)).Elem()
}

func (o PlanGlobalAuroraConfigurationOutput) ToPlanGlobalAuroraConfigurationOutput() PlanGlobalAuroraConfigurationOutput {
	return o
}

func (o PlanGlobalAuroraConfigurationOutput) ToPlanGlobalAuroraConfigurationOutputWithContext(ctx context.Context) PlanGlobalAuroraConfigurationOutput {
	return o
}

func (o PlanGlobalAuroraConfigurationOutput) Behavior() pulumi.AnyOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) interface{} { return v.Behavior }).(pulumi.AnyOutput)
}

func (o PlanGlobalAuroraConfigurationOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanGlobalAuroraConfigurationOutput) DatabaseClusterArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) []string { return v.DatabaseClusterArns }).(pulumi.StringArrayOutput)
}

func (o PlanGlobalAuroraConfigurationOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o PlanGlobalAuroraConfigurationOutput) GlobalClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) string { return v.GlobalClusterIdentifier }).(pulumi.StringOutput)
}

func (o PlanGlobalAuroraConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

func (o PlanGlobalAuroraConfigurationOutput) Ungraceful() PlanGlobalAuroraUngracefulPtrOutput {
	return o.ApplyT(func(v PlanGlobalAuroraConfiguration) *PlanGlobalAuroraUngraceful { return v.Ungraceful }).(PlanGlobalAuroraUngracefulPtrOutput)
}

type PlanGlobalAuroraUngraceful struct {
	Ungraceful *PlanGlobalAuroraUngracefulBehavior `pulumi:"ungraceful"`
}

// PlanGlobalAuroraUngracefulInput is an input type that accepts PlanGlobalAuroraUngracefulArgs and PlanGlobalAuroraUngracefulOutput values.
// You can construct a concrete instance of `PlanGlobalAuroraUngracefulInput` via:
//
//	PlanGlobalAuroraUngracefulArgs{...}
type PlanGlobalAuroraUngracefulInput interface {
	pulumi.Input

	ToPlanGlobalAuroraUngracefulOutput() PlanGlobalAuroraUngracefulOutput
	ToPlanGlobalAuroraUngracefulOutputWithContext(context.Context) PlanGlobalAuroraUngracefulOutput
}

type PlanGlobalAuroraUngracefulArgs struct {
	Ungraceful PlanGlobalAuroraUngracefulBehaviorPtrInput `pulumi:"ungraceful"`
}

func (PlanGlobalAuroraUngracefulArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanGlobalAuroraUngraceful)(nil)).Elem()
}

func (i PlanGlobalAuroraUngracefulArgs) ToPlanGlobalAuroraUngracefulOutput() PlanGlobalAuroraUngracefulOutput {
	return i.ToPlanGlobalAuroraUngracefulOutputWithContext(context.Background())
}

func (i PlanGlobalAuroraUngracefulArgs) ToPlanGlobalAuroraUngracefulOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanGlobalAuroraUngracefulOutput)
}

func (i PlanGlobalAuroraUngracefulArgs) ToPlanGlobalAuroraUngracefulPtrOutput() PlanGlobalAuroraUngracefulPtrOutput {
	return i.ToPlanGlobalAuroraUngracefulPtrOutputWithContext(context.Background())
}

func (i PlanGlobalAuroraUngracefulArgs) ToPlanGlobalAuroraUngracefulPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanGlobalAuroraUngracefulOutput).ToPlanGlobalAuroraUngracefulPtrOutputWithContext(ctx)
}

// PlanGlobalAuroraUngracefulPtrInput is an input type that accepts PlanGlobalAuroraUngracefulArgs, PlanGlobalAuroraUngracefulPtr and PlanGlobalAuroraUngracefulPtrOutput values.
// You can construct a concrete instance of `PlanGlobalAuroraUngracefulPtrInput` via:
//
//	        PlanGlobalAuroraUngracefulArgs{...}
//
//	or:
//
//	        nil
type PlanGlobalAuroraUngracefulPtrInput interface {
	pulumi.Input

	ToPlanGlobalAuroraUngracefulPtrOutput() PlanGlobalAuroraUngracefulPtrOutput
	ToPlanGlobalAuroraUngracefulPtrOutputWithContext(context.Context) PlanGlobalAuroraUngracefulPtrOutput
}

type planGlobalAuroraUngracefulPtrType PlanGlobalAuroraUngracefulArgs

func PlanGlobalAuroraUngracefulPtr(v *PlanGlobalAuroraUngracefulArgs) PlanGlobalAuroraUngracefulPtrInput {
	return (*planGlobalAuroraUngracefulPtrType)(v)
}

func (*planGlobalAuroraUngracefulPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanGlobalAuroraUngraceful)(nil)).Elem()
}

func (i *planGlobalAuroraUngracefulPtrType) ToPlanGlobalAuroraUngracefulPtrOutput() PlanGlobalAuroraUngracefulPtrOutput {
	return i.ToPlanGlobalAuroraUngracefulPtrOutputWithContext(context.Background())
}

func (i *planGlobalAuroraUngracefulPtrType) ToPlanGlobalAuroraUngracefulPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanGlobalAuroraUngracefulPtrOutput)
}

type PlanGlobalAuroraUngracefulOutput struct{ *pulumi.OutputState }

func (PlanGlobalAuroraUngracefulOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanGlobalAuroraUngraceful)(nil)).Elem()
}

func (o PlanGlobalAuroraUngracefulOutput) ToPlanGlobalAuroraUngracefulOutput() PlanGlobalAuroraUngracefulOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulOutput) ToPlanGlobalAuroraUngracefulOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulOutput) ToPlanGlobalAuroraUngracefulPtrOutput() PlanGlobalAuroraUngracefulPtrOutput {
	return o.ToPlanGlobalAuroraUngracefulPtrOutputWithContext(context.Background())
}

func (o PlanGlobalAuroraUngracefulOutput) ToPlanGlobalAuroraUngracefulPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanGlobalAuroraUngraceful) *PlanGlobalAuroraUngraceful {
		return &v
	}).(PlanGlobalAuroraUngracefulPtrOutput)
}

func (o PlanGlobalAuroraUngracefulOutput) Ungraceful() PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return o.ApplyT(func(v PlanGlobalAuroraUngraceful) *PlanGlobalAuroraUngracefulBehavior { return v.Ungraceful }).(PlanGlobalAuroraUngracefulBehaviorPtrOutput)
}

type PlanGlobalAuroraUngracefulPtrOutput struct{ *pulumi.OutputState }

func (PlanGlobalAuroraUngracefulPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanGlobalAuroraUngraceful)(nil)).Elem()
}

func (o PlanGlobalAuroraUngracefulPtrOutput) ToPlanGlobalAuroraUngracefulPtrOutput() PlanGlobalAuroraUngracefulPtrOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulPtrOutput) ToPlanGlobalAuroraUngracefulPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulPtrOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulPtrOutput) Elem() PlanGlobalAuroraUngracefulOutput {
	return o.ApplyT(func(v *PlanGlobalAuroraUngraceful) PlanGlobalAuroraUngraceful {
		if v != nil {
			return *v
		}
		var ret PlanGlobalAuroraUngraceful
		return ret
	}).(PlanGlobalAuroraUngracefulOutput)
}

func (o PlanGlobalAuroraUngracefulPtrOutput) Ungraceful() PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return o.ApplyT(func(v *PlanGlobalAuroraUngraceful) *PlanGlobalAuroraUngracefulBehavior {
		if v == nil {
			return nil
		}
		return v.Ungraceful
	}).(PlanGlobalAuroraUngracefulBehaviorPtrOutput)
}

type PlanHealthCheckState struct {
	HealthCheckId *string `pulumi:"healthCheckId"`
	Region        *string `pulumi:"region"`
}

type PlanHealthCheckStateOutput struct{ *pulumi.OutputState }

func (PlanHealthCheckStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanHealthCheckState)(nil)).Elem()
}

func (o PlanHealthCheckStateOutput) ToPlanHealthCheckStateOutput() PlanHealthCheckStateOutput {
	return o
}

func (o PlanHealthCheckStateOutput) ToPlanHealthCheckStateOutputWithContext(ctx context.Context) PlanHealthCheckStateOutput {
	return o
}

func (o PlanHealthCheckStateOutput) HealthCheckId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanHealthCheckState) *string { return v.HealthCheckId }).(pulumi.StringPtrOutput)
}

func (o PlanHealthCheckStateOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanHealthCheckState) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type PlanHealthCheckStateArrayOutput struct{ *pulumi.OutputState }

func (PlanHealthCheckStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanHealthCheckState)(nil)).Elem()
}

func (o PlanHealthCheckStateArrayOutput) ToPlanHealthCheckStateArrayOutput() PlanHealthCheckStateArrayOutput {
	return o
}

func (o PlanHealthCheckStateArrayOutput) ToPlanHealthCheckStateArrayOutputWithContext(ctx context.Context) PlanHealthCheckStateArrayOutput {
	return o
}

func (o PlanHealthCheckStateArrayOutput) Index(i pulumi.IntInput) PlanHealthCheckStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanHealthCheckState {
		return vs[0].([]PlanHealthCheckState)[vs[1].(int)]
	}).(PlanHealthCheckStateOutput)
}

type PlanKubernetesResourceType struct {
	ApiVersion string `pulumi:"apiVersion"`
	Kind       string `pulumi:"kind"`
}

// PlanKubernetesResourceTypeInput is an input type that accepts PlanKubernetesResourceTypeArgs and PlanKubernetesResourceTypeOutput values.
// You can construct a concrete instance of `PlanKubernetesResourceTypeInput` via:
//
//	PlanKubernetesResourceTypeArgs{...}
type PlanKubernetesResourceTypeInput interface {
	pulumi.Input

	ToPlanKubernetesResourceTypeOutput() PlanKubernetesResourceTypeOutput
	ToPlanKubernetesResourceTypeOutputWithContext(context.Context) PlanKubernetesResourceTypeOutput
}

type PlanKubernetesResourceTypeArgs struct {
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	Kind       pulumi.StringInput `pulumi:"kind"`
}

func (PlanKubernetesResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanKubernetesResourceType)(nil)).Elem()
}

func (i PlanKubernetesResourceTypeArgs) ToPlanKubernetesResourceTypeOutput() PlanKubernetesResourceTypeOutput {
	return i.ToPlanKubernetesResourceTypeOutputWithContext(context.Background())
}

func (i PlanKubernetesResourceTypeArgs) ToPlanKubernetesResourceTypeOutputWithContext(ctx context.Context) PlanKubernetesResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanKubernetesResourceTypeOutput)
}

type PlanKubernetesResourceTypeOutput struct{ *pulumi.OutputState }

func (PlanKubernetesResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanKubernetesResourceType)(nil)).Elem()
}

func (o PlanKubernetesResourceTypeOutput) ToPlanKubernetesResourceTypeOutput() PlanKubernetesResourceTypeOutput {
	return o
}

func (o PlanKubernetesResourceTypeOutput) ToPlanKubernetesResourceTypeOutputWithContext(ctx context.Context) PlanKubernetesResourceTypeOutput {
	return o
}

func (o PlanKubernetesResourceTypeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PlanKubernetesResourceType) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o PlanKubernetesResourceTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PlanKubernetesResourceType) string { return v.Kind }).(pulumi.StringOutput)
}

type PlanKubernetesScalingResource struct {
	HpaName   *string `pulumi:"hpaName"`
	Name      string  `pulumi:"name"`
	Namespace string  `pulumi:"namespace"`
}

type PlanLambdaUngraceful struct {
	Behavior interface{} `pulumi:"behavior"`
}

// PlanLambdaUngracefulInput is an input type that accepts PlanLambdaUngracefulArgs and PlanLambdaUngracefulOutput values.
// You can construct a concrete instance of `PlanLambdaUngracefulInput` via:
//
//	PlanLambdaUngracefulArgs{...}
type PlanLambdaUngracefulInput interface {
	pulumi.Input

	ToPlanLambdaUngracefulOutput() PlanLambdaUngracefulOutput
	ToPlanLambdaUngracefulOutputWithContext(context.Context) PlanLambdaUngracefulOutput
}

type PlanLambdaUngracefulArgs struct {
	Behavior pulumi.Input `pulumi:"behavior"`
}

func (PlanLambdaUngracefulArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanLambdaUngraceful)(nil)).Elem()
}

func (i PlanLambdaUngracefulArgs) ToPlanLambdaUngracefulOutput() PlanLambdaUngracefulOutput {
	return i.ToPlanLambdaUngracefulOutputWithContext(context.Background())
}

func (i PlanLambdaUngracefulArgs) ToPlanLambdaUngracefulOutputWithContext(ctx context.Context) PlanLambdaUngracefulOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanLambdaUngracefulOutput)
}

func (i PlanLambdaUngracefulArgs) ToPlanLambdaUngracefulPtrOutput() PlanLambdaUngracefulPtrOutput {
	return i.ToPlanLambdaUngracefulPtrOutputWithContext(context.Background())
}

func (i PlanLambdaUngracefulArgs) ToPlanLambdaUngracefulPtrOutputWithContext(ctx context.Context) PlanLambdaUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanLambdaUngracefulOutput).ToPlanLambdaUngracefulPtrOutputWithContext(ctx)
}

// PlanLambdaUngracefulPtrInput is an input type that accepts PlanLambdaUngracefulArgs, PlanLambdaUngracefulPtr and PlanLambdaUngracefulPtrOutput values.
// You can construct a concrete instance of `PlanLambdaUngracefulPtrInput` via:
//
//	        PlanLambdaUngracefulArgs{...}
//
//	or:
//
//	        nil
type PlanLambdaUngracefulPtrInput interface {
	pulumi.Input

	ToPlanLambdaUngracefulPtrOutput() PlanLambdaUngracefulPtrOutput
	ToPlanLambdaUngracefulPtrOutputWithContext(context.Context) PlanLambdaUngracefulPtrOutput
}

type planLambdaUngracefulPtrType PlanLambdaUngracefulArgs

func PlanLambdaUngracefulPtr(v *PlanLambdaUngracefulArgs) PlanLambdaUngracefulPtrInput {
	return (*planLambdaUngracefulPtrType)(v)
}

func (*planLambdaUngracefulPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanLambdaUngraceful)(nil)).Elem()
}

func (i *planLambdaUngracefulPtrType) ToPlanLambdaUngracefulPtrOutput() PlanLambdaUngracefulPtrOutput {
	return i.ToPlanLambdaUngracefulPtrOutputWithContext(context.Background())
}

func (i *planLambdaUngracefulPtrType) ToPlanLambdaUngracefulPtrOutputWithContext(ctx context.Context) PlanLambdaUngracefulPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanLambdaUngracefulPtrOutput)
}

type PlanLambdaUngracefulOutput struct{ *pulumi.OutputState }

func (PlanLambdaUngracefulOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanLambdaUngraceful)(nil)).Elem()
}

func (o PlanLambdaUngracefulOutput) ToPlanLambdaUngracefulOutput() PlanLambdaUngracefulOutput {
	return o
}

func (o PlanLambdaUngracefulOutput) ToPlanLambdaUngracefulOutputWithContext(ctx context.Context) PlanLambdaUngracefulOutput {
	return o
}

func (o PlanLambdaUngracefulOutput) ToPlanLambdaUngracefulPtrOutput() PlanLambdaUngracefulPtrOutput {
	return o.ToPlanLambdaUngracefulPtrOutputWithContext(context.Background())
}

func (o PlanLambdaUngracefulOutput) ToPlanLambdaUngracefulPtrOutputWithContext(ctx context.Context) PlanLambdaUngracefulPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanLambdaUngraceful) *PlanLambdaUngraceful {
		return &v
	}).(PlanLambdaUngracefulPtrOutput)
}

func (o PlanLambdaUngracefulOutput) Behavior() pulumi.AnyOutput {
	return o.ApplyT(func(v PlanLambdaUngraceful) interface{} { return v.Behavior }).(pulumi.AnyOutput)
}

type PlanLambdaUngracefulPtrOutput struct{ *pulumi.OutputState }

func (PlanLambdaUngracefulPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanLambdaUngraceful)(nil)).Elem()
}

func (o PlanLambdaUngracefulPtrOutput) ToPlanLambdaUngracefulPtrOutput() PlanLambdaUngracefulPtrOutput {
	return o
}

func (o PlanLambdaUngracefulPtrOutput) ToPlanLambdaUngracefulPtrOutputWithContext(ctx context.Context) PlanLambdaUngracefulPtrOutput {
	return o
}

func (o PlanLambdaUngracefulPtrOutput) Elem() PlanLambdaUngracefulOutput {
	return o.ApplyT(func(v *PlanLambdaUngraceful) PlanLambdaUngraceful {
		if v != nil {
			return *v
		}
		var ret PlanLambdaUngraceful
		return ret
	}).(PlanLambdaUngracefulOutput)
}

func (o PlanLambdaUngracefulPtrOutput) Behavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *PlanLambdaUngraceful) interface{} {
		if v == nil {
			return nil
		}
		return v.Behavior
	}).(pulumi.AnyOutput)
}

type PlanLambdas struct {
	Arn              *string `pulumi:"arn"`
	CrossAccountRole *string `pulumi:"crossAccountRole"`
	ExternalId       *string `pulumi:"externalId"`
}

// PlanLambdasInput is an input type that accepts PlanLambdasArgs and PlanLambdasOutput values.
// You can construct a concrete instance of `PlanLambdasInput` via:
//
//	PlanLambdasArgs{...}
type PlanLambdasInput interface {
	pulumi.Input

	ToPlanLambdasOutput() PlanLambdasOutput
	ToPlanLambdasOutputWithContext(context.Context) PlanLambdasOutput
}

type PlanLambdasArgs struct {
	Arn              pulumi.StringPtrInput `pulumi:"arn"`
	CrossAccountRole pulumi.StringPtrInput `pulumi:"crossAccountRole"`
	ExternalId       pulumi.StringPtrInput `pulumi:"externalId"`
}

func (PlanLambdasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanLambdas)(nil)).Elem()
}

func (i PlanLambdasArgs) ToPlanLambdasOutput() PlanLambdasOutput {
	return i.ToPlanLambdasOutputWithContext(context.Background())
}

func (i PlanLambdasArgs) ToPlanLambdasOutputWithContext(ctx context.Context) PlanLambdasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanLambdasOutput)
}

// PlanLambdasArrayInput is an input type that accepts PlanLambdasArray and PlanLambdasArrayOutput values.
// You can construct a concrete instance of `PlanLambdasArrayInput` via:
//
//	PlanLambdasArray{ PlanLambdasArgs{...} }
type PlanLambdasArrayInput interface {
	pulumi.Input

	ToPlanLambdasArrayOutput() PlanLambdasArrayOutput
	ToPlanLambdasArrayOutputWithContext(context.Context) PlanLambdasArrayOutput
}

type PlanLambdasArray []PlanLambdasInput

func (PlanLambdasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanLambdas)(nil)).Elem()
}

func (i PlanLambdasArray) ToPlanLambdasArrayOutput() PlanLambdasArrayOutput {
	return i.ToPlanLambdasArrayOutputWithContext(context.Background())
}

func (i PlanLambdasArray) ToPlanLambdasArrayOutputWithContext(ctx context.Context) PlanLambdasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanLambdasArrayOutput)
}

type PlanLambdasOutput struct{ *pulumi.OutputState }

func (PlanLambdasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanLambdas)(nil)).Elem()
}

func (o PlanLambdasOutput) ToPlanLambdasOutput() PlanLambdasOutput {
	return o
}

func (o PlanLambdasOutput) ToPlanLambdasOutputWithContext(ctx context.Context) PlanLambdasOutput {
	return o
}

func (o PlanLambdasOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanLambdas) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o PlanLambdasOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanLambdas) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanLambdasOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanLambdas) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

type PlanLambdasArrayOutput struct{ *pulumi.OutputState }

func (PlanLambdasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanLambdas)(nil)).Elem()
}

func (o PlanLambdasArrayOutput) ToPlanLambdasArrayOutput() PlanLambdasArrayOutput {
	return o
}

func (o PlanLambdasArrayOutput) ToPlanLambdasArrayOutputWithContext(ctx context.Context) PlanLambdasArrayOutput {
	return o
}

func (o PlanLambdasArrayOutput) Index(i pulumi.IntInput) PlanLambdasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanLambdas {
		return vs[0].([]PlanLambdas)[vs[1].(int)]
	}).(PlanLambdasOutput)
}

type PlanParallelExecutionBlockConfiguration struct {
	Steps []PlanStep `pulumi:"steps"`
}

// PlanParallelExecutionBlockConfigurationInput is an input type that accepts PlanParallelExecutionBlockConfigurationArgs and PlanParallelExecutionBlockConfigurationOutput values.
// You can construct a concrete instance of `PlanParallelExecutionBlockConfigurationInput` via:
//
//	PlanParallelExecutionBlockConfigurationArgs{...}
type PlanParallelExecutionBlockConfigurationInput interface {
	pulumi.Input

	ToPlanParallelExecutionBlockConfigurationOutput() PlanParallelExecutionBlockConfigurationOutput
	ToPlanParallelExecutionBlockConfigurationOutputWithContext(context.Context) PlanParallelExecutionBlockConfigurationOutput
}

type PlanParallelExecutionBlockConfigurationArgs struct {
	Steps PlanStepArrayInput `pulumi:"steps"`
}

func (PlanParallelExecutionBlockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanParallelExecutionBlockConfiguration)(nil)).Elem()
}

func (i PlanParallelExecutionBlockConfigurationArgs) ToPlanParallelExecutionBlockConfigurationOutput() PlanParallelExecutionBlockConfigurationOutput {
	return i.ToPlanParallelExecutionBlockConfigurationOutputWithContext(context.Background())
}

func (i PlanParallelExecutionBlockConfigurationArgs) ToPlanParallelExecutionBlockConfigurationOutputWithContext(ctx context.Context) PlanParallelExecutionBlockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanParallelExecutionBlockConfigurationOutput)
}

type PlanParallelExecutionBlockConfigurationOutput struct{ *pulumi.OutputState }

func (PlanParallelExecutionBlockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanParallelExecutionBlockConfiguration)(nil)).Elem()
}

func (o PlanParallelExecutionBlockConfigurationOutput) ToPlanParallelExecutionBlockConfigurationOutput() PlanParallelExecutionBlockConfigurationOutput {
	return o
}

func (o PlanParallelExecutionBlockConfigurationOutput) ToPlanParallelExecutionBlockConfigurationOutputWithContext(ctx context.Context) PlanParallelExecutionBlockConfigurationOutput {
	return o
}

func (o PlanParallelExecutionBlockConfigurationOutput) Steps() PlanStepArrayOutput {
	return o.ApplyT(func(v PlanParallelExecutionBlockConfiguration) []PlanStep { return v.Steps }).(PlanStepArrayOutput)
}

type PlanRegionSwitchPlanConfiguration struct {
	Arn              string  `pulumi:"arn"`
	CrossAccountRole *string `pulumi:"crossAccountRole"`
	ExternalId       *string `pulumi:"externalId"`
}

// PlanRegionSwitchPlanConfigurationInput is an input type that accepts PlanRegionSwitchPlanConfigurationArgs and PlanRegionSwitchPlanConfigurationOutput values.
// You can construct a concrete instance of `PlanRegionSwitchPlanConfigurationInput` via:
//
//	PlanRegionSwitchPlanConfigurationArgs{...}
type PlanRegionSwitchPlanConfigurationInput interface {
	pulumi.Input

	ToPlanRegionSwitchPlanConfigurationOutput() PlanRegionSwitchPlanConfigurationOutput
	ToPlanRegionSwitchPlanConfigurationOutputWithContext(context.Context) PlanRegionSwitchPlanConfigurationOutput
}

type PlanRegionSwitchPlanConfigurationArgs struct {
	Arn              pulumi.StringInput    `pulumi:"arn"`
	CrossAccountRole pulumi.StringPtrInput `pulumi:"crossAccountRole"`
	ExternalId       pulumi.StringPtrInput `pulumi:"externalId"`
}

func (PlanRegionSwitchPlanConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRegionSwitchPlanConfiguration)(nil)).Elem()
}

func (i PlanRegionSwitchPlanConfigurationArgs) ToPlanRegionSwitchPlanConfigurationOutput() PlanRegionSwitchPlanConfigurationOutput {
	return i.ToPlanRegionSwitchPlanConfigurationOutputWithContext(context.Background())
}

func (i PlanRegionSwitchPlanConfigurationArgs) ToPlanRegionSwitchPlanConfigurationOutputWithContext(ctx context.Context) PlanRegionSwitchPlanConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRegionSwitchPlanConfigurationOutput)
}

type PlanRegionSwitchPlanConfigurationOutput struct{ *pulumi.OutputState }

func (PlanRegionSwitchPlanConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRegionSwitchPlanConfiguration)(nil)).Elem()
}

func (o PlanRegionSwitchPlanConfigurationOutput) ToPlanRegionSwitchPlanConfigurationOutput() PlanRegionSwitchPlanConfigurationOutput {
	return o
}

func (o PlanRegionSwitchPlanConfigurationOutput) ToPlanRegionSwitchPlanConfigurationOutputWithContext(ctx context.Context) PlanRegionSwitchPlanConfigurationOutput {
	return o
}

func (o PlanRegionSwitchPlanConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v PlanRegionSwitchPlanConfiguration) string { return v.Arn }).(pulumi.StringOutput)
}

func (o PlanRegionSwitchPlanConfigurationOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRegionSwitchPlanConfiguration) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanRegionSwitchPlanConfigurationOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRegionSwitchPlanConfiguration) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

type PlanRoute53HealthCheckConfiguration struct {
	CrossAccountRole *string                        `pulumi:"crossAccountRole"`
	ExternalId       *string                        `pulumi:"externalId"`
	HostedZoneId     string                         `pulumi:"hostedZoneId"`
	RecordName       string                         `pulumi:"recordName"`
	RecordSets       []PlanRoute53ResourceRecordSet `pulumi:"recordSets"`
	TimeoutMinutes   *float64                       `pulumi:"timeoutMinutes"`
}

// PlanRoute53HealthCheckConfigurationInput is an input type that accepts PlanRoute53HealthCheckConfigurationArgs and PlanRoute53HealthCheckConfigurationOutput values.
// You can construct a concrete instance of `PlanRoute53HealthCheckConfigurationInput` via:
//
//	PlanRoute53HealthCheckConfigurationArgs{...}
type PlanRoute53HealthCheckConfigurationInput interface {
	pulumi.Input

	ToPlanRoute53HealthCheckConfigurationOutput() PlanRoute53HealthCheckConfigurationOutput
	ToPlanRoute53HealthCheckConfigurationOutputWithContext(context.Context) PlanRoute53HealthCheckConfigurationOutput
}

type PlanRoute53HealthCheckConfigurationArgs struct {
	CrossAccountRole pulumi.StringPtrInput                  `pulumi:"crossAccountRole"`
	ExternalId       pulumi.StringPtrInput                  `pulumi:"externalId"`
	HostedZoneId     pulumi.StringInput                     `pulumi:"hostedZoneId"`
	RecordName       pulumi.StringInput                     `pulumi:"recordName"`
	RecordSets       PlanRoute53ResourceRecordSetArrayInput `pulumi:"recordSets"`
	TimeoutMinutes   pulumi.Float64PtrInput                 `pulumi:"timeoutMinutes"`
}

func (PlanRoute53HealthCheckConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRoute53HealthCheckConfiguration)(nil)).Elem()
}

func (i PlanRoute53HealthCheckConfigurationArgs) ToPlanRoute53HealthCheckConfigurationOutput() PlanRoute53HealthCheckConfigurationOutput {
	return i.ToPlanRoute53HealthCheckConfigurationOutputWithContext(context.Background())
}

func (i PlanRoute53HealthCheckConfigurationArgs) ToPlanRoute53HealthCheckConfigurationOutputWithContext(ctx context.Context) PlanRoute53HealthCheckConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRoute53HealthCheckConfigurationOutput)
}

type PlanRoute53HealthCheckConfigurationOutput struct{ *pulumi.OutputState }

func (PlanRoute53HealthCheckConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRoute53HealthCheckConfiguration)(nil)).Elem()
}

func (o PlanRoute53HealthCheckConfigurationOutput) ToPlanRoute53HealthCheckConfigurationOutput() PlanRoute53HealthCheckConfigurationOutput {
	return o
}

func (o PlanRoute53HealthCheckConfigurationOutput) ToPlanRoute53HealthCheckConfigurationOutputWithContext(ctx context.Context) PlanRoute53HealthCheckConfigurationOutput {
	return o
}

func (o PlanRoute53HealthCheckConfigurationOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRoute53HealthCheckConfiguration) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanRoute53HealthCheckConfigurationOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRoute53HealthCheckConfiguration) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o PlanRoute53HealthCheckConfigurationOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v PlanRoute53HealthCheckConfiguration) string { return v.HostedZoneId }).(pulumi.StringOutput)
}

func (o PlanRoute53HealthCheckConfigurationOutput) RecordName() pulumi.StringOutput {
	return o.ApplyT(func(v PlanRoute53HealthCheckConfiguration) string { return v.RecordName }).(pulumi.StringOutput)
}

func (o PlanRoute53HealthCheckConfigurationOutput) RecordSets() PlanRoute53ResourceRecordSetArrayOutput {
	return o.ApplyT(func(v PlanRoute53HealthCheckConfiguration) []PlanRoute53ResourceRecordSet { return v.RecordSets }).(PlanRoute53ResourceRecordSetArrayOutput)
}

func (o PlanRoute53HealthCheckConfigurationOutput) TimeoutMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PlanRoute53HealthCheckConfiguration) *float64 { return v.TimeoutMinutes }).(pulumi.Float64PtrOutput)
}

type PlanRoute53ResourceRecordSet struct {
	RecordSetIdentifier *string `pulumi:"recordSetIdentifier"`
	Region              *string `pulumi:"region"`
}

// PlanRoute53ResourceRecordSetInput is an input type that accepts PlanRoute53ResourceRecordSetArgs and PlanRoute53ResourceRecordSetOutput values.
// You can construct a concrete instance of `PlanRoute53ResourceRecordSetInput` via:
//
//	PlanRoute53ResourceRecordSetArgs{...}
type PlanRoute53ResourceRecordSetInput interface {
	pulumi.Input

	ToPlanRoute53ResourceRecordSetOutput() PlanRoute53ResourceRecordSetOutput
	ToPlanRoute53ResourceRecordSetOutputWithContext(context.Context) PlanRoute53ResourceRecordSetOutput
}

type PlanRoute53ResourceRecordSetArgs struct {
	RecordSetIdentifier pulumi.StringPtrInput `pulumi:"recordSetIdentifier"`
	Region              pulumi.StringPtrInput `pulumi:"region"`
}

func (PlanRoute53ResourceRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRoute53ResourceRecordSet)(nil)).Elem()
}

func (i PlanRoute53ResourceRecordSetArgs) ToPlanRoute53ResourceRecordSetOutput() PlanRoute53ResourceRecordSetOutput {
	return i.ToPlanRoute53ResourceRecordSetOutputWithContext(context.Background())
}

func (i PlanRoute53ResourceRecordSetArgs) ToPlanRoute53ResourceRecordSetOutputWithContext(ctx context.Context) PlanRoute53ResourceRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRoute53ResourceRecordSetOutput)
}

// PlanRoute53ResourceRecordSetArrayInput is an input type that accepts PlanRoute53ResourceRecordSetArray and PlanRoute53ResourceRecordSetArrayOutput values.
// You can construct a concrete instance of `PlanRoute53ResourceRecordSetArrayInput` via:
//
//	PlanRoute53ResourceRecordSetArray{ PlanRoute53ResourceRecordSetArgs{...} }
type PlanRoute53ResourceRecordSetArrayInput interface {
	pulumi.Input

	ToPlanRoute53ResourceRecordSetArrayOutput() PlanRoute53ResourceRecordSetArrayOutput
	ToPlanRoute53ResourceRecordSetArrayOutputWithContext(context.Context) PlanRoute53ResourceRecordSetArrayOutput
}

type PlanRoute53ResourceRecordSetArray []PlanRoute53ResourceRecordSetInput

func (PlanRoute53ResourceRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRoute53ResourceRecordSet)(nil)).Elem()
}

func (i PlanRoute53ResourceRecordSetArray) ToPlanRoute53ResourceRecordSetArrayOutput() PlanRoute53ResourceRecordSetArrayOutput {
	return i.ToPlanRoute53ResourceRecordSetArrayOutputWithContext(context.Background())
}

func (i PlanRoute53ResourceRecordSetArray) ToPlanRoute53ResourceRecordSetArrayOutputWithContext(ctx context.Context) PlanRoute53ResourceRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanRoute53ResourceRecordSetArrayOutput)
}

type PlanRoute53ResourceRecordSetOutput struct{ *pulumi.OutputState }

func (PlanRoute53ResourceRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRoute53ResourceRecordSet)(nil)).Elem()
}

func (o PlanRoute53ResourceRecordSetOutput) ToPlanRoute53ResourceRecordSetOutput() PlanRoute53ResourceRecordSetOutput {
	return o
}

func (o PlanRoute53ResourceRecordSetOutput) ToPlanRoute53ResourceRecordSetOutputWithContext(ctx context.Context) PlanRoute53ResourceRecordSetOutput {
	return o
}

func (o PlanRoute53ResourceRecordSetOutput) RecordSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRoute53ResourceRecordSet) *string { return v.RecordSetIdentifier }).(pulumi.StringPtrOutput)
}

func (o PlanRoute53ResourceRecordSetOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanRoute53ResourceRecordSet) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type PlanRoute53ResourceRecordSetArrayOutput struct{ *pulumi.OutputState }

func (PlanRoute53ResourceRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanRoute53ResourceRecordSet)(nil)).Elem()
}

func (o PlanRoute53ResourceRecordSetArrayOutput) ToPlanRoute53ResourceRecordSetArrayOutput() PlanRoute53ResourceRecordSetArrayOutput {
	return o
}

func (o PlanRoute53ResourceRecordSetArrayOutput) ToPlanRoute53ResourceRecordSetArrayOutputWithContext(ctx context.Context) PlanRoute53ResourceRecordSetArrayOutput {
	return o
}

func (o PlanRoute53ResourceRecordSetArrayOutput) Index(i pulumi.IntInput) PlanRoute53ResourceRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanRoute53ResourceRecordSet {
		return vs[0].([]PlanRoute53ResourceRecordSet)[vs[1].(int)]
	}).(PlanRoute53ResourceRecordSetOutput)
}

type PlanService struct {
	ClusterArn       *string `pulumi:"clusterArn"`
	CrossAccountRole *string `pulumi:"crossAccountRole"`
	ExternalId       *string `pulumi:"externalId"`
	ServiceArn       *string `pulumi:"serviceArn"`
}

// PlanServiceInput is an input type that accepts PlanServiceArgs and PlanServiceOutput values.
// You can construct a concrete instance of `PlanServiceInput` via:
//
//	PlanServiceArgs{...}
type PlanServiceInput interface {
	pulumi.Input

	ToPlanServiceOutput() PlanServiceOutput
	ToPlanServiceOutputWithContext(context.Context) PlanServiceOutput
}

type PlanServiceArgs struct {
	ClusterArn       pulumi.StringPtrInput `pulumi:"clusterArn"`
	CrossAccountRole pulumi.StringPtrInput `pulumi:"crossAccountRole"`
	ExternalId       pulumi.StringPtrInput `pulumi:"externalId"`
	ServiceArn       pulumi.StringPtrInput `pulumi:"serviceArn"`
}

func (PlanServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanService)(nil)).Elem()
}

func (i PlanServiceArgs) ToPlanServiceOutput() PlanServiceOutput {
	return i.ToPlanServiceOutputWithContext(context.Background())
}

func (i PlanServiceArgs) ToPlanServiceOutputWithContext(ctx context.Context) PlanServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanServiceOutput)
}

// PlanServiceArrayInput is an input type that accepts PlanServiceArray and PlanServiceArrayOutput values.
// You can construct a concrete instance of `PlanServiceArrayInput` via:
//
//	PlanServiceArray{ PlanServiceArgs{...} }
type PlanServiceArrayInput interface {
	pulumi.Input

	ToPlanServiceArrayOutput() PlanServiceArrayOutput
	ToPlanServiceArrayOutputWithContext(context.Context) PlanServiceArrayOutput
}

type PlanServiceArray []PlanServiceInput

func (PlanServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanService)(nil)).Elem()
}

func (i PlanServiceArray) ToPlanServiceArrayOutput() PlanServiceArrayOutput {
	return i.ToPlanServiceArrayOutputWithContext(context.Background())
}

func (i PlanServiceArray) ToPlanServiceArrayOutputWithContext(ctx context.Context) PlanServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanServiceArrayOutput)
}

type PlanServiceOutput struct{ *pulumi.OutputState }

func (PlanServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanService)(nil)).Elem()
}

func (o PlanServiceOutput) ToPlanServiceOutput() PlanServiceOutput {
	return o
}

func (o PlanServiceOutput) ToPlanServiceOutputWithContext(ctx context.Context) PlanServiceOutput {
	return o
}

func (o PlanServiceOutput) ClusterArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanService) *string { return v.ClusterArn }).(pulumi.StringPtrOutput)
}

func (o PlanServiceOutput) CrossAccountRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanService) *string { return v.CrossAccountRole }).(pulumi.StringPtrOutput)
}

func (o PlanServiceOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanService) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o PlanServiceOutput) ServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanService) *string { return v.ServiceArn }).(pulumi.StringPtrOutput)
}

type PlanServiceArrayOutput struct{ *pulumi.OutputState }

func (PlanServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanService)(nil)).Elem()
}

func (o PlanServiceArrayOutput) ToPlanServiceArrayOutput() PlanServiceArrayOutput {
	return o
}

func (o PlanServiceArrayOutput) ToPlanServiceArrayOutputWithContext(ctx context.Context) PlanServiceArrayOutput {
	return o
}

func (o PlanServiceArrayOutput) Index(i pulumi.IntInput) PlanServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanService {
		return vs[0].([]PlanService)[vs[1].(int)]
	}).(PlanServiceOutput)
}

type PlanStep struct {
	// The description of a step in a workflow.
	Description *string `pulumi:"description"`
	// The configuration for an execution block in a workflow.
	ExecutionBlockConfiguration interface{} `pulumi:"executionBlockConfiguration"`
	// The type of an execution block in a workflow.
	ExecutionBlockType PlanExecutionBlockType `pulumi:"executionBlockType"`
	// The name of a step in a workflow.
	Name string `pulumi:"name"`
}

// PlanStepInput is an input type that accepts PlanStepArgs and PlanStepOutput values.
// You can construct a concrete instance of `PlanStepInput` via:
//
//	PlanStepArgs{...}
type PlanStepInput interface {
	pulumi.Input

	ToPlanStepOutput() PlanStepOutput
	ToPlanStepOutputWithContext(context.Context) PlanStepOutput
}

type PlanStepArgs struct {
	// The description of a step in a workflow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The configuration for an execution block in a workflow.
	ExecutionBlockConfiguration pulumi.Input `pulumi:"executionBlockConfiguration"`
	// The type of an execution block in a workflow.
	ExecutionBlockType PlanExecutionBlockTypeInput `pulumi:"executionBlockType"`
	// The name of a step in a workflow.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PlanStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStep)(nil)).Elem()
}

func (i PlanStepArgs) ToPlanStepOutput() PlanStepOutput {
	return i.ToPlanStepOutputWithContext(context.Background())
}

func (i PlanStepArgs) ToPlanStepOutputWithContext(ctx context.Context) PlanStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStepOutput)
}

// PlanStepArrayInput is an input type that accepts PlanStepArray and PlanStepArrayOutput values.
// You can construct a concrete instance of `PlanStepArrayInput` via:
//
//	PlanStepArray{ PlanStepArgs{...} }
type PlanStepArrayInput interface {
	pulumi.Input

	ToPlanStepArrayOutput() PlanStepArrayOutput
	ToPlanStepArrayOutputWithContext(context.Context) PlanStepArrayOutput
}

type PlanStepArray []PlanStepInput

func (PlanStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanStep)(nil)).Elem()
}

func (i PlanStepArray) ToPlanStepArrayOutput() PlanStepArrayOutput {
	return i.ToPlanStepArrayOutputWithContext(context.Background())
}

func (i PlanStepArray) ToPlanStepArrayOutputWithContext(ctx context.Context) PlanStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStepArrayOutput)
}

type PlanStepOutput struct{ *pulumi.OutputState }

func (PlanStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStep)(nil)).Elem()
}

func (o PlanStepOutput) ToPlanStepOutput() PlanStepOutput {
	return o
}

func (o PlanStepOutput) ToPlanStepOutputWithContext(ctx context.Context) PlanStepOutput {
	return o
}

// The description of a step in a workflow.
func (o PlanStepOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStep) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The configuration for an execution block in a workflow.
func (o PlanStepOutput) ExecutionBlockConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v PlanStep) interface{} { return v.ExecutionBlockConfiguration }).(pulumi.AnyOutput)
}

// The type of an execution block in a workflow.
func (o PlanStepOutput) ExecutionBlockType() PlanExecutionBlockTypeOutput {
	return o.ApplyT(func(v PlanStep) PlanExecutionBlockType { return v.ExecutionBlockType }).(PlanExecutionBlockTypeOutput)
}

// The name of a step in a workflow.
func (o PlanStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlanStep) string { return v.Name }).(pulumi.StringOutput)
}

type PlanStepArrayOutput struct{ *pulumi.OutputState }

func (PlanStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanStep)(nil)).Elem()
}

func (o PlanStepArrayOutput) ToPlanStepArrayOutput() PlanStepArrayOutput {
	return o
}

func (o PlanStepArrayOutput) ToPlanStepArrayOutputWithContext(ctx context.Context) PlanStepArrayOutput {
	return o
}

func (o PlanStepArrayOutput) Index(i pulumi.IntInput) PlanStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanStep {
		return vs[0].([]PlanStep)[vs[1].(int)]
	}).(PlanStepOutput)
}

type PlanTrigger struct {
	// The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.
	Action PlanWorkflowTargetAction `pulumi:"action"`
	// The conditions that must be met for the trigger to fire.
	Conditions []PlanTriggerCondition `pulumi:"conditions"`
	// The description for a trigger.
	Description *string `pulumi:"description"`
	// The minimum time, in minutes, that must elapse between automatic executions of the plan.
	MinDelayMinutesBetweenExecutions float64 `pulumi:"minDelayMinutesBetweenExecutions"`
	// The AWS Region for a trigger.
	TargetRegion string `pulumi:"targetRegion"`
}

// PlanTriggerInput is an input type that accepts PlanTriggerArgs and PlanTriggerOutput values.
// You can construct a concrete instance of `PlanTriggerInput` via:
//
//	PlanTriggerArgs{...}
type PlanTriggerInput interface {
	pulumi.Input

	ToPlanTriggerOutput() PlanTriggerOutput
	ToPlanTriggerOutputWithContext(context.Context) PlanTriggerOutput
}

type PlanTriggerArgs struct {
	// The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.
	Action PlanWorkflowTargetActionInput `pulumi:"action"`
	// The conditions that must be met for the trigger to fire.
	Conditions PlanTriggerConditionArrayInput `pulumi:"conditions"`
	// The description for a trigger.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The minimum time, in minutes, that must elapse between automatic executions of the plan.
	MinDelayMinutesBetweenExecutions pulumi.Float64Input `pulumi:"minDelayMinutesBetweenExecutions"`
	// The AWS Region for a trigger.
	TargetRegion pulumi.StringInput `pulumi:"targetRegion"`
}

func (PlanTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanTrigger)(nil)).Elem()
}

func (i PlanTriggerArgs) ToPlanTriggerOutput() PlanTriggerOutput {
	return i.ToPlanTriggerOutputWithContext(context.Background())
}

func (i PlanTriggerArgs) ToPlanTriggerOutputWithContext(ctx context.Context) PlanTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTriggerOutput)
}

// PlanTriggerArrayInput is an input type that accepts PlanTriggerArray and PlanTriggerArrayOutput values.
// You can construct a concrete instance of `PlanTriggerArrayInput` via:
//
//	PlanTriggerArray{ PlanTriggerArgs{...} }
type PlanTriggerArrayInput interface {
	pulumi.Input

	ToPlanTriggerArrayOutput() PlanTriggerArrayOutput
	ToPlanTriggerArrayOutputWithContext(context.Context) PlanTriggerArrayOutput
}

type PlanTriggerArray []PlanTriggerInput

func (PlanTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanTrigger)(nil)).Elem()
}

func (i PlanTriggerArray) ToPlanTriggerArrayOutput() PlanTriggerArrayOutput {
	return i.ToPlanTriggerArrayOutputWithContext(context.Background())
}

func (i PlanTriggerArray) ToPlanTriggerArrayOutputWithContext(ctx context.Context) PlanTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTriggerArrayOutput)
}

type PlanTriggerOutput struct{ *pulumi.OutputState }

func (PlanTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanTrigger)(nil)).Elem()
}

func (o PlanTriggerOutput) ToPlanTriggerOutput() PlanTriggerOutput {
	return o
}

func (o PlanTriggerOutput) ToPlanTriggerOutputWithContext(ctx context.Context) PlanTriggerOutput {
	return o
}

// The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.
func (o PlanTriggerOutput) Action() PlanWorkflowTargetActionOutput {
	return o.ApplyT(func(v PlanTrigger) PlanWorkflowTargetAction { return v.Action }).(PlanWorkflowTargetActionOutput)
}

// The conditions that must be met for the trigger to fire.
func (o PlanTriggerOutput) Conditions() PlanTriggerConditionArrayOutput {
	return o.ApplyT(func(v PlanTrigger) []PlanTriggerCondition { return v.Conditions }).(PlanTriggerConditionArrayOutput)
}

// The description for a trigger.
func (o PlanTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The minimum time, in minutes, that must elapse between automatic executions of the plan.
func (o PlanTriggerOutput) MinDelayMinutesBetweenExecutions() pulumi.Float64Output {
	return o.ApplyT(func(v PlanTrigger) float64 { return v.MinDelayMinutesBetweenExecutions }).(pulumi.Float64Output)
}

// The AWS Region for a trigger.
func (o PlanTriggerOutput) TargetRegion() pulumi.StringOutput {
	return o.ApplyT(func(v PlanTrigger) string { return v.TargetRegion }).(pulumi.StringOutput)
}

type PlanTriggerArrayOutput struct{ *pulumi.OutputState }

func (PlanTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanTrigger)(nil)).Elem()
}

func (o PlanTriggerArrayOutput) ToPlanTriggerArrayOutput() PlanTriggerArrayOutput {
	return o
}

func (o PlanTriggerArrayOutput) ToPlanTriggerArrayOutputWithContext(ctx context.Context) PlanTriggerArrayOutput {
	return o
}

func (o PlanTriggerArrayOutput) Index(i pulumi.IntInput) PlanTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanTrigger {
		return vs[0].([]PlanTrigger)[vs[1].(int)]
	}).(PlanTriggerOutput)
}

type PlanTriggerCondition struct {
	// The name of the CloudWatch alarm associated with the condition.
	AssociatedAlarmName string `pulumi:"associatedAlarmName"`
	// The condition that must be met. Valid values include ALARM and OK.
	Condition PlanAlarmCondition `pulumi:"condition"`
}

// PlanTriggerConditionInput is an input type that accepts PlanTriggerConditionArgs and PlanTriggerConditionOutput values.
// You can construct a concrete instance of `PlanTriggerConditionInput` via:
//
//	PlanTriggerConditionArgs{...}
type PlanTriggerConditionInput interface {
	pulumi.Input

	ToPlanTriggerConditionOutput() PlanTriggerConditionOutput
	ToPlanTriggerConditionOutputWithContext(context.Context) PlanTriggerConditionOutput
}

type PlanTriggerConditionArgs struct {
	// The name of the CloudWatch alarm associated with the condition.
	AssociatedAlarmName pulumi.StringInput `pulumi:"associatedAlarmName"`
	// The condition that must be met. Valid values include ALARM and OK.
	Condition PlanAlarmConditionInput `pulumi:"condition"`
}

func (PlanTriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanTriggerCondition)(nil)).Elem()
}

func (i PlanTriggerConditionArgs) ToPlanTriggerConditionOutput() PlanTriggerConditionOutput {
	return i.ToPlanTriggerConditionOutputWithContext(context.Background())
}

func (i PlanTriggerConditionArgs) ToPlanTriggerConditionOutputWithContext(ctx context.Context) PlanTriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTriggerConditionOutput)
}

// PlanTriggerConditionArrayInput is an input type that accepts PlanTriggerConditionArray and PlanTriggerConditionArrayOutput values.
// You can construct a concrete instance of `PlanTriggerConditionArrayInput` via:
//
//	PlanTriggerConditionArray{ PlanTriggerConditionArgs{...} }
type PlanTriggerConditionArrayInput interface {
	pulumi.Input

	ToPlanTriggerConditionArrayOutput() PlanTriggerConditionArrayOutput
	ToPlanTriggerConditionArrayOutputWithContext(context.Context) PlanTriggerConditionArrayOutput
}

type PlanTriggerConditionArray []PlanTriggerConditionInput

func (PlanTriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanTriggerCondition)(nil)).Elem()
}

func (i PlanTriggerConditionArray) ToPlanTriggerConditionArrayOutput() PlanTriggerConditionArrayOutput {
	return i.ToPlanTriggerConditionArrayOutputWithContext(context.Background())
}

func (i PlanTriggerConditionArray) ToPlanTriggerConditionArrayOutputWithContext(ctx context.Context) PlanTriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTriggerConditionArrayOutput)
}

type PlanTriggerConditionOutput struct{ *pulumi.OutputState }

func (PlanTriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanTriggerCondition)(nil)).Elem()
}

func (o PlanTriggerConditionOutput) ToPlanTriggerConditionOutput() PlanTriggerConditionOutput {
	return o
}

func (o PlanTriggerConditionOutput) ToPlanTriggerConditionOutputWithContext(ctx context.Context) PlanTriggerConditionOutput {
	return o
}

// The name of the CloudWatch alarm associated with the condition.
func (o PlanTriggerConditionOutput) AssociatedAlarmName() pulumi.StringOutput {
	return o.ApplyT(func(v PlanTriggerCondition) string { return v.AssociatedAlarmName }).(pulumi.StringOutput)
}

// The condition that must be met. Valid values include ALARM and OK.
func (o PlanTriggerConditionOutput) Condition() PlanAlarmConditionOutput {
	return o.ApplyT(func(v PlanTriggerCondition) PlanAlarmCondition { return v.Condition }).(PlanAlarmConditionOutput)
}

type PlanTriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (PlanTriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanTriggerCondition)(nil)).Elem()
}

func (o PlanTriggerConditionArrayOutput) ToPlanTriggerConditionArrayOutput() PlanTriggerConditionArrayOutput {
	return o
}

func (o PlanTriggerConditionArrayOutput) ToPlanTriggerConditionArrayOutputWithContext(ctx context.Context) PlanTriggerConditionArrayOutput {
	return o
}

func (o PlanTriggerConditionArrayOutput) Index(i pulumi.IntInput) PlanTriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanTriggerCondition {
		return vs[0].([]PlanTriggerCondition)[vs[1].(int)]
	}).(PlanTriggerConditionOutput)
}

type PlanWorkflow struct {
	// The steps that make up the workflow.
	Steps []PlanStep `pulumi:"steps"`
	// The description of the workflow.
	WorkflowDescription *string `pulumi:"workflowDescription"`
	// The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.
	WorkflowTargetAction PlanWorkflowTargetAction `pulumi:"workflowTargetAction"`
	// The AWS Region that the workflow targets.
	WorkflowTargetRegion *string `pulumi:"workflowTargetRegion"`
}

// PlanWorkflowInput is an input type that accepts PlanWorkflowArgs and PlanWorkflowOutput values.
// You can construct a concrete instance of `PlanWorkflowInput` via:
//
//	PlanWorkflowArgs{...}
type PlanWorkflowInput interface {
	pulumi.Input

	ToPlanWorkflowOutput() PlanWorkflowOutput
	ToPlanWorkflowOutputWithContext(context.Context) PlanWorkflowOutput
}

type PlanWorkflowArgs struct {
	// The steps that make up the workflow.
	Steps PlanStepArrayInput `pulumi:"steps"`
	// The description of the workflow.
	WorkflowDescription pulumi.StringPtrInput `pulumi:"workflowDescription"`
	// The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.
	WorkflowTargetAction PlanWorkflowTargetActionInput `pulumi:"workflowTargetAction"`
	// The AWS Region that the workflow targets.
	WorkflowTargetRegion pulumi.StringPtrInput `pulumi:"workflowTargetRegion"`
}

func (PlanWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanWorkflow)(nil)).Elem()
}

func (i PlanWorkflowArgs) ToPlanWorkflowOutput() PlanWorkflowOutput {
	return i.ToPlanWorkflowOutputWithContext(context.Background())
}

func (i PlanWorkflowArgs) ToPlanWorkflowOutputWithContext(ctx context.Context) PlanWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanWorkflowOutput)
}

// PlanWorkflowArrayInput is an input type that accepts PlanWorkflowArray and PlanWorkflowArrayOutput values.
// You can construct a concrete instance of `PlanWorkflowArrayInput` via:
//
//	PlanWorkflowArray{ PlanWorkflowArgs{...} }
type PlanWorkflowArrayInput interface {
	pulumi.Input

	ToPlanWorkflowArrayOutput() PlanWorkflowArrayOutput
	ToPlanWorkflowArrayOutputWithContext(context.Context) PlanWorkflowArrayOutput
}

type PlanWorkflowArray []PlanWorkflowInput

func (PlanWorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanWorkflow)(nil)).Elem()
}

func (i PlanWorkflowArray) ToPlanWorkflowArrayOutput() PlanWorkflowArrayOutput {
	return i.ToPlanWorkflowArrayOutputWithContext(context.Background())
}

func (i PlanWorkflowArray) ToPlanWorkflowArrayOutputWithContext(ctx context.Context) PlanWorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanWorkflowArrayOutput)
}

type PlanWorkflowOutput struct{ *pulumi.OutputState }

func (PlanWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanWorkflow)(nil)).Elem()
}

func (o PlanWorkflowOutput) ToPlanWorkflowOutput() PlanWorkflowOutput {
	return o
}

func (o PlanWorkflowOutput) ToPlanWorkflowOutputWithContext(ctx context.Context) PlanWorkflowOutput {
	return o
}

// The steps that make up the workflow.
func (o PlanWorkflowOutput) Steps() PlanStepArrayOutput {
	return o.ApplyT(func(v PlanWorkflow) []PlanStep { return v.Steps }).(PlanStepArrayOutput)
}

// The description of the workflow.
func (o PlanWorkflowOutput) WorkflowDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanWorkflow) *string { return v.WorkflowDescription }).(pulumi.StringPtrOutput)
}

// The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.
func (o PlanWorkflowOutput) WorkflowTargetAction() PlanWorkflowTargetActionOutput {
	return o.ApplyT(func(v PlanWorkflow) PlanWorkflowTargetAction { return v.WorkflowTargetAction }).(PlanWorkflowTargetActionOutput)
}

// The AWS Region that the workflow targets.
func (o PlanWorkflowOutput) WorkflowTargetRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanWorkflow) *string { return v.WorkflowTargetRegion }).(pulumi.StringPtrOutput)
}

type PlanWorkflowArrayOutput struct{ *pulumi.OutputState }

func (PlanWorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanWorkflow)(nil)).Elem()
}

func (o PlanWorkflowArrayOutput) ToPlanWorkflowArrayOutput() PlanWorkflowArrayOutput {
	return o
}

func (o PlanWorkflowArrayOutput) ToPlanWorkflowArrayOutputWithContext(ctx context.Context) PlanWorkflowArrayOutput {
	return o
}

func (o PlanWorkflowArrayOutput) Index(i pulumi.IntInput) PlanWorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanWorkflow {
		return vs[0].([]PlanWorkflow)[vs[1].(int)]
	}).(PlanWorkflowOutput)
}

type Route53HealthChecksProperties struct {
	HealthCheckIds []string `pulumi:"healthCheckIds"`
	HostedZoneIds  []string `pulumi:"hostedZoneIds"`
	RecordNames    []string `pulumi:"recordNames"`
	Regions        []string `pulumi:"regions"`
}

type Route53HealthChecksPropertiesOutput struct{ *pulumi.OutputState }

func (Route53HealthChecksPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route53HealthChecksProperties)(nil)).Elem()
}

func (o Route53HealthChecksPropertiesOutput) ToRoute53HealthChecksPropertiesOutput() Route53HealthChecksPropertiesOutput {
	return o
}

func (o Route53HealthChecksPropertiesOutput) ToRoute53HealthChecksPropertiesOutputWithContext(ctx context.Context) Route53HealthChecksPropertiesOutput {
	return o
}

func (o Route53HealthChecksPropertiesOutput) HealthCheckIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Route53HealthChecksProperties) []string { return v.HealthCheckIds }).(pulumi.StringArrayOutput)
}

func (o Route53HealthChecksPropertiesOutput) HostedZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Route53HealthChecksProperties) []string { return v.HostedZoneIds }).(pulumi.StringArrayOutput)
}

func (o Route53HealthChecksPropertiesOutput) RecordNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Route53HealthChecksProperties) []string { return v.RecordNames }).(pulumi.StringArrayOutput)
}

func (o Route53HealthChecksPropertiesOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Route53HealthChecksProperties) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

type Route53HealthChecksPropertiesPtrOutput struct{ *pulumi.OutputState }

func (Route53HealthChecksPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route53HealthChecksProperties)(nil)).Elem()
}

func (o Route53HealthChecksPropertiesPtrOutput) ToRoute53HealthChecksPropertiesPtrOutput() Route53HealthChecksPropertiesPtrOutput {
	return o
}

func (o Route53HealthChecksPropertiesPtrOutput) ToRoute53HealthChecksPropertiesPtrOutputWithContext(ctx context.Context) Route53HealthChecksPropertiesPtrOutput {
	return o
}

func (o Route53HealthChecksPropertiesPtrOutput) Elem() Route53HealthChecksPropertiesOutput {
	return o.ApplyT(func(v *Route53HealthChecksProperties) Route53HealthChecksProperties {
		if v != nil {
			return *v
		}
		var ret Route53HealthChecksProperties
		return ret
	}).(Route53HealthChecksPropertiesOutput)
}

func (o Route53HealthChecksPropertiesPtrOutput) HealthCheckIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route53HealthChecksProperties) []string {
		if v == nil {
			return nil
		}
		return v.HealthCheckIds
	}).(pulumi.StringArrayOutput)
}

func (o Route53HealthChecksPropertiesPtrOutput) HostedZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route53HealthChecksProperties) []string {
		if v == nil {
			return nil
		}
		return v.HostedZoneIds
	}).(pulumi.StringArrayOutput)
}

func (o Route53HealthChecksPropertiesPtrOutput) RecordNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route53HealthChecksProperties) []string {
		if v == nil {
			return nil
		}
		return v.RecordNames
	}).(pulumi.StringArrayOutput)
}

func (o Route53HealthChecksPropertiesPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route53HealthChecksProperties) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

type PlanHealthCheckStateArrayMapOutput struct{ *pulumi.OutputState }

func (PlanHealthCheckStateArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]PlanHealthCheckState)(nil)).Elem()
}

func (o PlanHealthCheckStateArrayMapOutput) ToPlanHealthCheckStateArrayMapOutput() PlanHealthCheckStateArrayMapOutput {
	return o
}

func (o PlanHealthCheckStateArrayMapOutput) ToPlanHealthCheckStateArrayMapOutputWithContext(ctx context.Context) PlanHealthCheckStateArrayMapOutput {
	return o
}

func (o PlanHealthCheckStateArrayMapOutput) MapIndex(k pulumi.StringInput) PlanHealthCheckStateArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []PlanHealthCheckState {
		return vs[0].(map[string][]PlanHealthCheckState)[vs[1].(string)]
	}).(PlanHealthCheckStateArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanArcRoutingControlConfigurationInput)(nil)).Elem(), PlanArcRoutingControlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAsgInput)(nil)).Elem(), PlanAsgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAsgArrayInput)(nil)).Elem(), PlanAsgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAssociatedAlarmInput)(nil)).Elem(), PlanAssociatedAlarmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAssociatedAlarmMapInput)(nil)).Elem(), PlanAssociatedAlarmMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanCustomActionLambdaConfigurationInput)(nil)).Elem(), PlanCustomActionLambdaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEc2AsgCapacityIncreaseConfigurationInput)(nil)).Elem(), PlanEc2AsgCapacityIncreaseConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEc2UngracefulInput)(nil)).Elem(), PlanEc2UngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEc2UngracefulPtrInput)(nil)).Elem(), PlanEc2UngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEcsCapacityIncreaseConfigurationInput)(nil)).Elem(), PlanEcsCapacityIncreaseConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEcsUngracefulInput)(nil)).Elem(), PlanEcsUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEcsUngracefulPtrInput)(nil)).Elem(), PlanEcsUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEksClusterInput)(nil)).Elem(), PlanEksClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEksClusterArrayInput)(nil)).Elem(), PlanEksClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEksResourceScalingConfigurationInput)(nil)).Elem(), PlanEksResourceScalingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEksResourceScalingUngracefulInput)(nil)).Elem(), PlanEksResourceScalingUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanEksResourceScalingUngracefulPtrInput)(nil)).Elem(), PlanEksResourceScalingUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionApprovalConfigurationInput)(nil)).Elem(), PlanExecutionApprovalConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration0PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration1PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration2PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration3PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration3PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration4PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration4PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration5PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration5PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration6PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration6PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration7PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration7PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration8PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration8PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockConfiguration9PropertiesInput)(nil)).Elem(), PlanExecutionBlockConfiguration9PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanGlobalAuroraConfigurationInput)(nil)).Elem(), PlanGlobalAuroraConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanGlobalAuroraUngracefulInput)(nil)).Elem(), PlanGlobalAuroraUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanGlobalAuroraUngracefulPtrInput)(nil)).Elem(), PlanGlobalAuroraUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanKubernetesResourceTypeInput)(nil)).Elem(), PlanKubernetesResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanLambdaUngracefulInput)(nil)).Elem(), PlanLambdaUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanLambdaUngracefulPtrInput)(nil)).Elem(), PlanLambdaUngracefulArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanLambdasInput)(nil)).Elem(), PlanLambdasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanLambdasArrayInput)(nil)).Elem(), PlanLambdasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanParallelExecutionBlockConfigurationInput)(nil)).Elem(), PlanParallelExecutionBlockConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRegionSwitchPlanConfigurationInput)(nil)).Elem(), PlanRegionSwitchPlanConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRoute53HealthCheckConfigurationInput)(nil)).Elem(), PlanRoute53HealthCheckConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRoute53ResourceRecordSetInput)(nil)).Elem(), PlanRoute53ResourceRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRoute53ResourceRecordSetArrayInput)(nil)).Elem(), PlanRoute53ResourceRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanServiceInput)(nil)).Elem(), PlanServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanServiceArrayInput)(nil)).Elem(), PlanServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanStepInput)(nil)).Elem(), PlanStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanStepArrayInput)(nil)).Elem(), PlanStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanTriggerInput)(nil)).Elem(), PlanTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanTriggerArrayInput)(nil)).Elem(), PlanTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanTriggerConditionInput)(nil)).Elem(), PlanTriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanTriggerConditionArrayInput)(nil)).Elem(), PlanTriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanWorkflowInput)(nil)).Elem(), PlanWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanWorkflowArrayInput)(nil)).Elem(), PlanWorkflowArray{})
	pulumi.RegisterOutputType(PlanArcRoutingControlConfigurationOutput{})
	pulumi.RegisterOutputType(PlanAsgOutput{})
	pulumi.RegisterOutputType(PlanAsgArrayOutput{})
	pulumi.RegisterOutputType(PlanAssociatedAlarmOutput{})
	pulumi.RegisterOutputType(PlanAssociatedAlarmMapOutput{})
	pulumi.RegisterOutputType(PlanCustomActionLambdaConfigurationOutput{})
	pulumi.RegisterOutputType(PlanEc2AsgCapacityIncreaseConfigurationOutput{})
	pulumi.RegisterOutputType(PlanEc2UngracefulOutput{})
	pulumi.RegisterOutputType(PlanEc2UngracefulPtrOutput{})
	pulumi.RegisterOutputType(PlanEcsCapacityIncreaseConfigurationOutput{})
	pulumi.RegisterOutputType(PlanEcsUngracefulOutput{})
	pulumi.RegisterOutputType(PlanEcsUngracefulPtrOutput{})
	pulumi.RegisterOutputType(PlanEksClusterOutput{})
	pulumi.RegisterOutputType(PlanEksClusterArrayOutput{})
	pulumi.RegisterOutputType(PlanEksResourceScalingConfigurationOutput{})
	pulumi.RegisterOutputType(PlanEksResourceScalingUngracefulOutput{})
	pulumi.RegisterOutputType(PlanEksResourceScalingUngracefulPtrOutput{})
	pulumi.RegisterOutputType(PlanExecutionApprovalConfigurationOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration0PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration1PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration2PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration3PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration4PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration5PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration6PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration7PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration8PropertiesOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockConfiguration9PropertiesOutput{})
	pulumi.RegisterOutputType(PlanGlobalAuroraConfigurationOutput{})
	pulumi.RegisterOutputType(PlanGlobalAuroraUngracefulOutput{})
	pulumi.RegisterOutputType(PlanGlobalAuroraUngracefulPtrOutput{})
	pulumi.RegisterOutputType(PlanHealthCheckStateOutput{})
	pulumi.RegisterOutputType(PlanHealthCheckStateArrayOutput{})
	pulumi.RegisterOutputType(PlanKubernetesResourceTypeOutput{})
	pulumi.RegisterOutputType(PlanLambdaUngracefulOutput{})
	pulumi.RegisterOutputType(PlanLambdaUngracefulPtrOutput{})
	pulumi.RegisterOutputType(PlanLambdasOutput{})
	pulumi.RegisterOutputType(PlanLambdasArrayOutput{})
	pulumi.RegisterOutputType(PlanParallelExecutionBlockConfigurationOutput{})
	pulumi.RegisterOutputType(PlanRegionSwitchPlanConfigurationOutput{})
	pulumi.RegisterOutputType(PlanRoute53HealthCheckConfigurationOutput{})
	pulumi.RegisterOutputType(PlanRoute53ResourceRecordSetOutput{})
	pulumi.RegisterOutputType(PlanRoute53ResourceRecordSetArrayOutput{})
	pulumi.RegisterOutputType(PlanServiceOutput{})
	pulumi.RegisterOutputType(PlanServiceArrayOutput{})
	pulumi.RegisterOutputType(PlanStepOutput{})
	pulumi.RegisterOutputType(PlanStepArrayOutput{})
	pulumi.RegisterOutputType(PlanTriggerOutput{})
	pulumi.RegisterOutputType(PlanTriggerArrayOutput{})
	pulumi.RegisterOutputType(PlanTriggerConditionOutput{})
	pulumi.RegisterOutputType(PlanTriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(PlanWorkflowOutput{})
	pulumi.RegisterOutputType(PlanWorkflowArrayOutput{})
	pulumi.RegisterOutputType(Route53HealthChecksPropertiesOutput{})
	pulumi.RegisterOutputType(Route53HealthChecksPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PlanHealthCheckStateArrayMapOutput{})
}
