// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arcregionswitch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PlanAlarmCondition string

const (
	PlanAlarmConditionRed   = PlanAlarmCondition("red")
	PlanAlarmConditionGreen = PlanAlarmCondition("green")
)

func (PlanAlarmCondition) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAlarmCondition)(nil)).Elem()
}

func (e PlanAlarmCondition) ToPlanAlarmConditionOutput() PlanAlarmConditionOutput {
	return pulumi.ToOutput(e).(PlanAlarmConditionOutput)
}

func (e PlanAlarmCondition) ToPlanAlarmConditionOutputWithContext(ctx context.Context) PlanAlarmConditionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanAlarmConditionOutput)
}

func (e PlanAlarmCondition) ToPlanAlarmConditionPtrOutput() PlanAlarmConditionPtrOutput {
	return e.ToPlanAlarmConditionPtrOutputWithContext(context.Background())
}

func (e PlanAlarmCondition) ToPlanAlarmConditionPtrOutputWithContext(ctx context.Context) PlanAlarmConditionPtrOutput {
	return PlanAlarmCondition(e).ToPlanAlarmConditionOutputWithContext(ctx).ToPlanAlarmConditionPtrOutputWithContext(ctx)
}

func (e PlanAlarmCondition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanAlarmCondition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanAlarmCondition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanAlarmCondition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanAlarmConditionOutput struct{ *pulumi.OutputState }

func (PlanAlarmConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAlarmCondition)(nil)).Elem()
}

func (o PlanAlarmConditionOutput) ToPlanAlarmConditionOutput() PlanAlarmConditionOutput {
	return o
}

func (o PlanAlarmConditionOutput) ToPlanAlarmConditionOutputWithContext(ctx context.Context) PlanAlarmConditionOutput {
	return o
}

func (o PlanAlarmConditionOutput) ToPlanAlarmConditionPtrOutput() PlanAlarmConditionPtrOutput {
	return o.ToPlanAlarmConditionPtrOutputWithContext(context.Background())
}

func (o PlanAlarmConditionOutput) ToPlanAlarmConditionPtrOutputWithContext(ctx context.Context) PlanAlarmConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanAlarmCondition) *PlanAlarmCondition {
		return &v
	}).(PlanAlarmConditionPtrOutput)
}

func (o PlanAlarmConditionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanAlarmConditionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanAlarmCondition) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanAlarmConditionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanAlarmConditionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanAlarmCondition) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanAlarmConditionPtrOutput struct{ *pulumi.OutputState }

func (PlanAlarmConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanAlarmCondition)(nil)).Elem()
}

func (o PlanAlarmConditionPtrOutput) ToPlanAlarmConditionPtrOutput() PlanAlarmConditionPtrOutput {
	return o
}

func (o PlanAlarmConditionPtrOutput) ToPlanAlarmConditionPtrOutputWithContext(ctx context.Context) PlanAlarmConditionPtrOutput {
	return o
}

func (o PlanAlarmConditionPtrOutput) Elem() PlanAlarmConditionOutput {
	return o.ApplyT(func(v *PlanAlarmCondition) PlanAlarmCondition {
		if v != nil {
			return *v
		}
		var ret PlanAlarmCondition
		return ret
	}).(PlanAlarmConditionOutput)
}

func (o PlanAlarmConditionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanAlarmConditionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanAlarmCondition) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanAlarmConditionInput is an input type that accepts values of the PlanAlarmCondition enum
// A concrete instance of `PlanAlarmConditionInput` can be one of the following:
//
//	PlanAlarmConditionRed
//	PlanAlarmConditionGreen
type PlanAlarmConditionInput interface {
	pulumi.Input

	ToPlanAlarmConditionOutput() PlanAlarmConditionOutput
	ToPlanAlarmConditionOutputWithContext(context.Context) PlanAlarmConditionOutput
}

var planAlarmConditionPtrType = reflect.TypeOf((**PlanAlarmCondition)(nil)).Elem()

type PlanAlarmConditionPtrInput interface {
	pulumi.Input

	ToPlanAlarmConditionPtrOutput() PlanAlarmConditionPtrOutput
	ToPlanAlarmConditionPtrOutputWithContext(context.Context) PlanAlarmConditionPtrOutput
}

type planAlarmConditionPtr string

func PlanAlarmConditionPtr(v string) PlanAlarmConditionPtrInput {
	return (*planAlarmConditionPtr)(&v)
}

func (*planAlarmConditionPtr) ElementType() reflect.Type {
	return planAlarmConditionPtrType
}

func (in *planAlarmConditionPtr) ToPlanAlarmConditionPtrOutput() PlanAlarmConditionPtrOutput {
	return pulumi.ToOutput(in).(PlanAlarmConditionPtrOutput)
}

func (in *planAlarmConditionPtr) ToPlanAlarmConditionPtrOutputWithContext(ctx context.Context) PlanAlarmConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanAlarmConditionPtrOutput)
}

type PlanAlarmType string

const (
	PlanAlarmTypeApplicationHealth = PlanAlarmType("applicationHealth")
	PlanAlarmTypeTrigger           = PlanAlarmType("trigger")
)

func (PlanAlarmType) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAlarmType)(nil)).Elem()
}

func (e PlanAlarmType) ToPlanAlarmTypeOutput() PlanAlarmTypeOutput {
	return pulumi.ToOutput(e).(PlanAlarmTypeOutput)
}

func (e PlanAlarmType) ToPlanAlarmTypeOutputWithContext(ctx context.Context) PlanAlarmTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanAlarmTypeOutput)
}

func (e PlanAlarmType) ToPlanAlarmTypePtrOutput() PlanAlarmTypePtrOutput {
	return e.ToPlanAlarmTypePtrOutputWithContext(context.Background())
}

func (e PlanAlarmType) ToPlanAlarmTypePtrOutputWithContext(ctx context.Context) PlanAlarmTypePtrOutput {
	return PlanAlarmType(e).ToPlanAlarmTypeOutputWithContext(ctx).ToPlanAlarmTypePtrOutputWithContext(ctx)
}

func (e PlanAlarmType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanAlarmType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanAlarmType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanAlarmType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanAlarmTypeOutput struct{ *pulumi.OutputState }

func (PlanAlarmTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanAlarmType)(nil)).Elem()
}

func (o PlanAlarmTypeOutput) ToPlanAlarmTypeOutput() PlanAlarmTypeOutput {
	return o
}

func (o PlanAlarmTypeOutput) ToPlanAlarmTypeOutputWithContext(ctx context.Context) PlanAlarmTypeOutput {
	return o
}

func (o PlanAlarmTypeOutput) ToPlanAlarmTypePtrOutput() PlanAlarmTypePtrOutput {
	return o.ToPlanAlarmTypePtrOutputWithContext(context.Background())
}

func (o PlanAlarmTypeOutput) ToPlanAlarmTypePtrOutputWithContext(ctx context.Context) PlanAlarmTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanAlarmType) *PlanAlarmType {
		return &v
	}).(PlanAlarmTypePtrOutput)
}

func (o PlanAlarmTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanAlarmTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanAlarmType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanAlarmTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanAlarmTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanAlarmType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanAlarmTypePtrOutput struct{ *pulumi.OutputState }

func (PlanAlarmTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanAlarmType)(nil)).Elem()
}

func (o PlanAlarmTypePtrOutput) ToPlanAlarmTypePtrOutput() PlanAlarmTypePtrOutput {
	return o
}

func (o PlanAlarmTypePtrOutput) ToPlanAlarmTypePtrOutputWithContext(ctx context.Context) PlanAlarmTypePtrOutput {
	return o
}

func (o PlanAlarmTypePtrOutput) Elem() PlanAlarmTypeOutput {
	return o.ApplyT(func(v *PlanAlarmType) PlanAlarmType {
		if v != nil {
			return *v
		}
		var ret PlanAlarmType
		return ret
	}).(PlanAlarmTypeOutput)
}

func (o PlanAlarmTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanAlarmTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanAlarmType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanAlarmTypeInput is an input type that accepts values of the PlanAlarmType enum
// A concrete instance of `PlanAlarmTypeInput` can be one of the following:
//
//	PlanAlarmTypeApplicationHealth
//	PlanAlarmTypeTrigger
type PlanAlarmTypeInput interface {
	pulumi.Input

	ToPlanAlarmTypeOutput() PlanAlarmTypeOutput
	ToPlanAlarmTypeOutputWithContext(context.Context) PlanAlarmTypeOutput
}

var planAlarmTypePtrType = reflect.TypeOf((**PlanAlarmType)(nil)).Elem()

type PlanAlarmTypePtrInput interface {
	pulumi.Input

	ToPlanAlarmTypePtrOutput() PlanAlarmTypePtrOutput
	ToPlanAlarmTypePtrOutputWithContext(context.Context) PlanAlarmTypePtrOutput
}

type planAlarmTypePtr string

func PlanAlarmTypePtr(v string) PlanAlarmTypePtrInput {
	return (*planAlarmTypePtr)(&v)
}

func (*planAlarmTypePtr) ElementType() reflect.Type {
	return planAlarmTypePtrType
}

func (in *planAlarmTypePtr) ToPlanAlarmTypePtrOutput() PlanAlarmTypePtrOutput {
	return pulumi.ToOutput(in).(PlanAlarmTypePtrOutput)
}

func (in *planAlarmTypePtr) ToPlanAlarmTypePtrOutputWithContext(ctx context.Context) PlanAlarmTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanAlarmTypePtrOutput)
}

type PlanExecutionBlockType string

const (
	PlanExecutionBlockTypeCustomActionLambda   = PlanExecutionBlockType("CustomActionLambda")
	PlanExecutionBlockTypeManualApproval       = PlanExecutionBlockType("ManualApproval")
	PlanExecutionBlockTypeAuroraGlobalDatabase = PlanExecutionBlockType("AuroraGlobalDatabase")
	PlanExecutionBlockTypeEc2AutoScaling       = PlanExecutionBlockType("EC2AutoScaling")
	PlanExecutionBlockTypeArcRoutingControl    = PlanExecutionBlockType("ARCRoutingControl")
	PlanExecutionBlockTypeArcRegionSwitchPlan  = PlanExecutionBlockType("ARCRegionSwitchPlan")
	PlanExecutionBlockTypeParallel             = PlanExecutionBlockType("Parallel")
	PlanExecutionBlockTypeEcsServiceScaling    = PlanExecutionBlockType("ECSServiceScaling")
	PlanExecutionBlockTypeEksResourceScaling   = PlanExecutionBlockType("EKSResourceScaling")
	PlanExecutionBlockTypeRoute53HealthCheck   = PlanExecutionBlockType("Route53HealthCheck")
)

func (PlanExecutionBlockType) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockType)(nil)).Elem()
}

func (e PlanExecutionBlockType) ToPlanExecutionBlockTypeOutput() PlanExecutionBlockTypeOutput {
	return pulumi.ToOutput(e).(PlanExecutionBlockTypeOutput)
}

func (e PlanExecutionBlockType) ToPlanExecutionBlockTypeOutputWithContext(ctx context.Context) PlanExecutionBlockTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanExecutionBlockTypeOutput)
}

func (e PlanExecutionBlockType) ToPlanExecutionBlockTypePtrOutput() PlanExecutionBlockTypePtrOutput {
	return e.ToPlanExecutionBlockTypePtrOutputWithContext(context.Background())
}

func (e PlanExecutionBlockType) ToPlanExecutionBlockTypePtrOutputWithContext(ctx context.Context) PlanExecutionBlockTypePtrOutput {
	return PlanExecutionBlockType(e).ToPlanExecutionBlockTypeOutputWithContext(ctx).ToPlanExecutionBlockTypePtrOutputWithContext(ctx)
}

func (e PlanExecutionBlockType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanExecutionBlockType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanExecutionBlockType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanExecutionBlockType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanExecutionBlockTypeOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanExecutionBlockType)(nil)).Elem()
}

func (o PlanExecutionBlockTypeOutput) ToPlanExecutionBlockTypeOutput() PlanExecutionBlockTypeOutput {
	return o
}

func (o PlanExecutionBlockTypeOutput) ToPlanExecutionBlockTypeOutputWithContext(ctx context.Context) PlanExecutionBlockTypeOutput {
	return o
}

func (o PlanExecutionBlockTypeOutput) ToPlanExecutionBlockTypePtrOutput() PlanExecutionBlockTypePtrOutput {
	return o.ToPlanExecutionBlockTypePtrOutputWithContext(context.Background())
}

func (o PlanExecutionBlockTypeOutput) ToPlanExecutionBlockTypePtrOutputWithContext(ctx context.Context) PlanExecutionBlockTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanExecutionBlockType) *PlanExecutionBlockType {
		return &v
	}).(PlanExecutionBlockTypePtrOutput)
}

func (o PlanExecutionBlockTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanExecutionBlockTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanExecutionBlockType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanExecutionBlockTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanExecutionBlockTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanExecutionBlockType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanExecutionBlockTypePtrOutput struct{ *pulumi.OutputState }

func (PlanExecutionBlockTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanExecutionBlockType)(nil)).Elem()
}

func (o PlanExecutionBlockTypePtrOutput) ToPlanExecutionBlockTypePtrOutput() PlanExecutionBlockTypePtrOutput {
	return o
}

func (o PlanExecutionBlockTypePtrOutput) ToPlanExecutionBlockTypePtrOutputWithContext(ctx context.Context) PlanExecutionBlockTypePtrOutput {
	return o
}

func (o PlanExecutionBlockTypePtrOutput) Elem() PlanExecutionBlockTypeOutput {
	return o.ApplyT(func(v *PlanExecutionBlockType) PlanExecutionBlockType {
		if v != nil {
			return *v
		}
		var ret PlanExecutionBlockType
		return ret
	}).(PlanExecutionBlockTypeOutput)
}

func (o PlanExecutionBlockTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanExecutionBlockTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanExecutionBlockType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanExecutionBlockTypeInput is an input type that accepts values of the PlanExecutionBlockType enum
// A concrete instance of `PlanExecutionBlockTypeInput` can be one of the following:
//
//	PlanExecutionBlockTypeCustomActionLambda
//	PlanExecutionBlockTypeManualApproval
//	PlanExecutionBlockTypeAuroraGlobalDatabase
//	PlanExecutionBlockTypeEc2AutoScaling
//	PlanExecutionBlockTypeArcRoutingControl
//	PlanExecutionBlockTypeArcRegionSwitchPlan
//	PlanExecutionBlockTypeParallel
//	PlanExecutionBlockTypeEcsServiceScaling
//	PlanExecutionBlockTypeEksResourceScaling
//	PlanExecutionBlockTypeRoute53HealthCheck
type PlanExecutionBlockTypeInput interface {
	pulumi.Input

	ToPlanExecutionBlockTypeOutput() PlanExecutionBlockTypeOutput
	ToPlanExecutionBlockTypeOutputWithContext(context.Context) PlanExecutionBlockTypeOutput
}

var planExecutionBlockTypePtrType = reflect.TypeOf((**PlanExecutionBlockType)(nil)).Elem()

type PlanExecutionBlockTypePtrInput interface {
	pulumi.Input

	ToPlanExecutionBlockTypePtrOutput() PlanExecutionBlockTypePtrOutput
	ToPlanExecutionBlockTypePtrOutputWithContext(context.Context) PlanExecutionBlockTypePtrOutput
}

type planExecutionBlockTypePtr string

func PlanExecutionBlockTypePtr(v string) PlanExecutionBlockTypePtrInput {
	return (*planExecutionBlockTypePtr)(&v)
}

func (*planExecutionBlockTypePtr) ElementType() reflect.Type {
	return planExecutionBlockTypePtrType
}

func (in *planExecutionBlockTypePtr) ToPlanExecutionBlockTypePtrOutput() PlanExecutionBlockTypePtrOutput {
	return pulumi.ToOutput(in).(PlanExecutionBlockTypePtrOutput)
}

func (in *planExecutionBlockTypePtr) ToPlanExecutionBlockTypePtrOutputWithContext(ctx context.Context) PlanExecutionBlockTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanExecutionBlockTypePtrOutput)
}

type PlanGlobalAuroraUngracefulBehavior string

const (
	PlanGlobalAuroraUngracefulBehaviorFailover = PlanGlobalAuroraUngracefulBehavior("failover")
)

func (PlanGlobalAuroraUngracefulBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanGlobalAuroraUngracefulBehavior)(nil)).Elem()
}

func (e PlanGlobalAuroraUngracefulBehavior) ToPlanGlobalAuroraUngracefulBehaviorOutput() PlanGlobalAuroraUngracefulBehaviorOutput {
	return pulumi.ToOutput(e).(PlanGlobalAuroraUngracefulBehaviorOutput)
}

func (e PlanGlobalAuroraUngracefulBehavior) ToPlanGlobalAuroraUngracefulBehaviorOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanGlobalAuroraUngracefulBehaviorOutput)
}

func (e PlanGlobalAuroraUngracefulBehavior) ToPlanGlobalAuroraUngracefulBehaviorPtrOutput() PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return e.ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(context.Background())
}

func (e PlanGlobalAuroraUngracefulBehavior) ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return PlanGlobalAuroraUngracefulBehavior(e).ToPlanGlobalAuroraUngracefulBehaviorOutputWithContext(ctx).ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(ctx)
}

func (e PlanGlobalAuroraUngracefulBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanGlobalAuroraUngracefulBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanGlobalAuroraUngracefulBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanGlobalAuroraUngracefulBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanGlobalAuroraUngracefulBehaviorOutput struct{ *pulumi.OutputState }

func (PlanGlobalAuroraUngracefulBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanGlobalAuroraUngracefulBehavior)(nil)).Elem()
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToPlanGlobalAuroraUngracefulBehaviorOutput() PlanGlobalAuroraUngracefulBehaviorOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToPlanGlobalAuroraUngracefulBehaviorOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulBehaviorOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToPlanGlobalAuroraUngracefulBehaviorPtrOutput() PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return o.ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(context.Background())
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanGlobalAuroraUngracefulBehavior) *PlanGlobalAuroraUngracefulBehavior {
		return &v
	}).(PlanGlobalAuroraUngracefulBehaviorPtrOutput)
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanGlobalAuroraUngracefulBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanGlobalAuroraUngracefulBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanGlobalAuroraUngracefulBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanGlobalAuroraUngracefulBehaviorPtrOutput struct{ *pulumi.OutputState }

func (PlanGlobalAuroraUngracefulBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanGlobalAuroraUngracefulBehavior)(nil)).Elem()
}

func (o PlanGlobalAuroraUngracefulBehaviorPtrOutput) ToPlanGlobalAuroraUngracefulBehaviorPtrOutput() PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulBehaviorPtrOutput) ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return o
}

func (o PlanGlobalAuroraUngracefulBehaviorPtrOutput) Elem() PlanGlobalAuroraUngracefulBehaviorOutput {
	return o.ApplyT(func(v *PlanGlobalAuroraUngracefulBehavior) PlanGlobalAuroraUngracefulBehavior {
		if v != nil {
			return *v
		}
		var ret PlanGlobalAuroraUngracefulBehavior
		return ret
	}).(PlanGlobalAuroraUngracefulBehaviorOutput)
}

func (o PlanGlobalAuroraUngracefulBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanGlobalAuroraUngracefulBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanGlobalAuroraUngracefulBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanGlobalAuroraUngracefulBehaviorInput is an input type that accepts values of the PlanGlobalAuroraUngracefulBehavior enum
// A concrete instance of `PlanGlobalAuroraUngracefulBehaviorInput` can be one of the following:
//
//	PlanGlobalAuroraUngracefulBehaviorFailover
type PlanGlobalAuroraUngracefulBehaviorInput interface {
	pulumi.Input

	ToPlanGlobalAuroraUngracefulBehaviorOutput() PlanGlobalAuroraUngracefulBehaviorOutput
	ToPlanGlobalAuroraUngracefulBehaviorOutputWithContext(context.Context) PlanGlobalAuroraUngracefulBehaviorOutput
}

var planGlobalAuroraUngracefulBehaviorPtrType = reflect.TypeOf((**PlanGlobalAuroraUngracefulBehavior)(nil)).Elem()

type PlanGlobalAuroraUngracefulBehaviorPtrInput interface {
	pulumi.Input

	ToPlanGlobalAuroraUngracefulBehaviorPtrOutput() PlanGlobalAuroraUngracefulBehaviorPtrOutput
	ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(context.Context) PlanGlobalAuroraUngracefulBehaviorPtrOutput
}

type planGlobalAuroraUngracefulBehaviorPtr string

func PlanGlobalAuroraUngracefulBehaviorPtr(v string) PlanGlobalAuroraUngracefulBehaviorPtrInput {
	return (*planGlobalAuroraUngracefulBehaviorPtr)(&v)
}

func (*planGlobalAuroraUngracefulBehaviorPtr) ElementType() reflect.Type {
	return planGlobalAuroraUngracefulBehaviorPtrType
}

func (in *planGlobalAuroraUngracefulBehaviorPtr) ToPlanGlobalAuroraUngracefulBehaviorPtrOutput() PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return pulumi.ToOutput(in).(PlanGlobalAuroraUngracefulBehaviorPtrOutput)
}

func (in *planGlobalAuroraUngracefulBehaviorPtr) ToPlanGlobalAuroraUngracefulBehaviorPtrOutputWithContext(ctx context.Context) PlanGlobalAuroraUngracefulBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanGlobalAuroraUngracefulBehaviorPtrOutput)
}

type PlanRecoveryApproach string

const (
	PlanRecoveryApproachActiveActive  = PlanRecoveryApproach("activeActive")
	PlanRecoveryApproachActivePassive = PlanRecoveryApproach("activePassive")
)

func (PlanRecoveryApproach) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRecoveryApproach)(nil)).Elem()
}

func (e PlanRecoveryApproach) ToPlanRecoveryApproachOutput() PlanRecoveryApproachOutput {
	return pulumi.ToOutput(e).(PlanRecoveryApproachOutput)
}

func (e PlanRecoveryApproach) ToPlanRecoveryApproachOutputWithContext(ctx context.Context) PlanRecoveryApproachOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanRecoveryApproachOutput)
}

func (e PlanRecoveryApproach) ToPlanRecoveryApproachPtrOutput() PlanRecoveryApproachPtrOutput {
	return e.ToPlanRecoveryApproachPtrOutputWithContext(context.Background())
}

func (e PlanRecoveryApproach) ToPlanRecoveryApproachPtrOutputWithContext(ctx context.Context) PlanRecoveryApproachPtrOutput {
	return PlanRecoveryApproach(e).ToPlanRecoveryApproachOutputWithContext(ctx).ToPlanRecoveryApproachPtrOutputWithContext(ctx)
}

func (e PlanRecoveryApproach) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanRecoveryApproach) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanRecoveryApproach) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanRecoveryApproach) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanRecoveryApproachOutput struct{ *pulumi.OutputState }

func (PlanRecoveryApproachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRecoveryApproach)(nil)).Elem()
}

func (o PlanRecoveryApproachOutput) ToPlanRecoveryApproachOutput() PlanRecoveryApproachOutput {
	return o
}

func (o PlanRecoveryApproachOutput) ToPlanRecoveryApproachOutputWithContext(ctx context.Context) PlanRecoveryApproachOutput {
	return o
}

func (o PlanRecoveryApproachOutput) ToPlanRecoveryApproachPtrOutput() PlanRecoveryApproachPtrOutput {
	return o.ToPlanRecoveryApproachPtrOutputWithContext(context.Background())
}

func (o PlanRecoveryApproachOutput) ToPlanRecoveryApproachPtrOutputWithContext(ctx context.Context) PlanRecoveryApproachPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanRecoveryApproach) *PlanRecoveryApproach {
		return &v
	}).(PlanRecoveryApproachPtrOutput)
}

func (o PlanRecoveryApproachOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanRecoveryApproachOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanRecoveryApproach) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanRecoveryApproachOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanRecoveryApproachOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanRecoveryApproach) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanRecoveryApproachPtrOutput struct{ *pulumi.OutputState }

func (PlanRecoveryApproachPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanRecoveryApproach)(nil)).Elem()
}

func (o PlanRecoveryApproachPtrOutput) ToPlanRecoveryApproachPtrOutput() PlanRecoveryApproachPtrOutput {
	return o
}

func (o PlanRecoveryApproachPtrOutput) ToPlanRecoveryApproachPtrOutputWithContext(ctx context.Context) PlanRecoveryApproachPtrOutput {
	return o
}

func (o PlanRecoveryApproachPtrOutput) Elem() PlanRecoveryApproachOutput {
	return o.ApplyT(func(v *PlanRecoveryApproach) PlanRecoveryApproach {
		if v != nil {
			return *v
		}
		var ret PlanRecoveryApproach
		return ret
	}).(PlanRecoveryApproachOutput)
}

func (o PlanRecoveryApproachPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanRecoveryApproachPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanRecoveryApproach) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanRecoveryApproachInput is an input type that accepts values of the PlanRecoveryApproach enum
// A concrete instance of `PlanRecoveryApproachInput` can be one of the following:
//
//	PlanRecoveryApproachActiveActive
//	PlanRecoveryApproachActivePassive
type PlanRecoveryApproachInput interface {
	pulumi.Input

	ToPlanRecoveryApproachOutput() PlanRecoveryApproachOutput
	ToPlanRecoveryApproachOutputWithContext(context.Context) PlanRecoveryApproachOutput
}

var planRecoveryApproachPtrType = reflect.TypeOf((**PlanRecoveryApproach)(nil)).Elem()

type PlanRecoveryApproachPtrInput interface {
	pulumi.Input

	ToPlanRecoveryApproachPtrOutput() PlanRecoveryApproachPtrOutput
	ToPlanRecoveryApproachPtrOutputWithContext(context.Context) PlanRecoveryApproachPtrOutput
}

type planRecoveryApproachPtr string

func PlanRecoveryApproachPtr(v string) PlanRecoveryApproachPtrInput {
	return (*planRecoveryApproachPtr)(&v)
}

func (*planRecoveryApproachPtr) ElementType() reflect.Type {
	return planRecoveryApproachPtrType
}

func (in *planRecoveryApproachPtr) ToPlanRecoveryApproachPtrOutput() PlanRecoveryApproachPtrOutput {
	return pulumi.ToOutput(in).(PlanRecoveryApproachPtrOutput)
}

func (in *planRecoveryApproachPtr) ToPlanRecoveryApproachPtrOutputWithContext(ctx context.Context) PlanRecoveryApproachPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanRecoveryApproachPtrOutput)
}

type PlanRegionToRunIn string

const (
	PlanRegionToRunInActivatingRegion   = PlanRegionToRunIn("activatingRegion")
	PlanRegionToRunInDeactivatingRegion = PlanRegionToRunIn("deactivatingRegion")
)

func (PlanRegionToRunIn) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRegionToRunIn)(nil)).Elem()
}

func (e PlanRegionToRunIn) ToPlanRegionToRunInOutput() PlanRegionToRunInOutput {
	return pulumi.ToOutput(e).(PlanRegionToRunInOutput)
}

func (e PlanRegionToRunIn) ToPlanRegionToRunInOutputWithContext(ctx context.Context) PlanRegionToRunInOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanRegionToRunInOutput)
}

func (e PlanRegionToRunIn) ToPlanRegionToRunInPtrOutput() PlanRegionToRunInPtrOutput {
	return e.ToPlanRegionToRunInPtrOutputWithContext(context.Background())
}

func (e PlanRegionToRunIn) ToPlanRegionToRunInPtrOutputWithContext(ctx context.Context) PlanRegionToRunInPtrOutput {
	return PlanRegionToRunIn(e).ToPlanRegionToRunInOutputWithContext(ctx).ToPlanRegionToRunInPtrOutputWithContext(ctx)
}

func (e PlanRegionToRunIn) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanRegionToRunIn) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanRegionToRunIn) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanRegionToRunIn) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanRegionToRunInOutput struct{ *pulumi.OutputState }

func (PlanRegionToRunInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanRegionToRunIn)(nil)).Elem()
}

func (o PlanRegionToRunInOutput) ToPlanRegionToRunInOutput() PlanRegionToRunInOutput {
	return o
}

func (o PlanRegionToRunInOutput) ToPlanRegionToRunInOutputWithContext(ctx context.Context) PlanRegionToRunInOutput {
	return o
}

func (o PlanRegionToRunInOutput) ToPlanRegionToRunInPtrOutput() PlanRegionToRunInPtrOutput {
	return o.ToPlanRegionToRunInPtrOutputWithContext(context.Background())
}

func (o PlanRegionToRunInOutput) ToPlanRegionToRunInPtrOutputWithContext(ctx context.Context) PlanRegionToRunInPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanRegionToRunIn) *PlanRegionToRunIn {
		return &v
	}).(PlanRegionToRunInPtrOutput)
}

func (o PlanRegionToRunInOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanRegionToRunInOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanRegionToRunIn) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanRegionToRunInOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanRegionToRunInOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanRegionToRunIn) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanRegionToRunInPtrOutput struct{ *pulumi.OutputState }

func (PlanRegionToRunInPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanRegionToRunIn)(nil)).Elem()
}

func (o PlanRegionToRunInPtrOutput) ToPlanRegionToRunInPtrOutput() PlanRegionToRunInPtrOutput {
	return o
}

func (o PlanRegionToRunInPtrOutput) ToPlanRegionToRunInPtrOutputWithContext(ctx context.Context) PlanRegionToRunInPtrOutput {
	return o
}

func (o PlanRegionToRunInPtrOutput) Elem() PlanRegionToRunInOutput {
	return o.ApplyT(func(v *PlanRegionToRunIn) PlanRegionToRunIn {
		if v != nil {
			return *v
		}
		var ret PlanRegionToRunIn
		return ret
	}).(PlanRegionToRunInOutput)
}

func (o PlanRegionToRunInPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanRegionToRunInPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanRegionToRunIn) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanRegionToRunInInput is an input type that accepts values of the PlanRegionToRunIn enum
// A concrete instance of `PlanRegionToRunInInput` can be one of the following:
//
//	PlanRegionToRunInActivatingRegion
//	PlanRegionToRunInDeactivatingRegion
type PlanRegionToRunInInput interface {
	pulumi.Input

	ToPlanRegionToRunInOutput() PlanRegionToRunInOutput
	ToPlanRegionToRunInOutputWithContext(context.Context) PlanRegionToRunInOutput
}

var planRegionToRunInPtrType = reflect.TypeOf((**PlanRegionToRunIn)(nil)).Elem()

type PlanRegionToRunInPtrInput interface {
	pulumi.Input

	ToPlanRegionToRunInPtrOutput() PlanRegionToRunInPtrOutput
	ToPlanRegionToRunInPtrOutputWithContext(context.Context) PlanRegionToRunInPtrOutput
}

type planRegionToRunInPtr string

func PlanRegionToRunInPtr(v string) PlanRegionToRunInPtrInput {
	return (*planRegionToRunInPtr)(&v)
}

func (*planRegionToRunInPtr) ElementType() reflect.Type {
	return planRegionToRunInPtrType
}

func (in *planRegionToRunInPtr) ToPlanRegionToRunInPtrOutput() PlanRegionToRunInPtrOutput {
	return pulumi.ToOutput(in).(PlanRegionToRunInPtrOutput)
}

func (in *planRegionToRunInPtr) ToPlanRegionToRunInPtrOutputWithContext(ctx context.Context) PlanRegionToRunInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanRegionToRunInPtrOutput)
}

type PlanRoutingControlStateChange string

const (
	PlanRoutingControlStateChangeOn  = PlanRoutingControlStateChange("On")
	PlanRoutingControlStateChangeOff = PlanRoutingControlStateChange("Off")
)

type PlanWorkflowTargetAction string

const (
	PlanWorkflowTargetActionActivate   = PlanWorkflowTargetAction("activate")
	PlanWorkflowTargetActionDeactivate = PlanWorkflowTargetAction("deactivate")
)

func (PlanWorkflowTargetAction) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanWorkflowTargetAction)(nil)).Elem()
}

func (e PlanWorkflowTargetAction) ToPlanWorkflowTargetActionOutput() PlanWorkflowTargetActionOutput {
	return pulumi.ToOutput(e).(PlanWorkflowTargetActionOutput)
}

func (e PlanWorkflowTargetAction) ToPlanWorkflowTargetActionOutputWithContext(ctx context.Context) PlanWorkflowTargetActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlanWorkflowTargetActionOutput)
}

func (e PlanWorkflowTargetAction) ToPlanWorkflowTargetActionPtrOutput() PlanWorkflowTargetActionPtrOutput {
	return e.ToPlanWorkflowTargetActionPtrOutputWithContext(context.Background())
}

func (e PlanWorkflowTargetAction) ToPlanWorkflowTargetActionPtrOutputWithContext(ctx context.Context) PlanWorkflowTargetActionPtrOutput {
	return PlanWorkflowTargetAction(e).ToPlanWorkflowTargetActionOutputWithContext(ctx).ToPlanWorkflowTargetActionPtrOutputWithContext(ctx)
}

func (e PlanWorkflowTargetAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanWorkflowTargetAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PlanWorkflowTargetAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PlanWorkflowTargetAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlanWorkflowTargetActionOutput struct{ *pulumi.OutputState }

func (PlanWorkflowTargetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanWorkflowTargetAction)(nil)).Elem()
}

func (o PlanWorkflowTargetActionOutput) ToPlanWorkflowTargetActionOutput() PlanWorkflowTargetActionOutput {
	return o
}

func (o PlanWorkflowTargetActionOutput) ToPlanWorkflowTargetActionOutputWithContext(ctx context.Context) PlanWorkflowTargetActionOutput {
	return o
}

func (o PlanWorkflowTargetActionOutput) ToPlanWorkflowTargetActionPtrOutput() PlanWorkflowTargetActionPtrOutput {
	return o.ToPlanWorkflowTargetActionPtrOutputWithContext(context.Background())
}

func (o PlanWorkflowTargetActionOutput) ToPlanWorkflowTargetActionPtrOutputWithContext(ctx context.Context) PlanWorkflowTargetActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanWorkflowTargetAction) *PlanWorkflowTargetAction {
		return &v
	}).(PlanWorkflowTargetActionPtrOutput)
}

func (o PlanWorkflowTargetActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlanWorkflowTargetActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanWorkflowTargetAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlanWorkflowTargetActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanWorkflowTargetActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PlanWorkflowTargetAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlanWorkflowTargetActionPtrOutput struct{ *pulumi.OutputState }

func (PlanWorkflowTargetActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanWorkflowTargetAction)(nil)).Elem()
}

func (o PlanWorkflowTargetActionPtrOutput) ToPlanWorkflowTargetActionPtrOutput() PlanWorkflowTargetActionPtrOutput {
	return o
}

func (o PlanWorkflowTargetActionPtrOutput) ToPlanWorkflowTargetActionPtrOutputWithContext(ctx context.Context) PlanWorkflowTargetActionPtrOutput {
	return o
}

func (o PlanWorkflowTargetActionPtrOutput) Elem() PlanWorkflowTargetActionOutput {
	return o.ApplyT(func(v *PlanWorkflowTargetAction) PlanWorkflowTargetAction {
		if v != nil {
			return *v
		}
		var ret PlanWorkflowTargetAction
		return ret
	}).(PlanWorkflowTargetActionOutput)
}

func (o PlanWorkflowTargetActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlanWorkflowTargetActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PlanWorkflowTargetAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlanWorkflowTargetActionInput is an input type that accepts values of the PlanWorkflowTargetAction enum
// A concrete instance of `PlanWorkflowTargetActionInput` can be one of the following:
//
//	PlanWorkflowTargetActionActivate
//	PlanWorkflowTargetActionDeactivate
type PlanWorkflowTargetActionInput interface {
	pulumi.Input

	ToPlanWorkflowTargetActionOutput() PlanWorkflowTargetActionOutput
	ToPlanWorkflowTargetActionOutputWithContext(context.Context) PlanWorkflowTargetActionOutput
}

var planWorkflowTargetActionPtrType = reflect.TypeOf((**PlanWorkflowTargetAction)(nil)).Elem()

type PlanWorkflowTargetActionPtrInput interface {
	pulumi.Input

	ToPlanWorkflowTargetActionPtrOutput() PlanWorkflowTargetActionPtrOutput
	ToPlanWorkflowTargetActionPtrOutputWithContext(context.Context) PlanWorkflowTargetActionPtrOutput
}

type planWorkflowTargetActionPtr string

func PlanWorkflowTargetActionPtr(v string) PlanWorkflowTargetActionPtrInput {
	return (*planWorkflowTargetActionPtr)(&v)
}

func (*planWorkflowTargetActionPtr) ElementType() reflect.Type {
	return planWorkflowTargetActionPtrType
}

func (in *planWorkflowTargetActionPtr) ToPlanWorkflowTargetActionPtrOutput() PlanWorkflowTargetActionPtrOutput {
	return pulumi.ToOutput(in).(PlanWorkflowTargetActionPtrOutput)
}

func (in *planWorkflowTargetActionPtr) ToPlanWorkflowTargetActionPtrOutputWithContext(ctx context.Context) PlanWorkflowTargetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlanWorkflowTargetActionPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAlarmConditionInput)(nil)).Elem(), PlanAlarmCondition("red"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAlarmConditionPtrInput)(nil)).Elem(), PlanAlarmCondition("red"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAlarmTypeInput)(nil)).Elem(), PlanAlarmType("applicationHealth"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanAlarmTypePtrInput)(nil)).Elem(), PlanAlarmType("applicationHealth"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockTypeInput)(nil)).Elem(), PlanExecutionBlockType("CustomActionLambda"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanExecutionBlockTypePtrInput)(nil)).Elem(), PlanExecutionBlockType("CustomActionLambda"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanGlobalAuroraUngracefulBehaviorInput)(nil)).Elem(), PlanGlobalAuroraUngracefulBehavior("failover"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanGlobalAuroraUngracefulBehaviorPtrInput)(nil)).Elem(), PlanGlobalAuroraUngracefulBehavior("failover"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRecoveryApproachInput)(nil)).Elem(), PlanRecoveryApproach("activeActive"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRecoveryApproachPtrInput)(nil)).Elem(), PlanRecoveryApproach("activeActive"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRegionToRunInInput)(nil)).Elem(), PlanRegionToRunIn("activatingRegion"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanRegionToRunInPtrInput)(nil)).Elem(), PlanRegionToRunIn("activatingRegion"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanWorkflowTargetActionInput)(nil)).Elem(), PlanWorkflowTargetAction("activate"))
	pulumi.RegisterInputType(reflect.TypeOf((*PlanWorkflowTargetActionPtrInput)(nil)).Elem(), PlanWorkflowTargetAction("activate"))
	pulumi.RegisterOutputType(PlanAlarmConditionOutput{})
	pulumi.RegisterOutputType(PlanAlarmConditionPtrOutput{})
	pulumi.RegisterOutputType(PlanAlarmTypeOutput{})
	pulumi.RegisterOutputType(PlanAlarmTypePtrOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockTypeOutput{})
	pulumi.RegisterOutputType(PlanExecutionBlockTypePtrOutput{})
	pulumi.RegisterOutputType(PlanGlobalAuroraUngracefulBehaviorOutput{})
	pulumi.RegisterOutputType(PlanGlobalAuroraUngracefulBehaviorPtrOutput{})
	pulumi.RegisterOutputType(PlanRecoveryApproachOutput{})
	pulumi.RegisterOutputType(PlanRecoveryApproachPtrOutput{})
	pulumi.RegisterOutputType(PlanRegionToRunInOutput{})
	pulumi.RegisterOutputType(PlanRegionToRunInPtrOutput{})
	pulumi.RegisterOutputType(PlanWorkflowTargetActionOutput{})
	pulumi.RegisterOutputType(PlanWorkflowTargetActionPtrOutput{})
}
