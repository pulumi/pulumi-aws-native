// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arcregionswitch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
type Plan struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput                `pulumi:"arn"`
	AssociatedAlarms             PlanAssociatedAlarmMapOutput       `pulumi:"associatedAlarms"`
	Description                  pulumi.StringPtrOutput             `pulumi:"description"`
	ExecutionRole                pulumi.StringOutput                `pulumi:"executionRole"`
	HealthChecksForPlan          PlanHealthCheckStateArrayMapOutput `pulumi:"healthChecksForPlan"`
	Name                         pulumi.StringOutput                `pulumi:"name"`
	Owner                        pulumi.StringOutput                `pulumi:"owner"`
	PrimaryRegion                pulumi.StringPtrOutput             `pulumi:"primaryRegion"`
	RecoveryApproach             PlanRecoveryApproachOutput         `pulumi:"recoveryApproach"`
	RecoveryTimeObjectiveMinutes pulumi.Float64PtrOutput            `pulumi:"recoveryTimeObjectiveMinutes"`
	Regions                      pulumi.StringArrayOutput           `pulumi:"regions"`
	Tags                         pulumi.StringMapOutput             `pulumi:"tags"`
	Triggers                     PlanTriggerArrayOutput             `pulumi:"triggers"`
	Version                      pulumi.StringOutput                `pulumi:"version"`
	Workflows                    PlanWorkflowArrayOutput            `pulumi:"workflows"`
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOption) (*Plan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionRole == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRole'")
	}
	if args.RecoveryApproach == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryApproach'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	if args.Workflows == nil {
		return nil, errors.New("invalid value for required argument 'Workflows'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"primaryRegion",
		"recoveryApproach",
		"regions[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plan
	err := ctx.RegisterResource("aws-native:arcregionswitch:Plan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanState, opts ...pulumi.ResourceOption) (*Plan, error) {
	var resource Plan
	err := ctx.ReadResource("aws-native:arcregionswitch:Plan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plan resources.
type planState struct {
}

type PlanState struct {
}

func (PlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*planState)(nil)).Elem()
}

type planArgs struct {
	AssociatedAlarms             map[string]PlanAssociatedAlarm `pulumi:"associatedAlarms"`
	Description                  *string                        `pulumi:"description"`
	ExecutionRole                string                         `pulumi:"executionRole"`
	Name                         *string                        `pulumi:"name"`
	PrimaryRegion                *string                        `pulumi:"primaryRegion"`
	RecoveryApproach             PlanRecoveryApproach           `pulumi:"recoveryApproach"`
	RecoveryTimeObjectiveMinutes *float64                       `pulumi:"recoveryTimeObjectiveMinutes"`
	Regions                      []string                       `pulumi:"regions"`
	Tags                         map[string]string              `pulumi:"tags"`
	Triggers                     []PlanTrigger                  `pulumi:"triggers"`
	Workflows                    []PlanWorkflow                 `pulumi:"workflows"`
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	AssociatedAlarms             PlanAssociatedAlarmMapInput
	Description                  pulumi.StringPtrInput
	ExecutionRole                pulumi.StringInput
	Name                         pulumi.StringPtrInput
	PrimaryRegion                pulumi.StringPtrInput
	RecoveryApproach             PlanRecoveryApproachInput
	RecoveryTimeObjectiveMinutes pulumi.Float64PtrInput
	Regions                      pulumi.StringArrayInput
	Tags                         pulumi.StringMapInput
	Triggers                     PlanTriggerArrayInput
	Workflows                    PlanWorkflowArrayInput
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planArgs)(nil)).Elem()
}

type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(ctx context.Context) PlanOutput
}

func (*Plan) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *Plan) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i *Plan) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PlanOutput) AssociatedAlarms() PlanAssociatedAlarmMapOutput {
	return o.ApplyT(func(v *Plan) PlanAssociatedAlarmMapOutput { return v.AssociatedAlarms }).(PlanAssociatedAlarmMapOutput)
}

func (o PlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PlanOutput) ExecutionRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.ExecutionRole }).(pulumi.StringOutput)
}

func (o PlanOutput) HealthChecksForPlan() PlanHealthCheckStateArrayMapOutput {
	return o.ApplyT(func(v *Plan) PlanHealthCheckStateArrayMapOutput { return v.HealthChecksForPlan }).(PlanHealthCheckStateArrayMapOutput)
}

func (o PlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PlanOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o PlanOutput) PrimaryRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringPtrOutput { return v.PrimaryRegion }).(pulumi.StringPtrOutput)
}

func (o PlanOutput) RecoveryApproach() PlanRecoveryApproachOutput {
	return o.ApplyT(func(v *Plan) PlanRecoveryApproachOutput { return v.RecoveryApproach }).(PlanRecoveryApproachOutput)
}

func (o PlanOutput) RecoveryTimeObjectiveMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Plan) pulumi.Float64PtrOutput { return v.RecoveryTimeObjectiveMinutes }).(pulumi.Float64PtrOutput)
}

func (o PlanOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

func (o PlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o PlanOutput) Triggers() PlanTriggerArrayOutput {
	return o.ApplyT(func(v *Plan) PlanTriggerArrayOutput { return v.Triggers }).(PlanTriggerArrayOutput)
}

func (o PlanOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Plan) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o PlanOutput) Workflows() PlanWorkflowArrayOutput {
	return o.ApplyT(func(v *Plan) PlanWorkflowArrayOutput { return v.Workflows }).(PlanWorkflowArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlanInput)(nil)).Elem(), &Plan{})
	pulumi.RegisterOutputType(PlanOutput{})
}
