// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arcregionswitch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
func LookupPlan(ctx *pulumi.Context, args *LookupPlanArgs, opts ...pulumi.InvokeOption) (*LookupPlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlanResult
	err := ctx.Invoke("aws-native:arcregionswitch:getPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPlanArgs struct {
	// The Amazon Resource Name (ARN) of the plan.
	Arn string `pulumi:"arn"`
}

type LookupPlanResult struct {
	// The Amazon Resource Name (ARN) of the plan.
	Arn *string `pulumi:"arn"`
	// The associated application health alarms for a plan.
	AssociatedAlarms map[string]PlanAssociatedAlarm `pulumi:"associatedAlarms"`
	// The description for a plan.
	Description *string `pulumi:"description"`
	// The execution role for a plan.
	ExecutionRole *string `pulumi:"executionRole"`
	// Represents a Region switch plan. A plan defines the steps required to shift traffic from one AWS Region to another.
	HealthChecksForPlan map[string][]PlanHealthCheckState `pulumi:"healthChecksForPlan"`
	// The owner of a plan.
	Owner *string `pulumi:"owner"`
	// The recovery time objective for a plan.
	RecoveryTimeObjectiveMinutes *float64                       `pulumi:"recoveryTimeObjectiveMinutes"`
	Route53HealthChecks          *Route53HealthChecksProperties `pulumi:"route53HealthChecks"`
	Tags                         map[string]string              `pulumi:"tags"`
	// The triggers for a plan.
	Triggers []PlanTrigger `pulumi:"triggers"`
	// The version for the plan.
	Version *string `pulumi:"version"`
	// The workflows for a plan.
	Workflows []PlanWorkflow `pulumi:"workflows"`
}

func LookupPlanOutput(ctx *pulumi.Context, args LookupPlanOutputArgs, opts ...pulumi.InvokeOption) LookupPlanResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlanResultOutput, error) {
			args := v.(LookupPlanArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:arcregionswitch:getPlan", args, LookupPlanResultOutput{}, options).(LookupPlanResultOutput), nil
		}).(LookupPlanResultOutput)
}

type LookupPlanOutputArgs struct {
	// The Amazon Resource Name (ARN) of the plan.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupPlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanArgs)(nil)).Elem()
}

type LookupPlanResultOutput struct{ *pulumi.OutputState }

func (LookupPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlanResult)(nil)).Elem()
}

func (o LookupPlanResultOutput) ToLookupPlanResultOutput() LookupPlanResultOutput {
	return o
}

func (o LookupPlanResultOutput) ToLookupPlanResultOutputWithContext(ctx context.Context) LookupPlanResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the plan.
func (o LookupPlanResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The associated application health alarms for a plan.
func (o LookupPlanResultOutput) AssociatedAlarms() PlanAssociatedAlarmMapOutput {
	return o.ApplyT(func(v LookupPlanResult) map[string]PlanAssociatedAlarm { return v.AssociatedAlarms }).(PlanAssociatedAlarmMapOutput)
}

// The description for a plan.
func (o LookupPlanResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The execution role for a plan.
func (o LookupPlanResultOutput) ExecutionRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *string { return v.ExecutionRole }).(pulumi.StringPtrOutput)
}

// Represents a Region switch plan. A plan defines the steps required to shift traffic from one AWS Region to another.
func (o LookupPlanResultOutput) HealthChecksForPlan() PlanHealthCheckStateArrayMapOutput {
	return o.ApplyT(func(v LookupPlanResult) map[string][]PlanHealthCheckState { return v.HealthChecksForPlan }).(PlanHealthCheckStateArrayMapOutput)
}

// The owner of a plan.
func (o LookupPlanResultOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// The recovery time objective for a plan.
func (o LookupPlanResultOutput) RecoveryTimeObjectiveMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *float64 { return v.RecoveryTimeObjectiveMinutes }).(pulumi.Float64PtrOutput)
}

func (o LookupPlanResultOutput) Route53HealthChecks() Route53HealthChecksPropertiesPtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *Route53HealthChecksProperties { return v.Route53HealthChecks }).(Route53HealthChecksPropertiesPtrOutput)
}

func (o LookupPlanResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPlanResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The triggers for a plan.
func (o LookupPlanResultOutput) Triggers() PlanTriggerArrayOutput {
	return o.ApplyT(func(v LookupPlanResult) []PlanTrigger { return v.Triggers }).(PlanTriggerArrayOutput)
}

// The version for the plan.
func (o LookupPlanResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlanResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The workflows for a plan.
func (o LookupPlanResultOutput) Workflows() PlanWorkflowArrayOutput {
	return o.ApplyT(func(v LookupPlanResult) []PlanWorkflow { return v.Workflows }).(PlanWorkflowArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlanResultOutput{})
}
