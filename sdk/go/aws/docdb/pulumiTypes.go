// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DbClusterParameterGroupTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DbClusterParameterGroupTagInput is an input type that accepts DbClusterParameterGroupTagArgs and DbClusterParameterGroupTagOutput values.
// You can construct a concrete instance of `DbClusterParameterGroupTagInput` via:
//
//	DbClusterParameterGroupTagArgs{...}
type DbClusterParameterGroupTagInput interface {
	pulumi.Input

	ToDbClusterParameterGroupTagOutput() DbClusterParameterGroupTagOutput
	ToDbClusterParameterGroupTagOutputWithContext(context.Context) DbClusterParameterGroupTagOutput
}

type DbClusterParameterGroupTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DbClusterParameterGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DbClusterParameterGroupTag)(nil)).Elem()
}

func (i DbClusterParameterGroupTagArgs) ToDbClusterParameterGroupTagOutput() DbClusterParameterGroupTagOutput {
	return i.ToDbClusterParameterGroupTagOutputWithContext(context.Background())
}

func (i DbClusterParameterGroupTagArgs) ToDbClusterParameterGroupTagOutputWithContext(ctx context.Context) DbClusterParameterGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterParameterGroupTagOutput)
}

func (i DbClusterParameterGroupTagArgs) ToOutput(ctx context.Context) pulumix.Output[DbClusterParameterGroupTag] {
	return pulumix.Output[DbClusterParameterGroupTag]{
		OutputState: i.ToDbClusterParameterGroupTagOutputWithContext(ctx).OutputState,
	}
}

// DbClusterParameterGroupTagArrayInput is an input type that accepts DbClusterParameterGroupTagArray and DbClusterParameterGroupTagArrayOutput values.
// You can construct a concrete instance of `DbClusterParameterGroupTagArrayInput` via:
//
//	DbClusterParameterGroupTagArray{ DbClusterParameterGroupTagArgs{...} }
type DbClusterParameterGroupTagArrayInput interface {
	pulumi.Input

	ToDbClusterParameterGroupTagArrayOutput() DbClusterParameterGroupTagArrayOutput
	ToDbClusterParameterGroupTagArrayOutputWithContext(context.Context) DbClusterParameterGroupTagArrayOutput
}

type DbClusterParameterGroupTagArray []DbClusterParameterGroupTagInput

func (DbClusterParameterGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbClusterParameterGroupTag)(nil)).Elem()
}

func (i DbClusterParameterGroupTagArray) ToDbClusterParameterGroupTagArrayOutput() DbClusterParameterGroupTagArrayOutput {
	return i.ToDbClusterParameterGroupTagArrayOutputWithContext(context.Background())
}

func (i DbClusterParameterGroupTagArray) ToDbClusterParameterGroupTagArrayOutputWithContext(ctx context.Context) DbClusterParameterGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterParameterGroupTagArrayOutput)
}

func (i DbClusterParameterGroupTagArray) ToOutput(ctx context.Context) pulumix.Output[[]DbClusterParameterGroupTag] {
	return pulumix.Output[[]DbClusterParameterGroupTag]{
		OutputState: i.ToDbClusterParameterGroupTagArrayOutputWithContext(ctx).OutputState,
	}
}

type DbClusterParameterGroupTagOutput struct{ *pulumi.OutputState }

func (DbClusterParameterGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbClusterParameterGroupTag)(nil)).Elem()
}

func (o DbClusterParameterGroupTagOutput) ToDbClusterParameterGroupTagOutput() DbClusterParameterGroupTagOutput {
	return o
}

func (o DbClusterParameterGroupTagOutput) ToDbClusterParameterGroupTagOutputWithContext(ctx context.Context) DbClusterParameterGroupTagOutput {
	return o
}

func (o DbClusterParameterGroupTagOutput) ToOutput(ctx context.Context) pulumix.Output[DbClusterParameterGroupTag] {
	return pulumix.Output[DbClusterParameterGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o DbClusterParameterGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DbClusterParameterGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DbClusterParameterGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DbClusterParameterGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type DbClusterParameterGroupTagArrayOutput struct{ *pulumi.OutputState }

func (DbClusterParameterGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbClusterParameterGroupTag)(nil)).Elem()
}

func (o DbClusterParameterGroupTagArrayOutput) ToDbClusterParameterGroupTagArrayOutput() DbClusterParameterGroupTagArrayOutput {
	return o
}

func (o DbClusterParameterGroupTagArrayOutput) ToDbClusterParameterGroupTagArrayOutputWithContext(ctx context.Context) DbClusterParameterGroupTagArrayOutput {
	return o
}

func (o DbClusterParameterGroupTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DbClusterParameterGroupTag] {
	return pulumix.Output[[]DbClusterParameterGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o DbClusterParameterGroupTagArrayOutput) Index(i pulumi.IntInput) DbClusterParameterGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DbClusterParameterGroupTag {
		return vs[0].([]DbClusterParameterGroupTag)[vs[1].(int)]
	}).(DbClusterParameterGroupTagOutput)
}

type DbClusterTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DbClusterTagInput is an input type that accepts DbClusterTagArgs and DbClusterTagOutput values.
// You can construct a concrete instance of `DbClusterTagInput` via:
//
//	DbClusterTagArgs{...}
type DbClusterTagInput interface {
	pulumi.Input

	ToDbClusterTagOutput() DbClusterTagOutput
	ToDbClusterTagOutputWithContext(context.Context) DbClusterTagOutput
}

type DbClusterTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DbClusterTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DbClusterTag)(nil)).Elem()
}

func (i DbClusterTagArgs) ToDbClusterTagOutput() DbClusterTagOutput {
	return i.ToDbClusterTagOutputWithContext(context.Background())
}

func (i DbClusterTagArgs) ToDbClusterTagOutputWithContext(ctx context.Context) DbClusterTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterTagOutput)
}

func (i DbClusterTagArgs) ToOutput(ctx context.Context) pulumix.Output[DbClusterTag] {
	return pulumix.Output[DbClusterTag]{
		OutputState: i.ToDbClusterTagOutputWithContext(ctx).OutputState,
	}
}

// DbClusterTagArrayInput is an input type that accepts DbClusterTagArray and DbClusterTagArrayOutput values.
// You can construct a concrete instance of `DbClusterTagArrayInput` via:
//
//	DbClusterTagArray{ DbClusterTagArgs{...} }
type DbClusterTagArrayInput interface {
	pulumi.Input

	ToDbClusterTagArrayOutput() DbClusterTagArrayOutput
	ToDbClusterTagArrayOutputWithContext(context.Context) DbClusterTagArrayOutput
}

type DbClusterTagArray []DbClusterTagInput

func (DbClusterTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbClusterTag)(nil)).Elem()
}

func (i DbClusterTagArray) ToDbClusterTagArrayOutput() DbClusterTagArrayOutput {
	return i.ToDbClusterTagArrayOutputWithContext(context.Background())
}

func (i DbClusterTagArray) ToDbClusterTagArrayOutputWithContext(ctx context.Context) DbClusterTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterTagArrayOutput)
}

func (i DbClusterTagArray) ToOutput(ctx context.Context) pulumix.Output[[]DbClusterTag] {
	return pulumix.Output[[]DbClusterTag]{
		OutputState: i.ToDbClusterTagArrayOutputWithContext(ctx).OutputState,
	}
}

type DbClusterTagOutput struct{ *pulumi.OutputState }

func (DbClusterTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbClusterTag)(nil)).Elem()
}

func (o DbClusterTagOutput) ToDbClusterTagOutput() DbClusterTagOutput {
	return o
}

func (o DbClusterTagOutput) ToDbClusterTagOutputWithContext(ctx context.Context) DbClusterTagOutput {
	return o
}

func (o DbClusterTagOutput) ToOutput(ctx context.Context) pulumix.Output[DbClusterTag] {
	return pulumix.Output[DbClusterTag]{
		OutputState: o.OutputState,
	}
}

func (o DbClusterTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DbClusterTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DbClusterTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DbClusterTag) string { return v.Value }).(pulumi.StringOutput)
}

type DbClusterTagArrayOutput struct{ *pulumi.OutputState }

func (DbClusterTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbClusterTag)(nil)).Elem()
}

func (o DbClusterTagArrayOutput) ToDbClusterTagArrayOutput() DbClusterTagArrayOutput {
	return o
}

func (o DbClusterTagArrayOutput) ToDbClusterTagArrayOutputWithContext(ctx context.Context) DbClusterTagArrayOutput {
	return o
}

func (o DbClusterTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DbClusterTag] {
	return pulumix.Output[[]DbClusterTag]{
		OutputState: o.OutputState,
	}
}

func (o DbClusterTagArrayOutput) Index(i pulumi.IntInput) DbClusterTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DbClusterTag {
		return vs[0].([]DbClusterTag)[vs[1].(int)]
	}).(DbClusterTagOutput)
}

type DbInstanceTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DbInstanceTagInput is an input type that accepts DbInstanceTagArgs and DbInstanceTagOutput values.
// You can construct a concrete instance of `DbInstanceTagInput` via:
//
//	DbInstanceTagArgs{...}
type DbInstanceTagInput interface {
	pulumi.Input

	ToDbInstanceTagOutput() DbInstanceTagOutput
	ToDbInstanceTagOutputWithContext(context.Context) DbInstanceTagOutput
}

type DbInstanceTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DbInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DbInstanceTag)(nil)).Elem()
}

func (i DbInstanceTagArgs) ToDbInstanceTagOutput() DbInstanceTagOutput {
	return i.ToDbInstanceTagOutputWithContext(context.Background())
}

func (i DbInstanceTagArgs) ToDbInstanceTagOutputWithContext(ctx context.Context) DbInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceTagOutput)
}

func (i DbInstanceTagArgs) ToOutput(ctx context.Context) pulumix.Output[DbInstanceTag] {
	return pulumix.Output[DbInstanceTag]{
		OutputState: i.ToDbInstanceTagOutputWithContext(ctx).OutputState,
	}
}

// DbInstanceTagArrayInput is an input type that accepts DbInstanceTagArray and DbInstanceTagArrayOutput values.
// You can construct a concrete instance of `DbInstanceTagArrayInput` via:
//
//	DbInstanceTagArray{ DbInstanceTagArgs{...} }
type DbInstanceTagArrayInput interface {
	pulumi.Input

	ToDbInstanceTagArrayOutput() DbInstanceTagArrayOutput
	ToDbInstanceTagArrayOutputWithContext(context.Context) DbInstanceTagArrayOutput
}

type DbInstanceTagArray []DbInstanceTagInput

func (DbInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbInstanceTag)(nil)).Elem()
}

func (i DbInstanceTagArray) ToDbInstanceTagArrayOutput() DbInstanceTagArrayOutput {
	return i.ToDbInstanceTagArrayOutputWithContext(context.Background())
}

func (i DbInstanceTagArray) ToDbInstanceTagArrayOutputWithContext(ctx context.Context) DbInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceTagArrayOutput)
}

func (i DbInstanceTagArray) ToOutput(ctx context.Context) pulumix.Output[[]DbInstanceTag] {
	return pulumix.Output[[]DbInstanceTag]{
		OutputState: i.ToDbInstanceTagArrayOutputWithContext(ctx).OutputState,
	}
}

type DbInstanceTagOutput struct{ *pulumi.OutputState }

func (DbInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbInstanceTag)(nil)).Elem()
}

func (o DbInstanceTagOutput) ToDbInstanceTagOutput() DbInstanceTagOutput {
	return o
}

func (o DbInstanceTagOutput) ToDbInstanceTagOutputWithContext(ctx context.Context) DbInstanceTagOutput {
	return o
}

func (o DbInstanceTagOutput) ToOutput(ctx context.Context) pulumix.Output[DbInstanceTag] {
	return pulumix.Output[DbInstanceTag]{
		OutputState: o.OutputState,
	}
}

func (o DbInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DbInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DbInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DbInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type DbInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (DbInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbInstanceTag)(nil)).Elem()
}

func (o DbInstanceTagArrayOutput) ToDbInstanceTagArrayOutput() DbInstanceTagArrayOutput {
	return o
}

func (o DbInstanceTagArrayOutput) ToDbInstanceTagArrayOutputWithContext(ctx context.Context) DbInstanceTagArrayOutput {
	return o
}

func (o DbInstanceTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DbInstanceTag] {
	return pulumix.Output[[]DbInstanceTag]{
		OutputState: o.OutputState,
	}
}

func (o DbInstanceTagArrayOutput) Index(i pulumi.IntInput) DbInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DbInstanceTag {
		return vs[0].([]DbInstanceTag)[vs[1].(int)]
	}).(DbInstanceTagOutput)
}

type DbSubnetGroupTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DbSubnetGroupTagInput is an input type that accepts DbSubnetGroupTagArgs and DbSubnetGroupTagOutput values.
// You can construct a concrete instance of `DbSubnetGroupTagInput` via:
//
//	DbSubnetGroupTagArgs{...}
type DbSubnetGroupTagInput interface {
	pulumi.Input

	ToDbSubnetGroupTagOutput() DbSubnetGroupTagOutput
	ToDbSubnetGroupTagOutputWithContext(context.Context) DbSubnetGroupTagOutput
}

type DbSubnetGroupTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DbSubnetGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DbSubnetGroupTag)(nil)).Elem()
}

func (i DbSubnetGroupTagArgs) ToDbSubnetGroupTagOutput() DbSubnetGroupTagOutput {
	return i.ToDbSubnetGroupTagOutputWithContext(context.Background())
}

func (i DbSubnetGroupTagArgs) ToDbSubnetGroupTagOutputWithContext(ctx context.Context) DbSubnetGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbSubnetGroupTagOutput)
}

func (i DbSubnetGroupTagArgs) ToOutput(ctx context.Context) pulumix.Output[DbSubnetGroupTag] {
	return pulumix.Output[DbSubnetGroupTag]{
		OutputState: i.ToDbSubnetGroupTagOutputWithContext(ctx).OutputState,
	}
}

// DbSubnetGroupTagArrayInput is an input type that accepts DbSubnetGroupTagArray and DbSubnetGroupTagArrayOutput values.
// You can construct a concrete instance of `DbSubnetGroupTagArrayInput` via:
//
//	DbSubnetGroupTagArray{ DbSubnetGroupTagArgs{...} }
type DbSubnetGroupTagArrayInput interface {
	pulumi.Input

	ToDbSubnetGroupTagArrayOutput() DbSubnetGroupTagArrayOutput
	ToDbSubnetGroupTagArrayOutputWithContext(context.Context) DbSubnetGroupTagArrayOutput
}

type DbSubnetGroupTagArray []DbSubnetGroupTagInput

func (DbSubnetGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbSubnetGroupTag)(nil)).Elem()
}

func (i DbSubnetGroupTagArray) ToDbSubnetGroupTagArrayOutput() DbSubnetGroupTagArrayOutput {
	return i.ToDbSubnetGroupTagArrayOutputWithContext(context.Background())
}

func (i DbSubnetGroupTagArray) ToDbSubnetGroupTagArrayOutputWithContext(ctx context.Context) DbSubnetGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbSubnetGroupTagArrayOutput)
}

func (i DbSubnetGroupTagArray) ToOutput(ctx context.Context) pulumix.Output[[]DbSubnetGroupTag] {
	return pulumix.Output[[]DbSubnetGroupTag]{
		OutputState: i.ToDbSubnetGroupTagArrayOutputWithContext(ctx).OutputState,
	}
}

type DbSubnetGroupTagOutput struct{ *pulumi.OutputState }

func (DbSubnetGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbSubnetGroupTag)(nil)).Elem()
}

func (o DbSubnetGroupTagOutput) ToDbSubnetGroupTagOutput() DbSubnetGroupTagOutput {
	return o
}

func (o DbSubnetGroupTagOutput) ToDbSubnetGroupTagOutputWithContext(ctx context.Context) DbSubnetGroupTagOutput {
	return o
}

func (o DbSubnetGroupTagOutput) ToOutput(ctx context.Context) pulumix.Output[DbSubnetGroupTag] {
	return pulumix.Output[DbSubnetGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o DbSubnetGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DbSubnetGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DbSubnetGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DbSubnetGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type DbSubnetGroupTagArrayOutput struct{ *pulumi.OutputState }

func (DbSubnetGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbSubnetGroupTag)(nil)).Elem()
}

func (o DbSubnetGroupTagArrayOutput) ToDbSubnetGroupTagArrayOutput() DbSubnetGroupTagArrayOutput {
	return o
}

func (o DbSubnetGroupTagArrayOutput) ToDbSubnetGroupTagArrayOutputWithContext(ctx context.Context) DbSubnetGroupTagArrayOutput {
	return o
}

func (o DbSubnetGroupTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DbSubnetGroupTag] {
	return pulumix.Output[[]DbSubnetGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o DbSubnetGroupTagArrayOutput) Index(i pulumi.IntInput) DbSubnetGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DbSubnetGroupTag {
		return vs[0].([]DbSubnetGroupTag)[vs[1].(int)]
	}).(DbSubnetGroupTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterParameterGroupTagInput)(nil)).Elem(), DbClusterParameterGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterParameterGroupTagArrayInput)(nil)).Elem(), DbClusterParameterGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterTagInput)(nil)).Elem(), DbClusterTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterTagArrayInput)(nil)).Elem(), DbClusterTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceTagInput)(nil)).Elem(), DbInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceTagArrayInput)(nil)).Elem(), DbInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbSubnetGroupTagInput)(nil)).Elem(), DbSubnetGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbSubnetGroupTagArrayInput)(nil)).Elem(), DbSubnetGroupTagArray{})
	pulumi.RegisterOutputType(DbClusterParameterGroupTagOutput{})
	pulumi.RegisterOutputType(DbClusterParameterGroupTagArrayOutput{})
	pulumi.RegisterOutputType(DbClusterTagOutput{})
	pulumi.RegisterOutputType(DbClusterTagArrayOutput{})
	pulumi.RegisterOutputType(DbInstanceTagOutput{})
	pulumi.RegisterOutputType(DbInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(DbSubnetGroupTagOutput{})
	pulumi.RegisterOutputType(DbSubnetGroupTagArrayOutput{})
}
