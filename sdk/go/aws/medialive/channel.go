// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MediaLive::Channel
//
// Deprecated: Channel is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Channel struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                   `pulumi:"arn"`
	CdiInputSpecification ChannelCdiInputSpecificationPtrOutput `pulumi:"cdiInputSpecification"`
	ChannelClass          pulumi.StringPtrOutput                `pulumi:"channelClass"`
	Destinations          ChannelOutputDestinationArrayOutput   `pulumi:"destinations"`
	EncoderSettings       ChannelEncoderSettingsPtrOutput       `pulumi:"encoderSettings"`
	InputAttachments      ChannelInputAttachmentArrayOutput     `pulumi:"inputAttachments"`
	InputSpecification    ChannelInputSpecificationPtrOutput    `pulumi:"inputSpecification"`
	Inputs                pulumi.StringArrayOutput              `pulumi:"inputs"`
	LogLevel              pulumi.StringPtrOutput                `pulumi:"logLevel"`
	Name                  pulumi.StringPtrOutput                `pulumi:"name"`
	RoleArn               pulumi.StringPtrOutput                `pulumi:"roleArn"`
	Tags                  pulumi.AnyOutput                      `pulumi:"tags"`
	Vpc                   ChannelVpcOutputSettingsPtrOutput     `pulumi:"vpc"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		args = &ChannelArgs{}
	}

	var resource Channel
	err := ctx.RegisterResource("aws-native:medialive:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws-native:medialive:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
}

type ChannelState struct {
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	CdiInputSpecification *ChannelCdiInputSpecification `pulumi:"cdiInputSpecification"`
	ChannelClass          *string                       `pulumi:"channelClass"`
	Destinations          []ChannelOutputDestination    `pulumi:"destinations"`
	EncoderSettings       *ChannelEncoderSettings       `pulumi:"encoderSettings"`
	InputAttachments      []ChannelInputAttachment      `pulumi:"inputAttachments"`
	InputSpecification    *ChannelInputSpecification    `pulumi:"inputSpecification"`
	LogLevel              *string                       `pulumi:"logLevel"`
	Name                  *string                       `pulumi:"name"`
	RoleArn               *string                       `pulumi:"roleArn"`
	Tags                  interface{}                   `pulumi:"tags"`
	Vpc                   *ChannelVpcOutputSettings     `pulumi:"vpc"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	CdiInputSpecification ChannelCdiInputSpecificationPtrInput
	ChannelClass          pulumi.StringPtrInput
	Destinations          ChannelOutputDestinationArrayInput
	EncoderSettings       ChannelEncoderSettingsPtrInput
	InputAttachments      ChannelInputAttachmentArrayInput
	InputSpecification    ChannelInputSpecificationPtrInput
	LogLevel              pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	RoleArn               pulumi.StringPtrInput
	Tags                  pulumi.Input
	Vpc                   ChannelVpcOutputSettingsPtrInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(ctx context.Context) ChannelOutput
}

func (*Channel) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *Channel) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i *Channel) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ChannelOutput) CdiInputSpecification() ChannelCdiInputSpecificationPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelCdiInputSpecificationPtrOutput { return v.CdiInputSpecification }).(ChannelCdiInputSpecificationPtrOutput)
}

func (o ChannelOutput) ChannelClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.ChannelClass }).(pulumi.StringPtrOutput)
}

func (o ChannelOutput) Destinations() ChannelOutputDestinationArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelOutputDestinationArrayOutput { return v.Destinations }).(ChannelOutputDestinationArrayOutput)
}

func (o ChannelOutput) EncoderSettings() ChannelEncoderSettingsPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelEncoderSettingsPtrOutput { return v.EncoderSettings }).(ChannelEncoderSettingsPtrOutput)
}

func (o ChannelOutput) InputAttachments() ChannelInputAttachmentArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelInputAttachmentArrayOutput { return v.InputAttachments }).(ChannelInputAttachmentArrayOutput)
}

func (o ChannelOutput) InputSpecification() ChannelInputSpecificationPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelInputSpecificationPtrOutput { return v.InputSpecification }).(ChannelInputSpecificationPtrOutput)
}

func (o ChannelOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringArrayOutput { return v.Inputs }).(pulumi.StringArrayOutput)
}

func (o ChannelOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

func (o ChannelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ChannelOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o ChannelOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Channel) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

func (o ChannelOutput) Vpc() ChannelVpcOutputSettingsPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelVpcOutputSettingsPtrOutput { return v.Vpc }).(ChannelVpcOutputSettingsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInput)(nil)).Elem(), &Channel{})
	pulumi.RegisterOutputType(ChannelOutput{})
}
