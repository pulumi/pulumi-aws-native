// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::MediaLive::Network.
type Network struct {
	pulumi.CustomResourceState

	// The ARN of the Network.
	Arn                  pulumi.StringOutput      `pulumi:"arn"`
	AssociatedClusterIds pulumi.StringArrayOutput `pulumi:"associatedClusterIds"`
	// The unique ID of the Network.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The list of IP address cidr pools for the network
	IpPools NetworkIpPoolArrayOutput `pulumi:"ipPools"`
	// The user-specified name of the Network to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The routes for the network
	Routes NetworkRouteArrayOutput `pulumi:"routes"`
	// The current state of the Network.
	State NetworkStateEnumOutput `pulumi:"state"`
	// A collection of key-value pairs.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpPools == nil {
		return nil, errors.New("invalid value for required argument 'IpPools'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("aws-native:medialive:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("aws-native:medialive:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
}

type NetworkState struct {
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// The list of IP address cidr pools for the network
	IpPools []NetworkIpPool `pulumi:"ipPools"`
	// The user-specified name of the Network to be created.
	Name *string `pulumi:"name"`
	// The routes for the network
	Routes []NetworkRoute `pulumi:"routes"`
	// A collection of key-value pairs.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// The list of IP address cidr pools for the network
	IpPools NetworkIpPoolArrayInput
	// The user-specified name of the Network to be created.
	Name pulumi.StringPtrInput
	// The routes for the network
	Routes NetworkRouteArrayInput
	// A collection of key-value pairs.
	Tags aws.TagArrayInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// The ARN of the Network.
func (o NetworkOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o NetworkOutput) AssociatedClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.AssociatedClusterIds }).(pulumi.StringArrayOutput)
}

// The unique ID of the Network.
func (o NetworkOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The list of IP address cidr pools for the network
func (o NetworkOutput) IpPools() NetworkIpPoolArrayOutput {
	return o.ApplyT(func(v *Network) NetworkIpPoolArrayOutput { return v.IpPools }).(NetworkIpPoolArrayOutput)
}

// The user-specified name of the Network to be created.
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The routes for the network
func (o NetworkOutput) Routes() NetworkRouteArrayOutput {
	return o.ApplyT(func(v *Network) NetworkRouteArrayOutput { return v.Routes }).(NetworkRouteArrayOutput)
}

// The current state of the Network.
func (o NetworkOutput) State() NetworkStateEnumOutput {
	return o.ApplyT(func(v *Network) NetworkStateEnumOutput { return v.State }).(NetworkStateEnumOutput)
}

// A collection of key-value pairs.
func (o NetworkOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Network) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterOutputType(NetworkOutput{})
}
