// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::CloudWatchAlarmTemplate Resource Type
func LookupCloudWatchAlarmTemplate(ctx *pulumi.Context, args *LookupCloudWatchAlarmTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCloudWatchAlarmTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudWatchAlarmTemplateResult
	err := ctx.Invoke("aws-native:medialive:getCloudWatchAlarmTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCloudWatchAlarmTemplateArgs struct {
	Identifier string `pulumi:"identifier"`
}

type LookupCloudWatchAlarmTemplateResult struct {
	// A cloudwatch alarm template's ARN (Amazon Resource Name)
	Arn *string `pulumi:"arn"`
	// The comparison operator used to compare the specified statistic and the threshold.
	ComparisonOperator *CloudWatchAlarmTemplateComparisonOperator `pulumi:"comparisonOperator"`
	// The date and time of resource creation.
	CreatedAt *string `pulumi:"createdAt"`
	// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
	DatapointsToAlarm *float64 `pulumi:"datapointsToAlarm"`
	// A resource's optional description.
	Description *string `pulumi:"description"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods *float64 `pulumi:"evaluationPeriods"`
	// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
	GroupId *string `pulumi:"groupId"`
	// A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
	Id         *string `pulumi:"id"`
	Identifier *string `pulumi:"identifier"`
	// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
	MetricName *string `pulumi:"metricName"`
	// The date and time of latest resource modification.
	ModifiedAt *string `pulumi:"modifiedAt"`
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name *string `pulumi:"name"`
	// The period, in seconds, over which the specified statistic is applied.
	Period *float64 `pulumi:"period"`
	// The statistic to apply to the alarm's metric data.
	Statistic *CloudWatchAlarmTemplateStatistic `pulumi:"statistic"`
	// The resource type this template should dynamically generate CloudWatch metric alarms for.
	TargetResourceType *CloudWatchAlarmTemplateTargetResourceType `pulumi:"targetResourceType"`
	// The threshold value to compare with the specified statistic.
	Threshold *float64 `pulumi:"threshold"`
	// Specifies how missing data points are treated when evaluating the alarm's condition.
	TreatMissingData *CloudWatchAlarmTemplateTreatMissingData `pulumi:"treatMissingData"`
}

func LookupCloudWatchAlarmTemplateOutput(ctx *pulumi.Context, args LookupCloudWatchAlarmTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCloudWatchAlarmTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudWatchAlarmTemplateResult, error) {
			args := v.(LookupCloudWatchAlarmTemplateArgs)
			r, err := LookupCloudWatchAlarmTemplate(ctx, &args, opts...)
			var s LookupCloudWatchAlarmTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCloudWatchAlarmTemplateResultOutput)
}

type LookupCloudWatchAlarmTemplateOutputArgs struct {
	Identifier pulumi.StringInput `pulumi:"identifier"`
}

func (LookupCloudWatchAlarmTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudWatchAlarmTemplateArgs)(nil)).Elem()
}

type LookupCloudWatchAlarmTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCloudWatchAlarmTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudWatchAlarmTemplateResult)(nil)).Elem()
}

func (o LookupCloudWatchAlarmTemplateResultOutput) ToLookupCloudWatchAlarmTemplateResultOutput() LookupCloudWatchAlarmTemplateResultOutput {
	return o
}

func (o LookupCloudWatchAlarmTemplateResultOutput) ToLookupCloudWatchAlarmTemplateResultOutputWithContext(ctx context.Context) LookupCloudWatchAlarmTemplateResultOutput {
	return o
}

// A cloudwatch alarm template's ARN (Amazon Resource Name)
func (o LookupCloudWatchAlarmTemplateResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The comparison operator used to compare the specified statistic and the threshold.
func (o LookupCloudWatchAlarmTemplateResultOutput) ComparisonOperator() CloudWatchAlarmTemplateComparisonOperatorPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *CloudWatchAlarmTemplateComparisonOperator {
		return v.ComparisonOperator
	}).(CloudWatchAlarmTemplateComparisonOperatorPtrOutput)
}

// The date and time of resource creation.
func (o LookupCloudWatchAlarmTemplateResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
func (o LookupCloudWatchAlarmTemplateResultOutput) DatapointsToAlarm() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *float64 { return v.DatapointsToAlarm }).(pulumi.Float64PtrOutput)
}

// A resource's optional description.
func (o LookupCloudWatchAlarmTemplateResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The number of periods over which data is compared to the specified threshold.
func (o LookupCloudWatchAlarmTemplateResultOutput) EvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *float64 { return v.EvaluationPeriods }).(pulumi.Float64PtrOutput)
}

// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
func (o LookupCloudWatchAlarmTemplateResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
func (o LookupCloudWatchAlarmTemplateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupCloudWatchAlarmTemplateResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
func (o LookupCloudWatchAlarmTemplateResultOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The date and time of latest resource modification.
func (o LookupCloudWatchAlarmTemplateResultOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

// A resource's name. Names must be unique within the scope of a resource type in a specific region.
func (o LookupCloudWatchAlarmTemplateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The period, in seconds, over which the specified statistic is applied.
func (o LookupCloudWatchAlarmTemplateResultOutput) Period() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *float64 { return v.Period }).(pulumi.Float64PtrOutput)
}

// The statistic to apply to the alarm's metric data.
func (o LookupCloudWatchAlarmTemplateResultOutput) Statistic() CloudWatchAlarmTemplateStatisticPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *CloudWatchAlarmTemplateStatistic { return v.Statistic }).(CloudWatchAlarmTemplateStatisticPtrOutput)
}

// The resource type this template should dynamically generate CloudWatch metric alarms for.
func (o LookupCloudWatchAlarmTemplateResultOutput) TargetResourceType() CloudWatchAlarmTemplateTargetResourceTypePtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *CloudWatchAlarmTemplateTargetResourceType {
		return v.TargetResourceType
	}).(CloudWatchAlarmTemplateTargetResourceTypePtrOutput)
}

// The threshold value to compare with the specified statistic.
func (o LookupCloudWatchAlarmTemplateResultOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Specifies how missing data points are treated when evaluating the alarm's condition.
func (o LookupCloudWatchAlarmTemplateResultOutput) TreatMissingData() CloudWatchAlarmTemplateTreatMissingDataPtrOutput {
	return o.ApplyT(func(v LookupCloudWatchAlarmTemplateResult) *CloudWatchAlarmTemplateTreatMissingData {
		return v.TreatMissingData
	}).(CloudWatchAlarmTemplateTreatMissingDataPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudWatchAlarmTemplateResultOutput{})
}
