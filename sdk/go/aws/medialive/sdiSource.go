// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::SdiSource Resource Type
type SdiSource struct {
	pulumi.CustomResourceState

	// The unique arn of the SdiSource.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The unique identifier of the SdiSource.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The list of inputs currently using this SDI source.
	Inputs pulumi.StringArrayOutput `pulumi:"inputs"`
	Mode   SdiSourceModePtrOutput   `pulumi:"mode"`
	// The name of the SdiSource.
	Name  pulumi.StringOutput      `pulumi:"name"`
	State SdiSourceStateEnumOutput `pulumi:"state"`
	// A collection of key-value pairs.
	Tags aws.TagArrayOutput  `pulumi:"tags"`
	Type SdiSourceTypeOutput `pulumi:"type"`
}

// NewSdiSource registers a new resource with the given unique name, arguments, and options.
func NewSdiSource(ctx *pulumi.Context,
	name string, args *SdiSourceArgs, opts ...pulumi.ResourceOption) (*SdiSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SdiSource
	err := ctx.RegisterResource("aws-native:medialive:SdiSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSdiSource gets an existing SdiSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSdiSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SdiSourceState, opts ...pulumi.ResourceOption) (*SdiSource, error) {
	var resource SdiSource
	err := ctx.ReadResource("aws-native:medialive:SdiSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SdiSource resources.
type sdiSourceState struct {
}

type SdiSourceState struct {
}

func (SdiSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sdiSourceState)(nil)).Elem()
}

type sdiSourceArgs struct {
	Mode *SdiSourceMode `pulumi:"mode"`
	// The name of the SdiSource.
	Name *string `pulumi:"name"`
	// A collection of key-value pairs.
	Tags []aws.Tag     `pulumi:"tags"`
	Type SdiSourceType `pulumi:"type"`
}

// The set of arguments for constructing a SdiSource resource.
type SdiSourceArgs struct {
	Mode SdiSourceModePtrInput
	// The name of the SdiSource.
	Name pulumi.StringPtrInput
	// A collection of key-value pairs.
	Tags aws.TagArrayInput
	Type SdiSourceTypeInput
}

func (SdiSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sdiSourceArgs)(nil)).Elem()
}

type SdiSourceInput interface {
	pulumi.Input

	ToSdiSourceOutput() SdiSourceOutput
	ToSdiSourceOutputWithContext(ctx context.Context) SdiSourceOutput
}

func (*SdiSource) ElementType() reflect.Type {
	return reflect.TypeOf((**SdiSource)(nil)).Elem()
}

func (i *SdiSource) ToSdiSourceOutput() SdiSourceOutput {
	return i.ToSdiSourceOutputWithContext(context.Background())
}

func (i *SdiSource) ToSdiSourceOutputWithContext(ctx context.Context) SdiSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdiSourceOutput)
}

type SdiSourceOutput struct{ *pulumi.OutputState }

func (SdiSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SdiSource)(nil)).Elem()
}

func (o SdiSourceOutput) ToSdiSourceOutput() SdiSourceOutput {
	return o
}

func (o SdiSourceOutput) ToSdiSourceOutputWithContext(ctx context.Context) SdiSourceOutput {
	return o
}

// The unique arn of the SdiSource.
func (o SdiSourceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SdiSource) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The unique identifier of the SdiSource.
func (o SdiSourceOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *SdiSource) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The list of inputs currently using this SDI source.
func (o SdiSourceOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SdiSource) pulumi.StringArrayOutput { return v.Inputs }).(pulumi.StringArrayOutput)
}

func (o SdiSourceOutput) Mode() SdiSourceModePtrOutput {
	return o.ApplyT(func(v *SdiSource) SdiSourceModePtrOutput { return v.Mode }).(SdiSourceModePtrOutput)
}

// The name of the SdiSource.
func (o SdiSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SdiSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SdiSourceOutput) State() SdiSourceStateEnumOutput {
	return o.ApplyT(func(v *SdiSource) SdiSourceStateEnumOutput { return v.State }).(SdiSourceStateEnumOutput)
}

// A collection of key-value pairs.
func (o SdiSourceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *SdiSource) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o SdiSourceOutput) Type() SdiSourceTypeOutput {
	return o.ApplyT(func(v *SdiSource) SdiSourceTypeOutput { return v.Type }).(SdiSourceTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SdiSourceInput)(nil)).Elem(), &SdiSource{})
	pulumi.RegisterOutputType(SdiSourceOutput{})
}
