// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::ChannelPlacementGroup Resource Type
type ChannelPlacementGroup struct {
	pulumi.CustomResourceState

	// The ARN of the channel placement group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Unique internal identifier.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// List of channel IDs added to the channel placement group.
	Channels pulumi.StringArrayOutput `pulumi:"channels"`
	// The ID of the cluster the node is on.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// The name of the channel placement group.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// List of nodes added to the channel placement group
	Nodes pulumi.StringArrayOutput             `pulumi:"nodes"`
	State ChannelPlacementGroupStateEnumOutput `pulumi:"state"`
	// A collection of key-value pairs.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewChannelPlacementGroup registers a new resource with the given unique name, arguments, and options.
func NewChannelPlacementGroup(ctx *pulumi.Context,
	name string, args *ChannelPlacementGroupArgs, opts ...pulumi.ResourceOption) (*ChannelPlacementGroup, error) {
	if args == nil {
		args = &ChannelPlacementGroupArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelPlacementGroup
	err := ctx.RegisterResource("aws-native:medialive:ChannelPlacementGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelPlacementGroup gets an existing ChannelPlacementGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelPlacementGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelPlacementGroupState, opts ...pulumi.ResourceOption) (*ChannelPlacementGroup, error) {
	var resource ChannelPlacementGroup
	err := ctx.ReadResource("aws-native:medialive:ChannelPlacementGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelPlacementGroup resources.
type channelPlacementGroupState struct {
}

type ChannelPlacementGroupState struct {
}

func (ChannelPlacementGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelPlacementGroupState)(nil)).Elem()
}

type channelPlacementGroupArgs struct {
	// The ID of the cluster the node is on.
	ClusterId *string `pulumi:"clusterId"`
	// The name of the channel placement group.
	Name *string `pulumi:"name"`
	// List of nodes added to the channel placement group
	Nodes []string `pulumi:"nodes"`
	// A collection of key-value pairs.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a ChannelPlacementGroup resource.
type ChannelPlacementGroupArgs struct {
	// The ID of the cluster the node is on.
	ClusterId pulumi.StringPtrInput
	// The name of the channel placement group.
	Name pulumi.StringPtrInput
	// List of nodes added to the channel placement group
	Nodes pulumi.StringArrayInput
	// A collection of key-value pairs.
	Tags aws.TagArrayInput
}

func (ChannelPlacementGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelPlacementGroupArgs)(nil)).Elem()
}

type ChannelPlacementGroupInput interface {
	pulumi.Input

	ToChannelPlacementGroupOutput() ChannelPlacementGroupOutput
	ToChannelPlacementGroupOutputWithContext(ctx context.Context) ChannelPlacementGroupOutput
}

func (*ChannelPlacementGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelPlacementGroup)(nil)).Elem()
}

func (i *ChannelPlacementGroup) ToChannelPlacementGroupOutput() ChannelPlacementGroupOutput {
	return i.ToChannelPlacementGroupOutputWithContext(context.Background())
}

func (i *ChannelPlacementGroup) ToChannelPlacementGroupOutputWithContext(ctx context.Context) ChannelPlacementGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelPlacementGroupOutput)
}

type ChannelPlacementGroupOutput struct{ *pulumi.OutputState }

func (ChannelPlacementGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelPlacementGroup)(nil)).Elem()
}

func (o ChannelPlacementGroupOutput) ToChannelPlacementGroupOutput() ChannelPlacementGroupOutput {
	return o
}

func (o ChannelPlacementGroupOutput) ToChannelPlacementGroupOutputWithContext(ctx context.Context) ChannelPlacementGroupOutput {
	return o
}

// The ARN of the channel placement group.
func (o ChannelPlacementGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Unique internal identifier.
func (o ChannelPlacementGroupOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// List of channel IDs added to the channel placement group.
func (o ChannelPlacementGroupOutput) Channels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) pulumi.StringArrayOutput { return v.Channels }).(pulumi.StringArrayOutput)
}

// The ID of the cluster the node is on.
func (o ChannelPlacementGroupOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The name of the channel placement group.
func (o ChannelPlacementGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// List of nodes added to the channel placement group
func (o ChannelPlacementGroupOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) pulumi.StringArrayOutput { return v.Nodes }).(pulumi.StringArrayOutput)
}

func (o ChannelPlacementGroupOutput) State() ChannelPlacementGroupStateEnumOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) ChannelPlacementGroupStateEnumOutput { return v.State }).(ChannelPlacementGroupStateEnumOutput)
}

// A collection of key-value pairs.
func (o ChannelPlacementGroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *ChannelPlacementGroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelPlacementGroupInput)(nil)).Elem(), &ChannelPlacementGroup{})
	pulumi.RegisterOutputType(ChannelPlacementGroupOutput{})
}
