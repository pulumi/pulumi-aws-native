// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::MediaLive::Multiplexprogram
func LookupMultiplexprogram(ctx *pulumi.Context, args *LookupMultiplexprogramArgs, opts ...pulumi.InvokeOption) (*LookupMultiplexprogramResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMultiplexprogramResult
	err := ctx.Invoke("aws-native:medialive:getMultiplexprogram", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMultiplexprogramArgs struct {
	// The ID of the multiplex that the program belongs to.
	MultiplexId string `pulumi:"multiplexId"`
	// The name of the multiplex program.
	ProgramName string `pulumi:"programName"`
}

type LookupMultiplexprogramResult struct {
	// The MediaLive channel associated with the program.
	ChannelId *string `pulumi:"channelId"`
	// The settings for this multiplex program.
	MultiplexProgramSettings *MultiplexprogramMultiplexProgramSettings `pulumi:"multiplexProgramSettings"`
	// The packet identifier map for this multiplex program.
	PacketIdentifiersMap *MultiplexprogramMultiplexProgramPacketIdentifiersMap `pulumi:"packetIdentifiersMap"`
	// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
	PipelineDetails []MultiplexprogramMultiplexProgramPipelineDetail `pulumi:"pipelineDetails"`
}

func LookupMultiplexprogramOutput(ctx *pulumi.Context, args LookupMultiplexprogramOutputArgs, opts ...pulumi.InvokeOption) LookupMultiplexprogramResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMultiplexprogramResult, error) {
			args := v.(LookupMultiplexprogramArgs)
			r, err := LookupMultiplexprogram(ctx, &args, opts...)
			var s LookupMultiplexprogramResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMultiplexprogramResultOutput)
}

type LookupMultiplexprogramOutputArgs struct {
	// The ID of the multiplex that the program belongs to.
	MultiplexId pulumi.StringInput `pulumi:"multiplexId"`
	// The name of the multiplex program.
	ProgramName pulumi.StringInput `pulumi:"programName"`
}

func (LookupMultiplexprogramOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultiplexprogramArgs)(nil)).Elem()
}

type LookupMultiplexprogramResultOutput struct{ *pulumi.OutputState }

func (LookupMultiplexprogramResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultiplexprogramResult)(nil)).Elem()
}

func (o LookupMultiplexprogramResultOutput) ToLookupMultiplexprogramResultOutput() LookupMultiplexprogramResultOutput {
	return o
}

func (o LookupMultiplexprogramResultOutput) ToLookupMultiplexprogramResultOutputWithContext(ctx context.Context) LookupMultiplexprogramResultOutput {
	return o
}

// The MediaLive channel associated with the program.
func (o LookupMultiplexprogramResultOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiplexprogramResult) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// The settings for this multiplex program.
func (o LookupMultiplexprogramResultOutput) MultiplexProgramSettings() MultiplexprogramMultiplexProgramSettingsPtrOutput {
	return o.ApplyT(func(v LookupMultiplexprogramResult) *MultiplexprogramMultiplexProgramSettings {
		return v.MultiplexProgramSettings
	}).(MultiplexprogramMultiplexProgramSettingsPtrOutput)
}

// The packet identifier map for this multiplex program.
func (o LookupMultiplexprogramResultOutput) PacketIdentifiersMap() MultiplexprogramMultiplexProgramPacketIdentifiersMapPtrOutput {
	return o.ApplyT(func(v LookupMultiplexprogramResult) *MultiplexprogramMultiplexProgramPacketIdentifiersMap {
		return v.PacketIdentifiersMap
	}).(MultiplexprogramMultiplexProgramPacketIdentifiersMapPtrOutput)
}

// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
func (o LookupMultiplexprogramResultOutput) PipelineDetails() MultiplexprogramMultiplexProgramPipelineDetailArrayOutput {
	return o.ApplyT(func(v LookupMultiplexprogramResult) []MultiplexprogramMultiplexProgramPipelineDetail {
		return v.PipelineDetails
	}).(MultiplexprogramMultiplexProgramPipelineDetailArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMultiplexprogramResultOutput{})
}
