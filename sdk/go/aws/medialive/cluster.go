// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::Cluster Resource Type
type Cluster struct {
	pulumi.CustomResourceState

	// The ARN of the Cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The unique ID of the Cluster.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The MediaLive Channels that are currently running on Nodes in this Cluster.
	ChannelIds  pulumi.StringArrayOutput `pulumi:"channelIds"`
	ClusterType ClusterTypePtrOutput     `pulumi:"clusterType"`
	// The IAM role your nodes will use.
	InstanceRoleArn pulumi.StringPtrOutput `pulumi:"instanceRoleArn"`
	// The user-specified name of the Cluster to be created.
	Name            pulumi.StringPtrOutput          `pulumi:"name"`
	NetworkSettings ClusterNetworkSettingsPtrOutput `pulumi:"networkSettings"`
	State           ClusterStateEnumOutput          `pulumi:"state"`
	// A collection of key-value pairs.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterType",
		"instanceRoleArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws-native:medialive:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:medialive:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	ClusterType *ClusterType `pulumi:"clusterType"`
	// The IAM role your nodes will use.
	InstanceRoleArn *string `pulumi:"instanceRoleArn"`
	// The user-specified name of the Cluster to be created.
	Name            *string                 `pulumi:"name"`
	NetworkSettings *ClusterNetworkSettings `pulumi:"networkSettings"`
	// A collection of key-value pairs.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	ClusterType ClusterTypePtrInput
	// The IAM role your nodes will use.
	InstanceRoleArn pulumi.StringPtrInput
	// The user-specified name of the Cluster to be created.
	Name            pulumi.StringPtrInput
	NetworkSettings ClusterNetworkSettingsPtrInput
	// A collection of key-value pairs.
	Tags aws.TagArrayInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The ARN of the Cluster.
func (o ClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The unique ID of the Cluster.
func (o ClusterOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The MediaLive Channels that are currently running on Nodes in this Cluster.
func (o ClusterOutput) ChannelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.ChannelIds }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) ClusterType() ClusterTypePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterTypePtrOutput { return v.ClusterType }).(ClusterTypePtrOutput)
}

// The IAM role your nodes will use.
func (o ClusterOutput) InstanceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.InstanceRoleArn }).(pulumi.StringPtrOutput)
}

// The user-specified name of the Cluster to be created.
func (o ClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) NetworkSettings() ClusterNetworkSettingsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworkSettingsPtrOutput { return v.NetworkSettings }).(ClusterNetworkSettingsPtrOutput)
}

func (o ClusterOutput) State() ClusterStateEnumOutput {
	return o.ApplyT(func(v *Cluster) ClusterStateEnumOutput { return v.State }).(ClusterStateEnumOutput)
}

// A collection of key-value pairs.
func (o ClusterOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Cluster) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
