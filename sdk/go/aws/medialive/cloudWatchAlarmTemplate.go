// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::CloudWatchAlarmTemplate Resource Type
type CloudWatchAlarmTemplate struct {
	pulumi.CustomResourceState

	// A cloudwatch alarm template's ARN (Amazon Resource Name)
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The comparison operator used to compare the specified statistic and the threshold.
	ComparisonOperator CloudWatchAlarmTemplateComparisonOperatorOutput `pulumi:"comparisonOperator"`
	// The date and time of resource creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
	DatapointsToAlarm pulumi.Float64PtrOutput `pulumi:"datapointsToAlarm"`
	// A resource's optional description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumi.Float64Output `pulumi:"evaluationPeriods"`
	// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
	GroupIdentifier pulumi.StringPtrOutput `pulumi:"groupIdentifier"`
	Identifier      pulumi.StringOutput    `pulumi:"identifier"`
	// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
	MetricName pulumi.StringOutput `pulumi:"metricName"`
	// The date and time of latest resource modification.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name pulumi.StringOutput `pulumi:"name"`
	// The period, in seconds, over which the specified statistic is applied.
	Period pulumi.Float64Output `pulumi:"period"`
	// The statistic to apply to the alarm's metric data.
	Statistic CloudWatchAlarmTemplateStatisticOutput `pulumi:"statistic"`
	Tags      pulumi.StringMapOutput                 `pulumi:"tags"`
	// The resource type this template should dynamically generate CloudWatch metric alarms for.
	TargetResourceType CloudWatchAlarmTemplateTargetResourceTypeOutput `pulumi:"targetResourceType"`
	// The threshold value to compare with the specified statistic.
	Threshold pulumi.Float64Output `pulumi:"threshold"`
	// Specifies how missing data points are treated when evaluating the alarm's condition.
	TreatMissingData CloudWatchAlarmTemplateTreatMissingDataOutput `pulumi:"treatMissingData"`
}

// NewCloudWatchAlarmTemplate registers a new resource with the given unique name, arguments, and options.
func NewCloudWatchAlarmTemplate(ctx *pulumi.Context,
	name string, args *CloudWatchAlarmTemplateArgs, opts ...pulumi.ResourceOption) (*CloudWatchAlarmTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComparisonOperator == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonOperator'")
	}
	if args.EvaluationPeriods == nil {
		return nil, errors.New("invalid value for required argument 'EvaluationPeriods'")
	}
	if args.MetricName == nil {
		return nil, errors.New("invalid value for required argument 'MetricName'")
	}
	if args.Period == nil {
		return nil, errors.New("invalid value for required argument 'Period'")
	}
	if args.Statistic == nil {
		return nil, errors.New("invalid value for required argument 'Statistic'")
	}
	if args.TargetResourceType == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceType'")
	}
	if args.Threshold == nil {
		return nil, errors.New("invalid value for required argument 'Threshold'")
	}
	if args.TreatMissingData == nil {
		return nil, errors.New("invalid value for required argument 'TreatMissingData'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudWatchAlarmTemplate
	err := ctx.RegisterResource("aws-native:medialive:CloudWatchAlarmTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudWatchAlarmTemplate gets an existing CloudWatchAlarmTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudWatchAlarmTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudWatchAlarmTemplateState, opts ...pulumi.ResourceOption) (*CloudWatchAlarmTemplate, error) {
	var resource CloudWatchAlarmTemplate
	err := ctx.ReadResource("aws-native:medialive:CloudWatchAlarmTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudWatchAlarmTemplate resources.
type cloudWatchAlarmTemplateState struct {
}

type CloudWatchAlarmTemplateState struct {
}

func (CloudWatchAlarmTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudWatchAlarmTemplateState)(nil)).Elem()
}

type cloudWatchAlarmTemplateArgs struct {
	// The comparison operator used to compare the specified statistic and the threshold.
	ComparisonOperator CloudWatchAlarmTemplateComparisonOperator `pulumi:"comparisonOperator"`
	// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
	DatapointsToAlarm *float64 `pulumi:"datapointsToAlarm"`
	// A resource's optional description.
	Description *string `pulumi:"description"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods float64 `pulumi:"evaluationPeriods"`
	// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
	GroupIdentifier *string `pulumi:"groupIdentifier"`
	// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
	MetricName string `pulumi:"metricName"`
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name *string `pulumi:"name"`
	// The period, in seconds, over which the specified statistic is applied.
	Period float64 `pulumi:"period"`
	// The statistic to apply to the alarm's metric data.
	Statistic CloudWatchAlarmTemplateStatistic `pulumi:"statistic"`
	Tags      map[string]string                `pulumi:"tags"`
	// The resource type this template should dynamically generate CloudWatch metric alarms for.
	TargetResourceType CloudWatchAlarmTemplateTargetResourceType `pulumi:"targetResourceType"`
	// The threshold value to compare with the specified statistic.
	Threshold float64 `pulumi:"threshold"`
	// Specifies how missing data points are treated when evaluating the alarm's condition.
	TreatMissingData CloudWatchAlarmTemplateTreatMissingData `pulumi:"treatMissingData"`
}

// The set of arguments for constructing a CloudWatchAlarmTemplate resource.
type CloudWatchAlarmTemplateArgs struct {
	// The comparison operator used to compare the specified statistic and the threshold.
	ComparisonOperator CloudWatchAlarmTemplateComparisonOperatorInput
	// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
	DatapointsToAlarm pulumi.Float64PtrInput
	// A resource's optional description.
	Description pulumi.StringPtrInput
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods pulumi.Float64Input
	// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
	GroupIdentifier pulumi.StringPtrInput
	// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
	MetricName pulumi.StringInput
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name pulumi.StringPtrInput
	// The period, in seconds, over which the specified statistic is applied.
	Period pulumi.Float64Input
	// The statistic to apply to the alarm's metric data.
	Statistic CloudWatchAlarmTemplateStatisticInput
	Tags      pulumi.StringMapInput
	// The resource type this template should dynamically generate CloudWatch metric alarms for.
	TargetResourceType CloudWatchAlarmTemplateTargetResourceTypeInput
	// The threshold value to compare with the specified statistic.
	Threshold pulumi.Float64Input
	// Specifies how missing data points are treated when evaluating the alarm's condition.
	TreatMissingData CloudWatchAlarmTemplateTreatMissingDataInput
}

func (CloudWatchAlarmTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudWatchAlarmTemplateArgs)(nil)).Elem()
}

type CloudWatchAlarmTemplateInput interface {
	pulumi.Input

	ToCloudWatchAlarmTemplateOutput() CloudWatchAlarmTemplateOutput
	ToCloudWatchAlarmTemplateOutputWithContext(ctx context.Context) CloudWatchAlarmTemplateOutput
}

func (*CloudWatchAlarmTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudWatchAlarmTemplate)(nil)).Elem()
}

func (i *CloudWatchAlarmTemplate) ToCloudWatchAlarmTemplateOutput() CloudWatchAlarmTemplateOutput {
	return i.ToCloudWatchAlarmTemplateOutputWithContext(context.Background())
}

func (i *CloudWatchAlarmTemplate) ToCloudWatchAlarmTemplateOutputWithContext(ctx context.Context) CloudWatchAlarmTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWatchAlarmTemplateOutput)
}

type CloudWatchAlarmTemplateOutput struct{ *pulumi.OutputState }

func (CloudWatchAlarmTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudWatchAlarmTemplate)(nil)).Elem()
}

func (o CloudWatchAlarmTemplateOutput) ToCloudWatchAlarmTemplateOutput() CloudWatchAlarmTemplateOutput {
	return o
}

func (o CloudWatchAlarmTemplateOutput) ToCloudWatchAlarmTemplateOutputWithContext(ctx context.Context) CloudWatchAlarmTemplateOutput {
	return o
}

// A cloudwatch alarm template's ARN (Amazon Resource Name)
func (o CloudWatchAlarmTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
func (o CloudWatchAlarmTemplateOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The comparison operator used to compare the specified statistic and the threshold.
func (o CloudWatchAlarmTemplateOutput) ComparisonOperator() CloudWatchAlarmTemplateComparisonOperatorOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) CloudWatchAlarmTemplateComparisonOperatorOutput {
		return v.ComparisonOperator
	}).(CloudWatchAlarmTemplateComparisonOperatorOutput)
}

// The date and time of resource creation.
func (o CloudWatchAlarmTemplateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
func (o CloudWatchAlarmTemplateOutput) DatapointsToAlarm() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.Float64PtrOutput { return v.DatapointsToAlarm }).(pulumi.Float64PtrOutput)
}

// A resource's optional description.
func (o CloudWatchAlarmTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The number of periods over which data is compared to the specified threshold.
func (o CloudWatchAlarmTemplateOutput) EvaluationPeriods() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.Float64Output { return v.EvaluationPeriods }).(pulumi.Float64Output)
}

// A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
func (o CloudWatchAlarmTemplateOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
func (o CloudWatchAlarmTemplateOutput) GroupIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringPtrOutput { return v.GroupIdentifier }).(pulumi.StringPtrOutput)
}

func (o CloudWatchAlarmTemplateOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
func (o CloudWatchAlarmTemplateOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.MetricName }).(pulumi.StringOutput)
}

// The date and time of latest resource modification.
func (o CloudWatchAlarmTemplateOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// A resource's name. Names must be unique within the scope of a resource type in a specific region.
func (o CloudWatchAlarmTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The period, in seconds, over which the specified statistic is applied.
func (o CloudWatchAlarmTemplateOutput) Period() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.Float64Output { return v.Period }).(pulumi.Float64Output)
}

// The statistic to apply to the alarm's metric data.
func (o CloudWatchAlarmTemplateOutput) Statistic() CloudWatchAlarmTemplateStatisticOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) CloudWatchAlarmTemplateStatisticOutput { return v.Statistic }).(CloudWatchAlarmTemplateStatisticOutput)
}

func (o CloudWatchAlarmTemplateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource type this template should dynamically generate CloudWatch metric alarms for.
func (o CloudWatchAlarmTemplateOutput) TargetResourceType() CloudWatchAlarmTemplateTargetResourceTypeOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) CloudWatchAlarmTemplateTargetResourceTypeOutput {
		return v.TargetResourceType
	}).(CloudWatchAlarmTemplateTargetResourceTypeOutput)
}

// The threshold value to compare with the specified statistic.
func (o CloudWatchAlarmTemplateOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) pulumi.Float64Output { return v.Threshold }).(pulumi.Float64Output)
}

// Specifies how missing data points are treated when evaluating the alarm's condition.
func (o CloudWatchAlarmTemplateOutput) TreatMissingData() CloudWatchAlarmTemplateTreatMissingDataOutput {
	return o.ApplyT(func(v *CloudWatchAlarmTemplate) CloudWatchAlarmTemplateTreatMissingDataOutput {
		return v.TreatMissingData
	}).(CloudWatchAlarmTemplateTreatMissingDataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudWatchAlarmTemplateInput)(nil)).Elem(), &CloudWatchAlarmTemplate{})
	pulumi.RegisterOutputType(CloudWatchAlarmTemplateOutput{})
}
