// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "aws-native:medialive:ChannelPlacementGroup":
		r = &ChannelPlacementGroup{}
	case "aws-native:medialive:CloudWatchAlarmTemplate":
		r = &CloudWatchAlarmTemplate{}
	case "aws-native:medialive:CloudWatchAlarmTemplateGroup":
		r = &CloudWatchAlarmTemplateGroup{}
	case "aws-native:medialive:Cluster":
		r = &Cluster{}
	case "aws-native:medialive:EventBridgeRuleTemplate":
		r = &EventBridgeRuleTemplate{}
	case "aws-native:medialive:EventBridgeRuleTemplateGroup":
		r = &EventBridgeRuleTemplateGroup{}
	case "aws-native:medialive:Multiplex":
		r = &Multiplex{}
	case "aws-native:medialive:Multiplexprogram":
		r = &Multiplexprogram{}
	case "aws-native:medialive:Network":
		r = &Network{}
	case "aws-native:medialive:SdiSource":
		r = &SdiSource{}
	case "aws-native:medialive:SignalMap":
		r = &SignalMap{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"aws-native",
		"medialive",
		&module{version},
	)
}
