// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::MediaLive::Multiplex
type Multiplex struct {
	pulumi.CustomResourceState

	// The unique arn of the multiplex.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A list of availability zones for the multiplex.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// The unique id of the multiplex.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A list of the multiplex output destinations.
	Destinations MultiplexOutputDestinationArrayOutput `pulumi:"destinations"`
	// Configuration for a multiplex event.
	MultiplexSettings MultiplexSettingsOutput `pulumi:"multiplexSettings"`
	// Name of multiplex.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of currently healthy pipelines.
	PipelinesRunningCount pulumi.IntOutput `pulumi:"pipelinesRunningCount"`
	// The number of programs in the multiplex.
	ProgramCount pulumi.IntOutput         `pulumi:"programCount"`
	State        MultiplexStateEnumOutput `pulumi:"state"`
	// A collection of key-value pairs.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewMultiplex registers a new resource with the given unique name, arguments, and options.
func NewMultiplex(ctx *pulumi.Context,
	name string, args *MultiplexArgs, opts ...pulumi.ResourceOption) (*Multiplex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	if args.MultiplexSettings == nil {
		return nil, errors.New("invalid value for required argument 'MultiplexSettings'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"availabilityZones[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Multiplex
	err := ctx.RegisterResource("aws-native:medialive:Multiplex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiplex gets an existing Multiplex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiplex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiplexState, opts ...pulumi.ResourceOption) (*Multiplex, error) {
	var resource Multiplex
	err := ctx.ReadResource("aws-native:medialive:Multiplex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Multiplex resources.
type multiplexState struct {
}

type MultiplexState struct {
}

func (MultiplexState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexState)(nil)).Elem()
}

type multiplexArgs struct {
	// A list of availability zones for the multiplex.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// A list of the multiplex output destinations.
	Destinations []MultiplexOutputDestination `pulumi:"destinations"`
	// Configuration for a multiplex event.
	MultiplexSettings MultiplexSettings `pulumi:"multiplexSettings"`
	// Name of multiplex.
	Name *string `pulumi:"name"`
	// A collection of key-value pairs.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Multiplex resource.
type MultiplexArgs struct {
	// A list of availability zones for the multiplex.
	AvailabilityZones pulumi.StringArrayInput
	// A list of the multiplex output destinations.
	Destinations MultiplexOutputDestinationArrayInput
	// Configuration for a multiplex event.
	MultiplexSettings MultiplexSettingsInput
	// Name of multiplex.
	Name pulumi.StringPtrInput
	// A collection of key-value pairs.
	Tags aws.TagArrayInput
}

func (MultiplexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiplexArgs)(nil)).Elem()
}

type MultiplexInput interface {
	pulumi.Input

	ToMultiplexOutput() MultiplexOutput
	ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput
}

func (*Multiplex) ElementType() reflect.Type {
	return reflect.TypeOf((**Multiplex)(nil)).Elem()
}

func (i *Multiplex) ToMultiplexOutput() MultiplexOutput {
	return i.ToMultiplexOutputWithContext(context.Background())
}

func (i *Multiplex) ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplexOutput)
}

type MultiplexOutput struct{ *pulumi.OutputState }

func (MultiplexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Multiplex)(nil)).Elem()
}

func (o MultiplexOutput) ToMultiplexOutput() MultiplexOutput {
	return o
}

func (o MultiplexOutput) ToMultiplexOutputWithContext(ctx context.Context) MultiplexOutput {
	return o
}

// The unique arn of the multiplex.
func (o MultiplexOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A list of availability zones for the multiplex.
func (o MultiplexOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The unique id of the multiplex.
func (o MultiplexOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A list of the multiplex output destinations.
func (o MultiplexOutput) Destinations() MultiplexOutputDestinationArrayOutput {
	return o.ApplyT(func(v *Multiplex) MultiplexOutputDestinationArrayOutput { return v.Destinations }).(MultiplexOutputDestinationArrayOutput)
}

// Configuration for a multiplex event.
func (o MultiplexOutput) MultiplexSettings() MultiplexSettingsOutput {
	return o.ApplyT(func(v *Multiplex) MultiplexSettingsOutput { return v.MultiplexSettings }).(MultiplexSettingsOutput)
}

// Name of multiplex.
func (o MultiplexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of currently healthy pipelines.
func (o MultiplexOutput) PipelinesRunningCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.IntOutput { return v.PipelinesRunningCount }).(pulumi.IntOutput)
}

// The number of programs in the multiplex.
func (o MultiplexOutput) ProgramCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Multiplex) pulumi.IntOutput { return v.ProgramCount }).(pulumi.IntOutput)
}

func (o MultiplexOutput) State() MultiplexStateEnumOutput {
	return o.ApplyT(func(v *Multiplex) MultiplexStateEnumOutput { return v.State }).(MultiplexStateEnumOutput)
}

// A collection of key-value pairs.
func (o MultiplexOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Multiplex) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MultiplexInput)(nil)).Elem(), &Multiplex{})
	pulumi.RegisterOutputType(MultiplexOutput{})
}
