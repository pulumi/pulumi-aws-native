// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::MediaLive::Network.
func LookupNetwork(ctx *pulumi.Context, args *LookupNetworkArgs, opts ...pulumi.InvokeOption) (*LookupNetworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkResult
	err := ctx.Invoke("aws-native:medialive:getNetwork", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNetworkArgs struct {
	// The unique ID of the Network.
	Id string `pulumi:"id"`
}

type LookupNetworkResult struct {
	// The ARN of the Network.
	Arn                  *string  `pulumi:"arn"`
	AssociatedClusterIds []string `pulumi:"associatedClusterIds"`
	// The unique ID of the Network.
	Id *string `pulumi:"id"`
	// The list of IP address cidr pools for the network
	IpPools []NetworkIpPool `pulumi:"ipPools"`
	// The user-specified name of the Network to be created.
	Name *string `pulumi:"name"`
	// The routes for the network
	Routes []NetworkRoute `pulumi:"routes"`
	// The current state of the Network.
	State *NetworkStateEnum `pulumi:"state"`
	// A collection of key-value pairs.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupNetworkOutput(ctx *pulumi.Context, args LookupNetworkOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkResultOutput, error) {
			args := v.(LookupNetworkArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNetworkResult
			secret, err := ctx.InvokePackageRaw("aws-native:medialive:getNetwork", args, &rv, "", opts...)
			if err != nil {
				return LookupNetworkResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNetworkResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNetworkResultOutput), nil
			}
			return output, nil
		}).(LookupNetworkResultOutput)
}

type LookupNetworkOutputArgs struct {
	// The unique ID of the Network.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkArgs)(nil)).Elem()
}

type LookupNetworkResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkResult)(nil)).Elem()
}

func (o LookupNetworkResultOutput) ToLookupNetworkResultOutput() LookupNetworkResultOutput {
	return o
}

func (o LookupNetworkResultOutput) ToLookupNetworkResultOutputWithContext(ctx context.Context) LookupNetworkResultOutput {
	return o
}

// The ARN of the Network.
func (o LookupNetworkResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupNetworkResultOutput) AssociatedClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []string { return v.AssociatedClusterIds }).(pulumi.StringArrayOutput)
}

// The unique ID of the Network.
func (o LookupNetworkResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of IP address cidr pools for the network
func (o LookupNetworkResultOutput) IpPools() NetworkIpPoolArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []NetworkIpPool { return v.IpPools }).(NetworkIpPoolArrayOutput)
}

// The user-specified name of the Network to be created.
func (o LookupNetworkResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The routes for the network
func (o LookupNetworkResultOutput) Routes() NetworkRouteArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []NetworkRoute { return v.Routes }).(NetworkRouteArrayOutput)
}

// The current state of the Network.
func (o LookupNetworkResultOutput) State() NetworkStateEnumPtrOutput {
	return o.ApplyT(func(v LookupNetworkResult) *NetworkStateEnum { return v.State }).(NetworkStateEnumPtrOutput)
}

// A collection of key-value pairs.
func (o LookupNetworkResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupNetworkResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkResultOutput{})
}
