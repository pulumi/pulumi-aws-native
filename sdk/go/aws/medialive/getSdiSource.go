// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::SdiSource Resource Type
func LookupSdiSource(ctx *pulumi.Context, args *LookupSdiSourceArgs, opts ...pulumi.InvokeOption) (*LookupSdiSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSdiSourceResult
	err := ctx.Invoke("aws-native:medialive:getSdiSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSdiSourceArgs struct {
	// The unique identifier of the SdiSource.
	Id string `pulumi:"id"`
}

type LookupSdiSourceResult struct {
	// The unique arn of the SdiSource.
	Arn *string `pulumi:"arn"`
	// The unique identifier of the SdiSource.
	Id *string `pulumi:"id"`
	// The list of inputs currently using this SDI source.
	Inputs []string       `pulumi:"inputs"`
	Mode   *SdiSourceMode `pulumi:"mode"`
	// The name of the SdiSource.
	Name  *string             `pulumi:"name"`
	State *SdiSourceStateEnum `pulumi:"state"`
	// A collection of key-value pairs.
	Tags []aws.Tag      `pulumi:"tags"`
	Type *SdiSourceType `pulumi:"type"`
}

func LookupSdiSourceOutput(ctx *pulumi.Context, args LookupSdiSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSdiSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSdiSourceResultOutput, error) {
			args := v.(LookupSdiSourceArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSdiSourceResult
			secret, err := ctx.InvokePackageRaw("aws-native:medialive:getSdiSource", args, &rv, "", opts...)
			if err != nil {
				return LookupSdiSourceResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSdiSourceResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSdiSourceResultOutput), nil
			}
			return output, nil
		}).(LookupSdiSourceResultOutput)
}

type LookupSdiSourceOutputArgs struct {
	// The unique identifier of the SdiSource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupSdiSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSdiSourceArgs)(nil)).Elem()
}

type LookupSdiSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSdiSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSdiSourceResult)(nil)).Elem()
}

func (o LookupSdiSourceResultOutput) ToLookupSdiSourceResultOutput() LookupSdiSourceResultOutput {
	return o
}

func (o LookupSdiSourceResultOutput) ToLookupSdiSourceResultOutputWithContext(ctx context.Context) LookupSdiSourceResultOutput {
	return o
}

// The unique arn of the SdiSource.
func (o LookupSdiSourceResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The unique identifier of the SdiSource.
func (o LookupSdiSourceResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of inputs currently using this SDI source.
func (o LookupSdiSourceResultOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

func (o LookupSdiSourceResultOutput) Mode() SdiSourceModePtrOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) *SdiSourceMode { return v.Mode }).(SdiSourceModePtrOutput)
}

// The name of the SdiSource.
func (o LookupSdiSourceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupSdiSourceResultOutput) State() SdiSourceStateEnumPtrOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) *SdiSourceStateEnum { return v.State }).(SdiSourceStateEnumPtrOutput)
}

// A collection of key-value pairs.
func (o LookupSdiSourceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func (o LookupSdiSourceResultOutput) Type() SdiSourceTypePtrOutput {
	return o.ApplyT(func(v LookupSdiSourceResult) *SdiSourceType { return v.Type }).(SdiSourceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSdiSourceResultOutput{})
}
