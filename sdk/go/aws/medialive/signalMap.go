// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::SignalMap Resource Type
type SignalMap struct {
	pulumi.CustomResourceState

	// A signal map's ARN (Amazon Resource Name)
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A signal map's id.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
	CloudWatchAlarmTemplateGroupIdentifiers pulumi.StringArrayOutput `pulumi:"cloudWatchAlarmTemplateGroupIdentifiers"`
	// An alarm template group's id.
	CloudWatchAlarmTemplateGroupIds pulumi.StringArrayOutput `pulumi:"cloudWatchAlarmTemplateGroupIds"`
	// The date and time of resource creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A resource's optional description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A top-level supported AWS resource ARN to discovery a signal map from.
	DiscoveryEntryPointArn pulumi.StringOutput `pulumi:"discoveryEntryPointArn"`
	// Error message associated with a failed creation or failed update attempt of a signal map.
	ErrorMessage pulumi.StringOutput `pulumi:"errorMessage"`
	// An eventbridge rule template group's identifier. Can be either be its id or current name.
	EventBridgeRuleTemplateGroupIdentifiers pulumi.StringArrayOutput `pulumi:"eventBridgeRuleTemplateGroupIdentifiers"`
	// An eventbridge rule template group's id.
	EventBridgeRuleTemplateGroupIds pulumi.StringArrayOutput        `pulumi:"eventBridgeRuleTemplateGroupIds"`
	FailedMediaResourceMap          SignalMapMediaResourceMapOutput `pulumi:"failedMediaResourceMap"`
	// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
	ForceRediscovery pulumi.BoolPtrOutput `pulumi:"forceRediscovery"`
	Identifier       pulumi.StringOutput  `pulumi:"identifier"`
	// The date and time of latest discovery.
	LastDiscoveredAt                pulumi.StringOutput                        `pulumi:"lastDiscoveredAt"`
	LastSuccessfulMonitorDeployment SignalMapSuccessfulMonitorDeploymentOutput `pulumi:"lastSuccessfulMonitorDeployment"`
	MediaResourceMap                SignalMapMediaResourceMapOutput            `pulumi:"mediaResourceMap"`
	// The date and time of latest resource modification.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// If true, there are pending monitor changes for this signal map that can be deployed.
	MonitorChangesPendingDeployment pulumi.BoolOutput                `pulumi:"monitorChangesPendingDeployment"`
	MonitorDeployment               SignalMapMonitorDeploymentOutput `pulumi:"monitorDeployment"`
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name pulumi.StringOutput `pulumi:"name"`
	// A signal map's current status, which is dependent on its lifecycle actions or associated jobs.
	Status SignalMapStatusOutput  `pulumi:"status"`
	Tags   pulumi.StringMapOutput `pulumi:"tags"`
}

// NewSignalMap registers a new resource with the given unique name, arguments, and options.
func NewSignalMap(ctx *pulumi.Context,
	name string, args *SignalMapArgs, opts ...pulumi.ResourceOption) (*SignalMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiscoveryEntryPointArn == nil {
		return nil, errors.New("invalid value for required argument 'DiscoveryEntryPointArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SignalMap
	err := ctx.RegisterResource("aws-native:medialive:SignalMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSignalMap gets an existing SignalMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignalMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SignalMapState, opts ...pulumi.ResourceOption) (*SignalMap, error) {
	var resource SignalMap
	err := ctx.ReadResource("aws-native:medialive:SignalMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SignalMap resources.
type signalMapState struct {
}

type SignalMapState struct {
}

func (SignalMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*signalMapState)(nil)).Elem()
}

type signalMapArgs struct {
	// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
	CloudWatchAlarmTemplateGroupIdentifiers []string `pulumi:"cloudWatchAlarmTemplateGroupIdentifiers"`
	// A resource's optional description.
	Description *string `pulumi:"description"`
	// A top-level supported AWS resource ARN to discovery a signal map from.
	DiscoveryEntryPointArn string `pulumi:"discoveryEntryPointArn"`
	// An eventbridge rule template group's identifier. Can be either be its id or current name.
	EventBridgeRuleTemplateGroupIdentifiers []string `pulumi:"eventBridgeRuleTemplateGroupIdentifiers"`
	// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
	ForceRediscovery *bool `pulumi:"forceRediscovery"`
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name *string           `pulumi:"name"`
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SignalMap resource.
type SignalMapArgs struct {
	// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
	CloudWatchAlarmTemplateGroupIdentifiers pulumi.StringArrayInput
	// A resource's optional description.
	Description pulumi.StringPtrInput
	// A top-level supported AWS resource ARN to discovery a signal map from.
	DiscoveryEntryPointArn pulumi.StringInput
	// An eventbridge rule template group's identifier. Can be either be its id or current name.
	EventBridgeRuleTemplateGroupIdentifiers pulumi.StringArrayInput
	// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
	ForceRediscovery pulumi.BoolPtrInput
	// A resource's name. Names must be unique within the scope of a resource type in a specific region.
	Name pulumi.StringPtrInput
	Tags pulumi.StringMapInput
}

func (SignalMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signalMapArgs)(nil)).Elem()
}

type SignalMapInput interface {
	pulumi.Input

	ToSignalMapOutput() SignalMapOutput
	ToSignalMapOutputWithContext(ctx context.Context) SignalMapOutput
}

func (*SignalMap) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalMap)(nil)).Elem()
}

func (i *SignalMap) ToSignalMapOutput() SignalMapOutput {
	return i.ToSignalMapOutputWithContext(context.Background())
}

func (i *SignalMap) ToSignalMapOutputWithContext(ctx context.Context) SignalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalMapOutput)
}

type SignalMapOutput struct{ *pulumi.OutputState }

func (SignalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalMap)(nil)).Elem()
}

func (o SignalMapOutput) ToSignalMapOutput() SignalMapOutput {
	return o
}

func (o SignalMapOutput) ToSignalMapOutputWithContext(ctx context.Context) SignalMapOutput {
	return o
}

// A signal map's ARN (Amazon Resource Name)
func (o SignalMapOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A signal map's id.
func (o SignalMapOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
func (o SignalMapOutput) CloudWatchAlarmTemplateGroupIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringArrayOutput { return v.CloudWatchAlarmTemplateGroupIdentifiers }).(pulumi.StringArrayOutput)
}

// An alarm template group's id.
func (o SignalMapOutput) CloudWatchAlarmTemplateGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringArrayOutput { return v.CloudWatchAlarmTemplateGroupIds }).(pulumi.StringArrayOutput)
}

// The date and time of resource creation.
func (o SignalMapOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A resource's optional description.
func (o SignalMapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A top-level supported AWS resource ARN to discovery a signal map from.
func (o SignalMapOutput) DiscoveryEntryPointArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.DiscoveryEntryPointArn }).(pulumi.StringOutput)
}

// Error message associated with a failed creation or failed update attempt of a signal map.
func (o SignalMapOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

// An eventbridge rule template group's identifier. Can be either be its id or current name.
func (o SignalMapOutput) EventBridgeRuleTemplateGroupIdentifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringArrayOutput { return v.EventBridgeRuleTemplateGroupIdentifiers }).(pulumi.StringArrayOutput)
}

// An eventbridge rule template group's id.
func (o SignalMapOutput) EventBridgeRuleTemplateGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringArrayOutput { return v.EventBridgeRuleTemplateGroupIds }).(pulumi.StringArrayOutput)
}

func (o SignalMapOutput) FailedMediaResourceMap() SignalMapMediaResourceMapOutput {
	return o.ApplyT(func(v *SignalMap) SignalMapMediaResourceMapOutput { return v.FailedMediaResourceMap }).(SignalMapMediaResourceMapOutput)
}

// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
func (o SignalMapOutput) ForceRediscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.BoolPtrOutput { return v.ForceRediscovery }).(pulumi.BoolPtrOutput)
}

func (o SignalMapOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The date and time of latest discovery.
func (o SignalMapOutput) LastDiscoveredAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.LastDiscoveredAt }).(pulumi.StringOutput)
}

func (o SignalMapOutput) LastSuccessfulMonitorDeployment() SignalMapSuccessfulMonitorDeploymentOutput {
	return o.ApplyT(func(v *SignalMap) SignalMapSuccessfulMonitorDeploymentOutput {
		return v.LastSuccessfulMonitorDeployment
	}).(SignalMapSuccessfulMonitorDeploymentOutput)
}

func (o SignalMapOutput) MediaResourceMap() SignalMapMediaResourceMapOutput {
	return o.ApplyT(func(v *SignalMap) SignalMapMediaResourceMapOutput { return v.MediaResourceMap }).(SignalMapMediaResourceMapOutput)
}

// The date and time of latest resource modification.
func (o SignalMapOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// If true, there are pending monitor changes for this signal map that can be deployed.
func (o SignalMapOutput) MonitorChangesPendingDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.BoolOutput { return v.MonitorChangesPendingDeployment }).(pulumi.BoolOutput)
}

func (o SignalMapOutput) MonitorDeployment() SignalMapMonitorDeploymentOutput {
	return o.ApplyT(func(v *SignalMap) SignalMapMonitorDeploymentOutput { return v.MonitorDeployment }).(SignalMapMonitorDeploymentOutput)
}

// A resource's name. Names must be unique within the scope of a resource type in a specific region.
func (o SignalMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A signal map's current status, which is dependent on its lifecycle actions or associated jobs.
func (o SignalMapOutput) Status() SignalMapStatusOutput {
	return o.ApplyT(func(v *SignalMap) SignalMapStatusOutput { return v.Status }).(SignalMapStatusOutput)
}

func (o SignalMapOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SignalMap) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SignalMapInput)(nil)).Elem(), &SignalMap{})
	pulumi.RegisterOutputType(SignalMapOutput{})
}
