// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package medialive

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaLive::Cluster Resource Type
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws-native:medialive:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	// The unique ID of the Cluster.
	Id string `pulumi:"id"`
}

type LookupClusterResult struct {
	// The ARN of the Cluster.
	Arn *string `pulumi:"arn"`
	// The MediaLive Channels that are currently running on Nodes in this Cluster.
	ChannelIds []string `pulumi:"channelIds"`
	// The unique ID of the Cluster.
	Id *string `pulumi:"id"`
	// The user-specified name of the Cluster to be created.
	Name            *string                 `pulumi:"name"`
	NetworkSettings *ClusterNetworkSettings `pulumi:"networkSettings"`
	State           *ClusterStateEnum       `pulumi:"state"`
	// A collection of key-value pairs.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterResultOutput, error) {
			args := v.(LookupClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:medialive:getCluster", args, LookupClusterResultOutput{}, options).(LookupClusterResultOutput), nil
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	// The unique ID of the Cluster.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The ARN of the Cluster.
func (o LookupClusterResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The MediaLive Channels that are currently running on Nodes in this Cluster.
func (o LookupClusterResultOutput) ChannelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.ChannelIds }).(pulumi.StringArrayOutput)
}

// The unique ID of the Cluster.
func (o LookupClusterResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The user-specified name of the Cluster to be created.
func (o LookupClusterResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupClusterResultOutput) NetworkSettings() ClusterNetworkSettingsPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterNetworkSettings { return v.NetworkSettings }).(ClusterNetworkSettingsPtrOutput)
}

func (o LookupClusterResultOutput) State() ClusterStateEnumPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterStateEnum { return v.State }).(ClusterStateEnumPtrOutput)
}

// A collection of key-value pairs.
func (o LookupClusterResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
