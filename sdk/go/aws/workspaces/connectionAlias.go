// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::WorkSpaces::ConnectionAlias
type ConnectionAlias struct {
	pulumi.CustomResourceState

	// The identifier of the connection alias, returned as a string.
	AliasId pulumi.StringOutput `pulumi:"aliasId"`
	// Describes a connection alias association that is used for cross-Region redirection. For more information, see [Cross-Region Redirection for Amazon WorkSpaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html) .
	Associations ConnectionAliasAssociationArrayOutput `pulumi:"associations"`
	// The current state of the connection alias, returned as a string.
	ConnectionAliasState ConnectionAliasStateEnumOutput `pulumi:"connectionAliasState"`
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as `www.example.com` .
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// Describes a tag.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewConnectionAlias registers a new resource with the given unique name, arguments, and options.
func NewConnectionAlias(ctx *pulumi.Context,
	name string, args *ConnectionAliasArgs, opts ...pulumi.ResourceOption) (*ConnectionAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionString'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"connectionString",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionAlias
	err := ctx.RegisterResource("aws-native:workspaces:ConnectionAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionAlias gets an existing ConnectionAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionAliasState, opts ...pulumi.ResourceOption) (*ConnectionAlias, error) {
	var resource ConnectionAlias
	err := ctx.ReadResource("aws-native:workspaces:ConnectionAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionAlias resources.
type connectionAliasState struct {
}

type ConnectionAliasState struct {
}

func (ConnectionAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAliasState)(nil)).Elem()
}

type connectionAliasArgs struct {
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as `www.example.com` .
	ConnectionString string `pulumi:"connectionString"`
	// Describes a tag.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectionAlias resource.
type ConnectionAliasArgs struct {
	// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as `www.example.com` .
	ConnectionString pulumi.StringInput
	// Describes a tag.
	Tags aws.CreateOnlyTagArrayInput
}

func (ConnectionAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionAliasArgs)(nil)).Elem()
}

type ConnectionAliasInput interface {
	pulumi.Input

	ToConnectionAliasOutput() ConnectionAliasOutput
	ToConnectionAliasOutputWithContext(ctx context.Context) ConnectionAliasOutput
}

func (*ConnectionAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAlias)(nil)).Elem()
}

func (i *ConnectionAlias) ToConnectionAliasOutput() ConnectionAliasOutput {
	return i.ToConnectionAliasOutputWithContext(context.Background())
}

func (i *ConnectionAlias) ToConnectionAliasOutputWithContext(ctx context.Context) ConnectionAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAliasOutput)
}

type ConnectionAliasOutput struct{ *pulumi.OutputState }

func (ConnectionAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAlias)(nil)).Elem()
}

func (o ConnectionAliasOutput) ToConnectionAliasOutput() ConnectionAliasOutput {
	return o
}

func (o ConnectionAliasOutput) ToConnectionAliasOutputWithContext(ctx context.Context) ConnectionAliasOutput {
	return o
}

// The identifier of the connection alias, returned as a string.
func (o ConnectionAliasOutput) AliasId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringOutput { return v.AliasId }).(pulumi.StringOutput)
}

// Describes a connection alias association that is used for cross-Region redirection. For more information, see [Cross-Region Redirection for Amazon WorkSpaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html) .
func (o ConnectionAliasOutput) Associations() ConnectionAliasAssociationArrayOutput {
	return o.ApplyT(func(v *ConnectionAlias) ConnectionAliasAssociationArrayOutput { return v.Associations }).(ConnectionAliasAssociationArrayOutput)
}

// The current state of the connection alias, returned as a string.
func (o ConnectionAliasOutput) ConnectionAliasState() ConnectionAliasStateEnumOutput {
	return o.ApplyT(func(v *ConnectionAlias) ConnectionAliasStateEnumOutput { return v.ConnectionAliasState }).(ConnectionAliasStateEnumOutput)
}

// The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as `www.example.com` .
func (o ConnectionAliasOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionAlias) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// Describes a tag.
func (o ConnectionAliasOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *ConnectionAlias) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAliasInput)(nil)).Elem(), &ConnectionAlias{})
	pulumi.RegisterOutputType(ConnectionAliasOutput{})
}
