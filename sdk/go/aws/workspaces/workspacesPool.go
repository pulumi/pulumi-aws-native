// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::WorkSpaces::WorkspacesPool
type WorkspacesPool struct {
	pulumi.CustomResourceState

	ApplicationSettings WorkspacesPoolApplicationSettingsPtrOutput `pulumi:"applicationSettings"`
	BundleId            pulumi.StringOutput                        `pulumi:"bundleId"`
	Capacity            WorkspacesPoolCapacityOutput               `pulumi:"capacity"`
	CreatedAt           pulumi.StringOutput                        `pulumi:"createdAt"`
	Description         pulumi.StringPtrOutput                     `pulumi:"description"`
	DirectoryId         pulumi.StringOutput                        `pulumi:"directoryId"`
	PoolArn             pulumi.StringOutput                        `pulumi:"poolArn"`
	PoolId              pulumi.StringOutput                        `pulumi:"poolId"`
	PoolName            pulumi.StringOutput                        `pulumi:"poolName"`
	Tags                aws.TagArrayOutput                         `pulumi:"tags"`
	TimeoutSettings     WorkspacesPoolTimeoutSettingsPtrOutput     `pulumi:"timeoutSettings"`
}

// NewWorkspacesPool registers a new resource with the given unique name, arguments, and options.
func NewWorkspacesPool(ctx *pulumi.Context,
	name string, args *WorkspacesPoolArgs, opts ...pulumi.ResourceOption) (*WorkspacesPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"poolName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspacesPool
	err := ctx.RegisterResource("aws-native:workspaces:WorkspacesPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspacesPool gets an existing WorkspacesPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspacesPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspacesPoolState, opts ...pulumi.ResourceOption) (*WorkspacesPool, error) {
	var resource WorkspacesPool
	err := ctx.ReadResource("aws-native:workspaces:WorkspacesPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspacesPool resources.
type workspacesPoolState struct {
}

type WorkspacesPoolState struct {
}

func (WorkspacesPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspacesPoolState)(nil)).Elem()
}

type workspacesPoolArgs struct {
	ApplicationSettings *WorkspacesPoolApplicationSettings `pulumi:"applicationSettings"`
	BundleId            string                             `pulumi:"bundleId"`
	Capacity            WorkspacesPoolCapacity             `pulumi:"capacity"`
	Description         *string                            `pulumi:"description"`
	DirectoryId         string                             `pulumi:"directoryId"`
	PoolName            *string                            `pulumi:"poolName"`
	Tags                []aws.Tag                          `pulumi:"tags"`
	TimeoutSettings     *WorkspacesPoolTimeoutSettings     `pulumi:"timeoutSettings"`
}

// The set of arguments for constructing a WorkspacesPool resource.
type WorkspacesPoolArgs struct {
	ApplicationSettings WorkspacesPoolApplicationSettingsPtrInput
	BundleId            pulumi.StringInput
	Capacity            WorkspacesPoolCapacityInput
	Description         pulumi.StringPtrInput
	DirectoryId         pulumi.StringInput
	PoolName            pulumi.StringPtrInput
	Tags                aws.TagArrayInput
	TimeoutSettings     WorkspacesPoolTimeoutSettingsPtrInput
}

func (WorkspacesPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspacesPoolArgs)(nil)).Elem()
}

type WorkspacesPoolInput interface {
	pulumi.Input

	ToWorkspacesPoolOutput() WorkspacesPoolOutput
	ToWorkspacesPoolOutputWithContext(ctx context.Context) WorkspacesPoolOutput
}

func (*WorkspacesPool) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspacesPool)(nil)).Elem()
}

func (i *WorkspacesPool) ToWorkspacesPoolOutput() WorkspacesPoolOutput {
	return i.ToWorkspacesPoolOutputWithContext(context.Background())
}

func (i *WorkspacesPool) ToWorkspacesPoolOutputWithContext(ctx context.Context) WorkspacesPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspacesPoolOutput)
}

type WorkspacesPoolOutput struct{ *pulumi.OutputState }

func (WorkspacesPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspacesPool)(nil)).Elem()
}

func (o WorkspacesPoolOutput) ToWorkspacesPoolOutput() WorkspacesPoolOutput {
	return o
}

func (o WorkspacesPoolOutput) ToWorkspacesPoolOutputWithContext(ctx context.Context) WorkspacesPoolOutput {
	return o
}

func (o WorkspacesPoolOutput) ApplicationSettings() WorkspacesPoolApplicationSettingsPtrOutput {
	return o.ApplyT(func(v *WorkspacesPool) WorkspacesPoolApplicationSettingsPtrOutput { return v.ApplicationSettings }).(WorkspacesPoolApplicationSettingsPtrOutput)
}

func (o WorkspacesPoolOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringOutput { return v.BundleId }).(pulumi.StringOutput)
}

func (o WorkspacesPoolOutput) Capacity() WorkspacesPoolCapacityOutput {
	return o.ApplyT(func(v *WorkspacesPool) WorkspacesPoolCapacityOutput { return v.Capacity }).(WorkspacesPoolCapacityOutput)
}

func (o WorkspacesPoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o WorkspacesPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WorkspacesPoolOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

func (o WorkspacesPoolOutput) PoolArn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringOutput { return v.PoolArn }).(pulumi.StringOutput)
}

func (o WorkspacesPoolOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

func (o WorkspacesPoolOutput) PoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacesPool) pulumi.StringOutput { return v.PoolName }).(pulumi.StringOutput)
}

func (o WorkspacesPoolOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *WorkspacesPool) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o WorkspacesPoolOutput) TimeoutSettings() WorkspacesPoolTimeoutSettingsPtrOutput {
	return o.ApplyT(func(v *WorkspacesPool) WorkspacesPoolTimeoutSettingsPtrOutput { return v.TimeoutSettings }).(WorkspacesPoolTimeoutSettingsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspacesPoolInput)(nil)).Elem(), &WorkspacesPool{})
	pulumi.RegisterOutputType(WorkspacesPoolOutput{})
}
