// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::WorkSpaces::Workspace
//
// Deprecated: Workspace is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Workspace struct {
	pulumi.CustomResourceState

	BundleId                    pulumi.StringOutput          `pulumi:"bundleId"`
	DirectoryId                 pulumi.StringOutput          `pulumi:"directoryId"`
	RootVolumeEncryptionEnabled pulumi.BoolPtrOutput         `pulumi:"rootVolumeEncryptionEnabled"`
	Tags                        WorkspaceTagArrayOutput      `pulumi:"tags"`
	UserName                    pulumi.StringOutput          `pulumi:"userName"`
	UserVolumeEncryptionEnabled pulumi.BoolPtrOutput         `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         pulumi.StringPtrOutput       `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         WorkspacePropertiesPtrOutput `pulumi:"workspaceProperties"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BundleId == nil {
		return nil, errors.New("invalid value for required argument 'BundleId'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource Workspace
	err := ctx.RegisterResource("aws-native:workspaces:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("aws-native:workspaces:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
}

type WorkspaceState struct {
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	BundleId                    string               `pulumi:"bundleId"`
	DirectoryId                 string               `pulumi:"directoryId"`
	RootVolumeEncryptionEnabled *bool                `pulumi:"rootVolumeEncryptionEnabled"`
	Tags                        []WorkspaceTag       `pulumi:"tags"`
	UserName                    string               `pulumi:"userName"`
	UserVolumeEncryptionEnabled *bool                `pulumi:"userVolumeEncryptionEnabled"`
	VolumeEncryptionKey         *string              `pulumi:"volumeEncryptionKey"`
	WorkspaceProperties         *WorkspaceProperties `pulumi:"workspaceProperties"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	BundleId                    pulumi.StringInput
	DirectoryId                 pulumi.StringInput
	RootVolumeEncryptionEnabled pulumi.BoolPtrInput
	Tags                        WorkspaceTagArrayInput
	UserName                    pulumi.StringInput
	UserVolumeEncryptionEnabled pulumi.BoolPtrInput
	VolumeEncryptionKey         pulumi.StringPtrInput
	WorkspaceProperties         WorkspacePropertiesPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.BundleId }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) RootVolumeEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.RootVolumeEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

func (o WorkspaceOutput) Tags() WorkspaceTagArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceTagArrayOutput { return v.Tags }).(WorkspaceTagArrayOutput)
}

func (o WorkspaceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func (o WorkspaceOutput) UserVolumeEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.UserVolumeEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

func (o WorkspaceOutput) VolumeEncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.VolumeEncryptionKey }).(pulumi.StringPtrOutput)
}

func (o WorkspaceOutput) WorkspaceProperties() WorkspacePropertiesPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspacePropertiesPtrOutput { return v.WorkspaceProperties }).(WorkspacePropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
}
