// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrcontainers

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type VirtualClusterContainerInfo struct {
	EksInfo VirtualClusterEksInfo `pulumi:"eksInfo"`
}

// VirtualClusterContainerInfoInput is an input type that accepts VirtualClusterContainerInfoArgs and VirtualClusterContainerInfoOutput values.
// You can construct a concrete instance of `VirtualClusterContainerInfoInput` via:
//
//	VirtualClusterContainerInfoArgs{...}
type VirtualClusterContainerInfoInput interface {
	pulumi.Input

	ToVirtualClusterContainerInfoOutput() VirtualClusterContainerInfoOutput
	ToVirtualClusterContainerInfoOutputWithContext(context.Context) VirtualClusterContainerInfoOutput
}

type VirtualClusterContainerInfoArgs struct {
	EksInfo VirtualClusterEksInfoInput `pulumi:"eksInfo"`
}

func (VirtualClusterContainerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualClusterContainerInfo)(nil)).Elem()
}

func (i VirtualClusterContainerInfoArgs) ToVirtualClusterContainerInfoOutput() VirtualClusterContainerInfoOutput {
	return i.ToVirtualClusterContainerInfoOutputWithContext(context.Background())
}

func (i VirtualClusterContainerInfoArgs) ToVirtualClusterContainerInfoOutputWithContext(ctx context.Context) VirtualClusterContainerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualClusterContainerInfoOutput)
}

type VirtualClusterContainerInfoOutput struct{ *pulumi.OutputState }

func (VirtualClusterContainerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualClusterContainerInfo)(nil)).Elem()
}

func (o VirtualClusterContainerInfoOutput) ToVirtualClusterContainerInfoOutput() VirtualClusterContainerInfoOutput {
	return o
}

func (o VirtualClusterContainerInfoOutput) ToVirtualClusterContainerInfoOutputWithContext(ctx context.Context) VirtualClusterContainerInfoOutput {
	return o
}

func (o VirtualClusterContainerInfoOutput) EksInfo() VirtualClusterEksInfoOutput {
	return o.ApplyT(func(v VirtualClusterContainerInfo) VirtualClusterEksInfo { return v.EksInfo }).(VirtualClusterEksInfoOutput)
}

type VirtualClusterContainerProvider struct {
	// The ID of the container cluster
	Id   string                      `pulumi:"id"`
	Info VirtualClusterContainerInfo `pulumi:"info"`
	// The type of the container provider
	Type string `pulumi:"type"`
}

// VirtualClusterContainerProviderInput is an input type that accepts VirtualClusterContainerProviderArgs and VirtualClusterContainerProviderOutput values.
// You can construct a concrete instance of `VirtualClusterContainerProviderInput` via:
//
//	VirtualClusterContainerProviderArgs{...}
type VirtualClusterContainerProviderInput interface {
	pulumi.Input

	ToVirtualClusterContainerProviderOutput() VirtualClusterContainerProviderOutput
	ToVirtualClusterContainerProviderOutputWithContext(context.Context) VirtualClusterContainerProviderOutput
}

type VirtualClusterContainerProviderArgs struct {
	// The ID of the container cluster
	Id   pulumi.StringInput               `pulumi:"id"`
	Info VirtualClusterContainerInfoInput `pulumi:"info"`
	// The type of the container provider
	Type pulumi.StringInput `pulumi:"type"`
}

func (VirtualClusterContainerProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualClusterContainerProvider)(nil)).Elem()
}

func (i VirtualClusterContainerProviderArgs) ToVirtualClusterContainerProviderOutput() VirtualClusterContainerProviderOutput {
	return i.ToVirtualClusterContainerProviderOutputWithContext(context.Background())
}

func (i VirtualClusterContainerProviderArgs) ToVirtualClusterContainerProviderOutputWithContext(ctx context.Context) VirtualClusterContainerProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualClusterContainerProviderOutput)
}

type VirtualClusterContainerProviderOutput struct{ *pulumi.OutputState }

func (VirtualClusterContainerProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualClusterContainerProvider)(nil)).Elem()
}

func (o VirtualClusterContainerProviderOutput) ToVirtualClusterContainerProviderOutput() VirtualClusterContainerProviderOutput {
	return o
}

func (o VirtualClusterContainerProviderOutput) ToVirtualClusterContainerProviderOutputWithContext(ctx context.Context) VirtualClusterContainerProviderOutput {
	return o
}

// The ID of the container cluster
func (o VirtualClusterContainerProviderOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualClusterContainerProvider) string { return v.Id }).(pulumi.StringOutput)
}

func (o VirtualClusterContainerProviderOutput) Info() VirtualClusterContainerInfoOutput {
	return o.ApplyT(func(v VirtualClusterContainerProvider) VirtualClusterContainerInfo { return v.Info }).(VirtualClusterContainerInfoOutput)
}

// The type of the container provider
func (o VirtualClusterContainerProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualClusterContainerProvider) string { return v.Type }).(pulumi.StringOutput)
}

type VirtualClusterEksInfo struct {
	Namespace string `pulumi:"namespace"`
}

// VirtualClusterEksInfoInput is an input type that accepts VirtualClusterEksInfoArgs and VirtualClusterEksInfoOutput values.
// You can construct a concrete instance of `VirtualClusterEksInfoInput` via:
//
//	VirtualClusterEksInfoArgs{...}
type VirtualClusterEksInfoInput interface {
	pulumi.Input

	ToVirtualClusterEksInfoOutput() VirtualClusterEksInfoOutput
	ToVirtualClusterEksInfoOutputWithContext(context.Context) VirtualClusterEksInfoOutput
}

type VirtualClusterEksInfoArgs struct {
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (VirtualClusterEksInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualClusterEksInfo)(nil)).Elem()
}

func (i VirtualClusterEksInfoArgs) ToVirtualClusterEksInfoOutput() VirtualClusterEksInfoOutput {
	return i.ToVirtualClusterEksInfoOutputWithContext(context.Background())
}

func (i VirtualClusterEksInfoArgs) ToVirtualClusterEksInfoOutputWithContext(ctx context.Context) VirtualClusterEksInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualClusterEksInfoOutput)
}

type VirtualClusterEksInfoOutput struct{ *pulumi.OutputState }

func (VirtualClusterEksInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualClusterEksInfo)(nil)).Elem()
}

func (o VirtualClusterEksInfoOutput) ToVirtualClusterEksInfoOutput() VirtualClusterEksInfoOutput {
	return o
}

func (o VirtualClusterEksInfoOutput) ToVirtualClusterEksInfoOutputWithContext(ctx context.Context) VirtualClusterEksInfoOutput {
	return o
}

func (o VirtualClusterEksInfoOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualClusterEksInfo) string { return v.Namespace }).(pulumi.StringOutput)
}

// An arbitrary set of tags (key-value pairs) for this virtual cluster.
type VirtualClusterTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualClusterContainerInfoInput)(nil)).Elem(), VirtualClusterContainerInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualClusterContainerProviderInput)(nil)).Elem(), VirtualClusterContainerProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualClusterEksInfoInput)(nil)).Elem(), VirtualClusterEksInfoArgs{})
	pulumi.RegisterOutputType(VirtualClusterContainerInfoOutput{})
	pulumi.RegisterOutputType(VirtualClusterContainerProviderOutput{})
	pulumi.RegisterOutputType(VirtualClusterEksInfoOutput{})
}
