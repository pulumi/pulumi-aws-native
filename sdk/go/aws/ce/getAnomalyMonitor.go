// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS Cost Anomaly Detection leverages advanced Machine Learning technologies to identify anomalous spend and root causes, so you can quickly take action. You can use Cost Anomaly Detection by creating monitor.
func LookupAnomalyMonitor(ctx *pulumi.Context, args *LookupAnomalyMonitorArgs, opts ...pulumi.InvokeOption) (*LookupAnomalyMonitorResult, error) {
	var rv LookupAnomalyMonitorResult
	err := ctx.Invoke("aws-native:ce:getAnomalyMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAnomalyMonitorArgs struct {
	MonitorArn string `pulumi:"monitorArn"`
}

type LookupAnomalyMonitorResult struct {
	// The date when the monitor was created.
	CreationDate *string `pulumi:"creationDate"`
	// The value for evaluated dimensions.
	DimensionalValueCount *int `pulumi:"dimensionalValueCount"`
	// The date when the monitor last evaluated for anomalies.
	LastEvaluatedDate *string `pulumi:"lastEvaluatedDate"`
	// The date when the monitor was last updated.
	LastUpdatedDate *string `pulumi:"lastUpdatedDate"`
	MonitorArn      *string `pulumi:"monitorArn"`
	// The name of the monitor.
	MonitorName *string `pulumi:"monitorName"`
}

func LookupAnomalyMonitorOutput(ctx *pulumi.Context, args LookupAnomalyMonitorOutputArgs, opts ...pulumi.InvokeOption) LookupAnomalyMonitorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAnomalyMonitorResult, error) {
			args := v.(LookupAnomalyMonitorArgs)
			r, err := LookupAnomalyMonitor(ctx, &args, opts...)
			return *r, err
		}).(LookupAnomalyMonitorResultOutput)
}

type LookupAnomalyMonitorOutputArgs struct {
	MonitorArn pulumi.StringInput `pulumi:"monitorArn"`
}

func (LookupAnomalyMonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnomalyMonitorArgs)(nil)).Elem()
}

type LookupAnomalyMonitorResultOutput struct{ *pulumi.OutputState }

func (LookupAnomalyMonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnomalyMonitorResult)(nil)).Elem()
}

func (o LookupAnomalyMonitorResultOutput) ToLookupAnomalyMonitorResultOutput() LookupAnomalyMonitorResultOutput {
	return o
}

func (o LookupAnomalyMonitorResultOutput) ToLookupAnomalyMonitorResultOutputWithContext(ctx context.Context) LookupAnomalyMonitorResultOutput {
	return o
}

// The date when the monitor was created.
func (o LookupAnomalyMonitorResultOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAnomalyMonitorResult) *string { return v.CreationDate }).(pulumi.StringPtrOutput)
}

// The value for evaluated dimensions.
func (o LookupAnomalyMonitorResultOutput) DimensionalValueCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAnomalyMonitorResult) *int { return v.DimensionalValueCount }).(pulumi.IntPtrOutput)
}

// The date when the monitor last evaluated for anomalies.
func (o LookupAnomalyMonitorResultOutput) LastEvaluatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAnomalyMonitorResult) *string { return v.LastEvaluatedDate }).(pulumi.StringPtrOutput)
}

// The date when the monitor was last updated.
func (o LookupAnomalyMonitorResultOutput) LastUpdatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAnomalyMonitorResult) *string { return v.LastUpdatedDate }).(pulumi.StringPtrOutput)
}

func (o LookupAnomalyMonitorResultOutput) MonitorArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAnomalyMonitorResult) *string { return v.MonitorArn }).(pulumi.StringPtrOutput)
}

// The name of the monitor.
func (o LookupAnomalyMonitorResultOutput) MonitorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAnomalyMonitorResult) *string { return v.MonitorName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAnomalyMonitorResultOutput{})
}
