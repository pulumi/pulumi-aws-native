// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datapipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PipelineField struct {
	Key         string  `pulumi:"key"`
	RefValue    *string `pulumi:"refValue"`
	StringValue *string `pulumi:"stringValue"`
}

// PipelineFieldInput is an input type that accepts PipelineFieldArgs and PipelineFieldOutput values.
// You can construct a concrete instance of `PipelineFieldInput` via:
//
//          PipelineFieldArgs{...}
type PipelineFieldInput interface {
	pulumi.Input

	ToPipelineFieldOutput() PipelineFieldOutput
	ToPipelineFieldOutputWithContext(context.Context) PipelineFieldOutput
}

type PipelineFieldArgs struct {
	Key         pulumi.StringInput    `pulumi:"key"`
	RefValue    pulumi.StringPtrInput `pulumi:"refValue"`
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
}

func (PipelineFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineField)(nil)).Elem()
}

func (i PipelineFieldArgs) ToPipelineFieldOutput() PipelineFieldOutput {
	return i.ToPipelineFieldOutputWithContext(context.Background())
}

func (i PipelineFieldArgs) ToPipelineFieldOutputWithContext(ctx context.Context) PipelineFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFieldOutput)
}

// PipelineFieldArrayInput is an input type that accepts PipelineFieldArray and PipelineFieldArrayOutput values.
// You can construct a concrete instance of `PipelineFieldArrayInput` via:
//
//          PipelineFieldArray{ PipelineFieldArgs{...} }
type PipelineFieldArrayInput interface {
	pulumi.Input

	ToPipelineFieldArrayOutput() PipelineFieldArrayOutput
	ToPipelineFieldArrayOutputWithContext(context.Context) PipelineFieldArrayOutput
}

type PipelineFieldArray []PipelineFieldInput

func (PipelineFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineField)(nil)).Elem()
}

func (i PipelineFieldArray) ToPipelineFieldArrayOutput() PipelineFieldArrayOutput {
	return i.ToPipelineFieldArrayOutputWithContext(context.Background())
}

func (i PipelineFieldArray) ToPipelineFieldArrayOutputWithContext(ctx context.Context) PipelineFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFieldArrayOutput)
}

type PipelineFieldOutput struct{ *pulumi.OutputState }

func (PipelineFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineField)(nil)).Elem()
}

func (o PipelineFieldOutput) ToPipelineFieldOutput() PipelineFieldOutput {
	return o
}

func (o PipelineFieldOutput) ToPipelineFieldOutputWithContext(ctx context.Context) PipelineFieldOutput {
	return o
}

func (o PipelineFieldOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineField) string { return v.Key }).(pulumi.StringOutput)
}

func (o PipelineFieldOutput) RefValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineField) *string { return v.RefValue }).(pulumi.StringPtrOutput)
}

func (o PipelineFieldOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineField) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

type PipelineFieldArrayOutput struct{ *pulumi.OutputState }

func (PipelineFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineField)(nil)).Elem()
}

func (o PipelineFieldArrayOutput) ToPipelineFieldArrayOutput() PipelineFieldArrayOutput {
	return o
}

func (o PipelineFieldArrayOutput) ToPipelineFieldArrayOutputWithContext(ctx context.Context) PipelineFieldArrayOutput {
	return o
}

func (o PipelineFieldArrayOutput) Index(i pulumi.IntInput) PipelineFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineField {
		return vs[0].([]PipelineField)[vs[1].(int)]
	}).(PipelineFieldOutput)
}

type PipelineObject struct {
	Fields []PipelineField `pulumi:"fields"`
	Id     string          `pulumi:"id"`
	Name   string          `pulumi:"name"`
}

// PipelineObjectInput is an input type that accepts PipelineObjectArgs and PipelineObjectOutput values.
// You can construct a concrete instance of `PipelineObjectInput` via:
//
//          PipelineObjectArgs{...}
type PipelineObjectInput interface {
	pulumi.Input

	ToPipelineObjectOutput() PipelineObjectOutput
	ToPipelineObjectOutputWithContext(context.Context) PipelineObjectOutput
}

type PipelineObjectArgs struct {
	Fields PipelineFieldArrayInput `pulumi:"fields"`
	Id     pulumi.StringInput      `pulumi:"id"`
	Name   pulumi.StringInput      `pulumi:"name"`
}

func (PipelineObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineObject)(nil)).Elem()
}

func (i PipelineObjectArgs) ToPipelineObjectOutput() PipelineObjectOutput {
	return i.ToPipelineObjectOutputWithContext(context.Background())
}

func (i PipelineObjectArgs) ToPipelineObjectOutputWithContext(ctx context.Context) PipelineObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineObjectOutput)
}

// PipelineObjectArrayInput is an input type that accepts PipelineObjectArray and PipelineObjectArrayOutput values.
// You can construct a concrete instance of `PipelineObjectArrayInput` via:
//
//          PipelineObjectArray{ PipelineObjectArgs{...} }
type PipelineObjectArrayInput interface {
	pulumi.Input

	ToPipelineObjectArrayOutput() PipelineObjectArrayOutput
	ToPipelineObjectArrayOutputWithContext(context.Context) PipelineObjectArrayOutput
}

type PipelineObjectArray []PipelineObjectInput

func (PipelineObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineObject)(nil)).Elem()
}

func (i PipelineObjectArray) ToPipelineObjectArrayOutput() PipelineObjectArrayOutput {
	return i.ToPipelineObjectArrayOutputWithContext(context.Background())
}

func (i PipelineObjectArray) ToPipelineObjectArrayOutputWithContext(ctx context.Context) PipelineObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineObjectArrayOutput)
}

type PipelineObjectOutput struct{ *pulumi.OutputState }

func (PipelineObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineObject)(nil)).Elem()
}

func (o PipelineObjectOutput) ToPipelineObjectOutput() PipelineObjectOutput {
	return o
}

func (o PipelineObjectOutput) ToPipelineObjectOutputWithContext(ctx context.Context) PipelineObjectOutput {
	return o
}

func (o PipelineObjectOutput) Fields() PipelineFieldArrayOutput {
	return o.ApplyT(func(v PipelineObject) []PipelineField { return v.Fields }).(PipelineFieldArrayOutput)
}

func (o PipelineObjectOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineObject) string { return v.Id }).(pulumi.StringOutput)
}

func (o PipelineObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineObject) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineObjectArrayOutput struct{ *pulumi.OutputState }

func (PipelineObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineObject)(nil)).Elem()
}

func (o PipelineObjectArrayOutput) ToPipelineObjectArrayOutput() PipelineObjectArrayOutput {
	return o
}

func (o PipelineObjectArrayOutput) ToPipelineObjectArrayOutputWithContext(ctx context.Context) PipelineObjectArrayOutput {
	return o
}

func (o PipelineObjectArrayOutput) Index(i pulumi.IntInput) PipelineObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineObject {
		return vs[0].([]PipelineObject)[vs[1].(int)]
	}).(PipelineObjectOutput)
}

type PipelineParameterAttribute struct {
	Key         string `pulumi:"key"`
	StringValue string `pulumi:"stringValue"`
}

// PipelineParameterAttributeInput is an input type that accepts PipelineParameterAttributeArgs and PipelineParameterAttributeOutput values.
// You can construct a concrete instance of `PipelineParameterAttributeInput` via:
//
//          PipelineParameterAttributeArgs{...}
type PipelineParameterAttributeInput interface {
	pulumi.Input

	ToPipelineParameterAttributeOutput() PipelineParameterAttributeOutput
	ToPipelineParameterAttributeOutputWithContext(context.Context) PipelineParameterAttributeOutput
}

type PipelineParameterAttributeArgs struct {
	Key         pulumi.StringInput `pulumi:"key"`
	StringValue pulumi.StringInput `pulumi:"stringValue"`
}

func (PipelineParameterAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterAttribute)(nil)).Elem()
}

func (i PipelineParameterAttributeArgs) ToPipelineParameterAttributeOutput() PipelineParameterAttributeOutput {
	return i.ToPipelineParameterAttributeOutputWithContext(context.Background())
}

func (i PipelineParameterAttributeArgs) ToPipelineParameterAttributeOutputWithContext(ctx context.Context) PipelineParameterAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterAttributeOutput)
}

// PipelineParameterAttributeArrayInput is an input type that accepts PipelineParameterAttributeArray and PipelineParameterAttributeArrayOutput values.
// You can construct a concrete instance of `PipelineParameterAttributeArrayInput` via:
//
//          PipelineParameterAttributeArray{ PipelineParameterAttributeArgs{...} }
type PipelineParameterAttributeArrayInput interface {
	pulumi.Input

	ToPipelineParameterAttributeArrayOutput() PipelineParameterAttributeArrayOutput
	ToPipelineParameterAttributeArrayOutputWithContext(context.Context) PipelineParameterAttributeArrayOutput
}

type PipelineParameterAttributeArray []PipelineParameterAttributeInput

func (PipelineParameterAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterAttribute)(nil)).Elem()
}

func (i PipelineParameterAttributeArray) ToPipelineParameterAttributeArrayOutput() PipelineParameterAttributeArrayOutput {
	return i.ToPipelineParameterAttributeArrayOutputWithContext(context.Background())
}

func (i PipelineParameterAttributeArray) ToPipelineParameterAttributeArrayOutputWithContext(ctx context.Context) PipelineParameterAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterAttributeArrayOutput)
}

type PipelineParameterAttributeOutput struct{ *pulumi.OutputState }

func (PipelineParameterAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterAttribute)(nil)).Elem()
}

func (o PipelineParameterAttributeOutput) ToPipelineParameterAttributeOutput() PipelineParameterAttributeOutput {
	return o
}

func (o PipelineParameterAttributeOutput) ToPipelineParameterAttributeOutputWithContext(ctx context.Context) PipelineParameterAttributeOutput {
	return o
}

func (o PipelineParameterAttributeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterAttribute) string { return v.Key }).(pulumi.StringOutput)
}

func (o PipelineParameterAttributeOutput) StringValue() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterAttribute) string { return v.StringValue }).(pulumi.StringOutput)
}

type PipelineParameterAttributeArrayOutput struct{ *pulumi.OutputState }

func (PipelineParameterAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterAttribute)(nil)).Elem()
}

func (o PipelineParameterAttributeArrayOutput) ToPipelineParameterAttributeArrayOutput() PipelineParameterAttributeArrayOutput {
	return o
}

func (o PipelineParameterAttributeArrayOutput) ToPipelineParameterAttributeArrayOutputWithContext(ctx context.Context) PipelineParameterAttributeArrayOutput {
	return o
}

func (o PipelineParameterAttributeArrayOutput) Index(i pulumi.IntInput) PipelineParameterAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineParameterAttribute {
		return vs[0].([]PipelineParameterAttribute)[vs[1].(int)]
	}).(PipelineParameterAttributeOutput)
}

type PipelineParameterObject struct {
	Attributes []PipelineParameterAttribute `pulumi:"attributes"`
	Id         string                       `pulumi:"id"`
}

// PipelineParameterObjectInput is an input type that accepts PipelineParameterObjectArgs and PipelineParameterObjectOutput values.
// You can construct a concrete instance of `PipelineParameterObjectInput` via:
//
//          PipelineParameterObjectArgs{...}
type PipelineParameterObjectInput interface {
	pulumi.Input

	ToPipelineParameterObjectOutput() PipelineParameterObjectOutput
	ToPipelineParameterObjectOutputWithContext(context.Context) PipelineParameterObjectOutput
}

type PipelineParameterObjectArgs struct {
	Attributes PipelineParameterAttributeArrayInput `pulumi:"attributes"`
	Id         pulumi.StringInput                   `pulumi:"id"`
}

func (PipelineParameterObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterObject)(nil)).Elem()
}

func (i PipelineParameterObjectArgs) ToPipelineParameterObjectOutput() PipelineParameterObjectOutput {
	return i.ToPipelineParameterObjectOutputWithContext(context.Background())
}

func (i PipelineParameterObjectArgs) ToPipelineParameterObjectOutputWithContext(ctx context.Context) PipelineParameterObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterObjectOutput)
}

// PipelineParameterObjectArrayInput is an input type that accepts PipelineParameterObjectArray and PipelineParameterObjectArrayOutput values.
// You can construct a concrete instance of `PipelineParameterObjectArrayInput` via:
//
//          PipelineParameterObjectArray{ PipelineParameterObjectArgs{...} }
type PipelineParameterObjectArrayInput interface {
	pulumi.Input

	ToPipelineParameterObjectArrayOutput() PipelineParameterObjectArrayOutput
	ToPipelineParameterObjectArrayOutputWithContext(context.Context) PipelineParameterObjectArrayOutput
}

type PipelineParameterObjectArray []PipelineParameterObjectInput

func (PipelineParameterObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterObject)(nil)).Elem()
}

func (i PipelineParameterObjectArray) ToPipelineParameterObjectArrayOutput() PipelineParameterObjectArrayOutput {
	return i.ToPipelineParameterObjectArrayOutputWithContext(context.Background())
}

func (i PipelineParameterObjectArray) ToPipelineParameterObjectArrayOutputWithContext(ctx context.Context) PipelineParameterObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterObjectArrayOutput)
}

type PipelineParameterObjectOutput struct{ *pulumi.OutputState }

func (PipelineParameterObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterObject)(nil)).Elem()
}

func (o PipelineParameterObjectOutput) ToPipelineParameterObjectOutput() PipelineParameterObjectOutput {
	return o
}

func (o PipelineParameterObjectOutput) ToPipelineParameterObjectOutputWithContext(ctx context.Context) PipelineParameterObjectOutput {
	return o
}

func (o PipelineParameterObjectOutput) Attributes() PipelineParameterAttributeArrayOutput {
	return o.ApplyT(func(v PipelineParameterObject) []PipelineParameterAttribute { return v.Attributes }).(PipelineParameterAttributeArrayOutput)
}

func (o PipelineParameterObjectOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterObject) string { return v.Id }).(pulumi.StringOutput)
}

type PipelineParameterObjectArrayOutput struct{ *pulumi.OutputState }

func (PipelineParameterObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterObject)(nil)).Elem()
}

func (o PipelineParameterObjectArrayOutput) ToPipelineParameterObjectArrayOutput() PipelineParameterObjectArrayOutput {
	return o
}

func (o PipelineParameterObjectArrayOutput) ToPipelineParameterObjectArrayOutputWithContext(ctx context.Context) PipelineParameterObjectArrayOutput {
	return o
}

func (o PipelineParameterObjectArrayOutput) Index(i pulumi.IntInput) PipelineParameterObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineParameterObject {
		return vs[0].([]PipelineParameterObject)[vs[1].(int)]
	}).(PipelineParameterObjectOutput)
}

type PipelineParameterValue struct {
	Id          string `pulumi:"id"`
	StringValue string `pulumi:"stringValue"`
}

// PipelineParameterValueInput is an input type that accepts PipelineParameterValueArgs and PipelineParameterValueOutput values.
// You can construct a concrete instance of `PipelineParameterValueInput` via:
//
//          PipelineParameterValueArgs{...}
type PipelineParameterValueInput interface {
	pulumi.Input

	ToPipelineParameterValueOutput() PipelineParameterValueOutput
	ToPipelineParameterValueOutputWithContext(context.Context) PipelineParameterValueOutput
}

type PipelineParameterValueArgs struct {
	Id          pulumi.StringInput `pulumi:"id"`
	StringValue pulumi.StringInput `pulumi:"stringValue"`
}

func (PipelineParameterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterValue)(nil)).Elem()
}

func (i PipelineParameterValueArgs) ToPipelineParameterValueOutput() PipelineParameterValueOutput {
	return i.ToPipelineParameterValueOutputWithContext(context.Background())
}

func (i PipelineParameterValueArgs) ToPipelineParameterValueOutputWithContext(ctx context.Context) PipelineParameterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterValueOutput)
}

// PipelineParameterValueArrayInput is an input type that accepts PipelineParameterValueArray and PipelineParameterValueArrayOutput values.
// You can construct a concrete instance of `PipelineParameterValueArrayInput` via:
//
//          PipelineParameterValueArray{ PipelineParameterValueArgs{...} }
type PipelineParameterValueArrayInput interface {
	pulumi.Input

	ToPipelineParameterValueArrayOutput() PipelineParameterValueArrayOutput
	ToPipelineParameterValueArrayOutputWithContext(context.Context) PipelineParameterValueArrayOutput
}

type PipelineParameterValueArray []PipelineParameterValueInput

func (PipelineParameterValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterValue)(nil)).Elem()
}

func (i PipelineParameterValueArray) ToPipelineParameterValueArrayOutput() PipelineParameterValueArrayOutput {
	return i.ToPipelineParameterValueArrayOutputWithContext(context.Background())
}

func (i PipelineParameterValueArray) ToPipelineParameterValueArrayOutputWithContext(ctx context.Context) PipelineParameterValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterValueArrayOutput)
}

type PipelineParameterValueOutput struct{ *pulumi.OutputState }

func (PipelineParameterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterValue)(nil)).Elem()
}

func (o PipelineParameterValueOutput) ToPipelineParameterValueOutput() PipelineParameterValueOutput {
	return o
}

func (o PipelineParameterValueOutput) ToPipelineParameterValueOutputWithContext(ctx context.Context) PipelineParameterValueOutput {
	return o
}

func (o PipelineParameterValueOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterValue) string { return v.Id }).(pulumi.StringOutput)
}

func (o PipelineParameterValueOutput) StringValue() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterValue) string { return v.StringValue }).(pulumi.StringOutput)
}

type PipelineParameterValueArrayOutput struct{ *pulumi.OutputState }

func (PipelineParameterValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterValue)(nil)).Elem()
}

func (o PipelineParameterValueArrayOutput) ToPipelineParameterValueArrayOutput() PipelineParameterValueArrayOutput {
	return o
}

func (o PipelineParameterValueArrayOutput) ToPipelineParameterValueArrayOutputWithContext(ctx context.Context) PipelineParameterValueArrayOutput {
	return o
}

func (o PipelineParameterValueArrayOutput) Index(i pulumi.IntInput) PipelineParameterValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineParameterValue {
		return vs[0].([]PipelineParameterValue)[vs[1].(int)]
	}).(PipelineParameterValueOutput)
}

type PipelineTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PipelineTagInput is an input type that accepts PipelineTagArgs and PipelineTagOutput values.
// You can construct a concrete instance of `PipelineTagInput` via:
//
//          PipelineTagArgs{...}
type PipelineTagInput interface {
	pulumi.Input

	ToPipelineTagOutput() PipelineTagOutput
	ToPipelineTagOutputWithContext(context.Context) PipelineTagOutput
}

type PipelineTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipelineTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTag)(nil)).Elem()
}

func (i PipelineTagArgs) ToPipelineTagOutput() PipelineTagOutput {
	return i.ToPipelineTagOutputWithContext(context.Background())
}

func (i PipelineTagArgs) ToPipelineTagOutputWithContext(ctx context.Context) PipelineTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTagOutput)
}

// PipelineTagArrayInput is an input type that accepts PipelineTagArray and PipelineTagArrayOutput values.
// You can construct a concrete instance of `PipelineTagArrayInput` via:
//
//          PipelineTagArray{ PipelineTagArgs{...} }
type PipelineTagArrayInput interface {
	pulumi.Input

	ToPipelineTagArrayOutput() PipelineTagArrayOutput
	ToPipelineTagArrayOutputWithContext(context.Context) PipelineTagArrayOutput
}

type PipelineTagArray []PipelineTagInput

func (PipelineTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineTag)(nil)).Elem()
}

func (i PipelineTagArray) ToPipelineTagArrayOutput() PipelineTagArrayOutput {
	return i.ToPipelineTagArrayOutputWithContext(context.Background())
}

func (i PipelineTagArray) ToPipelineTagArrayOutputWithContext(ctx context.Context) PipelineTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTagArrayOutput)
}

type PipelineTagOutput struct{ *pulumi.OutputState }

func (PipelineTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTag)(nil)).Elem()
}

func (o PipelineTagOutput) ToPipelineTagOutput() PipelineTagOutput {
	return o
}

func (o PipelineTagOutput) ToPipelineTagOutputWithContext(ctx context.Context) PipelineTagOutput {
	return o
}

func (o PipelineTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PipelineTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineTag) string { return v.Value }).(pulumi.StringOutput)
}

type PipelineTagArrayOutput struct{ *pulumi.OutputState }

func (PipelineTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineTag)(nil)).Elem()
}

func (o PipelineTagArrayOutput) ToPipelineTagArrayOutput() PipelineTagArrayOutput {
	return o
}

func (o PipelineTagArrayOutput) ToPipelineTagArrayOutputWithContext(ctx context.Context) PipelineTagArrayOutput {
	return o
}

func (o PipelineTagArrayOutput) Index(i pulumi.IntInput) PipelineTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineTag {
		return vs[0].([]PipelineTag)[vs[1].(int)]
	}).(PipelineTagOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineFieldOutput{})
	pulumi.RegisterOutputType(PipelineFieldArrayOutput{})
	pulumi.RegisterOutputType(PipelineObjectOutput{})
	pulumi.RegisterOutputType(PipelineObjectArrayOutput{})
	pulumi.RegisterOutputType(PipelineParameterAttributeOutput{})
	pulumi.RegisterOutputType(PipelineParameterAttributeArrayOutput{})
	pulumi.RegisterOutputType(PipelineParameterObjectOutput{})
	pulumi.RegisterOutputType(PipelineParameterObjectArrayOutput{})
	pulumi.RegisterOutputType(PipelineParameterValueOutput{})
	pulumi.RegisterOutputType(PipelineParameterValueArrayOutput{})
	pulumi.RegisterOutputType(PipelineTagOutput{})
	pulumi.RegisterOutputType(PipelineTagArrayOutput{})
}
