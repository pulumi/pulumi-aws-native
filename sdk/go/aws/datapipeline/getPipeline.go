// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datapipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An example resource schema demonstrating some basic constructs and validation rules.
func LookupPipeline(ctx *pulumi.Context, args *LookupPipelineArgs, opts ...pulumi.InvokeOption) (*LookupPipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineResult
	err := ctx.Invoke("aws-native:datapipeline:getPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPipelineArgs struct {
	PipelineId string `pulumi:"pipelineId"`
}

type LookupPipelineResult struct {
	// Indicates whether to validate and start the pipeline or stop an active pipeline. By default, the value is set to true.
	Activate *bool `pulumi:"activate"`
	// The parameter objects used with the pipeline.
	ParameterObjects []PipelineParameterObject `pulumi:"parameterObjects"`
	// The parameter values used with the pipeline.
	ParameterValues []PipelineParameterValue `pulumi:"parameterValues"`
	PipelineId      *string                  `pulumi:"pipelineId"`
	// The objects that define the pipeline. These objects overwrite the existing pipeline definition. Not all objects, fields, and values can be updated. For information about restrictions, see Editing Your Pipeline in the AWS Data Pipeline Developer Guide.
	PipelineObjects []PipelineObject `pulumi:"pipelineObjects"`
	// A list of arbitrary tags (key-value pairs) to associate with the pipeline, which you can use to control permissions. For more information, see Controlling Access to Pipelines and Resources in the AWS Data Pipeline Developer Guide.
	PipelineTags []PipelineTag `pulumi:"pipelineTags"`
}

func LookupPipelineOutput(ctx *pulumi.Context, args LookupPipelineOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPipelineResult, error) {
			args := v.(LookupPipelineArgs)
			r, err := LookupPipeline(ctx, &args, opts...)
			var s LookupPipelineResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPipelineResultOutput)
}

type LookupPipelineOutputArgs struct {
	PipelineId pulumi.StringInput `pulumi:"pipelineId"`
}

func (LookupPipelineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineArgs)(nil)).Elem()
}

type LookupPipelineResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineResult)(nil)).Elem()
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutput() LookupPipelineResultOutput {
	return o
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutputWithContext(ctx context.Context) LookupPipelineResultOutput {
	return o
}

// Indicates whether to validate and start the pipeline or stop an active pipeline. By default, the value is set to true.
func (o LookupPipelineResultOutput) Activate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *bool { return v.Activate }).(pulumi.BoolPtrOutput)
}

// The parameter objects used with the pipeline.
func (o LookupPipelineResultOutput) ParameterObjects() PipelineParameterObjectArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineParameterObject { return v.ParameterObjects }).(PipelineParameterObjectArrayOutput)
}

// The parameter values used with the pipeline.
func (o LookupPipelineResultOutput) ParameterValues() PipelineParameterValueArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineParameterValue { return v.ParameterValues }).(PipelineParameterValueArrayOutput)
}

func (o LookupPipelineResultOutput) PipelineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *string { return v.PipelineId }).(pulumi.StringPtrOutput)
}

// The objects that define the pipeline. These objects overwrite the existing pipeline definition. Not all objects, fields, and values can be updated. For information about restrictions, see Editing Your Pipeline in the AWS Data Pipeline Developer Guide.
func (o LookupPipelineResultOutput) PipelineObjects() PipelineObjectArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineObject { return v.PipelineObjects }).(PipelineObjectArrayOutput)
}

// A list of arbitrary tags (key-value pairs) to associate with the pipeline, which you can use to control permissions. For more information, see Controlling Access to Pipelines and Resources in the AWS Data Pipeline Developer Guide.
func (o LookupPipelineResultOutput) PipelineTags() PipelineTagArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineTag { return v.PipelineTags }).(PipelineTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPipelineResultOutput{})
}
