// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesinstances

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::WorkspacesInstances::VolumeAssociation
type VolumeAssociation struct {
	pulumi.CustomResourceState

	// The device name for the volume attachment
	Device pulumi.StringOutput `pulumi:"device"`
	// Mode to use when disassociating the volume
	DisassociateMode VolumeAssociationDisassociateModePtrOutput `pulumi:"disassociateMode"`
	// ID of the volume to attach to the workspace instance
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// ID of the workspace instance to associate with the volume
	WorkspaceInstanceId pulumi.StringOutput `pulumi:"workspaceInstanceId"`
}

// NewVolumeAssociation registers a new resource with the given unique name, arguments, and options.
func NewVolumeAssociation(ctx *pulumi.Context,
	name string, args *VolumeAssociationArgs, opts ...pulumi.ResourceOption) (*VolumeAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	if args.WorkspaceInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceInstanceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"device",
		"volumeId",
		"workspaceInstanceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeAssociation
	err := ctx.RegisterResource("aws-native:workspacesinstances:VolumeAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeAssociation gets an existing VolumeAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeAssociationState, opts ...pulumi.ResourceOption) (*VolumeAssociation, error) {
	var resource VolumeAssociation
	err := ctx.ReadResource("aws-native:workspacesinstances:VolumeAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeAssociation resources.
type volumeAssociationState struct {
}

type VolumeAssociationState struct {
}

func (VolumeAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAssociationState)(nil)).Elem()
}

type volumeAssociationArgs struct {
	// The device name for the volume attachment
	Device string `pulumi:"device"`
	// Mode to use when disassociating the volume
	DisassociateMode *VolumeAssociationDisassociateMode `pulumi:"disassociateMode"`
	// ID of the volume to attach to the workspace instance
	VolumeId string `pulumi:"volumeId"`
	// ID of the workspace instance to associate with the volume
	WorkspaceInstanceId string `pulumi:"workspaceInstanceId"`
}

// The set of arguments for constructing a VolumeAssociation resource.
type VolumeAssociationArgs struct {
	// The device name for the volume attachment
	Device pulumi.StringInput
	// Mode to use when disassociating the volume
	DisassociateMode VolumeAssociationDisassociateModePtrInput
	// ID of the volume to attach to the workspace instance
	VolumeId pulumi.StringInput
	// ID of the workspace instance to associate with the volume
	WorkspaceInstanceId pulumi.StringInput
}

func (VolumeAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAssociationArgs)(nil)).Elem()
}

type VolumeAssociationInput interface {
	pulumi.Input

	ToVolumeAssociationOutput() VolumeAssociationOutput
	ToVolumeAssociationOutputWithContext(ctx context.Context) VolumeAssociationOutput
}

func (*VolumeAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAssociation)(nil)).Elem()
}

func (i *VolumeAssociation) ToVolumeAssociationOutput() VolumeAssociationOutput {
	return i.ToVolumeAssociationOutputWithContext(context.Background())
}

func (i *VolumeAssociation) ToVolumeAssociationOutputWithContext(ctx context.Context) VolumeAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAssociationOutput)
}

type VolumeAssociationOutput struct{ *pulumi.OutputState }

func (VolumeAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAssociation)(nil)).Elem()
}

func (o VolumeAssociationOutput) ToVolumeAssociationOutput() VolumeAssociationOutput {
	return o
}

func (o VolumeAssociationOutput) ToVolumeAssociationOutputWithContext(ctx context.Context) VolumeAssociationOutput {
	return o
}

// The device name for the volume attachment
func (o VolumeAssociationOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAssociation) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Mode to use when disassociating the volume
func (o VolumeAssociationOutput) DisassociateMode() VolumeAssociationDisassociateModePtrOutput {
	return o.ApplyT(func(v *VolumeAssociation) VolumeAssociationDisassociateModePtrOutput { return v.DisassociateMode }).(VolumeAssociationDisassociateModePtrOutput)
}

// ID of the volume to attach to the workspace instance
func (o VolumeAssociationOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAssociation) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// ID of the workspace instance to associate with the volume
func (o VolumeAssociationOutput) WorkspaceInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAssociation) pulumi.StringOutput { return v.WorkspaceInstanceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAssociationInput)(nil)).Elem(), &VolumeAssociation{})
	pulumi.RegisterOutputType(VolumeAssociationOutput{})
}
