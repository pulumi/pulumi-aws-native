// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesinstances

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::WorkspacesInstances::Volume - Manages WorkSpaces Volume resources
type Volume struct {
	pulumi.CustomResourceState

	// The Availability Zone in which to create the volume
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Indicates whether the volume should be encrypted
	Encrypted pulumi.BoolPtrOutput `pulumi:"encrypted"`
	// The number of I/O operations per second (IOPS)
	Iops pulumi.IntPtrOutput `pulumi:"iops"`
	// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The size of the volume, in GiBs
	SizeInGb pulumi.IntPtrOutput `pulumi:"sizeInGb"`
	// The snapshot from which to create the volume
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// The tags passed to EBS volume
	TagSpecifications VolumeTagSpecificationArrayOutput `pulumi:"tagSpecifications"`
	// The throughput to provision for a volume, with a maximum of 1,000 MiB/s
	Throughput pulumi.IntPtrOutput `pulumi:"throughput"`
	// Unique identifier for the volume
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// The volume type
	VolumeType VolumeTypePtrOutput `pulumi:"volumeType"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"availabilityZone",
		"encrypted",
		"iops",
		"kmsKeyId",
		"sizeInGb",
		"snapshotId",
		"tagSpecifications[*]",
		"throughput",
		"volumeType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("aws-native:workspacesinstances:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("aws-native:workspacesinstances:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
}

type VolumeState struct {
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The Availability Zone in which to create the volume
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Indicates whether the volume should be encrypted
	Encrypted *bool `pulumi:"encrypted"`
	// The number of I/O operations per second (IOPS)
	Iops *int `pulumi:"iops"`
	// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The size of the volume, in GiBs
	SizeInGb *int `pulumi:"sizeInGb"`
	// The snapshot from which to create the volume
	SnapshotId *string `pulumi:"snapshotId"`
	// The tags passed to EBS volume
	TagSpecifications []VolumeTagSpecification `pulumi:"tagSpecifications"`
	// The throughput to provision for a volume, with a maximum of 1,000 MiB/s
	Throughput *int `pulumi:"throughput"`
	// The volume type
	VolumeType *VolumeType `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The Availability Zone in which to create the volume
	AvailabilityZone pulumi.StringInput
	// Indicates whether the volume should be encrypted
	Encrypted pulumi.BoolPtrInput
	// The number of I/O operations per second (IOPS)
	Iops pulumi.IntPtrInput
	// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
	KmsKeyId pulumi.StringPtrInput
	// The size of the volume, in GiBs
	SizeInGb pulumi.IntPtrInput
	// The snapshot from which to create the volume
	SnapshotId pulumi.StringPtrInput
	// The tags passed to EBS volume
	TagSpecifications VolumeTagSpecificationArrayInput
	// The throughput to provision for a volume, with a maximum of 1,000 MiB/s
	Throughput pulumi.IntPtrInput
	// The volume type
	VolumeType VolumeTypePtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The Availability Zone in which to create the volume
func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Indicates whether the volume should be encrypted
func (o VolumeOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// The number of I/O operations per second (IOPS)
func (o VolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntPtrOutput { return v.Iops }).(pulumi.IntPtrOutput)
}

// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
func (o VolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The size of the volume, in GiBs
func (o VolumeOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntPtrOutput { return v.SizeInGb }).(pulumi.IntPtrOutput)
}

// The snapshot from which to create the volume
func (o VolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The tags passed to EBS volume
func (o VolumeOutput) TagSpecifications() VolumeTagSpecificationArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeTagSpecificationArrayOutput { return v.TagSpecifications }).(VolumeTagSpecificationArrayOutput)
}

// The throughput to provision for a volume, with a maximum of 1,000 MiB/s
func (o VolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntPtrOutput { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Unique identifier for the volume
func (o VolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// The volume type
func (o VolumeOutput) VolumeType() VolumeTypePtrOutput {
	return o.ApplyT(func(v *Volume) VolumeTypePtrOutput { return v.VolumeType }).(VolumeTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterOutputType(VolumeOutput{})
}
