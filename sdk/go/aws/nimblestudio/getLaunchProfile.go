// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::NimbleStudio::LaunchProfile
func LookupLaunchProfile(ctx *pulumi.Context, args *LookupLaunchProfileArgs, opts ...pulumi.InvokeOption) (*LookupLaunchProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLaunchProfileResult
	err := ctx.Invoke("aws-native:nimblestudio:getLaunchProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLaunchProfileArgs struct {
	// The unique identifier for the launch profile resource.
	LaunchProfileId string `pulumi:"launchProfileId"`
}

type LookupLaunchProfileResult struct {
	// A human-readable description of the launch profile.
	Description *string `pulumi:"description"`
	// The unique identifier for the launch profile resource.
	LaunchProfileId *string `pulumi:"launchProfileId"`
	// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
	LaunchProfileProtocolVersions []string `pulumi:"launchProfileProtocolVersions"`
	// A friendly name for the launch profile.
	Name *string `pulumi:"name"`
	// A configuration for a streaming session.
	StreamConfiguration *LaunchProfileStreamConfiguration `pulumi:"streamConfiguration"`
	// Unique identifiers for a collection of studio components that can be used with this launch profile.
	StudioComponentIds []string `pulumi:"studioComponentIds"`
}

func LookupLaunchProfileOutput(ctx *pulumi.Context, args LookupLaunchProfileOutputArgs, opts ...pulumi.InvokeOption) LookupLaunchProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLaunchProfileResultOutput, error) {
			args := v.(LookupLaunchProfileArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupLaunchProfileResult
			secret, err := ctx.InvokePackageRaw("aws-native:nimblestudio:getLaunchProfile", args, &rv, "", opts...)
			if err != nil {
				return LookupLaunchProfileResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupLaunchProfileResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupLaunchProfileResultOutput), nil
			}
			return output, nil
		}).(LookupLaunchProfileResultOutput)
}

type LookupLaunchProfileOutputArgs struct {
	// The unique identifier for the launch profile resource.
	LaunchProfileId pulumi.StringInput `pulumi:"launchProfileId"`
}

func (LookupLaunchProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchProfileArgs)(nil)).Elem()
}

type LookupLaunchProfileResultOutput struct{ *pulumi.OutputState }

func (LookupLaunchProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchProfileResult)(nil)).Elem()
}

func (o LookupLaunchProfileResultOutput) ToLookupLaunchProfileResultOutput() LookupLaunchProfileResultOutput {
	return o
}

func (o LookupLaunchProfileResultOutput) ToLookupLaunchProfileResultOutputWithContext(ctx context.Context) LookupLaunchProfileResultOutput {
	return o
}

// A human-readable description of the launch profile.
func (o LookupLaunchProfileResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier for the launch profile resource.
func (o LookupLaunchProfileResultOutput) LaunchProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *string { return v.LaunchProfileId }).(pulumi.StringPtrOutput)
}

// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
func (o LookupLaunchProfileResultOutput) LaunchProfileProtocolVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) []string { return v.LaunchProfileProtocolVersions }).(pulumi.StringArrayOutput)
}

// A friendly name for the launch profile.
func (o LookupLaunchProfileResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A configuration for a streaming session.
func (o LookupLaunchProfileResultOutput) StreamConfiguration() LaunchProfileStreamConfigurationPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *LaunchProfileStreamConfiguration { return v.StreamConfiguration }).(LaunchProfileStreamConfigurationPtrOutput)
}

// Unique identifiers for a collection of studio components that can be used with this launch profile.
func (o LookupLaunchProfileResultOutput) StudioComponentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) []string { return v.StudioComponentIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLaunchProfileResultOutput{})
}
