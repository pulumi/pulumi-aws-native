// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a launch profile which delegates access to a collection of studio components to studio users
func LookupLaunchProfile(ctx *pulumi.Context, args *LookupLaunchProfileArgs, opts ...pulumi.InvokeOption) (*LookupLaunchProfileResult, error) {
	var rv LookupLaunchProfileResult
	err := ctx.Invoke("aws-native:nimblestudio:getLaunchProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLaunchProfileArgs struct {
	LaunchProfileId string `pulumi:"launchProfileId"`
	// <p>The studio ID. </p>
	StudioId string `pulumi:"studioId"`
}

type LookupLaunchProfileResult struct {
	// <p>The description.</p>
	Description     *string `pulumi:"description"`
	LaunchProfileId *string `pulumi:"launchProfileId"`
	// <p>The version number of the protocol that is used by the launch profile. The only valid
	//             version is "2021-03-31".</p>
	LaunchProfileProtocolVersions []string `pulumi:"launchProfileProtocolVersions"`
	// <p>The name for the launch profile.</p>
	Name                *string                           `pulumi:"name"`
	StreamConfiguration *LaunchProfileStreamConfiguration `pulumi:"streamConfiguration"`
	// <p>Unique identifiers for a collection of studio components that can be used with this
	//             launch profile.</p>
	StudioComponentIds []string `pulumi:"studioComponentIds"`
}

func LookupLaunchProfileOutput(ctx *pulumi.Context, args LookupLaunchProfileOutputArgs, opts ...pulumi.InvokeOption) LookupLaunchProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLaunchProfileResult, error) {
			args := v.(LookupLaunchProfileArgs)
			r, err := LookupLaunchProfile(ctx, &args, opts...)
			var s LookupLaunchProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLaunchProfileResultOutput)
}

type LookupLaunchProfileOutputArgs struct {
	LaunchProfileId pulumi.StringInput `pulumi:"launchProfileId"`
	// <p>The studio ID. </p>
	StudioId pulumi.StringInput `pulumi:"studioId"`
}

func (LookupLaunchProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchProfileArgs)(nil)).Elem()
}

type LookupLaunchProfileResultOutput struct{ *pulumi.OutputState }

func (LookupLaunchProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchProfileResult)(nil)).Elem()
}

func (o LookupLaunchProfileResultOutput) ToLookupLaunchProfileResultOutput() LookupLaunchProfileResultOutput {
	return o
}

func (o LookupLaunchProfileResultOutput) ToLookupLaunchProfileResultOutputWithContext(ctx context.Context) LookupLaunchProfileResultOutput {
	return o
}

// <p>The description.</p>
func (o LookupLaunchProfileResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupLaunchProfileResultOutput) LaunchProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *string { return v.LaunchProfileId }).(pulumi.StringPtrOutput)
}

// <p>The version number of the protocol that is used by the launch profile. The only valid
//             version is "2021-03-31".</p>
func (o LookupLaunchProfileResultOutput) LaunchProfileProtocolVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) []string { return v.LaunchProfileProtocolVersions }).(pulumi.StringArrayOutput)
}

// <p>The name for the launch profile.</p>
func (o LookupLaunchProfileResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupLaunchProfileResultOutput) StreamConfiguration() LaunchProfileStreamConfigurationPtrOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) *LaunchProfileStreamConfiguration { return v.StreamConfiguration }).(LaunchProfileStreamConfigurationPtrOutput)
}

// <p>Unique identifiers for a collection of studio components that can be used with this
//             launch profile.</p>
func (o LookupLaunchProfileResultOutput) StudioComponentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLaunchProfileResult) []string { return v.StudioComponentIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLaunchProfileResultOutput{})
}
