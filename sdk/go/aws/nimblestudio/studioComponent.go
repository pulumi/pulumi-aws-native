// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a studio component that connects a non-Nimble Studio resource in your account to your studio
type StudioComponent struct {
	pulumi.CustomResourceState

	// The configuration of the studio component, based on component type.
	Configuration pulumi.AnyOutput `pulumi:"configuration"`
	// <p>The description.</p>
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// <p>The EC2 security groups that control access to the studio component.</p>
	Ec2SecurityGroupIds pulumi.StringArrayOutput `pulumi:"ec2SecurityGroupIds"`
	// <p>Initialization scripts for studio components.</p>
	InitializationScripts StudioComponentInitializationScriptArrayOutput `pulumi:"initializationScripts"`
	// <p>The name for the studio component.</p>
	Name pulumi.StringOutput `pulumi:"name"`
	// An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running.
	RuntimeRoleArn pulumi.StringPtrOutput `pulumi:"runtimeRoleArn"`
	// <p>Parameters for the studio component scripts.</p>
	ScriptParameters StudioComponentScriptParameterKeyValueArrayOutput `pulumi:"scriptParameters"`
	// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.
	SecureInitializationRoleArn pulumi.StringPtrOutput `pulumi:"secureInitializationRoleArn"`
	// The unique identifier for the studio component resource.
	StudioComponentId pulumi.StringOutput `pulumi:"studioComponentId"`
	// <p>The studio ID. </p>
	StudioId pulumi.StringOutput `pulumi:"studioId"`
	// The specific subtype of a studio component.
	Subtype StudioComponentSubtypePtrOutput `pulumi:"subtype"`
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the studio component.
	Type StudioComponentTypeOutput `pulumi:"type"`
}

// NewStudioComponent registers a new resource with the given unique name, arguments, and options.
func NewStudioComponent(ctx *pulumi.Context,
	name string, args *StudioComponentArgs, opts ...pulumi.ResourceOption) (*StudioComponent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StudioId == nil {
		return nil, errors.New("invalid value for required argument 'StudioId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"studioId",
		"subtype",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StudioComponent
	err := ctx.RegisterResource("aws-native:nimblestudio:StudioComponent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudioComponent gets an existing StudioComponent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudioComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudioComponentState, opts ...pulumi.ResourceOption) (*StudioComponent, error) {
	var resource StudioComponent
	err := ctx.ReadResource("aws-native:nimblestudio:StudioComponent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StudioComponent resources.
type studioComponentState struct {
}

type StudioComponentState struct {
}

func (StudioComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*studioComponentState)(nil)).Elem()
}

type studioComponentArgs struct {
	// The configuration of the studio component, based on component type.
	Configuration interface{} `pulumi:"configuration"`
	// <p>The description.</p>
	Description *string `pulumi:"description"`
	// <p>The EC2 security groups that control access to the studio component.</p>
	Ec2SecurityGroupIds []string `pulumi:"ec2SecurityGroupIds"`
	// <p>Initialization scripts for studio components.</p>
	InitializationScripts []StudioComponentInitializationScript `pulumi:"initializationScripts"`
	// <p>The name for the studio component.</p>
	Name *string `pulumi:"name"`
	// An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running.
	RuntimeRoleArn *string `pulumi:"runtimeRoleArn"`
	// <p>Parameters for the studio component scripts.</p>
	ScriptParameters []StudioComponentScriptParameterKeyValue `pulumi:"scriptParameters"`
	// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.
	SecureInitializationRoleArn *string `pulumi:"secureInitializationRoleArn"`
	// <p>The studio ID. </p>
	StudioId string `pulumi:"studioId"`
	// The specific subtype of a studio component.
	Subtype *StudioComponentSubtype `pulumi:"subtype"`
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags map[string]string `pulumi:"tags"`
	// The type of the studio component.
	Type StudioComponentType `pulumi:"type"`
}

// The set of arguments for constructing a StudioComponent resource.
type StudioComponentArgs struct {
	// The configuration of the studio component, based on component type.
	Configuration pulumi.Input
	// <p>The description.</p>
	Description pulumi.StringPtrInput
	// <p>The EC2 security groups that control access to the studio component.</p>
	Ec2SecurityGroupIds pulumi.StringArrayInput
	// <p>Initialization scripts for studio components.</p>
	InitializationScripts StudioComponentInitializationScriptArrayInput
	// <p>The name for the studio component.</p>
	Name pulumi.StringPtrInput
	// An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running.
	RuntimeRoleArn pulumi.StringPtrInput
	// <p>Parameters for the studio component scripts.</p>
	ScriptParameters StudioComponentScriptParameterKeyValueArrayInput
	// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.
	SecureInitializationRoleArn pulumi.StringPtrInput
	// <p>The studio ID. </p>
	StudioId pulumi.StringInput
	// The specific subtype of a studio component.
	Subtype StudioComponentSubtypePtrInput
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags pulumi.StringMapInput
	// The type of the studio component.
	Type StudioComponentTypeInput
}

func (StudioComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studioComponentArgs)(nil)).Elem()
}

type StudioComponentInput interface {
	pulumi.Input

	ToStudioComponentOutput() StudioComponentOutput
	ToStudioComponentOutputWithContext(ctx context.Context) StudioComponentOutput
}

func (*StudioComponent) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponent)(nil)).Elem()
}

func (i *StudioComponent) ToStudioComponentOutput() StudioComponentOutput {
	return i.ToStudioComponentOutputWithContext(context.Background())
}

func (i *StudioComponent) ToStudioComponentOutputWithContext(ctx context.Context) StudioComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentOutput)
}

type StudioComponentOutput struct{ *pulumi.OutputState }

func (StudioComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponent)(nil)).Elem()
}

func (o StudioComponentOutput) ToStudioComponentOutput() StudioComponentOutput {
	return o
}

func (o StudioComponentOutput) ToStudioComponentOutputWithContext(ctx context.Context) StudioComponentOutput {
	return o
}

// The configuration of the studio component, based on component type.
func (o StudioComponentOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

// <p>The description.</p>
func (o StudioComponentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>The EC2 security groups that control access to the studio component.</p>
func (o StudioComponentOutput) Ec2SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringArrayOutput { return v.Ec2SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// <p>Initialization scripts for studio components.</p>
func (o StudioComponentOutput) InitializationScripts() StudioComponentInitializationScriptArrayOutput {
	return o.ApplyT(func(v *StudioComponent) StudioComponentInitializationScriptArrayOutput {
		return v.InitializationScripts
	}).(StudioComponentInitializationScriptArrayOutput)
}

// <p>The name for the studio component.</p>
func (o StudioComponentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running.
func (o StudioComponentOutput) RuntimeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringPtrOutput { return v.RuntimeRoleArn }).(pulumi.StringPtrOutput)
}

// <p>Parameters for the studio component scripts.</p>
func (o StudioComponentOutput) ScriptParameters() StudioComponentScriptParameterKeyValueArrayOutput {
	return o.ApplyT(func(v *StudioComponent) StudioComponentScriptParameterKeyValueArrayOutput { return v.ScriptParameters }).(StudioComponentScriptParameterKeyValueArrayOutput)
}

// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.
func (o StudioComponentOutput) SecureInitializationRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringPtrOutput { return v.SecureInitializationRoleArn }).(pulumi.StringPtrOutput)
}

// The unique identifier for the studio component resource.
func (o StudioComponentOutput) StudioComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringOutput { return v.StudioComponentId }).(pulumi.StringOutput)
}

// <p>The studio ID. </p>
func (o StudioComponentOutput) StudioId() pulumi.StringOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringOutput { return v.StudioId }).(pulumi.StringOutput)
}

// The specific subtype of a studio component.
func (o StudioComponentOutput) Subtype() StudioComponentSubtypePtrOutput {
	return o.ApplyT(func(v *StudioComponent) StudioComponentSubtypePtrOutput { return v.Subtype }).(StudioComponentSubtypePtrOutput)
}

// An array of key-value pairs to apply to this resource.
//
// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
func (o StudioComponentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StudioComponent) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the studio component.
func (o StudioComponentOutput) Type() StudioComponentTypeOutput {
	return o.ApplyT(func(v *StudioComponent) StudioComponentTypeOutput { return v.Type }).(StudioComponentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentInput)(nil)).Elem(), &StudioComponent{})
	pulumi.RegisterOutputType(StudioComponentOutput{})
}
