// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a studio component that connects a non-Nimble Studio resource in your account to your studio
func LookupStudioComponent(ctx *pulumi.Context, args *LookupStudioComponentArgs, opts ...pulumi.InvokeOption) (*LookupStudioComponentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStudioComponentResult
	err := ctx.Invoke("aws-native:nimblestudio:getStudioComponent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStudioComponentArgs struct {
	// The unique identifier for the studio component resource.
	StudioComponentId string `pulumi:"studioComponentId"`
	// <p>The studio ID. </p>
	StudioId string `pulumi:"studioId"`
}

type LookupStudioComponentResult struct {
	// The configuration of the studio component, based on component type.
	Configuration interface{} `pulumi:"configuration"`
	// <p>The description.</p>
	Description *string `pulumi:"description"`
	// <p>The EC2 security groups that control access to the studio component.</p>
	Ec2SecurityGroupIds []string `pulumi:"ec2SecurityGroupIds"`
	// <p>Initialization scripts for studio components.</p>
	InitializationScripts []StudioComponentInitializationScript `pulumi:"initializationScripts"`
	// <p>The name for the studio component.</p>
	Name *string `pulumi:"name"`
	// An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running.
	RuntimeRoleArn *string `pulumi:"runtimeRoleArn"`
	// <p>Parameters for the studio component scripts.</p>
	ScriptParameters []StudioComponentScriptParameterKeyValue `pulumi:"scriptParameters"`
	// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.
	SecureInitializationRoleArn *string `pulumi:"secureInitializationRoleArn"`
	// The unique identifier for the studio component resource.
	StudioComponentId *string `pulumi:"studioComponentId"`
	// The type of the studio component.
	Type *StudioComponentType `pulumi:"type"`
}

func LookupStudioComponentOutput(ctx *pulumi.Context, args LookupStudioComponentOutputArgs, opts ...pulumi.InvokeOption) LookupStudioComponentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStudioComponentResultOutput, error) {
			args := v.(LookupStudioComponentArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupStudioComponentResult
			secret, err := ctx.InvokePackageRaw("aws-native:nimblestudio:getStudioComponent", args, &rv, "", opts...)
			if err != nil {
				return LookupStudioComponentResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupStudioComponentResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupStudioComponentResultOutput), nil
			}
			return output, nil
		}).(LookupStudioComponentResultOutput)
}

type LookupStudioComponentOutputArgs struct {
	// The unique identifier for the studio component resource.
	StudioComponentId pulumi.StringInput `pulumi:"studioComponentId"`
	// <p>The studio ID. </p>
	StudioId pulumi.StringInput `pulumi:"studioId"`
}

func (LookupStudioComponentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStudioComponentArgs)(nil)).Elem()
}

type LookupStudioComponentResultOutput struct{ *pulumi.OutputState }

func (LookupStudioComponentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStudioComponentResult)(nil)).Elem()
}

func (o LookupStudioComponentResultOutput) ToLookupStudioComponentResultOutput() LookupStudioComponentResultOutput {
	return o
}

func (o LookupStudioComponentResultOutput) ToLookupStudioComponentResultOutputWithContext(ctx context.Context) LookupStudioComponentResultOutput {
	return o
}

// The configuration of the studio component, based on component type.
func (o LookupStudioComponentResultOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) interface{} { return v.Configuration }).(pulumi.AnyOutput)
}

// <p>The description.</p>
func (o LookupStudioComponentResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>The EC2 security groups that control access to the studio component.</p>
func (o LookupStudioComponentResultOutput) Ec2SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) []string { return v.Ec2SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// <p>Initialization scripts for studio components.</p>
func (o LookupStudioComponentResultOutput) InitializationScripts() StudioComponentInitializationScriptArrayOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) []StudioComponentInitializationScript {
		return v.InitializationScripts
	}).(StudioComponentInitializationScriptArrayOutput)
}

// <p>The name for the studio component.</p>
func (o LookupStudioComponentResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running.
func (o LookupStudioComponentResultOutput) RuntimeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) *string { return v.RuntimeRoleArn }).(pulumi.StringPtrOutput)
}

// <p>Parameters for the studio component scripts.</p>
func (o LookupStudioComponentResultOutput) ScriptParameters() StudioComponentScriptParameterKeyValueArrayOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) []StudioComponentScriptParameterKeyValue {
		return v.ScriptParameters
	}).(StudioComponentScriptParameterKeyValueArrayOutput)
}

// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.
func (o LookupStudioComponentResultOutput) SecureInitializationRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) *string { return v.SecureInitializationRoleArn }).(pulumi.StringPtrOutput)
}

// The unique identifier for the studio component resource.
func (o LookupStudioComponentResultOutput) StudioComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) *string { return v.StudioComponentId }).(pulumi.StringPtrOutput)
}

// The type of the studio component.
func (o LookupStudioComponentResultOutput) Type() StudioComponentTypePtrOutput {
	return o.ApplyT(func(v LookupStudioComponentResult) *StudioComponentType { return v.Type }).(StudioComponentTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStudioComponentResultOutput{})
}
