// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::NimbleStudio::StreamingImage
type StreamingImage struct {
	pulumi.CustomResourceState

	Description                    pulumi.StringPtrOutput                      `pulumi:"description"`
	Ec2ImageId                     pulumi.StringOutput                         `pulumi:"ec2ImageId"`
	EncryptionConfiguration        StreamingImageEncryptionConfigurationOutput `pulumi:"encryptionConfiguration"`
	EncryptionConfigurationKeyArn  pulumi.StringPtrOutput                      `pulumi:"encryptionConfigurationKeyArn"`
	EncryptionConfigurationKeyType pulumi.StringPtrOutput                      `pulumi:"encryptionConfigurationKeyType"`
	EulaIds                        pulumi.StringArrayOutput                    `pulumi:"eulaIds"`
	Name                           pulumi.StringOutput                         `pulumi:"name"`
	Owner                          pulumi.StringOutput                         `pulumi:"owner"`
	Platform                       pulumi.StringOutput                         `pulumi:"platform"`
	StreamingImageId               pulumi.StringOutput                         `pulumi:"streamingImageId"`
	StudioId                       pulumi.StringOutput                         `pulumi:"studioId"`
	Tags                           pulumi.StringMapOutput                      `pulumi:"tags"`
}

// NewStreamingImage registers a new resource with the given unique name, arguments, and options.
func NewStreamingImage(ctx *pulumi.Context,
	name string, args *StreamingImageArgs, opts ...pulumi.ResourceOption) (*StreamingImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ec2ImageId == nil {
		return nil, errors.New("invalid value for required argument 'Ec2ImageId'")
	}
	if args.StudioId == nil {
		return nil, errors.New("invalid value for required argument 'StudioId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"ec2ImageId",
		"studioId",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamingImage
	err := ctx.RegisterResource("aws-native:nimblestudio:StreamingImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingImage gets an existing StreamingImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingImageState, opts ...pulumi.ResourceOption) (*StreamingImage, error) {
	var resource StreamingImage
	err := ctx.ReadResource("aws-native:nimblestudio:StreamingImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingImage resources.
type streamingImageState struct {
}

type StreamingImageState struct {
}

func (StreamingImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingImageState)(nil)).Elem()
}

type streamingImageArgs struct {
	Description                    *string           `pulumi:"description"`
	Ec2ImageId                     string            `pulumi:"ec2ImageId"`
	EncryptionConfigurationKeyArn  *string           `pulumi:"encryptionConfigurationKeyArn"`
	EncryptionConfigurationKeyType *string           `pulumi:"encryptionConfigurationKeyType"`
	Name                           *string           `pulumi:"name"`
	StudioId                       string            `pulumi:"studioId"`
	Tags                           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StreamingImage resource.
type StreamingImageArgs struct {
	Description                    pulumi.StringPtrInput
	Ec2ImageId                     pulumi.StringInput
	EncryptionConfigurationKeyArn  pulumi.StringPtrInput
	EncryptionConfigurationKeyType pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	StudioId                       pulumi.StringInput
	Tags                           pulumi.StringMapInput
}

func (StreamingImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingImageArgs)(nil)).Elem()
}

type StreamingImageInput interface {
	pulumi.Input

	ToStreamingImageOutput() StreamingImageOutput
	ToStreamingImageOutputWithContext(ctx context.Context) StreamingImageOutput
}

func (*StreamingImage) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingImage)(nil)).Elem()
}

func (i *StreamingImage) ToStreamingImageOutput() StreamingImageOutput {
	return i.ToStreamingImageOutputWithContext(context.Background())
}

func (i *StreamingImage) ToStreamingImageOutputWithContext(ctx context.Context) StreamingImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingImageOutput)
}

type StreamingImageOutput struct{ *pulumi.OutputState }

func (StreamingImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingImage)(nil)).Elem()
}

func (o StreamingImageOutput) ToStreamingImageOutput() StreamingImageOutput {
	return o
}

func (o StreamingImageOutput) ToStreamingImageOutputWithContext(ctx context.Context) StreamingImageOutput {
	return o
}

func (o StreamingImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o StreamingImageOutput) Ec2ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringOutput { return v.Ec2ImageId }).(pulumi.StringOutput)
}

func (o StreamingImageOutput) EncryptionConfiguration() StreamingImageEncryptionConfigurationOutput {
	return o.ApplyT(func(v *StreamingImage) StreamingImageEncryptionConfigurationOutput { return v.EncryptionConfiguration }).(StreamingImageEncryptionConfigurationOutput)
}

func (o StreamingImageOutput) EncryptionConfigurationKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringPtrOutput { return v.EncryptionConfigurationKeyArn }).(pulumi.StringPtrOutput)
}

func (o StreamingImageOutput) EncryptionConfigurationKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringPtrOutput { return v.EncryptionConfigurationKeyType }).(pulumi.StringPtrOutput)
}

func (o StreamingImageOutput) EulaIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringArrayOutput { return v.EulaIds }).(pulumi.StringArrayOutput)
}

func (o StreamingImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StreamingImageOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o StreamingImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

func (o StreamingImageOutput) StreamingImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringOutput { return v.StreamingImageId }).(pulumi.StringOutput)
}

func (o StreamingImageOutput) StudioId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringOutput { return v.StudioId }).(pulumi.StringOutput)
}

func (o StreamingImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamingImage) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingImageInput)(nil)).Elem(), &StreamingImage{})
	pulumi.RegisterOutputType(StreamingImageOutput{})
}
