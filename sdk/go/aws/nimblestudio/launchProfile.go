// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::NimbleStudio::LaunchProfile
type LaunchProfile struct {
	pulumi.CustomResourceState

	Description                   pulumi.StringPtrOutput                 `pulumi:"description"`
	Ec2SubnetIds                  pulumi.StringArrayOutput               `pulumi:"ec2SubnetIds"`
	LaunchProfileId               pulumi.StringOutput                    `pulumi:"launchProfileId"`
	LaunchProfileProtocolVersions pulumi.StringArrayOutput               `pulumi:"launchProfileProtocolVersions"`
	Name                          pulumi.StringOutput                    `pulumi:"name"`
	StreamConfiguration           LaunchProfileStreamConfigurationOutput `pulumi:"streamConfiguration"`
	StudioComponentIds            pulumi.StringArrayOutput               `pulumi:"studioComponentIds"`
	StudioId                      pulumi.StringOutput                    `pulumi:"studioId"`
	Tags                          pulumi.AnyOutput                       `pulumi:"tags"`
}

// NewLaunchProfile registers a new resource with the given unique name, arguments, and options.
func NewLaunchProfile(ctx *pulumi.Context,
	name string, args *LaunchProfileArgs, opts ...pulumi.ResourceOption) (*LaunchProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ec2SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'Ec2SubnetIds'")
	}
	if args.LaunchProfileProtocolVersions == nil {
		return nil, errors.New("invalid value for required argument 'LaunchProfileProtocolVersions'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.StreamConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'StreamConfiguration'")
	}
	if args.StudioComponentIds == nil {
		return nil, errors.New("invalid value for required argument 'StudioComponentIds'")
	}
	if args.StudioId == nil {
		return nil, errors.New("invalid value for required argument 'StudioId'")
	}
	var resource LaunchProfile
	err := ctx.RegisterResource("aws-native:nimblestudio:LaunchProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLaunchProfile gets an existing LaunchProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLaunchProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaunchProfileState, opts ...pulumi.ResourceOption) (*LaunchProfile, error) {
	var resource LaunchProfile
	err := ctx.ReadResource("aws-native:nimblestudio:LaunchProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LaunchProfile resources.
type launchProfileState struct {
}

type LaunchProfileState struct {
}

func (LaunchProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*launchProfileState)(nil)).Elem()
}

type launchProfileArgs struct {
	Description                   *string                          `pulumi:"description"`
	Ec2SubnetIds                  []string                         `pulumi:"ec2SubnetIds"`
	LaunchProfileProtocolVersions []string                         `pulumi:"launchProfileProtocolVersions"`
	Name                          string                           `pulumi:"name"`
	StreamConfiguration           LaunchProfileStreamConfiguration `pulumi:"streamConfiguration"`
	StudioComponentIds            []string                         `pulumi:"studioComponentIds"`
	StudioId                      string                           `pulumi:"studioId"`
	Tags                          interface{}                      `pulumi:"tags"`
}

// The set of arguments for constructing a LaunchProfile resource.
type LaunchProfileArgs struct {
	Description                   pulumi.StringPtrInput
	Ec2SubnetIds                  pulumi.StringArrayInput
	LaunchProfileProtocolVersions pulumi.StringArrayInput
	Name                          pulumi.StringInput
	StreamConfiguration           LaunchProfileStreamConfigurationInput
	StudioComponentIds            pulumi.StringArrayInput
	StudioId                      pulumi.StringInput
	Tags                          pulumi.Input
}

func (LaunchProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*launchProfileArgs)(nil)).Elem()
}

type LaunchProfileInput interface {
	pulumi.Input

	ToLaunchProfileOutput() LaunchProfileOutput
	ToLaunchProfileOutputWithContext(ctx context.Context) LaunchProfileOutput
}

func (*LaunchProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfile)(nil))
}

func (i *LaunchProfile) ToLaunchProfileOutput() LaunchProfileOutput {
	return i.ToLaunchProfileOutputWithContext(context.Background())
}

func (i *LaunchProfile) ToLaunchProfileOutputWithContext(ctx context.Context) LaunchProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileOutput)
}

type LaunchProfileOutput struct{ *pulumi.OutputState }

func (LaunchProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfile)(nil))
}

func (o LaunchProfileOutput) ToLaunchProfileOutput() LaunchProfileOutput {
	return o
}

func (o LaunchProfileOutput) ToLaunchProfileOutputWithContext(ctx context.Context) LaunchProfileOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LaunchProfileOutput{})
}
