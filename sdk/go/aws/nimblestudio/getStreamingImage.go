// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::NimbleStudio::StreamingImage
func LookupStreamingImage(ctx *pulumi.Context, args *LookupStreamingImageArgs, opts ...pulumi.InvokeOption) (*LookupStreamingImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamingImageResult
	err := ctx.Invoke("aws-native:nimblestudio:getStreamingImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStreamingImageArgs struct {
	// The unique identifier for the streaming image resource.
	StreamingImageId string `pulumi:"streamingImageId"`
}

type LookupStreamingImageResult struct {
	// A human-readable description of the streaming image.
	Description                    *string                                `pulumi:"description"`
	EncryptionConfiguration        *StreamingImageEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	EncryptionConfigurationKeyArn  *string                                `pulumi:"encryptionConfigurationKeyArn"`
	EncryptionConfigurationKeyType *string                                `pulumi:"encryptionConfigurationKeyType"`
	// The list of IDs of EULAs that must be accepted before a streaming session can be started using this streaming image.
	EulaIds []string `pulumi:"eulaIds"`
	// A friendly name for a streaming image resource.
	Name *string `pulumi:"name"`
	// The owner of the streaming image, either the studioId that contains the streaming image or 'amazon' for images that are provided by  .
	Owner *string `pulumi:"owner"`
	// The platform of the streaming image, either WINDOWS or LINUX.
	Platform *string `pulumi:"platform"`
	// The unique identifier for the streaming image resource.
	StreamingImageId *string `pulumi:"streamingImageId"`
}

func LookupStreamingImageOutput(ctx *pulumi.Context, args LookupStreamingImageOutputArgs, opts ...pulumi.InvokeOption) LookupStreamingImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStreamingImageResultOutput, error) {
			args := v.(LookupStreamingImageArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupStreamingImageResult
			secret, err := ctx.InvokePackageRaw("aws-native:nimblestudio:getStreamingImage", args, &rv, "", opts...)
			if err != nil {
				return LookupStreamingImageResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupStreamingImageResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupStreamingImageResultOutput), nil
			}
			return output, nil
		}).(LookupStreamingImageResultOutput)
}

type LookupStreamingImageOutputArgs struct {
	// The unique identifier for the streaming image resource.
	StreamingImageId pulumi.StringInput `pulumi:"streamingImageId"`
}

func (LookupStreamingImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamingImageArgs)(nil)).Elem()
}

type LookupStreamingImageResultOutput struct{ *pulumi.OutputState }

func (LookupStreamingImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamingImageResult)(nil)).Elem()
}

func (o LookupStreamingImageResultOutput) ToLookupStreamingImageResultOutput() LookupStreamingImageResultOutput {
	return o
}

func (o LookupStreamingImageResultOutput) ToLookupStreamingImageResultOutputWithContext(ctx context.Context) LookupStreamingImageResultOutput {
	return o
}

// A human-readable description of the streaming image.
func (o LookupStreamingImageResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupStreamingImageResultOutput) EncryptionConfiguration() StreamingImageEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *StreamingImageEncryptionConfiguration {
		return v.EncryptionConfiguration
	}).(StreamingImageEncryptionConfigurationPtrOutput)
}

func (o LookupStreamingImageResultOutput) EncryptionConfigurationKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.EncryptionConfigurationKeyArn }).(pulumi.StringPtrOutput)
}

func (o LookupStreamingImageResultOutput) EncryptionConfigurationKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.EncryptionConfigurationKeyType }).(pulumi.StringPtrOutput)
}

// The list of IDs of EULAs that must be accepted before a streaming session can be started using this streaming image.
func (o LookupStreamingImageResultOutput) EulaIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) []string { return v.EulaIds }).(pulumi.StringArrayOutput)
}

// A friendly name for a streaming image resource.
func (o LookupStreamingImageResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The owner of the streaming image, either the studioId that contains the streaming image or 'amazon' for images that are provided by  .
func (o LookupStreamingImageResultOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// The platform of the streaming image, either WINDOWS or LINUX.
func (o LookupStreamingImageResultOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// The unique identifier for the streaming image resource.
func (o LookupStreamingImageResultOutput) StreamingImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingImageResult) *string { return v.StreamingImageId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamingImageResultOutput{})
}
