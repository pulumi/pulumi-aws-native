// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// <p>A configuration for a streaming session.</p>
type LaunchProfileStreamConfiguration struct {
	AutomaticTerminationMode *LaunchProfileAutomaticTerminationMode `pulumi:"automaticTerminationMode"`
	ClipboardMode            LaunchProfileStreamingClipboardMode    `pulumi:"clipboardMode"`
	// <p>The EC2 instance types that users can select from when launching a streaming session
	//             with this launch profile.</p>
	Ec2InstanceTypes []LaunchProfileStreamingInstanceType `pulumi:"ec2InstanceTypes"`
	// <p>The length of time, in minutes, that a streaming session can be active before it is
	//             stopped or terminated. After this point, Nimble Studio automatically terminates or
	//             stops the session. The default length of time is 690 minutes, and the maximum length of
	//             time is 30 days.</p>
	MaxSessionLengthInMinutes *float64 `pulumi:"maxSessionLengthInMinutes"`
	// <p>Integer that determines if you can start and stop your sessions and how long a session
	//             can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
	//             5760.</p>
	//          <p>This field is allowed only when <code>sessionPersistenceMode</code> is
	//                 <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
	//                 <code>ACTIVATED</code>.</p>
	//          <p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
	//             call <code>StopStreamingSession</code>, the session fails. If the time that a session
	//             stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
	//             value, the session will automatically be terminated (instead of
	//             <code>STOPPED</code>).</p>
	//          <p>If the value is set to a positive number, the session can be stopped. You can call
	//                 <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
	//             If the time that a session stays in the <code>READY</code> state exceeds the
	//                 <code>maxSessionLengthInMinutes</code> value, the session will automatically be
	//             stopped (instead of terminated).</p>
	MaxStoppedSessionLengthInMinutes *float64                                        `pulumi:"maxStoppedSessionLengthInMinutes"`
	SessionBackup                    *LaunchProfileStreamConfigurationSessionBackup  `pulumi:"sessionBackup"`
	SessionPersistenceMode           *LaunchProfileSessionPersistenceMode            `pulumi:"sessionPersistenceMode"`
	SessionStorage                   *LaunchProfileStreamConfigurationSessionStorage `pulumi:"sessionStorage"`
	// <p>The streaming images that users can select from when launching a streaming session
	//             with this launch profile.</p>
	StreamingImageIds   []string                          `pulumi:"streamingImageIds"`
	VolumeConfiguration *LaunchProfileVolumeConfiguration `pulumi:"volumeConfiguration"`
}

// LaunchProfileStreamConfigurationInput is an input type that accepts LaunchProfileStreamConfigurationArgs and LaunchProfileStreamConfigurationOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationInput` via:
//
//	LaunchProfileStreamConfigurationArgs{...}
type LaunchProfileStreamConfigurationInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationOutput() LaunchProfileStreamConfigurationOutput
	ToLaunchProfileStreamConfigurationOutputWithContext(context.Context) LaunchProfileStreamConfigurationOutput
}

// <p>A configuration for a streaming session.</p>
type LaunchProfileStreamConfigurationArgs struct {
	AutomaticTerminationMode LaunchProfileAutomaticTerminationModePtrInput `pulumi:"automaticTerminationMode"`
	ClipboardMode            LaunchProfileStreamingClipboardModeInput      `pulumi:"clipboardMode"`
	// <p>The EC2 instance types that users can select from when launching a streaming session
	//             with this launch profile.</p>
	Ec2InstanceTypes LaunchProfileStreamingInstanceTypeArrayInput `pulumi:"ec2InstanceTypes"`
	// <p>The length of time, in minutes, that a streaming session can be active before it is
	//             stopped or terminated. After this point, Nimble Studio automatically terminates or
	//             stops the session. The default length of time is 690 minutes, and the maximum length of
	//             time is 30 days.</p>
	MaxSessionLengthInMinutes pulumi.Float64PtrInput `pulumi:"maxSessionLengthInMinutes"`
	// <p>Integer that determines if you can start and stop your sessions and how long a session
	//             can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
	//             5760.</p>
	//          <p>This field is allowed only when <code>sessionPersistenceMode</code> is
	//                 <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
	//                 <code>ACTIVATED</code>.</p>
	//          <p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
	//             call <code>StopStreamingSession</code>, the session fails. If the time that a session
	//             stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
	//             value, the session will automatically be terminated (instead of
	//             <code>STOPPED</code>).</p>
	//          <p>If the value is set to a positive number, the session can be stopped. You can call
	//                 <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
	//             If the time that a session stays in the <code>READY</code> state exceeds the
	//                 <code>maxSessionLengthInMinutes</code> value, the session will automatically be
	//             stopped (instead of terminated).</p>
	MaxStoppedSessionLengthInMinutes pulumi.Float64PtrInput                                 `pulumi:"maxStoppedSessionLengthInMinutes"`
	SessionBackup                    LaunchProfileStreamConfigurationSessionBackupPtrInput  `pulumi:"sessionBackup"`
	SessionPersistenceMode           LaunchProfileSessionPersistenceModePtrInput            `pulumi:"sessionPersistenceMode"`
	SessionStorage                   LaunchProfileStreamConfigurationSessionStoragePtrInput `pulumi:"sessionStorage"`
	// <p>The streaming images that users can select from when launching a streaming session
	//             with this launch profile.</p>
	StreamingImageIds   pulumi.StringArrayInput                  `pulumi:"streamingImageIds"`
	VolumeConfiguration LaunchProfileVolumeConfigurationPtrInput `pulumi:"volumeConfiguration"`
}

func (LaunchProfileStreamConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfiguration)(nil)).Elem()
}

func (i LaunchProfileStreamConfigurationArgs) ToLaunchProfileStreamConfigurationOutput() LaunchProfileStreamConfigurationOutput {
	return i.ToLaunchProfileStreamConfigurationOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationArgs) ToLaunchProfileStreamConfigurationOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationOutput)
}

// <p>A configuration for a streaming session.</p>
type LaunchProfileStreamConfigurationOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfiguration)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationOutput) ToLaunchProfileStreamConfigurationOutput() LaunchProfileStreamConfigurationOutput {
	return o
}

func (o LaunchProfileStreamConfigurationOutput) ToLaunchProfileStreamConfigurationOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationOutput {
	return o
}

func (o LaunchProfileStreamConfigurationOutput) AutomaticTerminationMode() LaunchProfileAutomaticTerminationModePtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileAutomaticTerminationMode {
		return v.AutomaticTerminationMode
	}).(LaunchProfileAutomaticTerminationModePtrOutput)
}

func (o LaunchProfileStreamConfigurationOutput) ClipboardMode() LaunchProfileStreamingClipboardModeOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) LaunchProfileStreamingClipboardMode { return v.ClipboardMode }).(LaunchProfileStreamingClipboardModeOutput)
}

// <p>The EC2 instance types that users can select from when launching a streaming session
//
//	with this launch profile.</p>
func (o LaunchProfileStreamConfigurationOutput) Ec2InstanceTypes() LaunchProfileStreamingInstanceTypeArrayOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) []LaunchProfileStreamingInstanceType {
		return v.Ec2InstanceTypes
	}).(LaunchProfileStreamingInstanceTypeArrayOutput)
}

// <p>The length of time, in minutes, that a streaming session can be active before it is
//
//	stopped or terminated. After this point, Nimble Studio automatically terminates or
//	stops the session. The default length of time is 690 minutes, and the maximum length of
//	time is 30 days.</p>
func (o LaunchProfileStreamConfigurationOutput) MaxSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *float64 { return v.MaxSessionLengthInMinutes }).(pulumi.Float64PtrOutput)
}

// <p>Integer that determines if you can start and stop your sessions and how long a session
//
//	   can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
//	   5760.</p>
//	<p>This field is allowed only when <code>sessionPersistenceMode</code> is
//	       <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
//	       <code>ACTIVATED</code>.</p>
//	<p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
//	   call <code>StopStreamingSession</code>, the session fails. If the time that a session
//	   stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
//	   value, the session will automatically be terminated (instead of
//	   <code>STOPPED</code>).</p>
//	<p>If the value is set to a positive number, the session can be stopped. You can call
//	       <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
//	   If the time that a session stays in the <code>READY</code> state exceeds the
//	       <code>maxSessionLengthInMinutes</code> value, the session will automatically be
//	   stopped (instead of terminated).</p>
func (o LaunchProfileStreamConfigurationOutput) MaxStoppedSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *float64 { return v.MaxStoppedSessionLengthInMinutes }).(pulumi.Float64PtrOutput)
}

func (o LaunchProfileStreamConfigurationOutput) SessionBackup() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionBackup {
		return v.SessionBackup
	}).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

func (o LaunchProfileStreamConfigurationOutput) SessionPersistenceMode() LaunchProfileSessionPersistenceModePtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileSessionPersistenceMode {
		return v.SessionPersistenceMode
	}).(LaunchProfileSessionPersistenceModePtrOutput)
}

func (o LaunchProfileStreamConfigurationOutput) SessionStorage() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionStorage {
		return v.SessionStorage
	}).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// <p>The streaming images that users can select from when launching a streaming session
//
//	with this launch profile.</p>
func (o LaunchProfileStreamConfigurationOutput) StreamingImageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) []string { return v.StreamingImageIds }).(pulumi.StringArrayOutput)
}

func (o LaunchProfileStreamConfigurationOutput) VolumeConfiguration() LaunchProfileVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileVolumeConfiguration {
		return v.VolumeConfiguration
	}).(LaunchProfileVolumeConfigurationPtrOutput)
}

type LaunchProfileStreamConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfiguration)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationPtrOutput) ToLaunchProfileStreamConfigurationPtrOutput() LaunchProfileStreamConfigurationPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationPtrOutput) ToLaunchProfileStreamConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationPtrOutput) Elem() LaunchProfileStreamConfigurationOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) LaunchProfileStreamConfiguration {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamConfiguration
		return ret
	}).(LaunchProfileStreamConfigurationOutput)
}

func (o LaunchProfileStreamConfigurationPtrOutput) AutomaticTerminationMode() LaunchProfileAutomaticTerminationModePtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileAutomaticTerminationMode {
		if v == nil {
			return nil
		}
		return v.AutomaticTerminationMode
	}).(LaunchProfileAutomaticTerminationModePtrOutput)
}

func (o LaunchProfileStreamConfigurationPtrOutput) ClipboardMode() LaunchProfileStreamingClipboardModePtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileStreamingClipboardMode {
		if v == nil {
			return nil
		}
		return &v.ClipboardMode
	}).(LaunchProfileStreamingClipboardModePtrOutput)
}

// <p>The EC2 instance types that users can select from when launching a streaming session
//
//	with this launch profile.</p>
func (o LaunchProfileStreamConfigurationPtrOutput) Ec2InstanceTypes() LaunchProfileStreamingInstanceTypeArrayOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) []LaunchProfileStreamingInstanceType {
		if v == nil {
			return nil
		}
		return v.Ec2InstanceTypes
	}).(LaunchProfileStreamingInstanceTypeArrayOutput)
}

// <p>The length of time, in minutes, that a streaming session can be active before it is
//
//	stopped or terminated. After this point, Nimble Studio automatically terminates or
//	stops the session. The default length of time is 690 minutes, and the maximum length of
//	time is 30 days.</p>
func (o LaunchProfileStreamConfigurationPtrOutput) MaxSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxSessionLengthInMinutes
	}).(pulumi.Float64PtrOutput)
}

// <p>Integer that determines if you can start and stop your sessions and how long a session
//
//	   can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
//	   5760.</p>
//	<p>This field is allowed only when <code>sessionPersistenceMode</code> is
//	       <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
//	       <code>ACTIVATED</code>.</p>
//	<p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
//	   call <code>StopStreamingSession</code>, the session fails. If the time that a session
//	   stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
//	   value, the session will automatically be terminated (instead of
//	   <code>STOPPED</code>).</p>
//	<p>If the value is set to a positive number, the session can be stopped. You can call
//	       <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
//	   If the time that a session stays in the <code>READY</code> state exceeds the
//	       <code>maxSessionLengthInMinutes</code> value, the session will automatically be
//	   stopped (instead of terminated).</p>
func (o LaunchProfileStreamConfigurationPtrOutput) MaxStoppedSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxStoppedSessionLengthInMinutes
	}).(pulumi.Float64PtrOutput)
}

func (o LaunchProfileStreamConfigurationPtrOutput) SessionBackup() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionBackup {
		if v == nil {
			return nil
		}
		return v.SessionBackup
	}).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

func (o LaunchProfileStreamConfigurationPtrOutput) SessionPersistenceMode() LaunchProfileSessionPersistenceModePtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileSessionPersistenceMode {
		if v == nil {
			return nil
		}
		return v.SessionPersistenceMode
	}).(LaunchProfileSessionPersistenceModePtrOutput)
}

func (o LaunchProfileStreamConfigurationPtrOutput) SessionStorage() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionStorage {
		if v == nil {
			return nil
		}
		return v.SessionStorage
	}).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// <p>The streaming images that users can select from when launching a streaming session
//
//	with this launch profile.</p>
func (o LaunchProfileStreamConfigurationPtrOutput) StreamingImageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.StreamingImageIds
	}).(pulumi.StringArrayOutput)
}

func (o LaunchProfileStreamConfigurationPtrOutput) VolumeConfiguration() LaunchProfileVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileVolumeConfiguration {
		if v == nil {
			return nil
		}
		return v.VolumeConfiguration
	}).(LaunchProfileVolumeConfigurationPtrOutput)
}

// <p>Configures how streaming sessions are backed up when launched from this launch
//
//	profile.</p>
type LaunchProfileStreamConfigurationSessionBackup struct {
	// <p>The maximum number of backups that each streaming session created from this launch
	//             profile can have.</p>
	MaxBackupsToRetain *float64                        `pulumi:"maxBackupsToRetain"`
	Mode               *LaunchProfileSessionBackupMode `pulumi:"mode"`
}

// LaunchProfileStreamConfigurationSessionBackupInput is an input type that accepts LaunchProfileStreamConfigurationSessionBackupArgs and LaunchProfileStreamConfigurationSessionBackupOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionBackupInput` via:
//
//	LaunchProfileStreamConfigurationSessionBackupArgs{...}
type LaunchProfileStreamConfigurationSessionBackupInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionBackupOutput() LaunchProfileStreamConfigurationSessionBackupOutput
	ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionBackupOutput
}

// <p>Configures how streaming sessions are backed up when launched from this launch
//
//	profile.</p>
type LaunchProfileStreamConfigurationSessionBackupArgs struct {
	// <p>The maximum number of backups that each streaming session created from this launch
	//             profile can have.</p>
	MaxBackupsToRetain pulumi.Float64PtrInput                 `pulumi:"maxBackupsToRetain"`
	Mode               LaunchProfileSessionBackupModePtrInput `pulumi:"mode"`
}

func (LaunchProfileStreamConfigurationSessionBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupOutput() LaunchProfileStreamConfigurationSessionBackupOutput {
	return i.ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionBackupOutput)
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionBackupOutput).ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx)
}

// LaunchProfileStreamConfigurationSessionBackupPtrInput is an input type that accepts LaunchProfileStreamConfigurationSessionBackupArgs, LaunchProfileStreamConfigurationSessionBackupPtr and LaunchProfileStreamConfigurationSessionBackupPtrOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionBackupPtrInput` via:
//
//	        LaunchProfileStreamConfigurationSessionBackupArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileStreamConfigurationSessionBackupPtrInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput
	ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput
}

type launchProfileStreamConfigurationSessionBackupPtrType LaunchProfileStreamConfigurationSessionBackupArgs

func LaunchProfileStreamConfigurationSessionBackupPtr(v *LaunchProfileStreamConfigurationSessionBackupArgs) LaunchProfileStreamConfigurationSessionBackupPtrInput {
	return (*launchProfileStreamConfigurationSessionBackupPtrType)(v)
}

func (*launchProfileStreamConfigurationSessionBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (i *launchProfileStreamConfigurationSessionBackupPtrType) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Background())
}

func (i *launchProfileStreamConfigurationSessionBackupPtrType) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

// <p>Configures how streaming sessions are backed up when launched from this launch
//
//	profile.</p>
type LaunchProfileStreamConfigurationSessionBackupOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupOutput() LaunchProfileStreamConfigurationSessionBackupOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Background())
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileStreamConfigurationSessionBackup) *LaunchProfileStreamConfigurationSessionBackup {
		return &v
	}).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

// <p>The maximum number of backups that each streaming session created from this launch
//
//	profile can have.</p>
func (o LaunchProfileStreamConfigurationSessionBackupOutput) MaxBackupsToRetain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionBackup) *float64 { return v.MaxBackupsToRetain }).(pulumi.Float64PtrOutput)
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) Mode() LaunchProfileSessionBackupModePtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionBackup) *LaunchProfileSessionBackupMode { return v.Mode }).(LaunchProfileSessionBackupModePtrOutput)
}

type LaunchProfileStreamConfigurationSessionBackupPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) Elem() LaunchProfileStreamConfigurationSessionBackupOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionBackup) LaunchProfileStreamConfigurationSessionBackup {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamConfigurationSessionBackup
		return ret
	}).(LaunchProfileStreamConfigurationSessionBackupOutput)
}

// <p>The maximum number of backups that each streaming session created from this launch
//
//	profile can have.</p>
func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) MaxBackupsToRetain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionBackup) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBackupsToRetain
	}).(pulumi.Float64PtrOutput)
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) Mode() LaunchProfileSessionBackupModePtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionBackup) *LaunchProfileSessionBackupMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(LaunchProfileSessionBackupModePtrOutput)
}

// <p>The configuration for a streaming session’s upload storage.</p>
type LaunchProfileStreamConfigurationSessionStorage struct {
	// <p>Allows artists to upload files to their workstations. The only valid option is
	//                 <code>UPLOAD</code>.</p>
	Mode []LaunchProfileStreamingSessionStorageMode `pulumi:"mode"`
	Root *LaunchProfileStreamingSessionStorageRoot  `pulumi:"root"`
}

// LaunchProfileStreamConfigurationSessionStorageInput is an input type that accepts LaunchProfileStreamConfigurationSessionStorageArgs and LaunchProfileStreamConfigurationSessionStorageOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionStorageInput` via:
//
//	LaunchProfileStreamConfigurationSessionStorageArgs{...}
type LaunchProfileStreamConfigurationSessionStorageInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionStorageOutput() LaunchProfileStreamConfigurationSessionStorageOutput
	ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionStorageOutput
}

// <p>The configuration for a streaming session’s upload storage.</p>
type LaunchProfileStreamConfigurationSessionStorageArgs struct {
	// <p>Allows artists to upload files to their workstations. The only valid option is
	//                 <code>UPLOAD</code>.</p>
	Mode LaunchProfileStreamingSessionStorageModeArrayInput `pulumi:"mode"`
	Root LaunchProfileStreamingSessionStorageRootPtrInput   `pulumi:"root"`
}

func (LaunchProfileStreamConfigurationSessionStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStorageOutput() LaunchProfileStreamConfigurationSessionStorageOutput {
	return i.ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionStorageOutput)
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionStorageOutput).ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx)
}

// LaunchProfileStreamConfigurationSessionStoragePtrInput is an input type that accepts LaunchProfileStreamConfigurationSessionStorageArgs, LaunchProfileStreamConfigurationSessionStoragePtr and LaunchProfileStreamConfigurationSessionStoragePtrOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionStoragePtrInput` via:
//
//	        LaunchProfileStreamConfigurationSessionStorageArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileStreamConfigurationSessionStoragePtrInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput
	ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput
}

type launchProfileStreamConfigurationSessionStoragePtrType LaunchProfileStreamConfigurationSessionStorageArgs

func LaunchProfileStreamConfigurationSessionStoragePtr(v *LaunchProfileStreamConfigurationSessionStorageArgs) LaunchProfileStreamConfigurationSessionStoragePtrInput {
	return (*launchProfileStreamConfigurationSessionStoragePtrType)(v)
}

func (*launchProfileStreamConfigurationSessionStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (i *launchProfileStreamConfigurationSessionStoragePtrType) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Background())
}

func (i *launchProfileStreamConfigurationSessionStoragePtrType) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// <p>The configuration for a streaming session’s upload storage.</p>
type LaunchProfileStreamConfigurationSessionStorageOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStorageOutput() LaunchProfileStreamConfigurationSessionStorageOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStorageOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Background())
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileStreamConfigurationSessionStorage) *LaunchProfileStreamConfigurationSessionStorage {
		return &v
	}).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// <p>Allows artists to upload files to their workstations. The only valid option is
//
//	<code>UPLOAD</code>.</p>
func (o LaunchProfileStreamConfigurationSessionStorageOutput) Mode() LaunchProfileStreamingSessionStorageModeArrayOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionStorage) []LaunchProfileStreamingSessionStorageMode {
		return v.Mode
	}).(LaunchProfileStreamingSessionStorageModeArrayOutput)
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) Root() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionStorage) *LaunchProfileStreamingSessionStorageRoot {
		return v.Root
	}).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

type LaunchProfileStreamConfigurationSessionStoragePtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) Elem() LaunchProfileStreamConfigurationSessionStorageOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionStorage) LaunchProfileStreamConfigurationSessionStorage {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamConfigurationSessionStorage
		return ret
	}).(LaunchProfileStreamConfigurationSessionStorageOutput)
}

// <p>Allows artists to upload files to their workstations. The only valid option is
//
//	<code>UPLOAD</code>.</p>
func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) Mode() LaunchProfileStreamingSessionStorageModeArrayOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionStorage) []LaunchProfileStreamingSessionStorageMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(LaunchProfileStreamingSessionStorageModeArrayOutput)
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) Root() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionStorage) *LaunchProfileStreamingSessionStorageRoot {
		if v == nil {
			return nil
		}
		return v.Root
	}).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

// <p>The upload storage root location (folder) on streaming workstations where files are
//
//	uploaded.</p>
type LaunchProfileStreamingSessionStorageRoot struct {
	// <p>The folder path in Linux workstations where files are uploaded.</p>
	Linux *string `pulumi:"linux"`
	// <p>The folder path in Windows workstations where files are uploaded.</p>
	Windows *string `pulumi:"windows"`
}

// LaunchProfileStreamingSessionStorageRootInput is an input type that accepts LaunchProfileStreamingSessionStorageRootArgs and LaunchProfileStreamingSessionStorageRootOutput values.
// You can construct a concrete instance of `LaunchProfileStreamingSessionStorageRootInput` via:
//
//	LaunchProfileStreamingSessionStorageRootArgs{...}
type LaunchProfileStreamingSessionStorageRootInput interface {
	pulumi.Input

	ToLaunchProfileStreamingSessionStorageRootOutput() LaunchProfileStreamingSessionStorageRootOutput
	ToLaunchProfileStreamingSessionStorageRootOutputWithContext(context.Context) LaunchProfileStreamingSessionStorageRootOutput
}

// <p>The upload storage root location (folder) on streaming workstations where files are
//
//	uploaded.</p>
type LaunchProfileStreamingSessionStorageRootArgs struct {
	// <p>The folder path in Linux workstations where files are uploaded.</p>
	Linux pulumi.StringPtrInput `pulumi:"linux"`
	// <p>The folder path in Windows workstations where files are uploaded.</p>
	Windows pulumi.StringPtrInput `pulumi:"windows"`
}

func (LaunchProfileStreamingSessionStorageRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootOutput() LaunchProfileStreamingSessionStorageRootOutput {
	return i.ToLaunchProfileStreamingSessionStorageRootOutputWithContext(context.Background())
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamingSessionStorageRootOutput)
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return i.ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Background())
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamingSessionStorageRootOutput).ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx)
}

// LaunchProfileStreamingSessionStorageRootPtrInput is an input type that accepts LaunchProfileStreamingSessionStorageRootArgs, LaunchProfileStreamingSessionStorageRootPtr and LaunchProfileStreamingSessionStorageRootPtrOutput values.
// You can construct a concrete instance of `LaunchProfileStreamingSessionStorageRootPtrInput` via:
//
//	        LaunchProfileStreamingSessionStorageRootArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileStreamingSessionStorageRootPtrInput interface {
	pulumi.Input

	ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput
	ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput
}

type launchProfileStreamingSessionStorageRootPtrType LaunchProfileStreamingSessionStorageRootArgs

func LaunchProfileStreamingSessionStorageRootPtr(v *LaunchProfileStreamingSessionStorageRootArgs) LaunchProfileStreamingSessionStorageRootPtrInput {
	return (*launchProfileStreamingSessionStorageRootPtrType)(v)
}

func (*launchProfileStreamingSessionStorageRootPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (i *launchProfileStreamingSessionStorageRootPtrType) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return i.ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Background())
}

func (i *launchProfileStreamingSessionStorageRootPtrType) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

// <p>The upload storage root location (folder) on streaming workstations where files are
//
//	uploaded.</p>
type LaunchProfileStreamingSessionStorageRootOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamingSessionStorageRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootOutput() LaunchProfileStreamingSessionStorageRootOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Background())
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileStreamingSessionStorageRoot) *LaunchProfileStreamingSessionStorageRoot {
		return &v
	}).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

// <p>The folder path in Linux workstations where files are uploaded.</p>
func (o LaunchProfileStreamingSessionStorageRootOutput) Linux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamingSessionStorageRoot) *string { return v.Linux }).(pulumi.StringPtrOutput)
}

// <p>The folder path in Windows workstations where files are uploaded.</p>
func (o LaunchProfileStreamingSessionStorageRootOutput) Windows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamingSessionStorageRoot) *string { return v.Windows }).(pulumi.StringPtrOutput)
}

type LaunchProfileStreamingSessionStorageRootPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamingSessionStorageRootPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (o LaunchProfileStreamingSessionStorageRootPtrOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootPtrOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootPtrOutput) Elem() LaunchProfileStreamingSessionStorageRootOutput {
	return o.ApplyT(func(v *LaunchProfileStreamingSessionStorageRoot) LaunchProfileStreamingSessionStorageRoot {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamingSessionStorageRoot
		return ret
	}).(LaunchProfileStreamingSessionStorageRootOutput)
}

// <p>The folder path in Linux workstations where files are uploaded.</p>
func (o LaunchProfileStreamingSessionStorageRootPtrOutput) Linux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamingSessionStorageRoot) *string {
		if v == nil {
			return nil
		}
		return v.Linux
	}).(pulumi.StringPtrOutput)
}

// <p>The folder path in Windows workstations where files are uploaded.</p>
func (o LaunchProfileStreamingSessionStorageRootPtrOutput) Windows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamingSessionStorageRoot) *string {
		if v == nil {
			return nil
		}
		return v.Windows
	}).(pulumi.StringPtrOutput)
}

type LaunchProfileTags struct {
}

// LaunchProfileTagsInput is an input type that accepts LaunchProfileTagsArgs and LaunchProfileTagsOutput values.
// You can construct a concrete instance of `LaunchProfileTagsInput` via:
//
//	LaunchProfileTagsArgs{...}
type LaunchProfileTagsInput interface {
	pulumi.Input

	ToLaunchProfileTagsOutput() LaunchProfileTagsOutput
	ToLaunchProfileTagsOutputWithContext(context.Context) LaunchProfileTagsOutput
}

type LaunchProfileTagsArgs struct {
}

func (LaunchProfileTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileTags)(nil)).Elem()
}

func (i LaunchProfileTagsArgs) ToLaunchProfileTagsOutput() LaunchProfileTagsOutput {
	return i.ToLaunchProfileTagsOutputWithContext(context.Background())
}

func (i LaunchProfileTagsArgs) ToLaunchProfileTagsOutputWithContext(ctx context.Context) LaunchProfileTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileTagsOutput)
}

func (i LaunchProfileTagsArgs) ToLaunchProfileTagsPtrOutput() LaunchProfileTagsPtrOutput {
	return i.ToLaunchProfileTagsPtrOutputWithContext(context.Background())
}

func (i LaunchProfileTagsArgs) ToLaunchProfileTagsPtrOutputWithContext(ctx context.Context) LaunchProfileTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileTagsOutput).ToLaunchProfileTagsPtrOutputWithContext(ctx)
}

// LaunchProfileTagsPtrInput is an input type that accepts LaunchProfileTagsArgs, LaunchProfileTagsPtr and LaunchProfileTagsPtrOutput values.
// You can construct a concrete instance of `LaunchProfileTagsPtrInput` via:
//
//	        LaunchProfileTagsArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileTagsPtrInput interface {
	pulumi.Input

	ToLaunchProfileTagsPtrOutput() LaunchProfileTagsPtrOutput
	ToLaunchProfileTagsPtrOutputWithContext(context.Context) LaunchProfileTagsPtrOutput
}

type launchProfileTagsPtrType LaunchProfileTagsArgs

func LaunchProfileTagsPtr(v *LaunchProfileTagsArgs) LaunchProfileTagsPtrInput {
	return (*launchProfileTagsPtrType)(v)
}

func (*launchProfileTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileTags)(nil)).Elem()
}

func (i *launchProfileTagsPtrType) ToLaunchProfileTagsPtrOutput() LaunchProfileTagsPtrOutput {
	return i.ToLaunchProfileTagsPtrOutputWithContext(context.Background())
}

func (i *launchProfileTagsPtrType) ToLaunchProfileTagsPtrOutputWithContext(ctx context.Context) LaunchProfileTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileTagsPtrOutput)
}

type LaunchProfileTagsOutput struct{ *pulumi.OutputState }

func (LaunchProfileTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileTags)(nil)).Elem()
}

func (o LaunchProfileTagsOutput) ToLaunchProfileTagsOutput() LaunchProfileTagsOutput {
	return o
}

func (o LaunchProfileTagsOutput) ToLaunchProfileTagsOutputWithContext(ctx context.Context) LaunchProfileTagsOutput {
	return o
}

func (o LaunchProfileTagsOutput) ToLaunchProfileTagsPtrOutput() LaunchProfileTagsPtrOutput {
	return o.ToLaunchProfileTagsPtrOutputWithContext(context.Background())
}

func (o LaunchProfileTagsOutput) ToLaunchProfileTagsPtrOutputWithContext(ctx context.Context) LaunchProfileTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileTags) *LaunchProfileTags {
		return &v
	}).(LaunchProfileTagsPtrOutput)
}

type LaunchProfileTagsPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileTags)(nil)).Elem()
}

func (o LaunchProfileTagsPtrOutput) ToLaunchProfileTagsPtrOutput() LaunchProfileTagsPtrOutput {
	return o
}

func (o LaunchProfileTagsPtrOutput) ToLaunchProfileTagsPtrOutputWithContext(ctx context.Context) LaunchProfileTagsPtrOutput {
	return o
}

func (o LaunchProfileTagsPtrOutput) Elem() LaunchProfileTagsOutput {
	return o.ApplyT(func(v *LaunchProfileTags) LaunchProfileTags {
		if v != nil {
			return *v
		}
		var ret LaunchProfileTags
		return ret
	}).(LaunchProfileTagsOutput)
}

// <p>Custom volume configuration for the root volumes that are attached to streaming
//
//	   sessions.</p>
//	<p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
//	       <code>ACTIVATED</code>.</p>
type LaunchProfileVolumeConfiguration struct {
	// <p>The number of I/O operations per second for the root volume that is attached to
	//             streaming session.</p>
	Iops *float64 `pulumi:"iops"`
	// <p>The size of the root volume that is attached to the streaming session. The root volume
	//             size is measured in GiBs.</p>
	Size *float64 `pulumi:"size"`
	// <p>The throughput to provision for the root volume that is attached to the streaming
	//             session. The throughput is measured in MiB/s.</p>
	Throughput *float64 `pulumi:"throughput"`
}

// LaunchProfileVolumeConfigurationInput is an input type that accepts LaunchProfileVolumeConfigurationArgs and LaunchProfileVolumeConfigurationOutput values.
// You can construct a concrete instance of `LaunchProfileVolumeConfigurationInput` via:
//
//	LaunchProfileVolumeConfigurationArgs{...}
type LaunchProfileVolumeConfigurationInput interface {
	pulumi.Input

	ToLaunchProfileVolumeConfigurationOutput() LaunchProfileVolumeConfigurationOutput
	ToLaunchProfileVolumeConfigurationOutputWithContext(context.Context) LaunchProfileVolumeConfigurationOutput
}

// <p>Custom volume configuration for the root volumes that are attached to streaming
//
//	   sessions.</p>
//	<p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
//	       <code>ACTIVATED</code>.</p>
type LaunchProfileVolumeConfigurationArgs struct {
	// <p>The number of I/O operations per second for the root volume that is attached to
	//             streaming session.</p>
	Iops pulumi.Float64PtrInput `pulumi:"iops"`
	// <p>The size of the root volume that is attached to the streaming session. The root volume
	//             size is measured in GiBs.</p>
	Size pulumi.Float64PtrInput `pulumi:"size"`
	// <p>The throughput to provision for the root volume that is attached to the streaming
	//             session. The throughput is measured in MiB/s.</p>
	Throughput pulumi.Float64PtrInput `pulumi:"throughput"`
}

func (LaunchProfileVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationOutput() LaunchProfileVolumeConfigurationOutput {
	return i.ToLaunchProfileVolumeConfigurationOutputWithContext(context.Background())
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileVolumeConfigurationOutput)
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return i.ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileVolumeConfigurationOutput).ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx)
}

// LaunchProfileVolumeConfigurationPtrInput is an input type that accepts LaunchProfileVolumeConfigurationArgs, LaunchProfileVolumeConfigurationPtr and LaunchProfileVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `LaunchProfileVolumeConfigurationPtrInput` via:
//
//	        LaunchProfileVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput
	ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Context) LaunchProfileVolumeConfigurationPtrOutput
}

type launchProfileVolumeConfigurationPtrType LaunchProfileVolumeConfigurationArgs

func LaunchProfileVolumeConfigurationPtr(v *LaunchProfileVolumeConfigurationArgs) LaunchProfileVolumeConfigurationPtrInput {
	return (*launchProfileVolumeConfigurationPtrType)(v)
}

func (*launchProfileVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (i *launchProfileVolumeConfigurationPtrType) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return i.ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *launchProfileVolumeConfigurationPtrType) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileVolumeConfigurationPtrOutput)
}

// <p>Custom volume configuration for the root volumes that are attached to streaming
//
//	   sessions.</p>
//	<p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
//	       <code>ACTIVATED</code>.</p>
type LaunchProfileVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (LaunchProfileVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationOutput() LaunchProfileVolumeConfigurationOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return o.ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileVolumeConfiguration) *LaunchProfileVolumeConfiguration {
		return &v
	}).(LaunchProfileVolumeConfigurationPtrOutput)
}

// <p>The number of I/O operations per second for the root volume that is attached to
//
//	streaming session.</p>
func (o LaunchProfileVolumeConfigurationOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileVolumeConfiguration) *float64 { return v.Iops }).(pulumi.Float64PtrOutput)
}

// <p>The size of the root volume that is attached to the streaming session. The root volume
//
//	size is measured in GiBs.</p>
func (o LaunchProfileVolumeConfigurationOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileVolumeConfiguration) *float64 { return v.Size }).(pulumi.Float64PtrOutput)
}

// <p>The throughput to provision for the root volume that is attached to the streaming
//
//	session. The throughput is measured in MiB/s.</p>
func (o LaunchProfileVolumeConfigurationOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileVolumeConfiguration) *float64 { return v.Throughput }).(pulumi.Float64PtrOutput)
}

type LaunchProfileVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (o LaunchProfileVolumeConfigurationPtrOutput) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationPtrOutput) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationPtrOutput) Elem() LaunchProfileVolumeConfigurationOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) LaunchProfileVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret LaunchProfileVolumeConfiguration
		return ret
	}).(LaunchProfileVolumeConfigurationOutput)
}

// <p>The number of I/O operations per second for the root volume that is attached to
//
//	streaming session.</p>
func (o LaunchProfileVolumeConfigurationPtrOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.Float64PtrOutput)
}

// <p>The size of the root volume that is attached to the streaming session. The root volume
//
//	size is measured in GiBs.</p>
func (o LaunchProfileVolumeConfigurationPtrOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.Float64PtrOutput)
}

// <p>The throughput to provision for the root volume that is attached to the streaming
//
//	session. The throughput is measured in MiB/s.</p>
func (o LaunchProfileVolumeConfigurationPtrOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.Float64PtrOutput)
}

// <p>TODO</p>
type StreamingImageEncryptionConfiguration struct {
	// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
	KeyArn  *string                                      `pulumi:"keyArn"`
	KeyType StreamingImageEncryptionConfigurationKeyType `pulumi:"keyType"`
}

// <p>TODO</p>
type StreamingImageEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingImageEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingImageEncryptionConfiguration)(nil)).Elem()
}

func (o StreamingImageEncryptionConfigurationOutput) ToStreamingImageEncryptionConfigurationOutput() StreamingImageEncryptionConfigurationOutput {
	return o
}

func (o StreamingImageEncryptionConfigurationOutput) ToStreamingImageEncryptionConfigurationOutputWithContext(ctx context.Context) StreamingImageEncryptionConfigurationOutput {
	return o
}

// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
func (o StreamingImageEncryptionConfigurationOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingImageEncryptionConfiguration) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

func (o StreamingImageEncryptionConfigurationOutput) KeyType() StreamingImageEncryptionConfigurationKeyTypeOutput {
	return o.ApplyT(func(v StreamingImageEncryptionConfiguration) StreamingImageEncryptionConfigurationKeyType {
		return v.KeyType
	}).(StreamingImageEncryptionConfigurationKeyTypeOutput)
}

type StreamingImageEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingImageEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingImageEncryptionConfiguration)(nil)).Elem()
}

func (o StreamingImageEncryptionConfigurationPtrOutput) ToStreamingImageEncryptionConfigurationPtrOutput() StreamingImageEncryptionConfigurationPtrOutput {
	return o
}

func (o StreamingImageEncryptionConfigurationPtrOutput) ToStreamingImageEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StreamingImageEncryptionConfigurationPtrOutput {
	return o
}

func (o StreamingImageEncryptionConfigurationPtrOutput) Elem() StreamingImageEncryptionConfigurationOutput {
	return o.ApplyT(func(v *StreamingImageEncryptionConfiguration) StreamingImageEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret StreamingImageEncryptionConfiguration
		return ret
	}).(StreamingImageEncryptionConfigurationOutput)
}

// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
func (o StreamingImageEncryptionConfigurationPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingImageEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

func (o StreamingImageEncryptionConfigurationPtrOutput) KeyType() StreamingImageEncryptionConfigurationKeyTypePtrOutput {
	return o.ApplyT(func(v *StreamingImageEncryptionConfiguration) *StreamingImageEncryptionConfigurationKeyType {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(StreamingImageEncryptionConfigurationKeyTypePtrOutput)
}

type StreamingImageTags struct {
}

// StreamingImageTagsInput is an input type that accepts StreamingImageTagsArgs and StreamingImageTagsOutput values.
// You can construct a concrete instance of `StreamingImageTagsInput` via:
//
//	StreamingImageTagsArgs{...}
type StreamingImageTagsInput interface {
	pulumi.Input

	ToStreamingImageTagsOutput() StreamingImageTagsOutput
	ToStreamingImageTagsOutputWithContext(context.Context) StreamingImageTagsOutput
}

type StreamingImageTagsArgs struct {
}

func (StreamingImageTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingImageTags)(nil)).Elem()
}

func (i StreamingImageTagsArgs) ToStreamingImageTagsOutput() StreamingImageTagsOutput {
	return i.ToStreamingImageTagsOutputWithContext(context.Background())
}

func (i StreamingImageTagsArgs) ToStreamingImageTagsOutputWithContext(ctx context.Context) StreamingImageTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingImageTagsOutput)
}

func (i StreamingImageTagsArgs) ToStreamingImageTagsPtrOutput() StreamingImageTagsPtrOutput {
	return i.ToStreamingImageTagsPtrOutputWithContext(context.Background())
}

func (i StreamingImageTagsArgs) ToStreamingImageTagsPtrOutputWithContext(ctx context.Context) StreamingImageTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingImageTagsOutput).ToStreamingImageTagsPtrOutputWithContext(ctx)
}

// StreamingImageTagsPtrInput is an input type that accepts StreamingImageTagsArgs, StreamingImageTagsPtr and StreamingImageTagsPtrOutput values.
// You can construct a concrete instance of `StreamingImageTagsPtrInput` via:
//
//	        StreamingImageTagsArgs{...}
//
//	or:
//
//	        nil
type StreamingImageTagsPtrInput interface {
	pulumi.Input

	ToStreamingImageTagsPtrOutput() StreamingImageTagsPtrOutput
	ToStreamingImageTagsPtrOutputWithContext(context.Context) StreamingImageTagsPtrOutput
}

type streamingImageTagsPtrType StreamingImageTagsArgs

func StreamingImageTagsPtr(v *StreamingImageTagsArgs) StreamingImageTagsPtrInput {
	return (*streamingImageTagsPtrType)(v)
}

func (*streamingImageTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingImageTags)(nil)).Elem()
}

func (i *streamingImageTagsPtrType) ToStreamingImageTagsPtrOutput() StreamingImageTagsPtrOutput {
	return i.ToStreamingImageTagsPtrOutputWithContext(context.Background())
}

func (i *streamingImageTagsPtrType) ToStreamingImageTagsPtrOutputWithContext(ctx context.Context) StreamingImageTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingImageTagsPtrOutput)
}

type StreamingImageTagsOutput struct{ *pulumi.OutputState }

func (StreamingImageTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingImageTags)(nil)).Elem()
}

func (o StreamingImageTagsOutput) ToStreamingImageTagsOutput() StreamingImageTagsOutput {
	return o
}

func (o StreamingImageTagsOutput) ToStreamingImageTagsOutputWithContext(ctx context.Context) StreamingImageTagsOutput {
	return o
}

func (o StreamingImageTagsOutput) ToStreamingImageTagsPtrOutput() StreamingImageTagsPtrOutput {
	return o.ToStreamingImageTagsPtrOutputWithContext(context.Background())
}

func (o StreamingImageTagsOutput) ToStreamingImageTagsPtrOutputWithContext(ctx context.Context) StreamingImageTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingImageTags) *StreamingImageTags {
		return &v
	}).(StreamingImageTagsPtrOutput)
}

type StreamingImageTagsPtrOutput struct{ *pulumi.OutputState }

func (StreamingImageTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingImageTags)(nil)).Elem()
}

func (o StreamingImageTagsPtrOutput) ToStreamingImageTagsPtrOutput() StreamingImageTagsPtrOutput {
	return o
}

func (o StreamingImageTagsPtrOutput) ToStreamingImageTagsPtrOutputWithContext(ctx context.Context) StreamingImageTagsPtrOutput {
	return o
}

func (o StreamingImageTagsPtrOutput) Elem() StreamingImageTagsOutput {
	return o.ApplyT(func(v *StreamingImageTags) StreamingImageTags {
		if v != nil {
			return *v
		}
		var ret StreamingImageTags
		return ret
	}).(StreamingImageTagsOutput)
}

// <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
//
//	pair.</p>
type StudioComponentActiveDirectoryComputerAttribute struct {
	// <p>The name for the LDAP attribute.</p>
	Name *string `pulumi:"name"`
	// <p>The value for the LDAP attribute.</p>
	Value *string `pulumi:"value"`
}

// StudioComponentActiveDirectoryComputerAttributeInput is an input type that accepts StudioComponentActiveDirectoryComputerAttributeArgs and StudioComponentActiveDirectoryComputerAttributeOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryComputerAttributeInput` via:
//
//	StudioComponentActiveDirectoryComputerAttributeArgs{...}
type StudioComponentActiveDirectoryComputerAttributeInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryComputerAttributeOutput() StudioComponentActiveDirectoryComputerAttributeOutput
	ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(context.Context) StudioComponentActiveDirectoryComputerAttributeOutput
}

// <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
//
//	pair.</p>
type StudioComponentActiveDirectoryComputerAttributeArgs struct {
	// <p>The name for the LDAP attribute.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
	// <p>The value for the LDAP attribute.</p>
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StudioComponentActiveDirectoryComputerAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (i StudioComponentActiveDirectoryComputerAttributeArgs) ToStudioComponentActiveDirectoryComputerAttributeOutput() StudioComponentActiveDirectoryComputerAttributeOutput {
	return i.ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryComputerAttributeArgs) ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryComputerAttributeOutput)
}

// StudioComponentActiveDirectoryComputerAttributeArrayInput is an input type that accepts StudioComponentActiveDirectoryComputerAttributeArray and StudioComponentActiveDirectoryComputerAttributeArrayOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryComputerAttributeArrayInput` via:
//
//	StudioComponentActiveDirectoryComputerAttributeArray{ StudioComponentActiveDirectoryComputerAttributeArgs{...} }
type StudioComponentActiveDirectoryComputerAttributeArrayInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryComputerAttributeArrayOutput() StudioComponentActiveDirectoryComputerAttributeArrayOutput
	ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(context.Context) StudioComponentActiveDirectoryComputerAttributeArrayOutput
}

type StudioComponentActiveDirectoryComputerAttributeArray []StudioComponentActiveDirectoryComputerAttributeInput

func (StudioComponentActiveDirectoryComputerAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (i StudioComponentActiveDirectoryComputerAttributeArray) ToStudioComponentActiveDirectoryComputerAttributeArrayOutput() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return i.ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryComputerAttributeArray) ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryComputerAttributeArrayOutput)
}

// <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
//
//	pair.</p>
type StudioComponentActiveDirectoryComputerAttributeOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryComputerAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryComputerAttributeOutput) ToStudioComponentActiveDirectoryComputerAttributeOutput() StudioComponentActiveDirectoryComputerAttributeOutput {
	return o
}

func (o StudioComponentActiveDirectoryComputerAttributeOutput) ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeOutput {
	return o
}

// <p>The name for the LDAP attribute.</p>
func (o StudioComponentActiveDirectoryComputerAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryComputerAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The value for the LDAP attribute.</p>
func (o StudioComponentActiveDirectoryComputerAttributeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryComputerAttribute) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StudioComponentActiveDirectoryComputerAttributeArrayOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryComputerAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryComputerAttributeArrayOutput) ToStudioComponentActiveDirectoryComputerAttributeArrayOutput() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o
}

func (o StudioComponentActiveDirectoryComputerAttributeArrayOutput) ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o
}

func (o StudioComponentActiveDirectoryComputerAttributeArrayOutput) Index(i pulumi.IntInput) StudioComponentActiveDirectoryComputerAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StudioComponentActiveDirectoryComputerAttribute {
		return vs[0].([]StudioComponentActiveDirectoryComputerAttribute)[vs[1].(int)]
	}).(StudioComponentActiveDirectoryComputerAttributeOutput)
}

// <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
//
//	resource.</p>
type StudioComponentActiveDirectoryConfiguration struct {
	// <p>A collection of custom attributes for an Active Directory computer.</p>
	ComputerAttributes []StudioComponentActiveDirectoryComputerAttribute `pulumi:"computerAttributes"`
	// <p>The directory ID of the Directory Service for Microsoft Active Directory to access
	//             using this studio component.</p>
	DirectoryId *string `pulumi:"directoryId"`
	// <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
	//             computer.</p>
	OrganizationalUnitDistinguishedName *string `pulumi:"organizationalUnitDistinguishedName"`
}

// StudioComponentActiveDirectoryConfigurationInput is an input type that accepts StudioComponentActiveDirectoryConfigurationArgs and StudioComponentActiveDirectoryConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryConfigurationInput` via:
//
//	StudioComponentActiveDirectoryConfigurationArgs{...}
type StudioComponentActiveDirectoryConfigurationInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryConfigurationOutput() StudioComponentActiveDirectoryConfigurationOutput
	ToStudioComponentActiveDirectoryConfigurationOutputWithContext(context.Context) StudioComponentActiveDirectoryConfigurationOutput
}

// <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
//
//	resource.</p>
type StudioComponentActiveDirectoryConfigurationArgs struct {
	// <p>A collection of custom attributes for an Active Directory computer.</p>
	ComputerAttributes StudioComponentActiveDirectoryComputerAttributeArrayInput `pulumi:"computerAttributes"`
	// <p>The directory ID of the Directory Service for Microsoft Active Directory to access
	//             using this studio component.</p>
	DirectoryId pulumi.StringPtrInput `pulumi:"directoryId"`
	// <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
	//             computer.</p>
	OrganizationalUnitDistinguishedName pulumi.StringPtrInput `pulumi:"organizationalUnitDistinguishedName"`
}

func (StudioComponentActiveDirectoryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationOutput() StudioComponentActiveDirectoryConfigurationOutput {
	return i.ToStudioComponentActiveDirectoryConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryConfigurationOutput)
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return i.ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryConfigurationOutput).ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentActiveDirectoryConfigurationPtrInput is an input type that accepts StudioComponentActiveDirectoryConfigurationArgs, StudioComponentActiveDirectoryConfigurationPtr and StudioComponentActiveDirectoryConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryConfigurationPtrInput` via:
//
//	        StudioComponentActiveDirectoryConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentActiveDirectoryConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput
	ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput
}

type studioComponentActiveDirectoryConfigurationPtrType StudioComponentActiveDirectoryConfigurationArgs

func StudioComponentActiveDirectoryConfigurationPtr(v *StudioComponentActiveDirectoryConfigurationArgs) StudioComponentActiveDirectoryConfigurationPtrInput {
	return (*studioComponentActiveDirectoryConfigurationPtrType)(v)
}

func (*studioComponentActiveDirectoryConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (i *studioComponentActiveDirectoryConfigurationPtrType) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return i.ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentActiveDirectoryConfigurationPtrType) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

// <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
//
//	resource.</p>
type StudioComponentActiveDirectoryConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationOutput() StudioComponentActiveDirectoryConfigurationOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentActiveDirectoryConfiguration) *StudioComponentActiveDirectoryConfiguration {
		return &v
	}).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

// <p>A collection of custom attributes for an Active Directory computer.</p>
func (o StudioComponentActiveDirectoryConfigurationOutput) ComputerAttributes() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryConfiguration) []StudioComponentActiveDirectoryComputerAttribute {
		return v.ComputerAttributes
	}).(StudioComponentActiveDirectoryComputerAttributeArrayOutput)
}

// <p>The directory ID of the Directory Service for Microsoft Active Directory to access
//
//	using this studio component.</p>
func (o StudioComponentActiveDirectoryConfigurationOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryConfiguration) *string { return v.DirectoryId }).(pulumi.StringPtrOutput)
}

// <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
//
//	computer.</p>
func (o StudioComponentActiveDirectoryConfigurationOutput) OrganizationalUnitDistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryConfiguration) *string {
		return v.OrganizationalUnitDistinguishedName
	}).(pulumi.StringPtrOutput)
}

type StudioComponentActiveDirectoryConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryConfigurationPtrOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationPtrOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationPtrOutput) Elem() StudioComponentActiveDirectoryConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) StudioComponentActiveDirectoryConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentActiveDirectoryConfiguration
		return ret
	}).(StudioComponentActiveDirectoryConfigurationOutput)
}

// <p>A collection of custom attributes for an Active Directory computer.</p>
func (o StudioComponentActiveDirectoryConfigurationPtrOutput) ComputerAttributes() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) []StudioComponentActiveDirectoryComputerAttribute {
		if v == nil {
			return nil
		}
		return v.ComputerAttributes
	}).(StudioComponentActiveDirectoryComputerAttributeArrayOutput)
}

// <p>The directory ID of the Directory Service for Microsoft Active Directory to access
//
//	using this studio component.</p>
func (o StudioComponentActiveDirectoryConfigurationPtrOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DirectoryId
	}).(pulumi.StringPtrOutput)
}

// <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
//
//	computer.</p>
func (o StudioComponentActiveDirectoryConfigurationPtrOutput) OrganizationalUnitDistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitDistinguishedName
	}).(pulumi.StringPtrOutput)
}

// <p>The configuration for a render farm that is associated with a studio resource.</p>
type StudioComponentComputeFarmConfiguration struct {
	// <p>The name of an Active Directory user that is used on ComputeFarm worker
	//             instances.</p>
	ActiveDirectoryUser *string `pulumi:"activeDirectoryUser"`
	// <p>The endpoint of the ComputeFarm that is accessed by the studio component
	//             resource.</p>
	Endpoint *string `pulumi:"endpoint"`
}

// StudioComponentComputeFarmConfigurationInput is an input type that accepts StudioComponentComputeFarmConfigurationArgs and StudioComponentComputeFarmConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentComputeFarmConfigurationInput` via:
//
//	StudioComponentComputeFarmConfigurationArgs{...}
type StudioComponentComputeFarmConfigurationInput interface {
	pulumi.Input

	ToStudioComponentComputeFarmConfigurationOutput() StudioComponentComputeFarmConfigurationOutput
	ToStudioComponentComputeFarmConfigurationOutputWithContext(context.Context) StudioComponentComputeFarmConfigurationOutput
}

// <p>The configuration for a render farm that is associated with a studio resource.</p>
type StudioComponentComputeFarmConfigurationArgs struct {
	// <p>The name of an Active Directory user that is used on ComputeFarm worker
	//             instances.</p>
	ActiveDirectoryUser pulumi.StringPtrInput `pulumi:"activeDirectoryUser"`
	// <p>The endpoint of the ComputeFarm that is accessed by the studio component
	//             resource.</p>
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
}

func (StudioComponentComputeFarmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationOutput() StudioComponentComputeFarmConfigurationOutput {
	return i.ToStudioComponentComputeFarmConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentComputeFarmConfigurationOutput)
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return i.ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentComputeFarmConfigurationOutput).ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentComputeFarmConfigurationPtrInput is an input type that accepts StudioComponentComputeFarmConfigurationArgs, StudioComponentComputeFarmConfigurationPtr and StudioComponentComputeFarmConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentComputeFarmConfigurationPtrInput` via:
//
//	        StudioComponentComputeFarmConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentComputeFarmConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput
	ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Context) StudioComponentComputeFarmConfigurationPtrOutput
}

type studioComponentComputeFarmConfigurationPtrType StudioComponentComputeFarmConfigurationArgs

func StudioComponentComputeFarmConfigurationPtr(v *StudioComponentComputeFarmConfigurationArgs) StudioComponentComputeFarmConfigurationPtrInput {
	return (*studioComponentComputeFarmConfigurationPtrType)(v)
}

func (*studioComponentComputeFarmConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (i *studioComponentComputeFarmConfigurationPtrType) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return i.ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentComputeFarmConfigurationPtrType) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentComputeFarmConfigurationPtrOutput)
}

// <p>The configuration for a render farm that is associated with a studio resource.</p>
type StudioComponentComputeFarmConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentComputeFarmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationOutput() StudioComponentComputeFarmConfigurationOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentComputeFarmConfiguration) *StudioComponentComputeFarmConfiguration {
		return &v
	}).(StudioComponentComputeFarmConfigurationPtrOutput)
}

// <p>The name of an Active Directory user that is used on ComputeFarm worker
//
//	instances.</p>
func (o StudioComponentComputeFarmConfigurationOutput) ActiveDirectoryUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentComputeFarmConfiguration) *string { return v.ActiveDirectoryUser }).(pulumi.StringPtrOutput)
}

// <p>The endpoint of the ComputeFarm that is accessed by the studio component
//
//	resource.</p>
func (o StudioComponentComputeFarmConfigurationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentComputeFarmConfiguration) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

type StudioComponentComputeFarmConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentComputeFarmConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (o StudioComponentComputeFarmConfigurationPtrOutput) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationPtrOutput) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationPtrOutput) Elem() StudioComponentComputeFarmConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentComputeFarmConfiguration) StudioComponentComputeFarmConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentComputeFarmConfiguration
		return ret
	}).(StudioComponentComputeFarmConfigurationOutput)
}

// <p>The name of an Active Directory user that is used on ComputeFarm worker
//
//	instances.</p>
func (o StudioComponentComputeFarmConfigurationPtrOutput) ActiveDirectoryUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentComputeFarmConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryUser
	}).(pulumi.StringPtrOutput)
}

// <p>The endpoint of the ComputeFarm that is accessed by the studio component
//
//	resource.</p>
func (o StudioComponentComputeFarmConfigurationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentComputeFarmConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration0Properties struct {
	ActiveDirectoryConfiguration StudioComponentActiveDirectoryConfiguration `pulumi:"activeDirectoryConfiguration"`
}

// StudioComponentConfiguration0PropertiesInput is an input type that accepts StudioComponentConfiguration0PropertiesArgs and StudioComponentConfiguration0PropertiesOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration0PropertiesInput` via:
//
//	StudioComponentConfiguration0PropertiesArgs{...}
type StudioComponentConfiguration0PropertiesInput interface {
	pulumi.Input

	ToStudioComponentConfiguration0PropertiesOutput() StudioComponentConfiguration0PropertiesOutput
	ToStudioComponentConfiguration0PropertiesOutputWithContext(context.Context) StudioComponentConfiguration0PropertiesOutput
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration0PropertiesArgs struct {
	ActiveDirectoryConfiguration StudioComponentActiveDirectoryConfigurationInput `pulumi:"activeDirectoryConfiguration"`
}

func (StudioComponentConfiguration0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration0Properties)(nil)).Elem()
}

func (i StudioComponentConfiguration0PropertiesArgs) ToStudioComponentConfiguration0PropertiesOutput() StudioComponentConfiguration0PropertiesOutput {
	return i.ToStudioComponentConfiguration0PropertiesOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration0PropertiesArgs) ToStudioComponentConfiguration0PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration0PropertiesOutput)
}

func (i StudioComponentConfiguration0PropertiesArgs) ToStudioComponentConfiguration0PropertiesPtrOutput() StudioComponentConfiguration0PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration0PropertiesArgs) ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration0PropertiesOutput).ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(ctx)
}

// StudioComponentConfiguration0PropertiesPtrInput is an input type that accepts StudioComponentConfiguration0PropertiesArgs, StudioComponentConfiguration0PropertiesPtr and StudioComponentConfiguration0PropertiesPtrOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration0PropertiesPtrInput` via:
//
//	        StudioComponentConfiguration0PropertiesArgs{...}
//
//	or:
//
//	        nil
type StudioComponentConfiguration0PropertiesPtrInput interface {
	pulumi.Input

	ToStudioComponentConfiguration0PropertiesPtrOutput() StudioComponentConfiguration0PropertiesPtrOutput
	ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(context.Context) StudioComponentConfiguration0PropertiesPtrOutput
}

type studioComponentConfiguration0PropertiesPtrType StudioComponentConfiguration0PropertiesArgs

func StudioComponentConfiguration0PropertiesPtr(v *StudioComponentConfiguration0PropertiesArgs) StudioComponentConfiguration0PropertiesPtrInput {
	return (*studioComponentConfiguration0PropertiesPtrType)(v)
}

func (*studioComponentConfiguration0PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration0Properties)(nil)).Elem()
}

func (i *studioComponentConfiguration0PropertiesPtrType) ToStudioComponentConfiguration0PropertiesPtrOutput() StudioComponentConfiguration0PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(context.Background())
}

func (i *studioComponentConfiguration0PropertiesPtrType) ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration0PropertiesPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration0PropertiesOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration0Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration0PropertiesOutput) ToStudioComponentConfiguration0PropertiesOutput() StudioComponentConfiguration0PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration0PropertiesOutput) ToStudioComponentConfiguration0PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration0PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration0PropertiesOutput) ToStudioComponentConfiguration0PropertiesPtrOutput() StudioComponentConfiguration0PropertiesPtrOutput {
	return o.ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(context.Background())
}

func (o StudioComponentConfiguration0PropertiesOutput) ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration0PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentConfiguration0Properties) *StudioComponentConfiguration0Properties {
		return &v
	}).(StudioComponentConfiguration0PropertiesPtrOutput)
}

func (o StudioComponentConfiguration0PropertiesOutput) ActiveDirectoryConfiguration() StudioComponentActiveDirectoryConfigurationOutput {
	return o.ApplyT(func(v StudioComponentConfiguration0Properties) StudioComponentActiveDirectoryConfiguration {
		return v.ActiveDirectoryConfiguration
	}).(StudioComponentActiveDirectoryConfigurationOutput)
}

type StudioComponentConfiguration0PropertiesPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration0PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration0Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration0PropertiesPtrOutput) ToStudioComponentConfiguration0PropertiesPtrOutput() StudioComponentConfiguration0PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration0PropertiesPtrOutput) ToStudioComponentConfiguration0PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration0PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration0PropertiesPtrOutput) Elem() StudioComponentConfiguration0PropertiesOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration0Properties) StudioComponentConfiguration0Properties {
		if v != nil {
			return *v
		}
		var ret StudioComponentConfiguration0Properties
		return ret
	}).(StudioComponentConfiguration0PropertiesOutput)
}

func (o StudioComponentConfiguration0PropertiesPtrOutput) ActiveDirectoryConfiguration() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration0Properties) *StudioComponentActiveDirectoryConfiguration {
		if v == nil {
			return nil
		}
		return &v.ActiveDirectoryConfiguration
	}).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration1Properties struct {
	ComputeFarmConfiguration StudioComponentComputeFarmConfiguration `pulumi:"computeFarmConfiguration"`
}

// StudioComponentConfiguration1PropertiesInput is an input type that accepts StudioComponentConfiguration1PropertiesArgs and StudioComponentConfiguration1PropertiesOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration1PropertiesInput` via:
//
//	StudioComponentConfiguration1PropertiesArgs{...}
type StudioComponentConfiguration1PropertiesInput interface {
	pulumi.Input

	ToStudioComponentConfiguration1PropertiesOutput() StudioComponentConfiguration1PropertiesOutput
	ToStudioComponentConfiguration1PropertiesOutputWithContext(context.Context) StudioComponentConfiguration1PropertiesOutput
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration1PropertiesArgs struct {
	ComputeFarmConfiguration StudioComponentComputeFarmConfigurationInput `pulumi:"computeFarmConfiguration"`
}

func (StudioComponentConfiguration1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration1Properties)(nil)).Elem()
}

func (i StudioComponentConfiguration1PropertiesArgs) ToStudioComponentConfiguration1PropertiesOutput() StudioComponentConfiguration1PropertiesOutput {
	return i.ToStudioComponentConfiguration1PropertiesOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration1PropertiesArgs) ToStudioComponentConfiguration1PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration1PropertiesOutput)
}

func (i StudioComponentConfiguration1PropertiesArgs) ToStudioComponentConfiguration1PropertiesPtrOutput() StudioComponentConfiguration1PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration1PropertiesArgs) ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration1PropertiesOutput).ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(ctx)
}

// StudioComponentConfiguration1PropertiesPtrInput is an input type that accepts StudioComponentConfiguration1PropertiesArgs, StudioComponentConfiguration1PropertiesPtr and StudioComponentConfiguration1PropertiesPtrOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration1PropertiesPtrInput` via:
//
//	        StudioComponentConfiguration1PropertiesArgs{...}
//
//	or:
//
//	        nil
type StudioComponentConfiguration1PropertiesPtrInput interface {
	pulumi.Input

	ToStudioComponentConfiguration1PropertiesPtrOutput() StudioComponentConfiguration1PropertiesPtrOutput
	ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(context.Context) StudioComponentConfiguration1PropertiesPtrOutput
}

type studioComponentConfiguration1PropertiesPtrType StudioComponentConfiguration1PropertiesArgs

func StudioComponentConfiguration1PropertiesPtr(v *StudioComponentConfiguration1PropertiesArgs) StudioComponentConfiguration1PropertiesPtrInput {
	return (*studioComponentConfiguration1PropertiesPtrType)(v)
}

func (*studioComponentConfiguration1PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration1Properties)(nil)).Elem()
}

func (i *studioComponentConfiguration1PropertiesPtrType) ToStudioComponentConfiguration1PropertiesPtrOutput() StudioComponentConfiguration1PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(context.Background())
}

func (i *studioComponentConfiguration1PropertiesPtrType) ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration1PropertiesPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration1PropertiesOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration1Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration1PropertiesOutput) ToStudioComponentConfiguration1PropertiesOutput() StudioComponentConfiguration1PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration1PropertiesOutput) ToStudioComponentConfiguration1PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration1PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration1PropertiesOutput) ToStudioComponentConfiguration1PropertiesPtrOutput() StudioComponentConfiguration1PropertiesPtrOutput {
	return o.ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(context.Background())
}

func (o StudioComponentConfiguration1PropertiesOutput) ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration1PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentConfiguration1Properties) *StudioComponentConfiguration1Properties {
		return &v
	}).(StudioComponentConfiguration1PropertiesPtrOutput)
}

func (o StudioComponentConfiguration1PropertiesOutput) ComputeFarmConfiguration() StudioComponentComputeFarmConfigurationOutput {
	return o.ApplyT(func(v StudioComponentConfiguration1Properties) StudioComponentComputeFarmConfiguration {
		return v.ComputeFarmConfiguration
	}).(StudioComponentComputeFarmConfigurationOutput)
}

type StudioComponentConfiguration1PropertiesPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration1PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration1Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration1PropertiesPtrOutput) ToStudioComponentConfiguration1PropertiesPtrOutput() StudioComponentConfiguration1PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration1PropertiesPtrOutput) ToStudioComponentConfiguration1PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration1PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration1PropertiesPtrOutput) Elem() StudioComponentConfiguration1PropertiesOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration1Properties) StudioComponentConfiguration1Properties {
		if v != nil {
			return *v
		}
		var ret StudioComponentConfiguration1Properties
		return ret
	}).(StudioComponentConfiguration1PropertiesOutput)
}

func (o StudioComponentConfiguration1PropertiesPtrOutput) ComputeFarmConfiguration() StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration1Properties) *StudioComponentComputeFarmConfiguration {
		if v == nil {
			return nil
		}
		return &v.ComputeFarmConfiguration
	}).(StudioComponentComputeFarmConfigurationPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration2Properties struct {
	LicenseServiceConfiguration StudioComponentLicenseServiceConfiguration `pulumi:"licenseServiceConfiguration"`
}

// StudioComponentConfiguration2PropertiesInput is an input type that accepts StudioComponentConfiguration2PropertiesArgs and StudioComponentConfiguration2PropertiesOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration2PropertiesInput` via:
//
//	StudioComponentConfiguration2PropertiesArgs{...}
type StudioComponentConfiguration2PropertiesInput interface {
	pulumi.Input

	ToStudioComponentConfiguration2PropertiesOutput() StudioComponentConfiguration2PropertiesOutput
	ToStudioComponentConfiguration2PropertiesOutputWithContext(context.Context) StudioComponentConfiguration2PropertiesOutput
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration2PropertiesArgs struct {
	LicenseServiceConfiguration StudioComponentLicenseServiceConfigurationInput `pulumi:"licenseServiceConfiguration"`
}

func (StudioComponentConfiguration2PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration2Properties)(nil)).Elem()
}

func (i StudioComponentConfiguration2PropertiesArgs) ToStudioComponentConfiguration2PropertiesOutput() StudioComponentConfiguration2PropertiesOutput {
	return i.ToStudioComponentConfiguration2PropertiesOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration2PropertiesArgs) ToStudioComponentConfiguration2PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration2PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration2PropertiesOutput)
}

func (i StudioComponentConfiguration2PropertiesArgs) ToStudioComponentConfiguration2PropertiesPtrOutput() StudioComponentConfiguration2PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration2PropertiesArgs) ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration2PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration2PropertiesOutput).ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(ctx)
}

// StudioComponentConfiguration2PropertiesPtrInput is an input type that accepts StudioComponentConfiguration2PropertiesArgs, StudioComponentConfiguration2PropertiesPtr and StudioComponentConfiguration2PropertiesPtrOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration2PropertiesPtrInput` via:
//
//	        StudioComponentConfiguration2PropertiesArgs{...}
//
//	or:
//
//	        nil
type StudioComponentConfiguration2PropertiesPtrInput interface {
	pulumi.Input

	ToStudioComponentConfiguration2PropertiesPtrOutput() StudioComponentConfiguration2PropertiesPtrOutput
	ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(context.Context) StudioComponentConfiguration2PropertiesPtrOutput
}

type studioComponentConfiguration2PropertiesPtrType StudioComponentConfiguration2PropertiesArgs

func StudioComponentConfiguration2PropertiesPtr(v *StudioComponentConfiguration2PropertiesArgs) StudioComponentConfiguration2PropertiesPtrInput {
	return (*studioComponentConfiguration2PropertiesPtrType)(v)
}

func (*studioComponentConfiguration2PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration2Properties)(nil)).Elem()
}

func (i *studioComponentConfiguration2PropertiesPtrType) ToStudioComponentConfiguration2PropertiesPtrOutput() StudioComponentConfiguration2PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(context.Background())
}

func (i *studioComponentConfiguration2PropertiesPtrType) ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration2PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration2PropertiesPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration2PropertiesOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration2PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration2Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration2PropertiesOutput) ToStudioComponentConfiguration2PropertiesOutput() StudioComponentConfiguration2PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration2PropertiesOutput) ToStudioComponentConfiguration2PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration2PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration2PropertiesOutput) ToStudioComponentConfiguration2PropertiesPtrOutput() StudioComponentConfiguration2PropertiesPtrOutput {
	return o.ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(context.Background())
}

func (o StudioComponentConfiguration2PropertiesOutput) ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration2PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentConfiguration2Properties) *StudioComponentConfiguration2Properties {
		return &v
	}).(StudioComponentConfiguration2PropertiesPtrOutput)
}

func (o StudioComponentConfiguration2PropertiesOutput) LicenseServiceConfiguration() StudioComponentLicenseServiceConfigurationOutput {
	return o.ApplyT(func(v StudioComponentConfiguration2Properties) StudioComponentLicenseServiceConfiguration {
		return v.LicenseServiceConfiguration
	}).(StudioComponentLicenseServiceConfigurationOutput)
}

type StudioComponentConfiguration2PropertiesPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration2PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration2Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration2PropertiesPtrOutput) ToStudioComponentConfiguration2PropertiesPtrOutput() StudioComponentConfiguration2PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration2PropertiesPtrOutput) ToStudioComponentConfiguration2PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration2PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration2PropertiesPtrOutput) Elem() StudioComponentConfiguration2PropertiesOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration2Properties) StudioComponentConfiguration2Properties {
		if v != nil {
			return *v
		}
		var ret StudioComponentConfiguration2Properties
		return ret
	}).(StudioComponentConfiguration2PropertiesOutput)
}

func (o StudioComponentConfiguration2PropertiesPtrOutput) LicenseServiceConfiguration() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration2Properties) *StudioComponentLicenseServiceConfiguration {
		if v == nil {
			return nil
		}
		return &v.LicenseServiceConfiguration
	}).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration3Properties struct {
	SharedFileSystemConfiguration StudioComponentSharedFileSystemConfiguration `pulumi:"sharedFileSystemConfiguration"`
}

// StudioComponentConfiguration3PropertiesInput is an input type that accepts StudioComponentConfiguration3PropertiesArgs and StudioComponentConfiguration3PropertiesOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration3PropertiesInput` via:
//
//	StudioComponentConfiguration3PropertiesArgs{...}
type StudioComponentConfiguration3PropertiesInput interface {
	pulumi.Input

	ToStudioComponentConfiguration3PropertiesOutput() StudioComponentConfiguration3PropertiesOutput
	ToStudioComponentConfiguration3PropertiesOutputWithContext(context.Context) StudioComponentConfiguration3PropertiesOutput
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration3PropertiesArgs struct {
	SharedFileSystemConfiguration StudioComponentSharedFileSystemConfigurationInput `pulumi:"sharedFileSystemConfiguration"`
}

func (StudioComponentConfiguration3PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration3Properties)(nil)).Elem()
}

func (i StudioComponentConfiguration3PropertiesArgs) ToStudioComponentConfiguration3PropertiesOutput() StudioComponentConfiguration3PropertiesOutput {
	return i.ToStudioComponentConfiguration3PropertiesOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration3PropertiesArgs) ToStudioComponentConfiguration3PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration3PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration3PropertiesOutput)
}

func (i StudioComponentConfiguration3PropertiesArgs) ToStudioComponentConfiguration3PropertiesPtrOutput() StudioComponentConfiguration3PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(context.Background())
}

func (i StudioComponentConfiguration3PropertiesArgs) ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration3PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration3PropertiesOutput).ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(ctx)
}

// StudioComponentConfiguration3PropertiesPtrInput is an input type that accepts StudioComponentConfiguration3PropertiesArgs, StudioComponentConfiguration3PropertiesPtr and StudioComponentConfiguration3PropertiesPtrOutput values.
// You can construct a concrete instance of `StudioComponentConfiguration3PropertiesPtrInput` via:
//
//	        StudioComponentConfiguration3PropertiesArgs{...}
//
//	or:
//
//	        nil
type StudioComponentConfiguration3PropertiesPtrInput interface {
	pulumi.Input

	ToStudioComponentConfiguration3PropertiesPtrOutput() StudioComponentConfiguration3PropertiesPtrOutput
	ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(context.Context) StudioComponentConfiguration3PropertiesPtrOutput
}

type studioComponentConfiguration3PropertiesPtrType StudioComponentConfiguration3PropertiesArgs

func StudioComponentConfiguration3PropertiesPtr(v *StudioComponentConfiguration3PropertiesArgs) StudioComponentConfiguration3PropertiesPtrInput {
	return (*studioComponentConfiguration3PropertiesPtrType)(v)
}

func (*studioComponentConfiguration3PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration3Properties)(nil)).Elem()
}

func (i *studioComponentConfiguration3PropertiesPtrType) ToStudioComponentConfiguration3PropertiesPtrOutput() StudioComponentConfiguration3PropertiesPtrOutput {
	return i.ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(context.Background())
}

func (i *studioComponentConfiguration3PropertiesPtrType) ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration3PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfiguration3PropertiesPtrOutput)
}

// <p>The configuration of the studio component, based on component type.</p>
type StudioComponentConfiguration3PropertiesOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration3PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration3Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration3PropertiesOutput) ToStudioComponentConfiguration3PropertiesOutput() StudioComponentConfiguration3PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration3PropertiesOutput) ToStudioComponentConfiguration3PropertiesOutputWithContext(ctx context.Context) StudioComponentConfiguration3PropertiesOutput {
	return o
}

func (o StudioComponentConfiguration3PropertiesOutput) ToStudioComponentConfiguration3PropertiesPtrOutput() StudioComponentConfiguration3PropertiesPtrOutput {
	return o.ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(context.Background())
}

func (o StudioComponentConfiguration3PropertiesOutput) ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration3PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentConfiguration3Properties) *StudioComponentConfiguration3Properties {
		return &v
	}).(StudioComponentConfiguration3PropertiesPtrOutput)
}

func (o StudioComponentConfiguration3PropertiesOutput) SharedFileSystemConfiguration() StudioComponentSharedFileSystemConfigurationOutput {
	return o.ApplyT(func(v StudioComponentConfiguration3Properties) StudioComponentSharedFileSystemConfiguration {
		return v.SharedFileSystemConfiguration
	}).(StudioComponentSharedFileSystemConfigurationOutput)
}

type StudioComponentConfiguration3PropertiesPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentConfiguration3PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration3Properties)(nil)).Elem()
}

func (o StudioComponentConfiguration3PropertiesPtrOutput) ToStudioComponentConfiguration3PropertiesPtrOutput() StudioComponentConfiguration3PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration3PropertiesPtrOutput) ToStudioComponentConfiguration3PropertiesPtrOutputWithContext(ctx context.Context) StudioComponentConfiguration3PropertiesPtrOutput {
	return o
}

func (o StudioComponentConfiguration3PropertiesPtrOutput) Elem() StudioComponentConfiguration3PropertiesOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration3Properties) StudioComponentConfiguration3Properties {
		if v != nil {
			return *v
		}
		var ret StudioComponentConfiguration3Properties
		return ret
	}).(StudioComponentConfiguration3PropertiesOutput)
}

func (o StudioComponentConfiguration3PropertiesPtrOutput) SharedFileSystemConfiguration() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration3Properties) *StudioComponentSharedFileSystemConfiguration {
		if v == nil {
			return nil
		}
		return &v.SharedFileSystemConfiguration
	}).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

// <p>Initialization scripts for studio components.</p>
type StudioComponentInitializationScript struct {
	// <p>The version number of the protocol that is used by the launch profile. The only valid
	//             version is "2021-03-31".</p>
	LaunchProfileProtocolVersion *string                                        `pulumi:"launchProfileProtocolVersion"`
	Platform                     *StudioComponentLaunchProfilePlatform          `pulumi:"platform"`
	RunContext                   *StudioComponentInitializationScriptRunContext `pulumi:"runContext"`
	// <p>The initialization script.</p>
	Script *string `pulumi:"script"`
}

// StudioComponentInitializationScriptInput is an input type that accepts StudioComponentInitializationScriptArgs and StudioComponentInitializationScriptOutput values.
// You can construct a concrete instance of `StudioComponentInitializationScriptInput` via:
//
//	StudioComponentInitializationScriptArgs{...}
type StudioComponentInitializationScriptInput interface {
	pulumi.Input

	ToStudioComponentInitializationScriptOutput() StudioComponentInitializationScriptOutput
	ToStudioComponentInitializationScriptOutputWithContext(context.Context) StudioComponentInitializationScriptOutput
}

// <p>Initialization scripts for studio components.</p>
type StudioComponentInitializationScriptArgs struct {
	// <p>The version number of the protocol that is used by the launch profile. The only valid
	//             version is "2021-03-31".</p>
	LaunchProfileProtocolVersion pulumi.StringPtrInput                                 `pulumi:"launchProfileProtocolVersion"`
	Platform                     StudioComponentLaunchProfilePlatformPtrInput          `pulumi:"platform"`
	RunContext                   StudioComponentInitializationScriptRunContextPtrInput `pulumi:"runContext"`
	// <p>The initialization script.</p>
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (StudioComponentInitializationScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentInitializationScript)(nil)).Elem()
}

func (i StudioComponentInitializationScriptArgs) ToStudioComponentInitializationScriptOutput() StudioComponentInitializationScriptOutput {
	return i.ToStudioComponentInitializationScriptOutputWithContext(context.Background())
}

func (i StudioComponentInitializationScriptArgs) ToStudioComponentInitializationScriptOutputWithContext(ctx context.Context) StudioComponentInitializationScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentInitializationScriptOutput)
}

// StudioComponentInitializationScriptArrayInput is an input type that accepts StudioComponentInitializationScriptArray and StudioComponentInitializationScriptArrayOutput values.
// You can construct a concrete instance of `StudioComponentInitializationScriptArrayInput` via:
//
//	StudioComponentInitializationScriptArray{ StudioComponentInitializationScriptArgs{...} }
type StudioComponentInitializationScriptArrayInput interface {
	pulumi.Input

	ToStudioComponentInitializationScriptArrayOutput() StudioComponentInitializationScriptArrayOutput
	ToStudioComponentInitializationScriptArrayOutputWithContext(context.Context) StudioComponentInitializationScriptArrayOutput
}

type StudioComponentInitializationScriptArray []StudioComponentInitializationScriptInput

func (StudioComponentInitializationScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentInitializationScript)(nil)).Elem()
}

func (i StudioComponentInitializationScriptArray) ToStudioComponentInitializationScriptArrayOutput() StudioComponentInitializationScriptArrayOutput {
	return i.ToStudioComponentInitializationScriptArrayOutputWithContext(context.Background())
}

func (i StudioComponentInitializationScriptArray) ToStudioComponentInitializationScriptArrayOutputWithContext(ctx context.Context) StudioComponentInitializationScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentInitializationScriptArrayOutput)
}

// <p>Initialization scripts for studio components.</p>
type StudioComponentInitializationScriptOutput struct{ *pulumi.OutputState }

func (StudioComponentInitializationScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentInitializationScript)(nil)).Elem()
}

func (o StudioComponentInitializationScriptOutput) ToStudioComponentInitializationScriptOutput() StudioComponentInitializationScriptOutput {
	return o
}

func (o StudioComponentInitializationScriptOutput) ToStudioComponentInitializationScriptOutputWithContext(ctx context.Context) StudioComponentInitializationScriptOutput {
	return o
}

// <p>The version number of the protocol that is used by the launch profile. The only valid
//
//	version is "2021-03-31".</p>
func (o StudioComponentInitializationScriptOutput) LaunchProfileProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *string { return v.LaunchProfileProtocolVersion }).(pulumi.StringPtrOutput)
}

func (o StudioComponentInitializationScriptOutput) Platform() StudioComponentLaunchProfilePlatformPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *StudioComponentLaunchProfilePlatform { return v.Platform }).(StudioComponentLaunchProfilePlatformPtrOutput)
}

func (o StudioComponentInitializationScriptOutput) RunContext() StudioComponentInitializationScriptRunContextPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *StudioComponentInitializationScriptRunContext {
		return v.RunContext
	}).(StudioComponentInitializationScriptRunContextPtrOutput)
}

// <p>The initialization script.</p>
func (o StudioComponentInitializationScriptOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type StudioComponentInitializationScriptArrayOutput struct{ *pulumi.OutputState }

func (StudioComponentInitializationScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentInitializationScript)(nil)).Elem()
}

func (o StudioComponentInitializationScriptArrayOutput) ToStudioComponentInitializationScriptArrayOutput() StudioComponentInitializationScriptArrayOutput {
	return o
}

func (o StudioComponentInitializationScriptArrayOutput) ToStudioComponentInitializationScriptArrayOutputWithContext(ctx context.Context) StudioComponentInitializationScriptArrayOutput {
	return o
}

func (o StudioComponentInitializationScriptArrayOutput) Index(i pulumi.IntInput) StudioComponentInitializationScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StudioComponentInitializationScript {
		return vs[0].([]StudioComponentInitializationScript)[vs[1].(int)]
	}).(StudioComponentInitializationScriptOutput)
}

// <p>The configuration for a license service that is associated with a studio
//
//	resource.</p>
type StudioComponentLicenseServiceConfiguration struct {
	// <p>The endpoint of the license service that is accessed by the studio component
	//             resource.</p>
	Endpoint *string `pulumi:"endpoint"`
}

// StudioComponentLicenseServiceConfigurationInput is an input type that accepts StudioComponentLicenseServiceConfigurationArgs and StudioComponentLicenseServiceConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentLicenseServiceConfigurationInput` via:
//
//	StudioComponentLicenseServiceConfigurationArgs{...}
type StudioComponentLicenseServiceConfigurationInput interface {
	pulumi.Input

	ToStudioComponentLicenseServiceConfigurationOutput() StudioComponentLicenseServiceConfigurationOutput
	ToStudioComponentLicenseServiceConfigurationOutputWithContext(context.Context) StudioComponentLicenseServiceConfigurationOutput
}

// <p>The configuration for a license service that is associated with a studio
//
//	resource.</p>
type StudioComponentLicenseServiceConfigurationArgs struct {
	// <p>The endpoint of the license service that is accessed by the studio component
	//             resource.</p>
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
}

func (StudioComponentLicenseServiceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationOutput() StudioComponentLicenseServiceConfigurationOutput {
	return i.ToStudioComponentLicenseServiceConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentLicenseServiceConfigurationOutput)
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return i.ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentLicenseServiceConfigurationOutput).ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentLicenseServiceConfigurationPtrInput is an input type that accepts StudioComponentLicenseServiceConfigurationArgs, StudioComponentLicenseServiceConfigurationPtr and StudioComponentLicenseServiceConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentLicenseServiceConfigurationPtrInput` via:
//
//	        StudioComponentLicenseServiceConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentLicenseServiceConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput
	ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Context) StudioComponentLicenseServiceConfigurationPtrOutput
}

type studioComponentLicenseServiceConfigurationPtrType StudioComponentLicenseServiceConfigurationArgs

func StudioComponentLicenseServiceConfigurationPtr(v *StudioComponentLicenseServiceConfigurationArgs) StudioComponentLicenseServiceConfigurationPtrInput {
	return (*studioComponentLicenseServiceConfigurationPtrType)(v)
}

func (*studioComponentLicenseServiceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (i *studioComponentLicenseServiceConfigurationPtrType) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return i.ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentLicenseServiceConfigurationPtrType) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

// <p>The configuration for a license service that is associated with a studio
//
//	resource.</p>
type StudioComponentLicenseServiceConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentLicenseServiceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationOutput() StudioComponentLicenseServiceConfigurationOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentLicenseServiceConfiguration) *StudioComponentLicenseServiceConfiguration {
		return &v
	}).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

// <p>The endpoint of the license service that is accessed by the studio component
//
//	resource.</p>
func (o StudioComponentLicenseServiceConfigurationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentLicenseServiceConfiguration) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

type StudioComponentLicenseServiceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentLicenseServiceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (o StudioComponentLicenseServiceConfigurationPtrOutput) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationPtrOutput) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationPtrOutput) Elem() StudioComponentLicenseServiceConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentLicenseServiceConfiguration) StudioComponentLicenseServiceConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentLicenseServiceConfiguration
		return ret
	}).(StudioComponentLicenseServiceConfigurationOutput)
}

// <p>The endpoint of the license service that is accessed by the studio component
//
//	resource.</p>
func (o StudioComponentLicenseServiceConfigurationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentLicenseServiceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// <p>A parameter for a studio component script, in the form of a key:value pair.</p>
type StudioComponentScriptParameterKeyValue struct {
	// <p>A script parameter key.</p>
	Key *string `pulumi:"key"`
	// <p>A script parameter value.</p>
	Value *string `pulumi:"value"`
}

// StudioComponentScriptParameterKeyValueInput is an input type that accepts StudioComponentScriptParameterKeyValueArgs and StudioComponentScriptParameterKeyValueOutput values.
// You can construct a concrete instance of `StudioComponentScriptParameterKeyValueInput` via:
//
//	StudioComponentScriptParameterKeyValueArgs{...}
type StudioComponentScriptParameterKeyValueInput interface {
	pulumi.Input

	ToStudioComponentScriptParameterKeyValueOutput() StudioComponentScriptParameterKeyValueOutput
	ToStudioComponentScriptParameterKeyValueOutputWithContext(context.Context) StudioComponentScriptParameterKeyValueOutput
}

// <p>A parameter for a studio component script, in the form of a key:value pair.</p>
type StudioComponentScriptParameterKeyValueArgs struct {
	// <p>A script parameter key.</p>
	Key pulumi.StringPtrInput `pulumi:"key"`
	// <p>A script parameter value.</p>
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StudioComponentScriptParameterKeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (i StudioComponentScriptParameterKeyValueArgs) ToStudioComponentScriptParameterKeyValueOutput() StudioComponentScriptParameterKeyValueOutput {
	return i.ToStudioComponentScriptParameterKeyValueOutputWithContext(context.Background())
}

func (i StudioComponentScriptParameterKeyValueArgs) ToStudioComponentScriptParameterKeyValueOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentScriptParameterKeyValueOutput)
}

// StudioComponentScriptParameterKeyValueArrayInput is an input type that accepts StudioComponentScriptParameterKeyValueArray and StudioComponentScriptParameterKeyValueArrayOutput values.
// You can construct a concrete instance of `StudioComponentScriptParameterKeyValueArrayInput` via:
//
//	StudioComponentScriptParameterKeyValueArray{ StudioComponentScriptParameterKeyValueArgs{...} }
type StudioComponentScriptParameterKeyValueArrayInput interface {
	pulumi.Input

	ToStudioComponentScriptParameterKeyValueArrayOutput() StudioComponentScriptParameterKeyValueArrayOutput
	ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(context.Context) StudioComponentScriptParameterKeyValueArrayOutput
}

type StudioComponentScriptParameterKeyValueArray []StudioComponentScriptParameterKeyValueInput

func (StudioComponentScriptParameterKeyValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (i StudioComponentScriptParameterKeyValueArray) ToStudioComponentScriptParameterKeyValueArrayOutput() StudioComponentScriptParameterKeyValueArrayOutput {
	return i.ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(context.Background())
}

func (i StudioComponentScriptParameterKeyValueArray) ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentScriptParameterKeyValueArrayOutput)
}

// <p>A parameter for a studio component script, in the form of a key:value pair.</p>
type StudioComponentScriptParameterKeyValueOutput struct{ *pulumi.OutputState }

func (StudioComponentScriptParameterKeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (o StudioComponentScriptParameterKeyValueOutput) ToStudioComponentScriptParameterKeyValueOutput() StudioComponentScriptParameterKeyValueOutput {
	return o
}

func (o StudioComponentScriptParameterKeyValueOutput) ToStudioComponentScriptParameterKeyValueOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueOutput {
	return o
}

// <p>A script parameter key.</p>
func (o StudioComponentScriptParameterKeyValueOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentScriptParameterKeyValue) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// <p>A script parameter value.</p>
func (o StudioComponentScriptParameterKeyValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentScriptParameterKeyValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StudioComponentScriptParameterKeyValueArrayOutput struct{ *pulumi.OutputState }

func (StudioComponentScriptParameterKeyValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (o StudioComponentScriptParameterKeyValueArrayOutput) ToStudioComponentScriptParameterKeyValueArrayOutput() StudioComponentScriptParameterKeyValueArrayOutput {
	return o
}

func (o StudioComponentScriptParameterKeyValueArrayOutput) ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueArrayOutput {
	return o
}

func (o StudioComponentScriptParameterKeyValueArrayOutput) Index(i pulumi.IntInput) StudioComponentScriptParameterKeyValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StudioComponentScriptParameterKeyValue {
		return vs[0].([]StudioComponentScriptParameterKeyValue)[vs[1].(int)]
	}).(StudioComponentScriptParameterKeyValueOutput)
}

// <p>The configuration for a shared file storage system that is associated with a studio
//
//	resource.</p>
type StudioComponentSharedFileSystemConfiguration struct {
	// <p>The endpoint of the shared file system that is accessed by the studio component
	//             resource.</p>
	Endpoint *string `pulumi:"endpoint"`
	// <p>The unique identifier for a file system.</p>
	FileSystemId *string `pulumi:"fileSystemId"`
	// <p>The mount location for a shared file system on a Linux virtual workstation.</p>
	LinuxMountPoint *string `pulumi:"linuxMountPoint"`
	// <p>The name of the file share.</p>
	ShareName *string `pulumi:"shareName"`
	// <p>The mount location for a shared file system on a Windows virtual workstation.</p>
	WindowsMountDrive *string `pulumi:"windowsMountDrive"`
}

// StudioComponentSharedFileSystemConfigurationInput is an input type that accepts StudioComponentSharedFileSystemConfigurationArgs and StudioComponentSharedFileSystemConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentSharedFileSystemConfigurationInput` via:
//
//	StudioComponentSharedFileSystemConfigurationArgs{...}
type StudioComponentSharedFileSystemConfigurationInput interface {
	pulumi.Input

	ToStudioComponentSharedFileSystemConfigurationOutput() StudioComponentSharedFileSystemConfigurationOutput
	ToStudioComponentSharedFileSystemConfigurationOutputWithContext(context.Context) StudioComponentSharedFileSystemConfigurationOutput
}

// <p>The configuration for a shared file storage system that is associated with a studio
//
//	resource.</p>
type StudioComponentSharedFileSystemConfigurationArgs struct {
	// <p>The endpoint of the shared file system that is accessed by the studio component
	//             resource.</p>
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// <p>The unique identifier for a file system.</p>
	FileSystemId pulumi.StringPtrInput `pulumi:"fileSystemId"`
	// <p>The mount location for a shared file system on a Linux virtual workstation.</p>
	LinuxMountPoint pulumi.StringPtrInput `pulumi:"linuxMountPoint"`
	// <p>The name of the file share.</p>
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
	// <p>The mount location for a shared file system on a Windows virtual workstation.</p>
	WindowsMountDrive pulumi.StringPtrInput `pulumi:"windowsMountDrive"`
}

func (StudioComponentSharedFileSystemConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationOutput() StudioComponentSharedFileSystemConfigurationOutput {
	return i.ToStudioComponentSharedFileSystemConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentSharedFileSystemConfigurationOutput)
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return i.ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentSharedFileSystemConfigurationOutput).ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentSharedFileSystemConfigurationPtrInput is an input type that accepts StudioComponentSharedFileSystemConfigurationArgs, StudioComponentSharedFileSystemConfigurationPtr and StudioComponentSharedFileSystemConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentSharedFileSystemConfigurationPtrInput` via:
//
//	        StudioComponentSharedFileSystemConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentSharedFileSystemConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput
	ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput
}

type studioComponentSharedFileSystemConfigurationPtrType StudioComponentSharedFileSystemConfigurationArgs

func StudioComponentSharedFileSystemConfigurationPtr(v *StudioComponentSharedFileSystemConfigurationArgs) StudioComponentSharedFileSystemConfigurationPtrInput {
	return (*studioComponentSharedFileSystemConfigurationPtrType)(v)
}

func (*studioComponentSharedFileSystemConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (i *studioComponentSharedFileSystemConfigurationPtrType) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return i.ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentSharedFileSystemConfigurationPtrType) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

// <p>The configuration for a shared file storage system that is associated with a studio
//
//	resource.</p>
type StudioComponentSharedFileSystemConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentSharedFileSystemConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationOutput() StudioComponentSharedFileSystemConfigurationOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentSharedFileSystemConfiguration) *StudioComponentSharedFileSystemConfiguration {
		return &v
	}).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

// <p>The endpoint of the shared file system that is accessed by the studio component
//
//	resource.</p>
func (o StudioComponentSharedFileSystemConfigurationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// <p>The unique identifier for a file system.</p>
func (o StudioComponentSharedFileSystemConfigurationOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.FileSystemId }).(pulumi.StringPtrOutput)
}

// <p>The mount location for a shared file system on a Linux virtual workstation.</p>
func (o StudioComponentSharedFileSystemConfigurationOutput) LinuxMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.LinuxMountPoint }).(pulumi.StringPtrOutput)
}

// <p>The name of the file share.</p>
func (o StudioComponentSharedFileSystemConfigurationOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

// <p>The mount location for a shared file system on a Windows virtual workstation.</p>
func (o StudioComponentSharedFileSystemConfigurationOutput) WindowsMountDrive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.WindowsMountDrive }).(pulumi.StringPtrOutput)
}

type StudioComponentSharedFileSystemConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentSharedFileSystemConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (o StudioComponentSharedFileSystemConfigurationPtrOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationPtrOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationPtrOutput) Elem() StudioComponentSharedFileSystemConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) StudioComponentSharedFileSystemConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentSharedFileSystemConfiguration
		return ret
	}).(StudioComponentSharedFileSystemConfigurationOutput)
}

// <p>The endpoint of the shared file system that is accessed by the studio component
//
//	resource.</p>
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// <p>The unique identifier for a file system.</p>
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// <p>The mount location for a shared file system on a Linux virtual workstation.</p>
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) LinuxMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LinuxMountPoint
	}).(pulumi.StringPtrOutput)
}

// <p>The name of the file share.</p>
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// <p>The mount location for a shared file system on a Windows virtual workstation.</p>
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) WindowsMountDrive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WindowsMountDrive
	}).(pulumi.StringPtrOutput)
}

type StudioComponentTags struct {
}

// StudioComponentTagsInput is an input type that accepts StudioComponentTagsArgs and StudioComponentTagsOutput values.
// You can construct a concrete instance of `StudioComponentTagsInput` via:
//
//	StudioComponentTagsArgs{...}
type StudioComponentTagsInput interface {
	pulumi.Input

	ToStudioComponentTagsOutput() StudioComponentTagsOutput
	ToStudioComponentTagsOutputWithContext(context.Context) StudioComponentTagsOutput
}

type StudioComponentTagsArgs struct {
}

func (StudioComponentTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentTags)(nil)).Elem()
}

func (i StudioComponentTagsArgs) ToStudioComponentTagsOutput() StudioComponentTagsOutput {
	return i.ToStudioComponentTagsOutputWithContext(context.Background())
}

func (i StudioComponentTagsArgs) ToStudioComponentTagsOutputWithContext(ctx context.Context) StudioComponentTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentTagsOutput)
}

func (i StudioComponentTagsArgs) ToStudioComponentTagsPtrOutput() StudioComponentTagsPtrOutput {
	return i.ToStudioComponentTagsPtrOutputWithContext(context.Background())
}

func (i StudioComponentTagsArgs) ToStudioComponentTagsPtrOutputWithContext(ctx context.Context) StudioComponentTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentTagsOutput).ToStudioComponentTagsPtrOutputWithContext(ctx)
}

// StudioComponentTagsPtrInput is an input type that accepts StudioComponentTagsArgs, StudioComponentTagsPtr and StudioComponentTagsPtrOutput values.
// You can construct a concrete instance of `StudioComponentTagsPtrInput` via:
//
//	        StudioComponentTagsArgs{...}
//
//	or:
//
//	        nil
type StudioComponentTagsPtrInput interface {
	pulumi.Input

	ToStudioComponentTagsPtrOutput() StudioComponentTagsPtrOutput
	ToStudioComponentTagsPtrOutputWithContext(context.Context) StudioComponentTagsPtrOutput
}

type studioComponentTagsPtrType StudioComponentTagsArgs

func StudioComponentTagsPtr(v *StudioComponentTagsArgs) StudioComponentTagsPtrInput {
	return (*studioComponentTagsPtrType)(v)
}

func (*studioComponentTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentTags)(nil)).Elem()
}

func (i *studioComponentTagsPtrType) ToStudioComponentTagsPtrOutput() StudioComponentTagsPtrOutput {
	return i.ToStudioComponentTagsPtrOutputWithContext(context.Background())
}

func (i *studioComponentTagsPtrType) ToStudioComponentTagsPtrOutputWithContext(ctx context.Context) StudioComponentTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentTagsPtrOutput)
}

type StudioComponentTagsOutput struct{ *pulumi.OutputState }

func (StudioComponentTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentTags)(nil)).Elem()
}

func (o StudioComponentTagsOutput) ToStudioComponentTagsOutput() StudioComponentTagsOutput {
	return o
}

func (o StudioComponentTagsOutput) ToStudioComponentTagsOutputWithContext(ctx context.Context) StudioComponentTagsOutput {
	return o
}

func (o StudioComponentTagsOutput) ToStudioComponentTagsPtrOutput() StudioComponentTagsPtrOutput {
	return o.ToStudioComponentTagsPtrOutputWithContext(context.Background())
}

func (o StudioComponentTagsOutput) ToStudioComponentTagsPtrOutputWithContext(ctx context.Context) StudioComponentTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentTags) *StudioComponentTags {
		return &v
	}).(StudioComponentTagsPtrOutput)
}

type StudioComponentTagsPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentTags)(nil)).Elem()
}

func (o StudioComponentTagsPtrOutput) ToStudioComponentTagsPtrOutput() StudioComponentTagsPtrOutput {
	return o
}

func (o StudioComponentTagsPtrOutput) ToStudioComponentTagsPtrOutputWithContext(ctx context.Context) StudioComponentTagsPtrOutput {
	return o
}

func (o StudioComponentTagsPtrOutput) Elem() StudioComponentTagsOutput {
	return o.ApplyT(func(v *StudioComponentTags) StudioComponentTags {
		if v != nil {
			return *v
		}
		var ret StudioComponentTags
		return ret
	}).(StudioComponentTagsOutput)
}

// <p>Configuration of the encryption method that is used for the studio.</p>
type StudioEncryptionConfiguration struct {
	// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
	KeyArn  *string                              `pulumi:"keyArn"`
	KeyType StudioEncryptionConfigurationKeyType `pulumi:"keyType"`
}

// StudioEncryptionConfigurationInput is an input type that accepts StudioEncryptionConfigurationArgs and StudioEncryptionConfigurationOutput values.
// You can construct a concrete instance of `StudioEncryptionConfigurationInput` via:
//
//	StudioEncryptionConfigurationArgs{...}
type StudioEncryptionConfigurationInput interface {
	pulumi.Input

	ToStudioEncryptionConfigurationOutput() StudioEncryptionConfigurationOutput
	ToStudioEncryptionConfigurationOutputWithContext(context.Context) StudioEncryptionConfigurationOutput
}

// <p>Configuration of the encryption method that is used for the studio.</p>
type StudioEncryptionConfigurationArgs struct {
	// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
	KeyArn  pulumi.StringPtrInput                     `pulumi:"keyArn"`
	KeyType StudioEncryptionConfigurationKeyTypeInput `pulumi:"keyType"`
}

func (StudioEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioEncryptionConfiguration)(nil)).Elem()
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationOutput() StudioEncryptionConfigurationOutput {
	return i.ToStudioEncryptionConfigurationOutputWithContext(context.Background())
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationOutputWithContext(ctx context.Context) StudioEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioEncryptionConfigurationOutput)
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return i.ToStudioEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioEncryptionConfigurationOutput).ToStudioEncryptionConfigurationPtrOutputWithContext(ctx)
}

// StudioEncryptionConfigurationPtrInput is an input type that accepts StudioEncryptionConfigurationArgs, StudioEncryptionConfigurationPtr and StudioEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioEncryptionConfigurationPtrInput` via:
//
//	        StudioEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput
	ToStudioEncryptionConfigurationPtrOutputWithContext(context.Context) StudioEncryptionConfigurationPtrOutput
}

type studioEncryptionConfigurationPtrType StudioEncryptionConfigurationArgs

func StudioEncryptionConfigurationPtr(v *StudioEncryptionConfigurationArgs) StudioEncryptionConfigurationPtrInput {
	return (*studioEncryptionConfigurationPtrType)(v)
}

func (*studioEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioEncryptionConfiguration)(nil)).Elem()
}

func (i *studioEncryptionConfigurationPtrType) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return i.ToStudioEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioEncryptionConfigurationPtrType) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioEncryptionConfigurationPtrOutput)
}

// <p>Configuration of the encryption method that is used for the studio.</p>
type StudioEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (StudioEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioEncryptionConfiguration)(nil)).Elem()
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationOutput() StudioEncryptionConfigurationOutput {
	return o
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationOutputWithContext(ctx context.Context) StudioEncryptionConfigurationOutput {
	return o
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return o.ToStudioEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioEncryptionConfiguration) *StudioEncryptionConfiguration {
		return &v
	}).(StudioEncryptionConfigurationPtrOutput)
}

// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
func (o StudioEncryptionConfigurationOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioEncryptionConfiguration) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

func (o StudioEncryptionConfigurationOutput) KeyType() StudioEncryptionConfigurationKeyTypeOutput {
	return o.ApplyT(func(v StudioEncryptionConfiguration) StudioEncryptionConfigurationKeyType { return v.KeyType }).(StudioEncryptionConfigurationKeyTypeOutput)
}

type StudioEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioEncryptionConfiguration)(nil)).Elem()
}

func (o StudioEncryptionConfigurationPtrOutput) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return o
}

func (o StudioEncryptionConfigurationPtrOutput) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return o
}

func (o StudioEncryptionConfigurationPtrOutput) Elem() StudioEncryptionConfigurationOutput {
	return o.ApplyT(func(v *StudioEncryptionConfiguration) StudioEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioEncryptionConfiguration
		return ret
	}).(StudioEncryptionConfigurationOutput)
}

// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
func (o StudioEncryptionConfigurationPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

func (o StudioEncryptionConfigurationPtrOutput) KeyType() StudioEncryptionConfigurationKeyTypePtrOutput {
	return o.ApplyT(func(v *StudioEncryptionConfiguration) *StudioEncryptionConfigurationKeyType {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(StudioEncryptionConfigurationKeyTypePtrOutput)
}

type StudioTags struct {
}

// StudioTagsInput is an input type that accepts StudioTagsArgs and StudioTagsOutput values.
// You can construct a concrete instance of `StudioTagsInput` via:
//
//	StudioTagsArgs{...}
type StudioTagsInput interface {
	pulumi.Input

	ToStudioTagsOutput() StudioTagsOutput
	ToStudioTagsOutputWithContext(context.Context) StudioTagsOutput
}

type StudioTagsArgs struct {
}

func (StudioTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioTags)(nil)).Elem()
}

func (i StudioTagsArgs) ToStudioTagsOutput() StudioTagsOutput {
	return i.ToStudioTagsOutputWithContext(context.Background())
}

func (i StudioTagsArgs) ToStudioTagsOutputWithContext(ctx context.Context) StudioTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioTagsOutput)
}

func (i StudioTagsArgs) ToStudioTagsPtrOutput() StudioTagsPtrOutput {
	return i.ToStudioTagsPtrOutputWithContext(context.Background())
}

func (i StudioTagsArgs) ToStudioTagsPtrOutputWithContext(ctx context.Context) StudioTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioTagsOutput).ToStudioTagsPtrOutputWithContext(ctx)
}

// StudioTagsPtrInput is an input type that accepts StudioTagsArgs, StudioTagsPtr and StudioTagsPtrOutput values.
// You can construct a concrete instance of `StudioTagsPtrInput` via:
//
//	        StudioTagsArgs{...}
//
//	or:
//
//	        nil
type StudioTagsPtrInput interface {
	pulumi.Input

	ToStudioTagsPtrOutput() StudioTagsPtrOutput
	ToStudioTagsPtrOutputWithContext(context.Context) StudioTagsPtrOutput
}

type studioTagsPtrType StudioTagsArgs

func StudioTagsPtr(v *StudioTagsArgs) StudioTagsPtrInput {
	return (*studioTagsPtrType)(v)
}

func (*studioTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioTags)(nil)).Elem()
}

func (i *studioTagsPtrType) ToStudioTagsPtrOutput() StudioTagsPtrOutput {
	return i.ToStudioTagsPtrOutputWithContext(context.Background())
}

func (i *studioTagsPtrType) ToStudioTagsPtrOutputWithContext(ctx context.Context) StudioTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioTagsPtrOutput)
}

type StudioTagsOutput struct{ *pulumi.OutputState }

func (StudioTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioTags)(nil)).Elem()
}

func (o StudioTagsOutput) ToStudioTagsOutput() StudioTagsOutput {
	return o
}

func (o StudioTagsOutput) ToStudioTagsOutputWithContext(ctx context.Context) StudioTagsOutput {
	return o
}

func (o StudioTagsOutput) ToStudioTagsPtrOutput() StudioTagsPtrOutput {
	return o.ToStudioTagsPtrOutputWithContext(context.Background())
}

func (o StudioTagsOutput) ToStudioTagsPtrOutputWithContext(ctx context.Context) StudioTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioTags) *StudioTags {
		return &v
	}).(StudioTagsPtrOutput)
}

type StudioTagsPtrOutput struct{ *pulumi.OutputState }

func (StudioTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioTags)(nil)).Elem()
}

func (o StudioTagsPtrOutput) ToStudioTagsPtrOutput() StudioTagsPtrOutput {
	return o
}

func (o StudioTagsPtrOutput) ToStudioTagsPtrOutputWithContext(ctx context.Context) StudioTagsPtrOutput {
	return o
}

func (o StudioTagsPtrOutput) Elem() StudioTagsOutput {
	return o.ApplyT(func(v *StudioTags) StudioTags {
		if v != nil {
			return *v
		}
		var ret StudioTags
		return ret
	}).(StudioTagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationInput)(nil)).Elem(), LaunchProfileStreamConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackupInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackupPtrInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStorageInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStoragePtrInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamingSessionStorageRootInput)(nil)).Elem(), LaunchProfileStreamingSessionStorageRootArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamingSessionStorageRootPtrInput)(nil)).Elem(), LaunchProfileStreamingSessionStorageRootArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileTagsInput)(nil)).Elem(), LaunchProfileTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileTagsPtrInput)(nil)).Elem(), LaunchProfileTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileVolumeConfigurationInput)(nil)).Elem(), LaunchProfileVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileVolumeConfigurationPtrInput)(nil)).Elem(), LaunchProfileVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingImageTagsInput)(nil)).Elem(), StreamingImageTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingImageTagsPtrInput)(nil)).Elem(), StreamingImageTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttributeInput)(nil)).Elem(), StudioComponentActiveDirectoryComputerAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttributeArrayInput)(nil)).Elem(), StudioComponentActiveDirectoryComputerAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryConfigurationInput)(nil)).Elem(), StudioComponentActiveDirectoryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryConfigurationPtrInput)(nil)).Elem(), StudioComponentActiveDirectoryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentComputeFarmConfigurationInput)(nil)).Elem(), StudioComponentComputeFarmConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentComputeFarmConfigurationPtrInput)(nil)).Elem(), StudioComponentComputeFarmConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration0PropertiesInput)(nil)).Elem(), StudioComponentConfiguration0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration0PropertiesPtrInput)(nil)).Elem(), StudioComponentConfiguration0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration1PropertiesInput)(nil)).Elem(), StudioComponentConfiguration1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration1PropertiesPtrInput)(nil)).Elem(), StudioComponentConfiguration1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration2PropertiesInput)(nil)).Elem(), StudioComponentConfiguration2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration2PropertiesPtrInput)(nil)).Elem(), StudioComponentConfiguration2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration3PropertiesInput)(nil)).Elem(), StudioComponentConfiguration3PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfiguration3PropertiesPtrInput)(nil)).Elem(), StudioComponentConfiguration3PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentInitializationScriptInput)(nil)).Elem(), StudioComponentInitializationScriptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentInitializationScriptArrayInput)(nil)).Elem(), StudioComponentInitializationScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentLicenseServiceConfigurationInput)(nil)).Elem(), StudioComponentLicenseServiceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentLicenseServiceConfigurationPtrInput)(nil)).Elem(), StudioComponentLicenseServiceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentScriptParameterKeyValueInput)(nil)).Elem(), StudioComponentScriptParameterKeyValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentScriptParameterKeyValueArrayInput)(nil)).Elem(), StudioComponentScriptParameterKeyValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentSharedFileSystemConfigurationInput)(nil)).Elem(), StudioComponentSharedFileSystemConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentSharedFileSystemConfigurationPtrInput)(nil)).Elem(), StudioComponentSharedFileSystemConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentTagsInput)(nil)).Elem(), StudioComponentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentTagsPtrInput)(nil)).Elem(), StudioComponentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioEncryptionConfigurationInput)(nil)).Elem(), StudioEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioEncryptionConfigurationPtrInput)(nil)).Elem(), StudioEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioTagsInput)(nil)).Elem(), StudioTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioTagsPtrInput)(nil)).Elem(), StudioTagsArgs{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionBackupOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionBackupPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionStorageOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionStoragePtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamingSessionStorageRootOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamingSessionStorageRootPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileTagsOutput{})
	pulumi.RegisterOutputType(LaunchProfileTagsPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(LaunchProfileVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingImageEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingImageEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingImageTagsOutput{})
	pulumi.RegisterOutputType(StreamingImageTagsPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryComputerAttributeOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryComputerAttributeArrayOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentComputeFarmConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentComputeFarmConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration0PropertiesOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration0PropertiesPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration1PropertiesOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration1PropertiesPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration2PropertiesOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration2PropertiesPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration3PropertiesOutput{})
	pulumi.RegisterOutputType(StudioComponentConfiguration3PropertiesPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentInitializationScriptOutput{})
	pulumi.RegisterOutputType(StudioComponentInitializationScriptArrayOutput{})
	pulumi.RegisterOutputType(StudioComponentLicenseServiceConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentLicenseServiceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentScriptParameterKeyValueOutput{})
	pulumi.RegisterOutputType(StudioComponentScriptParameterKeyValueArrayOutput{})
	pulumi.RegisterOutputType(StudioComponentSharedFileSystemConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentSharedFileSystemConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentTagsOutput{})
	pulumi.RegisterOutputType(StudioComponentTagsPtrOutput{})
	pulumi.RegisterOutputType(StudioEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(StudioEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioTagsOutput{})
	pulumi.RegisterOutputType(StudioTagsPtrOutput{})
}
