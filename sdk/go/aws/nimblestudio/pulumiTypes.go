// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type LaunchProfileStreamConfiguration struct {
	// Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.
	//
	// - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
	// - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.
	//
	// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
	AutomaticTerminationMode *string `pulumi:"automaticTerminationMode"`
	// Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
	ClipboardMode string `pulumi:"clipboardMode"`
	// The EC2 instance types that users can select from when launching a streaming session with this launch profile.
	Ec2InstanceTypes []string `pulumi:"ec2InstanceTypes"`
	// The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
	MaxSessionLengthInMinutes *float64 `pulumi:"maxSessionLengthInMinutes"`
	// Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.
	//
	// This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .
	//
	// If the value is set to 0, your sessions can’t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).
	//
	// If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
	MaxStoppedSessionLengthInMinutes *float64 `pulumi:"maxStoppedSessionLengthInMinutes"`
	// Information about the streaming session backup.
	SessionBackup *LaunchProfileStreamConfigurationSessionBackup `pulumi:"sessionBackup"`
	// Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
	SessionPersistenceMode *string `pulumi:"sessionPersistenceMode"`
	// The upload storage for a streaming session.
	SessionStorage *LaunchProfileStreamConfigurationSessionStorage `pulumi:"sessionStorage"`
	// The streaming images that users can select from when launching a streaming session with this launch profile.
	StreamingImageIds []string `pulumi:"streamingImageIds"`
	// Custom volume configuration for the root volumes that are attached to streaming sessions.
	//
	// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
	VolumeConfiguration *LaunchProfileVolumeConfiguration `pulumi:"volumeConfiguration"`
}

// LaunchProfileStreamConfigurationInput is an input type that accepts LaunchProfileStreamConfigurationArgs and LaunchProfileStreamConfigurationOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationInput` via:
//
//	LaunchProfileStreamConfigurationArgs{...}
type LaunchProfileStreamConfigurationInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationOutput() LaunchProfileStreamConfigurationOutput
	ToLaunchProfileStreamConfigurationOutputWithContext(context.Context) LaunchProfileStreamConfigurationOutput
}

type LaunchProfileStreamConfigurationArgs struct {
	// Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.
	//
	// - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
	// - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.
	//
	// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
	AutomaticTerminationMode pulumi.StringPtrInput `pulumi:"automaticTerminationMode"`
	// Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
	ClipboardMode pulumi.StringInput `pulumi:"clipboardMode"`
	// The EC2 instance types that users can select from when launching a streaming session with this launch profile.
	Ec2InstanceTypes pulumi.StringArrayInput `pulumi:"ec2InstanceTypes"`
	// The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
	MaxSessionLengthInMinutes pulumi.Float64PtrInput `pulumi:"maxSessionLengthInMinutes"`
	// Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.
	//
	// This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .
	//
	// If the value is set to 0, your sessions can’t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).
	//
	// If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
	MaxStoppedSessionLengthInMinutes pulumi.Float64PtrInput `pulumi:"maxStoppedSessionLengthInMinutes"`
	// Information about the streaming session backup.
	SessionBackup LaunchProfileStreamConfigurationSessionBackupPtrInput `pulumi:"sessionBackup"`
	// Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
	SessionPersistenceMode pulumi.StringPtrInput `pulumi:"sessionPersistenceMode"`
	// The upload storage for a streaming session.
	SessionStorage LaunchProfileStreamConfigurationSessionStoragePtrInput `pulumi:"sessionStorage"`
	// The streaming images that users can select from when launching a streaming session with this launch profile.
	StreamingImageIds pulumi.StringArrayInput `pulumi:"streamingImageIds"`
	// Custom volume configuration for the root volumes that are attached to streaming sessions.
	//
	// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
	VolumeConfiguration LaunchProfileVolumeConfigurationPtrInput `pulumi:"volumeConfiguration"`
}

func (LaunchProfileStreamConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfiguration)(nil)).Elem()
}

func (i LaunchProfileStreamConfigurationArgs) ToLaunchProfileStreamConfigurationOutput() LaunchProfileStreamConfigurationOutput {
	return i.ToLaunchProfileStreamConfigurationOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationArgs) ToLaunchProfileStreamConfigurationOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationOutput)
}

type LaunchProfileStreamConfigurationOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfiguration)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationOutput) ToLaunchProfileStreamConfigurationOutput() LaunchProfileStreamConfigurationOutput {
	return o
}

func (o LaunchProfileStreamConfigurationOutput) ToLaunchProfileStreamConfigurationOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationOutput {
	return o
}

// Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.
//
// - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
// - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.
//
// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
func (o LaunchProfileStreamConfigurationOutput) AutomaticTerminationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *string { return v.AutomaticTerminationMode }).(pulumi.StringPtrOutput)
}

// Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
func (o LaunchProfileStreamConfigurationOutput) ClipboardMode() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) string { return v.ClipboardMode }).(pulumi.StringOutput)
}

// The EC2 instance types that users can select from when launching a streaming session with this launch profile.
func (o LaunchProfileStreamConfigurationOutput) Ec2InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) []string { return v.Ec2InstanceTypes }).(pulumi.StringArrayOutput)
}

// The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
func (o LaunchProfileStreamConfigurationOutput) MaxSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *float64 { return v.MaxSessionLengthInMinutes }).(pulumi.Float64PtrOutput)
}

// Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.
//
// This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .
//
// If the value is set to 0, your sessions can’t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).
//
// If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
func (o LaunchProfileStreamConfigurationOutput) MaxStoppedSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *float64 { return v.MaxStoppedSessionLengthInMinutes }).(pulumi.Float64PtrOutput)
}

// Information about the streaming session backup.
func (o LaunchProfileStreamConfigurationOutput) SessionBackup() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionBackup {
		return v.SessionBackup
	}).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

// Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
func (o LaunchProfileStreamConfigurationOutput) SessionPersistenceMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *string { return v.SessionPersistenceMode }).(pulumi.StringPtrOutput)
}

// The upload storage for a streaming session.
func (o LaunchProfileStreamConfigurationOutput) SessionStorage() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionStorage {
		return v.SessionStorage
	}).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// The streaming images that users can select from when launching a streaming session with this launch profile.
func (o LaunchProfileStreamConfigurationOutput) StreamingImageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) []string { return v.StreamingImageIds }).(pulumi.StringArrayOutput)
}

// Custom volume configuration for the root volumes that are attached to streaming sessions.
//
// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
func (o LaunchProfileStreamConfigurationOutput) VolumeConfiguration() LaunchProfileVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfiguration) *LaunchProfileVolumeConfiguration {
		return v.VolumeConfiguration
	}).(LaunchProfileVolumeConfigurationPtrOutput)
}

type LaunchProfileStreamConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfiguration)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationPtrOutput) ToLaunchProfileStreamConfigurationPtrOutput() LaunchProfileStreamConfigurationPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationPtrOutput) ToLaunchProfileStreamConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationPtrOutput) Elem() LaunchProfileStreamConfigurationOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) LaunchProfileStreamConfiguration {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamConfiguration
		return ret
	}).(LaunchProfileStreamConfigurationOutput)
}

// Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.
//
// - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
// - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.
//
// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
func (o LaunchProfileStreamConfigurationPtrOutput) AutomaticTerminationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AutomaticTerminationMode
	}).(pulumi.StringPtrOutput)
}

// Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
func (o LaunchProfileStreamConfigurationPtrOutput) ClipboardMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ClipboardMode
	}).(pulumi.StringPtrOutput)
}

// The EC2 instance types that users can select from when launching a streaming session with this launch profile.
func (o LaunchProfileStreamConfigurationPtrOutput) Ec2InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Ec2InstanceTypes
	}).(pulumi.StringArrayOutput)
}

// The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
func (o LaunchProfileStreamConfigurationPtrOutput) MaxSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxSessionLengthInMinutes
	}).(pulumi.Float64PtrOutput)
}

// Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.
//
// This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .
//
// If the value is set to 0, your sessions can’t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).
//
// If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
func (o LaunchProfileStreamConfigurationPtrOutput) MaxStoppedSessionLengthInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxStoppedSessionLengthInMinutes
	}).(pulumi.Float64PtrOutput)
}

// Information about the streaming session backup.
func (o LaunchProfileStreamConfigurationPtrOutput) SessionBackup() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionBackup {
		if v == nil {
			return nil
		}
		return v.SessionBackup
	}).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

// Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
func (o LaunchProfileStreamConfigurationPtrOutput) SessionPersistenceMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SessionPersistenceMode
	}).(pulumi.StringPtrOutput)
}

// The upload storage for a streaming session.
func (o LaunchProfileStreamConfigurationPtrOutput) SessionStorage() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileStreamConfigurationSessionStorage {
		if v == nil {
			return nil
		}
		return v.SessionStorage
	}).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// The streaming images that users can select from when launching a streaming session with this launch profile.
func (o LaunchProfileStreamConfigurationPtrOutput) StreamingImageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.StreamingImageIds
	}).(pulumi.StringArrayOutput)
}

// Custom volume configuration for the root volumes that are attached to streaming sessions.
//
// This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
func (o LaunchProfileStreamConfigurationPtrOutput) VolumeConfiguration() LaunchProfileVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfiguration) *LaunchProfileVolumeConfiguration {
		if v == nil {
			return nil
		}
		return v.VolumeConfiguration
	}).(LaunchProfileVolumeConfigurationPtrOutput)
}

type LaunchProfileStreamConfigurationSessionBackup struct {
	// The maximum number of backups that each streaming session created from this launch profile can have.
	MaxBackupsToRetain *float64 `pulumi:"maxBackupsToRetain"`
	// Specifies how artists sessions are backed up.
	//
	// Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
	Mode *string `pulumi:"mode"`
}

// LaunchProfileStreamConfigurationSessionBackupInput is an input type that accepts LaunchProfileStreamConfigurationSessionBackupArgs and LaunchProfileStreamConfigurationSessionBackupOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionBackupInput` via:
//
//	LaunchProfileStreamConfigurationSessionBackupArgs{...}
type LaunchProfileStreamConfigurationSessionBackupInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionBackupOutput() LaunchProfileStreamConfigurationSessionBackupOutput
	ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionBackupOutput
}

type LaunchProfileStreamConfigurationSessionBackupArgs struct {
	// The maximum number of backups that each streaming session created from this launch profile can have.
	MaxBackupsToRetain pulumi.Float64PtrInput `pulumi:"maxBackupsToRetain"`
	// Specifies how artists sessions are backed up.
	//
	// Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (LaunchProfileStreamConfigurationSessionBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupOutput() LaunchProfileStreamConfigurationSessionBackupOutput {
	return i.ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionBackupOutput)
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionBackupArgs) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionBackupOutput).ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx)
}

// LaunchProfileStreamConfigurationSessionBackupPtrInput is an input type that accepts LaunchProfileStreamConfigurationSessionBackupArgs, LaunchProfileStreamConfigurationSessionBackupPtr and LaunchProfileStreamConfigurationSessionBackupPtrOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionBackupPtrInput` via:
//
//	        LaunchProfileStreamConfigurationSessionBackupArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileStreamConfigurationSessionBackupPtrInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput
	ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput
}

type launchProfileStreamConfigurationSessionBackupPtrType LaunchProfileStreamConfigurationSessionBackupArgs

func LaunchProfileStreamConfigurationSessionBackupPtr(v *LaunchProfileStreamConfigurationSessionBackupArgs) LaunchProfileStreamConfigurationSessionBackupPtrInput {
	return (*launchProfileStreamConfigurationSessionBackupPtrType)(v)
}

func (*launchProfileStreamConfigurationSessionBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (i *launchProfileStreamConfigurationSessionBackupPtrType) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Background())
}

func (i *launchProfileStreamConfigurationSessionBackupPtrType) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

type LaunchProfileStreamConfigurationSessionBackupOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupOutput() LaunchProfileStreamConfigurationSessionBackupOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(context.Background())
}

func (o LaunchProfileStreamConfigurationSessionBackupOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileStreamConfigurationSessionBackup) *LaunchProfileStreamConfigurationSessionBackup {
		return &v
	}).(LaunchProfileStreamConfigurationSessionBackupPtrOutput)
}

// The maximum number of backups that each streaming session created from this launch profile can have.
func (o LaunchProfileStreamConfigurationSessionBackupOutput) MaxBackupsToRetain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionBackup) *float64 { return v.MaxBackupsToRetain }).(pulumi.Float64PtrOutput)
}

// Specifies how artists sessions are backed up.
//
// Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
func (o LaunchProfileStreamConfigurationSessionBackupOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionBackup) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type LaunchProfileStreamConfigurationSessionBackupPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionBackup)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutput() LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) ToLaunchProfileStreamConfigurationSessionBackupPtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionBackupPtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) Elem() LaunchProfileStreamConfigurationSessionBackupOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionBackup) LaunchProfileStreamConfigurationSessionBackup {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamConfigurationSessionBackup
		return ret
	}).(LaunchProfileStreamConfigurationSessionBackupOutput)
}

// The maximum number of backups that each streaming session created from this launch profile can have.
func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) MaxBackupsToRetain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionBackup) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBackupsToRetain
	}).(pulumi.Float64PtrOutput)
}

// Specifies how artists sessions are backed up.
//
// Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
func (o LaunchProfileStreamConfigurationSessionBackupPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionBackup) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type LaunchProfileStreamConfigurationSessionStorage struct {
	// Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
	Mode []string `pulumi:"mode"`
	// The configuration for the upload storage root of the streaming session.
	Root *LaunchProfileStreamingSessionStorageRoot `pulumi:"root"`
}

// LaunchProfileStreamConfigurationSessionStorageInput is an input type that accepts LaunchProfileStreamConfigurationSessionStorageArgs and LaunchProfileStreamConfigurationSessionStorageOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionStorageInput` via:
//
//	LaunchProfileStreamConfigurationSessionStorageArgs{...}
type LaunchProfileStreamConfigurationSessionStorageInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionStorageOutput() LaunchProfileStreamConfigurationSessionStorageOutput
	ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionStorageOutput
}

type LaunchProfileStreamConfigurationSessionStorageArgs struct {
	// Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
	Mode pulumi.StringArrayInput `pulumi:"mode"`
	// The configuration for the upload storage root of the streaming session.
	Root LaunchProfileStreamingSessionStorageRootPtrInput `pulumi:"root"`
}

func (LaunchProfileStreamConfigurationSessionStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStorageOutput() LaunchProfileStreamConfigurationSessionStorageOutput {
	return i.ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionStorageOutput)
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Background())
}

func (i LaunchProfileStreamConfigurationSessionStorageArgs) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionStorageOutput).ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx)
}

// LaunchProfileStreamConfigurationSessionStoragePtrInput is an input type that accepts LaunchProfileStreamConfigurationSessionStorageArgs, LaunchProfileStreamConfigurationSessionStoragePtr and LaunchProfileStreamConfigurationSessionStoragePtrOutput values.
// You can construct a concrete instance of `LaunchProfileStreamConfigurationSessionStoragePtrInput` via:
//
//	        LaunchProfileStreamConfigurationSessionStorageArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileStreamConfigurationSessionStoragePtrInput interface {
	pulumi.Input

	ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput
	ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput
}

type launchProfileStreamConfigurationSessionStoragePtrType LaunchProfileStreamConfigurationSessionStorageArgs

func LaunchProfileStreamConfigurationSessionStoragePtr(v *LaunchProfileStreamConfigurationSessionStorageArgs) LaunchProfileStreamConfigurationSessionStoragePtrInput {
	return (*launchProfileStreamConfigurationSessionStoragePtrType)(v)
}

func (*launchProfileStreamConfigurationSessionStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (i *launchProfileStreamConfigurationSessionStoragePtrType) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return i.ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Background())
}

func (i *launchProfileStreamConfigurationSessionStoragePtrType) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

type LaunchProfileStreamConfigurationSessionStorageOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStorageOutput() LaunchProfileStreamConfigurationSessionStorageOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStorageOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStorageOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(context.Background())
}

func (o LaunchProfileStreamConfigurationSessionStorageOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileStreamConfigurationSessionStorage) *LaunchProfileStreamConfigurationSessionStorage {
		return &v
	}).(LaunchProfileStreamConfigurationSessionStoragePtrOutput)
}

// Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
func (o LaunchProfileStreamConfigurationSessionStorageOutput) Mode() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionStorage) []string { return v.Mode }).(pulumi.StringArrayOutput)
}

// The configuration for the upload storage root of the streaming session.
func (o LaunchProfileStreamConfigurationSessionStorageOutput) Root() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamConfigurationSessionStorage) *LaunchProfileStreamingSessionStorageRoot {
		return v.Root
	}).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

type LaunchProfileStreamConfigurationSessionStoragePtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamConfigurationSessionStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamConfigurationSessionStorage)(nil)).Elem()
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutput() LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) ToLaunchProfileStreamConfigurationSessionStoragePtrOutputWithContext(ctx context.Context) LaunchProfileStreamConfigurationSessionStoragePtrOutput {
	return o
}

func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) Elem() LaunchProfileStreamConfigurationSessionStorageOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionStorage) LaunchProfileStreamConfigurationSessionStorage {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamConfigurationSessionStorage
		return ret
	}).(LaunchProfileStreamConfigurationSessionStorageOutput)
}

// Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) Mode() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionStorage) []string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringArrayOutput)
}

// The configuration for the upload storage root of the streaming session.
func (o LaunchProfileStreamConfigurationSessionStoragePtrOutput) Root() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamConfigurationSessionStorage) *LaunchProfileStreamingSessionStorageRoot {
		if v == nil {
			return nil
		}
		return v.Root
	}).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

type LaunchProfileStreamingSessionStorageRoot struct {
	// The folder path in Linux workstations where files are uploaded.
	Linux *string `pulumi:"linux"`
	// The folder path in Windows workstations where files are uploaded.
	Windows *string `pulumi:"windows"`
}

// LaunchProfileStreamingSessionStorageRootInput is an input type that accepts LaunchProfileStreamingSessionStorageRootArgs and LaunchProfileStreamingSessionStorageRootOutput values.
// You can construct a concrete instance of `LaunchProfileStreamingSessionStorageRootInput` via:
//
//	LaunchProfileStreamingSessionStorageRootArgs{...}
type LaunchProfileStreamingSessionStorageRootInput interface {
	pulumi.Input

	ToLaunchProfileStreamingSessionStorageRootOutput() LaunchProfileStreamingSessionStorageRootOutput
	ToLaunchProfileStreamingSessionStorageRootOutputWithContext(context.Context) LaunchProfileStreamingSessionStorageRootOutput
}

type LaunchProfileStreamingSessionStorageRootArgs struct {
	// The folder path in Linux workstations where files are uploaded.
	Linux pulumi.StringPtrInput `pulumi:"linux"`
	// The folder path in Windows workstations where files are uploaded.
	Windows pulumi.StringPtrInput `pulumi:"windows"`
}

func (LaunchProfileStreamingSessionStorageRootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootOutput() LaunchProfileStreamingSessionStorageRootOutput {
	return i.ToLaunchProfileStreamingSessionStorageRootOutputWithContext(context.Background())
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamingSessionStorageRootOutput)
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return i.ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Background())
}

func (i LaunchProfileStreamingSessionStorageRootArgs) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamingSessionStorageRootOutput).ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx)
}

// LaunchProfileStreamingSessionStorageRootPtrInput is an input type that accepts LaunchProfileStreamingSessionStorageRootArgs, LaunchProfileStreamingSessionStorageRootPtr and LaunchProfileStreamingSessionStorageRootPtrOutput values.
// You can construct a concrete instance of `LaunchProfileStreamingSessionStorageRootPtrInput` via:
//
//	        LaunchProfileStreamingSessionStorageRootArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileStreamingSessionStorageRootPtrInput interface {
	pulumi.Input

	ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput
	ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput
}

type launchProfileStreamingSessionStorageRootPtrType LaunchProfileStreamingSessionStorageRootArgs

func LaunchProfileStreamingSessionStorageRootPtr(v *LaunchProfileStreamingSessionStorageRootArgs) LaunchProfileStreamingSessionStorageRootPtrInput {
	return (*launchProfileStreamingSessionStorageRootPtrType)(v)
}

func (*launchProfileStreamingSessionStorageRootPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (i *launchProfileStreamingSessionStorageRootPtrType) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return i.ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Background())
}

func (i *launchProfileStreamingSessionStorageRootPtrType) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

type LaunchProfileStreamingSessionStorageRootOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamingSessionStorageRootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootOutput() LaunchProfileStreamingSessionStorageRootOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(context.Background())
}

func (o LaunchProfileStreamingSessionStorageRootOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileStreamingSessionStorageRoot) *LaunchProfileStreamingSessionStorageRoot {
		return &v
	}).(LaunchProfileStreamingSessionStorageRootPtrOutput)
}

// The folder path in Linux workstations where files are uploaded.
func (o LaunchProfileStreamingSessionStorageRootOutput) Linux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamingSessionStorageRoot) *string { return v.Linux }).(pulumi.StringPtrOutput)
}

// The folder path in Windows workstations where files are uploaded.
func (o LaunchProfileStreamingSessionStorageRootOutput) Windows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchProfileStreamingSessionStorageRoot) *string { return v.Windows }).(pulumi.StringPtrOutput)
}

type LaunchProfileStreamingSessionStorageRootPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileStreamingSessionStorageRootPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileStreamingSessionStorageRoot)(nil)).Elem()
}

func (o LaunchProfileStreamingSessionStorageRootPtrOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutput() LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootPtrOutput) ToLaunchProfileStreamingSessionStorageRootPtrOutputWithContext(ctx context.Context) LaunchProfileStreamingSessionStorageRootPtrOutput {
	return o
}

func (o LaunchProfileStreamingSessionStorageRootPtrOutput) Elem() LaunchProfileStreamingSessionStorageRootOutput {
	return o.ApplyT(func(v *LaunchProfileStreamingSessionStorageRoot) LaunchProfileStreamingSessionStorageRoot {
		if v != nil {
			return *v
		}
		var ret LaunchProfileStreamingSessionStorageRoot
		return ret
	}).(LaunchProfileStreamingSessionStorageRootOutput)
}

// The folder path in Linux workstations where files are uploaded.
func (o LaunchProfileStreamingSessionStorageRootPtrOutput) Linux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamingSessionStorageRoot) *string {
		if v == nil {
			return nil
		}
		return v.Linux
	}).(pulumi.StringPtrOutput)
}

// The folder path in Windows workstations where files are uploaded.
func (o LaunchProfileStreamingSessionStorageRootPtrOutput) Windows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchProfileStreamingSessionStorageRoot) *string {
		if v == nil {
			return nil
		}
		return v.Windows
	}).(pulumi.StringPtrOutput)
}

type LaunchProfileVolumeConfiguration struct {
	// The number of I/O operations per second for the root volume that is attached to streaming session.
	Iops *float64 `pulumi:"iops"`
	// The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
	Size *float64 `pulumi:"size"`
	// The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
	Throughput *float64 `pulumi:"throughput"`
}

// LaunchProfileVolumeConfigurationInput is an input type that accepts LaunchProfileVolumeConfigurationArgs and LaunchProfileVolumeConfigurationOutput values.
// You can construct a concrete instance of `LaunchProfileVolumeConfigurationInput` via:
//
//	LaunchProfileVolumeConfigurationArgs{...}
type LaunchProfileVolumeConfigurationInput interface {
	pulumi.Input

	ToLaunchProfileVolumeConfigurationOutput() LaunchProfileVolumeConfigurationOutput
	ToLaunchProfileVolumeConfigurationOutputWithContext(context.Context) LaunchProfileVolumeConfigurationOutput
}

type LaunchProfileVolumeConfigurationArgs struct {
	// The number of I/O operations per second for the root volume that is attached to streaming session.
	Iops pulumi.Float64PtrInput `pulumi:"iops"`
	// The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
	Size pulumi.Float64PtrInput `pulumi:"size"`
	// The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
	Throughput pulumi.Float64PtrInput `pulumi:"throughput"`
}

func (LaunchProfileVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationOutput() LaunchProfileVolumeConfigurationOutput {
	return i.ToLaunchProfileVolumeConfigurationOutputWithContext(context.Background())
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileVolumeConfigurationOutput)
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return i.ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i LaunchProfileVolumeConfigurationArgs) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileVolumeConfigurationOutput).ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx)
}

// LaunchProfileVolumeConfigurationPtrInput is an input type that accepts LaunchProfileVolumeConfigurationArgs, LaunchProfileVolumeConfigurationPtr and LaunchProfileVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `LaunchProfileVolumeConfigurationPtrInput` via:
//
//	        LaunchProfileVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type LaunchProfileVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput
	ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Context) LaunchProfileVolumeConfigurationPtrOutput
}

type launchProfileVolumeConfigurationPtrType LaunchProfileVolumeConfigurationArgs

func LaunchProfileVolumeConfigurationPtr(v *LaunchProfileVolumeConfigurationArgs) LaunchProfileVolumeConfigurationPtrInput {
	return (*launchProfileVolumeConfigurationPtrType)(v)
}

func (*launchProfileVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (i *launchProfileVolumeConfigurationPtrType) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return i.ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *launchProfileVolumeConfigurationPtrType) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchProfileVolumeConfigurationPtrOutput)
}

type LaunchProfileVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (LaunchProfileVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationOutput() LaunchProfileVolumeConfigurationOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return o.ToLaunchProfileVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o LaunchProfileVolumeConfigurationOutput) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchProfileVolumeConfiguration) *LaunchProfileVolumeConfiguration {
		return &v
	}).(LaunchProfileVolumeConfigurationPtrOutput)
}

// The number of I/O operations per second for the root volume that is attached to streaming session.
func (o LaunchProfileVolumeConfigurationOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileVolumeConfiguration) *float64 { return v.Iops }).(pulumi.Float64PtrOutput)
}

// The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
func (o LaunchProfileVolumeConfigurationOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileVolumeConfiguration) *float64 { return v.Size }).(pulumi.Float64PtrOutput)
}

// The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
func (o LaunchProfileVolumeConfigurationOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LaunchProfileVolumeConfiguration) *float64 { return v.Throughput }).(pulumi.Float64PtrOutput)
}

type LaunchProfileVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LaunchProfileVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchProfileVolumeConfiguration)(nil)).Elem()
}

func (o LaunchProfileVolumeConfigurationPtrOutput) ToLaunchProfileVolumeConfigurationPtrOutput() LaunchProfileVolumeConfigurationPtrOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationPtrOutput) ToLaunchProfileVolumeConfigurationPtrOutputWithContext(ctx context.Context) LaunchProfileVolumeConfigurationPtrOutput {
	return o
}

func (o LaunchProfileVolumeConfigurationPtrOutput) Elem() LaunchProfileVolumeConfigurationOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) LaunchProfileVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret LaunchProfileVolumeConfiguration
		return ret
	}).(LaunchProfileVolumeConfigurationOutput)
}

// The number of I/O operations per second for the root volume that is attached to streaming session.
func (o LaunchProfileVolumeConfigurationPtrOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.Float64PtrOutput)
}

// The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
func (o LaunchProfileVolumeConfigurationPtrOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.Float64PtrOutput)
}

// The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
func (o LaunchProfileVolumeConfigurationPtrOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LaunchProfileVolumeConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.Float64PtrOutput)
}

type StreamingImageEncryptionConfiguration struct {
	// The ARN for a KMS key that is used to encrypt studio data.
	KeyArn *string `pulumi:"keyArn"`
	// The type of KMS key that is used to encrypt studio data.
	KeyType string `pulumi:"keyType"`
}

type StreamingImageEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingImageEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingImageEncryptionConfiguration)(nil)).Elem()
}

func (o StreamingImageEncryptionConfigurationOutput) ToStreamingImageEncryptionConfigurationOutput() StreamingImageEncryptionConfigurationOutput {
	return o
}

func (o StreamingImageEncryptionConfigurationOutput) ToStreamingImageEncryptionConfigurationOutputWithContext(ctx context.Context) StreamingImageEncryptionConfigurationOutput {
	return o
}

// The ARN for a KMS key that is used to encrypt studio data.
func (o StreamingImageEncryptionConfigurationOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingImageEncryptionConfiguration) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

// The type of KMS key that is used to encrypt studio data.
func (o StreamingImageEncryptionConfigurationOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingImageEncryptionConfiguration) string { return v.KeyType }).(pulumi.StringOutput)
}

type StreamingImageEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingImageEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingImageEncryptionConfiguration)(nil)).Elem()
}

func (o StreamingImageEncryptionConfigurationPtrOutput) ToStreamingImageEncryptionConfigurationPtrOutput() StreamingImageEncryptionConfigurationPtrOutput {
	return o
}

func (o StreamingImageEncryptionConfigurationPtrOutput) ToStreamingImageEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StreamingImageEncryptionConfigurationPtrOutput {
	return o
}

func (o StreamingImageEncryptionConfigurationPtrOutput) Elem() StreamingImageEncryptionConfigurationOutput {
	return o.ApplyT(func(v *StreamingImageEncryptionConfiguration) StreamingImageEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret StreamingImageEncryptionConfiguration
		return ret
	}).(StreamingImageEncryptionConfigurationOutput)
}

// The ARN for a KMS key that is used to encrypt studio data.
func (o StreamingImageEncryptionConfigurationPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingImageEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// The type of KMS key that is used to encrypt studio data.
func (o StreamingImageEncryptionConfigurationPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingImageEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(pulumi.StringPtrOutput)
}

type StudioComponentActiveDirectoryComputerAttribute struct {
	// The name for the LDAP attribute.
	Name *string `pulumi:"name"`
	// The value for the LDAP attribute.
	Value *string `pulumi:"value"`
}

// StudioComponentActiveDirectoryComputerAttributeInput is an input type that accepts StudioComponentActiveDirectoryComputerAttributeArgs and StudioComponentActiveDirectoryComputerAttributeOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryComputerAttributeInput` via:
//
//	StudioComponentActiveDirectoryComputerAttributeArgs{...}
type StudioComponentActiveDirectoryComputerAttributeInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryComputerAttributeOutput() StudioComponentActiveDirectoryComputerAttributeOutput
	ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(context.Context) StudioComponentActiveDirectoryComputerAttributeOutput
}

type StudioComponentActiveDirectoryComputerAttributeArgs struct {
	// The name for the LDAP attribute.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value for the LDAP attribute.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StudioComponentActiveDirectoryComputerAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (i StudioComponentActiveDirectoryComputerAttributeArgs) ToStudioComponentActiveDirectoryComputerAttributeOutput() StudioComponentActiveDirectoryComputerAttributeOutput {
	return i.ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryComputerAttributeArgs) ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryComputerAttributeOutput)
}

// StudioComponentActiveDirectoryComputerAttributeArrayInput is an input type that accepts StudioComponentActiveDirectoryComputerAttributeArray and StudioComponentActiveDirectoryComputerAttributeArrayOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryComputerAttributeArrayInput` via:
//
//	StudioComponentActiveDirectoryComputerAttributeArray{ StudioComponentActiveDirectoryComputerAttributeArgs{...} }
type StudioComponentActiveDirectoryComputerAttributeArrayInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryComputerAttributeArrayOutput() StudioComponentActiveDirectoryComputerAttributeArrayOutput
	ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(context.Context) StudioComponentActiveDirectoryComputerAttributeArrayOutput
}

type StudioComponentActiveDirectoryComputerAttributeArray []StudioComponentActiveDirectoryComputerAttributeInput

func (StudioComponentActiveDirectoryComputerAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (i StudioComponentActiveDirectoryComputerAttributeArray) ToStudioComponentActiveDirectoryComputerAttributeArrayOutput() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return i.ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryComputerAttributeArray) ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryComputerAttributeArrayOutput)
}

type StudioComponentActiveDirectoryComputerAttributeOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryComputerAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryComputerAttributeOutput) ToStudioComponentActiveDirectoryComputerAttributeOutput() StudioComponentActiveDirectoryComputerAttributeOutput {
	return o
}

func (o StudioComponentActiveDirectoryComputerAttributeOutput) ToStudioComponentActiveDirectoryComputerAttributeOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeOutput {
	return o
}

// The name for the LDAP attribute.
func (o StudioComponentActiveDirectoryComputerAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryComputerAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value for the LDAP attribute.
func (o StudioComponentActiveDirectoryComputerAttributeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryComputerAttribute) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StudioComponentActiveDirectoryComputerAttributeArrayOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryComputerAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentActiveDirectoryComputerAttribute)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryComputerAttributeArrayOutput) ToStudioComponentActiveDirectoryComputerAttributeArrayOutput() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o
}

func (o StudioComponentActiveDirectoryComputerAttributeArrayOutput) ToStudioComponentActiveDirectoryComputerAttributeArrayOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o
}

func (o StudioComponentActiveDirectoryComputerAttributeArrayOutput) Index(i pulumi.IntInput) StudioComponentActiveDirectoryComputerAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StudioComponentActiveDirectoryComputerAttribute {
		return vs[0].([]StudioComponentActiveDirectoryComputerAttribute)[vs[1].(int)]
	}).(StudioComponentActiveDirectoryComputerAttributeOutput)
}

type StudioComponentActiveDirectoryConfiguration struct {
	// A collection of custom attributes for an Active Directory computer.
	ComputerAttributes []StudioComponentActiveDirectoryComputerAttribute `pulumi:"computerAttributes"`
	// The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
	DirectoryId *string `pulumi:"directoryId"`
	// The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
	OrganizationalUnitDistinguishedName *string `pulumi:"organizationalUnitDistinguishedName"`
}

// StudioComponentActiveDirectoryConfigurationInput is an input type that accepts StudioComponentActiveDirectoryConfigurationArgs and StudioComponentActiveDirectoryConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryConfigurationInput` via:
//
//	StudioComponentActiveDirectoryConfigurationArgs{...}
type StudioComponentActiveDirectoryConfigurationInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryConfigurationOutput() StudioComponentActiveDirectoryConfigurationOutput
	ToStudioComponentActiveDirectoryConfigurationOutputWithContext(context.Context) StudioComponentActiveDirectoryConfigurationOutput
}

type StudioComponentActiveDirectoryConfigurationArgs struct {
	// A collection of custom attributes for an Active Directory computer.
	ComputerAttributes StudioComponentActiveDirectoryComputerAttributeArrayInput `pulumi:"computerAttributes"`
	// The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
	DirectoryId pulumi.StringPtrInput `pulumi:"directoryId"`
	// The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
	OrganizationalUnitDistinguishedName pulumi.StringPtrInput `pulumi:"organizationalUnitDistinguishedName"`
}

func (StudioComponentActiveDirectoryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationOutput() StudioComponentActiveDirectoryConfigurationOutput {
	return i.ToStudioComponentActiveDirectoryConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryConfigurationOutput)
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return i.ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentActiveDirectoryConfigurationArgs) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryConfigurationOutput).ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentActiveDirectoryConfigurationPtrInput is an input type that accepts StudioComponentActiveDirectoryConfigurationArgs, StudioComponentActiveDirectoryConfigurationPtr and StudioComponentActiveDirectoryConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentActiveDirectoryConfigurationPtrInput` via:
//
//	        StudioComponentActiveDirectoryConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentActiveDirectoryConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput
	ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput
}

type studioComponentActiveDirectoryConfigurationPtrType StudioComponentActiveDirectoryConfigurationArgs

func StudioComponentActiveDirectoryConfigurationPtr(v *StudioComponentActiveDirectoryConfigurationArgs) StudioComponentActiveDirectoryConfigurationPtrInput {
	return (*studioComponentActiveDirectoryConfigurationPtrType)(v)
}

func (*studioComponentActiveDirectoryConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (i *studioComponentActiveDirectoryConfigurationPtrType) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return i.ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentActiveDirectoryConfigurationPtrType) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

type StudioComponentActiveDirectoryConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationOutput() StudioComponentActiveDirectoryConfigurationOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentActiveDirectoryConfigurationOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentActiveDirectoryConfiguration) *StudioComponentActiveDirectoryConfiguration {
		return &v
	}).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

// A collection of custom attributes for an Active Directory computer.
func (o StudioComponentActiveDirectoryConfigurationOutput) ComputerAttributes() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryConfiguration) []StudioComponentActiveDirectoryComputerAttribute {
		return v.ComputerAttributes
	}).(StudioComponentActiveDirectoryComputerAttributeArrayOutput)
}

// The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
func (o StudioComponentActiveDirectoryConfigurationOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryConfiguration) *string { return v.DirectoryId }).(pulumi.StringPtrOutput)
}

// The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
func (o StudioComponentActiveDirectoryConfigurationOutput) OrganizationalUnitDistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentActiveDirectoryConfiguration) *string {
		return v.OrganizationalUnitDistinguishedName
	}).(pulumi.StringPtrOutput)
}

type StudioComponentActiveDirectoryConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentActiveDirectoryConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentActiveDirectoryConfiguration)(nil)).Elem()
}

func (o StudioComponentActiveDirectoryConfigurationPtrOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutput() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationPtrOutput) ToStudioComponentActiveDirectoryConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o
}

func (o StudioComponentActiveDirectoryConfigurationPtrOutput) Elem() StudioComponentActiveDirectoryConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) StudioComponentActiveDirectoryConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentActiveDirectoryConfiguration
		return ret
	}).(StudioComponentActiveDirectoryConfigurationOutput)
}

// A collection of custom attributes for an Active Directory computer.
func (o StudioComponentActiveDirectoryConfigurationPtrOutput) ComputerAttributes() StudioComponentActiveDirectoryComputerAttributeArrayOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) []StudioComponentActiveDirectoryComputerAttribute {
		if v == nil {
			return nil
		}
		return v.ComputerAttributes
	}).(StudioComponentActiveDirectoryComputerAttributeArrayOutput)
}

// The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
func (o StudioComponentActiveDirectoryConfigurationPtrOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DirectoryId
	}).(pulumi.StringPtrOutput)
}

// The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
func (o StudioComponentActiveDirectoryConfigurationPtrOutput) OrganizationalUnitDistinguishedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentActiveDirectoryConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitDistinguishedName
	}).(pulumi.StringPtrOutput)
}

type StudioComponentComputeFarmConfiguration struct {
	// The name of an Active Directory user that is used on ComputeFarm worker instances.
	ActiveDirectoryUser *string `pulumi:"activeDirectoryUser"`
	// The endpoint of the ComputeFarm that is accessed by the studio component resource.
	Endpoint *string `pulumi:"endpoint"`
}

// StudioComponentComputeFarmConfigurationInput is an input type that accepts StudioComponentComputeFarmConfigurationArgs and StudioComponentComputeFarmConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentComputeFarmConfigurationInput` via:
//
//	StudioComponentComputeFarmConfigurationArgs{...}
type StudioComponentComputeFarmConfigurationInput interface {
	pulumi.Input

	ToStudioComponentComputeFarmConfigurationOutput() StudioComponentComputeFarmConfigurationOutput
	ToStudioComponentComputeFarmConfigurationOutputWithContext(context.Context) StudioComponentComputeFarmConfigurationOutput
}

type StudioComponentComputeFarmConfigurationArgs struct {
	// The name of an Active Directory user that is used on ComputeFarm worker instances.
	ActiveDirectoryUser pulumi.StringPtrInput `pulumi:"activeDirectoryUser"`
	// The endpoint of the ComputeFarm that is accessed by the studio component resource.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
}

func (StudioComponentComputeFarmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationOutput() StudioComponentComputeFarmConfigurationOutput {
	return i.ToStudioComponentComputeFarmConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentComputeFarmConfigurationOutput)
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return i.ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentComputeFarmConfigurationArgs) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentComputeFarmConfigurationOutput).ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentComputeFarmConfigurationPtrInput is an input type that accepts StudioComponentComputeFarmConfigurationArgs, StudioComponentComputeFarmConfigurationPtr and StudioComponentComputeFarmConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentComputeFarmConfigurationPtrInput` via:
//
//	        StudioComponentComputeFarmConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentComputeFarmConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput
	ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Context) StudioComponentComputeFarmConfigurationPtrOutput
}

type studioComponentComputeFarmConfigurationPtrType StudioComponentComputeFarmConfigurationArgs

func StudioComponentComputeFarmConfigurationPtr(v *StudioComponentComputeFarmConfigurationArgs) StudioComponentComputeFarmConfigurationPtrInput {
	return (*studioComponentComputeFarmConfigurationPtrType)(v)
}

func (*studioComponentComputeFarmConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (i *studioComponentComputeFarmConfigurationPtrType) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return i.ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentComputeFarmConfigurationPtrType) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentComputeFarmConfigurationPtrOutput)
}

type StudioComponentComputeFarmConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentComputeFarmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationOutput() StudioComponentComputeFarmConfigurationOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentComputeFarmConfigurationOutput) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentComputeFarmConfiguration) *StudioComponentComputeFarmConfiguration {
		return &v
	}).(StudioComponentComputeFarmConfigurationPtrOutput)
}

// The name of an Active Directory user that is used on ComputeFarm worker instances.
func (o StudioComponentComputeFarmConfigurationOutput) ActiveDirectoryUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentComputeFarmConfiguration) *string { return v.ActiveDirectoryUser }).(pulumi.StringPtrOutput)
}

// The endpoint of the ComputeFarm that is accessed by the studio component resource.
func (o StudioComponentComputeFarmConfigurationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentComputeFarmConfiguration) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

type StudioComponentComputeFarmConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentComputeFarmConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentComputeFarmConfiguration)(nil)).Elem()
}

func (o StudioComponentComputeFarmConfigurationPtrOutput) ToStudioComponentComputeFarmConfigurationPtrOutput() StudioComponentComputeFarmConfigurationPtrOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationPtrOutput) ToStudioComponentComputeFarmConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentComputeFarmConfigurationPtrOutput {
	return o
}

func (o StudioComponentComputeFarmConfigurationPtrOutput) Elem() StudioComponentComputeFarmConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentComputeFarmConfiguration) StudioComponentComputeFarmConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentComputeFarmConfiguration
		return ret
	}).(StudioComponentComputeFarmConfigurationOutput)
}

// The name of an Active Directory user that is used on ComputeFarm worker instances.
func (o StudioComponentComputeFarmConfigurationPtrOutput) ActiveDirectoryUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentComputeFarmConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryUser
	}).(pulumi.StringPtrOutput)
}

// The endpoint of the ComputeFarm that is accessed by the studio component resource.
func (o StudioComponentComputeFarmConfigurationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentComputeFarmConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

type StudioComponentConfiguration struct {
	// The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
	ActiveDirectoryConfiguration *StudioComponentActiveDirectoryConfiguration `pulumi:"activeDirectoryConfiguration"`
	// The configuration for a render farm that is associated with a studio resource.
	ComputeFarmConfiguration *StudioComponentComputeFarmConfiguration `pulumi:"computeFarmConfiguration"`
	// The configuration for a license service that is associated with a studio resource.
	LicenseServiceConfiguration *StudioComponentLicenseServiceConfiguration `pulumi:"licenseServiceConfiguration"`
	// The configuration for a shared file storage system that is associated with a studio resource.
	SharedFileSystemConfiguration *StudioComponentSharedFileSystemConfiguration `pulumi:"sharedFileSystemConfiguration"`
}

// StudioComponentConfigurationInput is an input type that accepts StudioComponentConfigurationArgs and StudioComponentConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentConfigurationInput` via:
//
//	StudioComponentConfigurationArgs{...}
type StudioComponentConfigurationInput interface {
	pulumi.Input

	ToStudioComponentConfigurationOutput() StudioComponentConfigurationOutput
	ToStudioComponentConfigurationOutputWithContext(context.Context) StudioComponentConfigurationOutput
}

type StudioComponentConfigurationArgs struct {
	// The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
	ActiveDirectoryConfiguration StudioComponentActiveDirectoryConfigurationPtrInput `pulumi:"activeDirectoryConfiguration"`
	// The configuration for a render farm that is associated with a studio resource.
	ComputeFarmConfiguration StudioComponentComputeFarmConfigurationPtrInput `pulumi:"computeFarmConfiguration"`
	// The configuration for a license service that is associated with a studio resource.
	LicenseServiceConfiguration StudioComponentLicenseServiceConfigurationPtrInput `pulumi:"licenseServiceConfiguration"`
	// The configuration for a shared file storage system that is associated with a studio resource.
	SharedFileSystemConfiguration StudioComponentSharedFileSystemConfigurationPtrInput `pulumi:"sharedFileSystemConfiguration"`
}

func (StudioComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration)(nil)).Elem()
}

func (i StudioComponentConfigurationArgs) ToStudioComponentConfigurationOutput() StudioComponentConfigurationOutput {
	return i.ToStudioComponentConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentConfigurationArgs) ToStudioComponentConfigurationOutputWithContext(ctx context.Context) StudioComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfigurationOutput)
}

func (i StudioComponentConfigurationArgs) ToStudioComponentConfigurationPtrOutput() StudioComponentConfigurationPtrOutput {
	return i.ToStudioComponentConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentConfigurationArgs) ToStudioComponentConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfigurationOutput).ToStudioComponentConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentConfigurationPtrInput is an input type that accepts StudioComponentConfigurationArgs, StudioComponentConfigurationPtr and StudioComponentConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentConfigurationPtrInput` via:
//
//	        StudioComponentConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentConfigurationPtrOutput() StudioComponentConfigurationPtrOutput
	ToStudioComponentConfigurationPtrOutputWithContext(context.Context) StudioComponentConfigurationPtrOutput
}

type studioComponentConfigurationPtrType StudioComponentConfigurationArgs

func StudioComponentConfigurationPtr(v *StudioComponentConfigurationArgs) StudioComponentConfigurationPtrInput {
	return (*studioComponentConfigurationPtrType)(v)
}

func (*studioComponentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration)(nil)).Elem()
}

func (i *studioComponentConfigurationPtrType) ToStudioComponentConfigurationPtrOutput() StudioComponentConfigurationPtrOutput {
	return i.ToStudioComponentConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentConfigurationPtrType) ToStudioComponentConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentConfigurationPtrOutput)
}

type StudioComponentConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentConfiguration)(nil)).Elem()
}

func (o StudioComponentConfigurationOutput) ToStudioComponentConfigurationOutput() StudioComponentConfigurationOutput {
	return o
}

func (o StudioComponentConfigurationOutput) ToStudioComponentConfigurationOutputWithContext(ctx context.Context) StudioComponentConfigurationOutput {
	return o
}

func (o StudioComponentConfigurationOutput) ToStudioComponentConfigurationPtrOutput() StudioComponentConfigurationPtrOutput {
	return o.ToStudioComponentConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentConfigurationOutput) ToStudioComponentConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentConfiguration) *StudioComponentConfiguration {
		return &v
	}).(StudioComponentConfigurationPtrOutput)
}

// The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
func (o StudioComponentConfigurationOutput) ActiveDirectoryConfiguration() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ApplyT(func(v StudioComponentConfiguration) *StudioComponentActiveDirectoryConfiguration {
		return v.ActiveDirectoryConfiguration
	}).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

// The configuration for a render farm that is associated with a studio resource.
func (o StudioComponentConfigurationOutput) ComputeFarmConfiguration() StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ApplyT(func(v StudioComponentConfiguration) *StudioComponentComputeFarmConfiguration {
		return v.ComputeFarmConfiguration
	}).(StudioComponentComputeFarmConfigurationPtrOutput)
}

// The configuration for a license service that is associated with a studio resource.
func (o StudioComponentConfigurationOutput) LicenseServiceConfiguration() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ApplyT(func(v StudioComponentConfiguration) *StudioComponentLicenseServiceConfiguration {
		return v.LicenseServiceConfiguration
	}).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

// The configuration for a shared file storage system that is associated with a studio resource.
func (o StudioComponentConfigurationOutput) SharedFileSystemConfiguration() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ApplyT(func(v StudioComponentConfiguration) *StudioComponentSharedFileSystemConfiguration {
		return v.SharedFileSystemConfiguration
	}).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

type StudioComponentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentConfiguration)(nil)).Elem()
}

func (o StudioComponentConfigurationPtrOutput) ToStudioComponentConfigurationPtrOutput() StudioComponentConfigurationPtrOutput {
	return o
}

func (o StudioComponentConfigurationPtrOutput) ToStudioComponentConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentConfigurationPtrOutput {
	return o
}

func (o StudioComponentConfigurationPtrOutput) Elem() StudioComponentConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration) StudioComponentConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentConfiguration
		return ret
	}).(StudioComponentConfigurationOutput)
}

// The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
func (o StudioComponentConfigurationPtrOutput) ActiveDirectoryConfiguration() StudioComponentActiveDirectoryConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration) *StudioComponentActiveDirectoryConfiguration {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryConfiguration
	}).(StudioComponentActiveDirectoryConfigurationPtrOutput)
}

// The configuration for a render farm that is associated with a studio resource.
func (o StudioComponentConfigurationPtrOutput) ComputeFarmConfiguration() StudioComponentComputeFarmConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration) *StudioComponentComputeFarmConfiguration {
		if v == nil {
			return nil
		}
		return v.ComputeFarmConfiguration
	}).(StudioComponentComputeFarmConfigurationPtrOutput)
}

// The configuration for a license service that is associated with a studio resource.
func (o StudioComponentConfigurationPtrOutput) LicenseServiceConfiguration() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration) *StudioComponentLicenseServiceConfiguration {
		if v == nil {
			return nil
		}
		return v.LicenseServiceConfiguration
	}).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

// The configuration for a shared file storage system that is associated with a studio resource.
func (o StudioComponentConfigurationPtrOutput) SharedFileSystemConfiguration() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ApplyT(func(v *StudioComponentConfiguration) *StudioComponentSharedFileSystemConfiguration {
		if v == nil {
			return nil
		}
		return v.SharedFileSystemConfiguration
	}).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

type StudioComponentInitializationScript struct {
	// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
	LaunchProfileProtocolVersion *string `pulumi:"launchProfileProtocolVersion"`
	// The platform of the initialization script, either Windows or Linux.
	Platform *string `pulumi:"platform"`
	// The method to use when running the initialization script.
	RunContext *string `pulumi:"runContext"`
	// The initialization script.
	Script *string `pulumi:"script"`
}

// StudioComponentInitializationScriptInput is an input type that accepts StudioComponentInitializationScriptArgs and StudioComponentInitializationScriptOutput values.
// You can construct a concrete instance of `StudioComponentInitializationScriptInput` via:
//
//	StudioComponentInitializationScriptArgs{...}
type StudioComponentInitializationScriptInput interface {
	pulumi.Input

	ToStudioComponentInitializationScriptOutput() StudioComponentInitializationScriptOutput
	ToStudioComponentInitializationScriptOutputWithContext(context.Context) StudioComponentInitializationScriptOutput
}

type StudioComponentInitializationScriptArgs struct {
	// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
	LaunchProfileProtocolVersion pulumi.StringPtrInput `pulumi:"launchProfileProtocolVersion"`
	// The platform of the initialization script, either Windows or Linux.
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// The method to use when running the initialization script.
	RunContext pulumi.StringPtrInput `pulumi:"runContext"`
	// The initialization script.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (StudioComponentInitializationScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentInitializationScript)(nil)).Elem()
}

func (i StudioComponentInitializationScriptArgs) ToStudioComponentInitializationScriptOutput() StudioComponentInitializationScriptOutput {
	return i.ToStudioComponentInitializationScriptOutputWithContext(context.Background())
}

func (i StudioComponentInitializationScriptArgs) ToStudioComponentInitializationScriptOutputWithContext(ctx context.Context) StudioComponentInitializationScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentInitializationScriptOutput)
}

// StudioComponentInitializationScriptArrayInput is an input type that accepts StudioComponentInitializationScriptArray and StudioComponentInitializationScriptArrayOutput values.
// You can construct a concrete instance of `StudioComponentInitializationScriptArrayInput` via:
//
//	StudioComponentInitializationScriptArray{ StudioComponentInitializationScriptArgs{...} }
type StudioComponentInitializationScriptArrayInput interface {
	pulumi.Input

	ToStudioComponentInitializationScriptArrayOutput() StudioComponentInitializationScriptArrayOutput
	ToStudioComponentInitializationScriptArrayOutputWithContext(context.Context) StudioComponentInitializationScriptArrayOutput
}

type StudioComponentInitializationScriptArray []StudioComponentInitializationScriptInput

func (StudioComponentInitializationScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentInitializationScript)(nil)).Elem()
}

func (i StudioComponentInitializationScriptArray) ToStudioComponentInitializationScriptArrayOutput() StudioComponentInitializationScriptArrayOutput {
	return i.ToStudioComponentInitializationScriptArrayOutputWithContext(context.Background())
}

func (i StudioComponentInitializationScriptArray) ToStudioComponentInitializationScriptArrayOutputWithContext(ctx context.Context) StudioComponentInitializationScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentInitializationScriptArrayOutput)
}

type StudioComponentInitializationScriptOutput struct{ *pulumi.OutputState }

func (StudioComponentInitializationScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentInitializationScript)(nil)).Elem()
}

func (o StudioComponentInitializationScriptOutput) ToStudioComponentInitializationScriptOutput() StudioComponentInitializationScriptOutput {
	return o
}

func (o StudioComponentInitializationScriptOutput) ToStudioComponentInitializationScriptOutputWithContext(ctx context.Context) StudioComponentInitializationScriptOutput {
	return o
}

// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
func (o StudioComponentInitializationScriptOutput) LaunchProfileProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *string { return v.LaunchProfileProtocolVersion }).(pulumi.StringPtrOutput)
}

// The platform of the initialization script, either Windows or Linux.
func (o StudioComponentInitializationScriptOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// The method to use when running the initialization script.
func (o StudioComponentInitializationScriptOutput) RunContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *string { return v.RunContext }).(pulumi.StringPtrOutput)
}

// The initialization script.
func (o StudioComponentInitializationScriptOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentInitializationScript) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type StudioComponentInitializationScriptArrayOutput struct{ *pulumi.OutputState }

func (StudioComponentInitializationScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentInitializationScript)(nil)).Elem()
}

func (o StudioComponentInitializationScriptArrayOutput) ToStudioComponentInitializationScriptArrayOutput() StudioComponentInitializationScriptArrayOutput {
	return o
}

func (o StudioComponentInitializationScriptArrayOutput) ToStudioComponentInitializationScriptArrayOutputWithContext(ctx context.Context) StudioComponentInitializationScriptArrayOutput {
	return o
}

func (o StudioComponentInitializationScriptArrayOutput) Index(i pulumi.IntInput) StudioComponentInitializationScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StudioComponentInitializationScript {
		return vs[0].([]StudioComponentInitializationScript)[vs[1].(int)]
	}).(StudioComponentInitializationScriptOutput)
}

type StudioComponentLicenseServiceConfiguration struct {
	// The endpoint of the license service that is accessed by the studio component resource.
	Endpoint *string `pulumi:"endpoint"`
}

// StudioComponentLicenseServiceConfigurationInput is an input type that accepts StudioComponentLicenseServiceConfigurationArgs and StudioComponentLicenseServiceConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentLicenseServiceConfigurationInput` via:
//
//	StudioComponentLicenseServiceConfigurationArgs{...}
type StudioComponentLicenseServiceConfigurationInput interface {
	pulumi.Input

	ToStudioComponentLicenseServiceConfigurationOutput() StudioComponentLicenseServiceConfigurationOutput
	ToStudioComponentLicenseServiceConfigurationOutputWithContext(context.Context) StudioComponentLicenseServiceConfigurationOutput
}

type StudioComponentLicenseServiceConfigurationArgs struct {
	// The endpoint of the license service that is accessed by the studio component resource.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
}

func (StudioComponentLicenseServiceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationOutput() StudioComponentLicenseServiceConfigurationOutput {
	return i.ToStudioComponentLicenseServiceConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentLicenseServiceConfigurationOutput)
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return i.ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentLicenseServiceConfigurationArgs) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentLicenseServiceConfigurationOutput).ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentLicenseServiceConfigurationPtrInput is an input type that accepts StudioComponentLicenseServiceConfigurationArgs, StudioComponentLicenseServiceConfigurationPtr and StudioComponentLicenseServiceConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentLicenseServiceConfigurationPtrInput` via:
//
//	        StudioComponentLicenseServiceConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentLicenseServiceConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput
	ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Context) StudioComponentLicenseServiceConfigurationPtrOutput
}

type studioComponentLicenseServiceConfigurationPtrType StudioComponentLicenseServiceConfigurationArgs

func StudioComponentLicenseServiceConfigurationPtr(v *StudioComponentLicenseServiceConfigurationArgs) StudioComponentLicenseServiceConfigurationPtrInput {
	return (*studioComponentLicenseServiceConfigurationPtrType)(v)
}

func (*studioComponentLicenseServiceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (i *studioComponentLicenseServiceConfigurationPtrType) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return i.ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentLicenseServiceConfigurationPtrType) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

type StudioComponentLicenseServiceConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentLicenseServiceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationOutput() StudioComponentLicenseServiceConfigurationOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentLicenseServiceConfigurationOutput) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentLicenseServiceConfiguration) *StudioComponentLicenseServiceConfiguration {
		return &v
	}).(StudioComponentLicenseServiceConfigurationPtrOutput)
}

// The endpoint of the license service that is accessed by the studio component resource.
func (o StudioComponentLicenseServiceConfigurationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentLicenseServiceConfiguration) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

type StudioComponentLicenseServiceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentLicenseServiceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentLicenseServiceConfiguration)(nil)).Elem()
}

func (o StudioComponentLicenseServiceConfigurationPtrOutput) ToStudioComponentLicenseServiceConfigurationPtrOutput() StudioComponentLicenseServiceConfigurationPtrOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationPtrOutput) ToStudioComponentLicenseServiceConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentLicenseServiceConfigurationPtrOutput {
	return o
}

func (o StudioComponentLicenseServiceConfigurationPtrOutput) Elem() StudioComponentLicenseServiceConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentLicenseServiceConfiguration) StudioComponentLicenseServiceConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentLicenseServiceConfiguration
		return ret
	}).(StudioComponentLicenseServiceConfigurationOutput)
}

// The endpoint of the license service that is accessed by the studio component resource.
func (o StudioComponentLicenseServiceConfigurationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentLicenseServiceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

type StudioComponentScriptParameterKeyValue struct {
	// A script parameter key.
	Key *string `pulumi:"key"`
	// A script parameter value.
	Value *string `pulumi:"value"`
}

// StudioComponentScriptParameterKeyValueInput is an input type that accepts StudioComponentScriptParameterKeyValueArgs and StudioComponentScriptParameterKeyValueOutput values.
// You can construct a concrete instance of `StudioComponentScriptParameterKeyValueInput` via:
//
//	StudioComponentScriptParameterKeyValueArgs{...}
type StudioComponentScriptParameterKeyValueInput interface {
	pulumi.Input

	ToStudioComponentScriptParameterKeyValueOutput() StudioComponentScriptParameterKeyValueOutput
	ToStudioComponentScriptParameterKeyValueOutputWithContext(context.Context) StudioComponentScriptParameterKeyValueOutput
}

type StudioComponentScriptParameterKeyValueArgs struct {
	// A script parameter key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// A script parameter value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StudioComponentScriptParameterKeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (i StudioComponentScriptParameterKeyValueArgs) ToStudioComponentScriptParameterKeyValueOutput() StudioComponentScriptParameterKeyValueOutput {
	return i.ToStudioComponentScriptParameterKeyValueOutputWithContext(context.Background())
}

func (i StudioComponentScriptParameterKeyValueArgs) ToStudioComponentScriptParameterKeyValueOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentScriptParameterKeyValueOutput)
}

// StudioComponentScriptParameterKeyValueArrayInput is an input type that accepts StudioComponentScriptParameterKeyValueArray and StudioComponentScriptParameterKeyValueArrayOutput values.
// You can construct a concrete instance of `StudioComponentScriptParameterKeyValueArrayInput` via:
//
//	StudioComponentScriptParameterKeyValueArray{ StudioComponentScriptParameterKeyValueArgs{...} }
type StudioComponentScriptParameterKeyValueArrayInput interface {
	pulumi.Input

	ToStudioComponentScriptParameterKeyValueArrayOutput() StudioComponentScriptParameterKeyValueArrayOutput
	ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(context.Context) StudioComponentScriptParameterKeyValueArrayOutput
}

type StudioComponentScriptParameterKeyValueArray []StudioComponentScriptParameterKeyValueInput

func (StudioComponentScriptParameterKeyValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (i StudioComponentScriptParameterKeyValueArray) ToStudioComponentScriptParameterKeyValueArrayOutput() StudioComponentScriptParameterKeyValueArrayOutput {
	return i.ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(context.Background())
}

func (i StudioComponentScriptParameterKeyValueArray) ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentScriptParameterKeyValueArrayOutput)
}

type StudioComponentScriptParameterKeyValueOutput struct{ *pulumi.OutputState }

func (StudioComponentScriptParameterKeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (o StudioComponentScriptParameterKeyValueOutput) ToStudioComponentScriptParameterKeyValueOutput() StudioComponentScriptParameterKeyValueOutput {
	return o
}

func (o StudioComponentScriptParameterKeyValueOutput) ToStudioComponentScriptParameterKeyValueOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueOutput {
	return o
}

// A script parameter key.
func (o StudioComponentScriptParameterKeyValueOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentScriptParameterKeyValue) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// A script parameter value.
func (o StudioComponentScriptParameterKeyValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentScriptParameterKeyValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StudioComponentScriptParameterKeyValueArrayOutput struct{ *pulumi.OutputState }

func (StudioComponentScriptParameterKeyValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StudioComponentScriptParameterKeyValue)(nil)).Elem()
}

func (o StudioComponentScriptParameterKeyValueArrayOutput) ToStudioComponentScriptParameterKeyValueArrayOutput() StudioComponentScriptParameterKeyValueArrayOutput {
	return o
}

func (o StudioComponentScriptParameterKeyValueArrayOutput) ToStudioComponentScriptParameterKeyValueArrayOutputWithContext(ctx context.Context) StudioComponentScriptParameterKeyValueArrayOutput {
	return o
}

func (o StudioComponentScriptParameterKeyValueArrayOutput) Index(i pulumi.IntInput) StudioComponentScriptParameterKeyValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StudioComponentScriptParameterKeyValue {
		return vs[0].([]StudioComponentScriptParameterKeyValue)[vs[1].(int)]
	}).(StudioComponentScriptParameterKeyValueOutput)
}

type StudioComponentSharedFileSystemConfiguration struct {
	// The endpoint of the shared file system that is accessed by the studio component resource.
	Endpoint *string `pulumi:"endpoint"`
	// The unique identifier for a file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The mount location for a shared file system on a Linux virtual workstation.
	LinuxMountPoint *string `pulumi:"linuxMountPoint"`
	// The name of the file share.
	ShareName *string `pulumi:"shareName"`
	// The mount location for a shared file system on a Windows virtual workstation.
	WindowsMountDrive *string `pulumi:"windowsMountDrive"`
}

// StudioComponentSharedFileSystemConfigurationInput is an input type that accepts StudioComponentSharedFileSystemConfigurationArgs and StudioComponentSharedFileSystemConfigurationOutput values.
// You can construct a concrete instance of `StudioComponentSharedFileSystemConfigurationInput` via:
//
//	StudioComponentSharedFileSystemConfigurationArgs{...}
type StudioComponentSharedFileSystemConfigurationInput interface {
	pulumi.Input

	ToStudioComponentSharedFileSystemConfigurationOutput() StudioComponentSharedFileSystemConfigurationOutput
	ToStudioComponentSharedFileSystemConfigurationOutputWithContext(context.Context) StudioComponentSharedFileSystemConfigurationOutput
}

type StudioComponentSharedFileSystemConfigurationArgs struct {
	// The endpoint of the shared file system that is accessed by the studio component resource.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The unique identifier for a file system.
	FileSystemId pulumi.StringPtrInput `pulumi:"fileSystemId"`
	// The mount location for a shared file system on a Linux virtual workstation.
	LinuxMountPoint pulumi.StringPtrInput `pulumi:"linuxMountPoint"`
	// The name of the file share.
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
	// The mount location for a shared file system on a Windows virtual workstation.
	WindowsMountDrive pulumi.StringPtrInput `pulumi:"windowsMountDrive"`
}

func (StudioComponentSharedFileSystemConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationOutput() StudioComponentSharedFileSystemConfigurationOutput {
	return i.ToStudioComponentSharedFileSystemConfigurationOutputWithContext(context.Background())
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentSharedFileSystemConfigurationOutput)
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return i.ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioComponentSharedFileSystemConfigurationArgs) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentSharedFileSystemConfigurationOutput).ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx)
}

// StudioComponentSharedFileSystemConfigurationPtrInput is an input type that accepts StudioComponentSharedFileSystemConfigurationArgs, StudioComponentSharedFileSystemConfigurationPtr and StudioComponentSharedFileSystemConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioComponentSharedFileSystemConfigurationPtrInput` via:
//
//	        StudioComponentSharedFileSystemConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioComponentSharedFileSystemConfigurationPtrInput interface {
	pulumi.Input

	ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput
	ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput
}

type studioComponentSharedFileSystemConfigurationPtrType StudioComponentSharedFileSystemConfigurationArgs

func StudioComponentSharedFileSystemConfigurationPtr(v *StudioComponentSharedFileSystemConfigurationArgs) StudioComponentSharedFileSystemConfigurationPtrInput {
	return (*studioComponentSharedFileSystemConfigurationPtrType)(v)
}

func (*studioComponentSharedFileSystemConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (i *studioComponentSharedFileSystemConfigurationPtrType) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return i.ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioComponentSharedFileSystemConfigurationPtrType) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

type StudioComponentSharedFileSystemConfigurationOutput struct{ *pulumi.OutputState }

func (StudioComponentSharedFileSystemConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationOutput() StudioComponentSharedFileSystemConfigurationOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioComponentSharedFileSystemConfigurationOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioComponentSharedFileSystemConfiguration) *StudioComponentSharedFileSystemConfiguration {
		return &v
	}).(StudioComponentSharedFileSystemConfigurationPtrOutput)
}

// The endpoint of the shared file system that is accessed by the studio component resource.
func (o StudioComponentSharedFileSystemConfigurationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The unique identifier for a file system.
func (o StudioComponentSharedFileSystemConfigurationOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.FileSystemId }).(pulumi.StringPtrOutput)
}

// The mount location for a shared file system on a Linux virtual workstation.
func (o StudioComponentSharedFileSystemConfigurationOutput) LinuxMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.LinuxMountPoint }).(pulumi.StringPtrOutput)
}

// The name of the file share.
func (o StudioComponentSharedFileSystemConfigurationOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

// The mount location for a shared file system on a Windows virtual workstation.
func (o StudioComponentSharedFileSystemConfigurationOutput) WindowsMountDrive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioComponentSharedFileSystemConfiguration) *string { return v.WindowsMountDrive }).(pulumi.StringPtrOutput)
}

type StudioComponentSharedFileSystemConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioComponentSharedFileSystemConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioComponentSharedFileSystemConfiguration)(nil)).Elem()
}

func (o StudioComponentSharedFileSystemConfigurationPtrOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutput() StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationPtrOutput) ToStudioComponentSharedFileSystemConfigurationPtrOutputWithContext(ctx context.Context) StudioComponentSharedFileSystemConfigurationPtrOutput {
	return o
}

func (o StudioComponentSharedFileSystemConfigurationPtrOutput) Elem() StudioComponentSharedFileSystemConfigurationOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) StudioComponentSharedFileSystemConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioComponentSharedFileSystemConfiguration
		return ret
	}).(StudioComponentSharedFileSystemConfigurationOutput)
}

// The endpoint of the shared file system that is accessed by the studio component resource.
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The unique identifier for a file system.
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// The mount location for a shared file system on a Linux virtual workstation.
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) LinuxMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LinuxMountPoint
	}).(pulumi.StringPtrOutput)
}

// The name of the file share.
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The mount location for a shared file system on a Windows virtual workstation.
func (o StudioComponentSharedFileSystemConfigurationPtrOutput) WindowsMountDrive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioComponentSharedFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WindowsMountDrive
	}).(pulumi.StringPtrOutput)
}

type StudioEncryptionConfiguration struct {
	// The ARN for a KMS key that is used to encrypt studio data.
	KeyArn *string `pulumi:"keyArn"`
	// The type of KMS key that is used to encrypt studio data.
	KeyType string `pulumi:"keyType"`
}

// StudioEncryptionConfigurationInput is an input type that accepts StudioEncryptionConfigurationArgs and StudioEncryptionConfigurationOutput values.
// You can construct a concrete instance of `StudioEncryptionConfigurationInput` via:
//
//	StudioEncryptionConfigurationArgs{...}
type StudioEncryptionConfigurationInput interface {
	pulumi.Input

	ToStudioEncryptionConfigurationOutput() StudioEncryptionConfigurationOutput
	ToStudioEncryptionConfigurationOutputWithContext(context.Context) StudioEncryptionConfigurationOutput
}

type StudioEncryptionConfigurationArgs struct {
	// The ARN for a KMS key that is used to encrypt studio data.
	KeyArn pulumi.StringPtrInput `pulumi:"keyArn"`
	// The type of KMS key that is used to encrypt studio data.
	KeyType pulumi.StringInput `pulumi:"keyType"`
}

func (StudioEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioEncryptionConfiguration)(nil)).Elem()
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationOutput() StudioEncryptionConfigurationOutput {
	return i.ToStudioEncryptionConfigurationOutputWithContext(context.Background())
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationOutputWithContext(ctx context.Context) StudioEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioEncryptionConfigurationOutput)
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return i.ToStudioEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i StudioEncryptionConfigurationArgs) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioEncryptionConfigurationOutput).ToStudioEncryptionConfigurationPtrOutputWithContext(ctx)
}

// StudioEncryptionConfigurationPtrInput is an input type that accepts StudioEncryptionConfigurationArgs, StudioEncryptionConfigurationPtr and StudioEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `StudioEncryptionConfigurationPtrInput` via:
//
//	        StudioEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type StudioEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput
	ToStudioEncryptionConfigurationPtrOutputWithContext(context.Context) StudioEncryptionConfigurationPtrOutput
}

type studioEncryptionConfigurationPtrType StudioEncryptionConfigurationArgs

func StudioEncryptionConfigurationPtr(v *StudioEncryptionConfigurationArgs) StudioEncryptionConfigurationPtrInput {
	return (*studioEncryptionConfigurationPtrType)(v)
}

func (*studioEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioEncryptionConfiguration)(nil)).Elem()
}

func (i *studioEncryptionConfigurationPtrType) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return i.ToStudioEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *studioEncryptionConfigurationPtrType) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioEncryptionConfigurationPtrOutput)
}

type StudioEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (StudioEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudioEncryptionConfiguration)(nil)).Elem()
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationOutput() StudioEncryptionConfigurationOutput {
	return o
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationOutputWithContext(ctx context.Context) StudioEncryptionConfigurationOutput {
	return o
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return o.ToStudioEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o StudioEncryptionConfigurationOutput) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StudioEncryptionConfiguration) *StudioEncryptionConfiguration {
		return &v
	}).(StudioEncryptionConfigurationPtrOutput)
}

// The ARN for a KMS key that is used to encrypt studio data.
func (o StudioEncryptionConfigurationOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StudioEncryptionConfiguration) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

// The type of KMS key that is used to encrypt studio data.
func (o StudioEncryptionConfigurationOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v StudioEncryptionConfiguration) string { return v.KeyType }).(pulumi.StringOutput)
}

type StudioEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StudioEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StudioEncryptionConfiguration)(nil)).Elem()
}

func (o StudioEncryptionConfigurationPtrOutput) ToStudioEncryptionConfigurationPtrOutput() StudioEncryptionConfigurationPtrOutput {
	return o
}

func (o StudioEncryptionConfigurationPtrOutput) ToStudioEncryptionConfigurationPtrOutputWithContext(ctx context.Context) StudioEncryptionConfigurationPtrOutput {
	return o
}

func (o StudioEncryptionConfigurationPtrOutput) Elem() StudioEncryptionConfigurationOutput {
	return o.ApplyT(func(v *StudioEncryptionConfiguration) StudioEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret StudioEncryptionConfiguration
		return ret
	}).(StudioEncryptionConfigurationOutput)
}

// The ARN for a KMS key that is used to encrypt studio data.
func (o StudioEncryptionConfigurationPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// The type of KMS key that is used to encrypt studio data.
func (o StudioEncryptionConfigurationPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StudioEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationInput)(nil)).Elem(), LaunchProfileStreamConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackupInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionBackupPtrInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStorageInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamConfigurationSessionStoragePtrInput)(nil)).Elem(), LaunchProfileStreamConfigurationSessionStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamingSessionStorageRootInput)(nil)).Elem(), LaunchProfileStreamingSessionStorageRootArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileStreamingSessionStorageRootPtrInput)(nil)).Elem(), LaunchProfileStreamingSessionStorageRootArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileVolumeConfigurationInput)(nil)).Elem(), LaunchProfileVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchProfileVolumeConfigurationPtrInput)(nil)).Elem(), LaunchProfileVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttributeInput)(nil)).Elem(), StudioComponentActiveDirectoryComputerAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryComputerAttributeArrayInput)(nil)).Elem(), StudioComponentActiveDirectoryComputerAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryConfigurationInput)(nil)).Elem(), StudioComponentActiveDirectoryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentActiveDirectoryConfigurationPtrInput)(nil)).Elem(), StudioComponentActiveDirectoryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentComputeFarmConfigurationInput)(nil)).Elem(), StudioComponentComputeFarmConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentComputeFarmConfigurationPtrInput)(nil)).Elem(), StudioComponentComputeFarmConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfigurationInput)(nil)).Elem(), StudioComponentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentConfigurationPtrInput)(nil)).Elem(), StudioComponentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentInitializationScriptInput)(nil)).Elem(), StudioComponentInitializationScriptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentInitializationScriptArrayInput)(nil)).Elem(), StudioComponentInitializationScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentLicenseServiceConfigurationInput)(nil)).Elem(), StudioComponentLicenseServiceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentLicenseServiceConfigurationPtrInput)(nil)).Elem(), StudioComponentLicenseServiceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentScriptParameterKeyValueInput)(nil)).Elem(), StudioComponentScriptParameterKeyValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentScriptParameterKeyValueArrayInput)(nil)).Elem(), StudioComponentScriptParameterKeyValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentSharedFileSystemConfigurationInput)(nil)).Elem(), StudioComponentSharedFileSystemConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioComponentSharedFileSystemConfigurationPtrInput)(nil)).Elem(), StudioComponentSharedFileSystemConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioEncryptionConfigurationInput)(nil)).Elem(), StudioEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StudioEncryptionConfigurationPtrInput)(nil)).Elem(), StudioEncryptionConfigurationArgs{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionBackupOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionBackupPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionStorageOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamConfigurationSessionStoragePtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamingSessionStorageRootOutput{})
	pulumi.RegisterOutputType(LaunchProfileStreamingSessionStorageRootPtrOutput{})
	pulumi.RegisterOutputType(LaunchProfileVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(LaunchProfileVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingImageEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingImageEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryComputerAttributeOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryComputerAttributeArrayOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentActiveDirectoryConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentComputeFarmConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentComputeFarmConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentInitializationScriptOutput{})
	pulumi.RegisterOutputType(StudioComponentInitializationScriptArrayOutput{})
	pulumi.RegisterOutputType(StudioComponentLicenseServiceConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentLicenseServiceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioComponentScriptParameterKeyValueOutput{})
	pulumi.RegisterOutputType(StudioComponentScriptParameterKeyValueArrayOutput{})
	pulumi.RegisterOutputType(StudioComponentSharedFileSystemConfigurationOutput{})
	pulumi.RegisterOutputType(StudioComponentSharedFileSystemConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StudioEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(StudioEncryptionConfigurationPtrOutput{})
}
