// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::NimbleStudio::Studio
type Studio struct {
	pulumi.CustomResourceState

	AdminRoleArn                  pulumi.StringOutput                    `pulumi:"adminRoleArn"`
	DisplayName                   pulumi.StringOutput                    `pulumi:"displayName"`
	HomeRegion                    pulumi.StringOutput                    `pulumi:"homeRegion"`
	SsoClientId                   pulumi.StringOutput                    `pulumi:"ssoClientId"`
	StudioEncryptionConfiguration StudioEncryptionConfigurationPtrOutput `pulumi:"studioEncryptionConfiguration"`
	StudioId                      pulumi.StringOutput                    `pulumi:"studioId"`
	StudioName                    pulumi.StringOutput                    `pulumi:"studioName"`
	StudioUrl                     pulumi.StringOutput                    `pulumi:"studioUrl"`
	Tags                          pulumi.StringMapOutput                 `pulumi:"tags"`
	UserRoleArn                   pulumi.StringOutput                    `pulumi:"userRoleArn"`
}

// NewStudio registers a new resource with the given unique name, arguments, and options.
func NewStudio(ctx *pulumi.Context,
	name string, args *StudioArgs, opts ...pulumi.ResourceOption) (*Studio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AdminRoleArn'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.UserRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'UserRoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"studioName",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Studio
	err := ctx.RegisterResource("aws-native:nimblestudio:Studio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudio gets an existing Studio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudioState, opts ...pulumi.ResourceOption) (*Studio, error) {
	var resource Studio
	err := ctx.ReadResource("aws-native:nimblestudio:Studio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Studio resources.
type studioState struct {
}

type StudioState struct {
}

func (StudioState) ElementType() reflect.Type {
	return reflect.TypeOf((*studioState)(nil)).Elem()
}

type studioArgs struct {
	AdminRoleArn                  string                         `pulumi:"adminRoleArn"`
	DisplayName                   string                         `pulumi:"displayName"`
	StudioEncryptionConfiguration *StudioEncryptionConfiguration `pulumi:"studioEncryptionConfiguration"`
	StudioName                    *string                        `pulumi:"studioName"`
	Tags                          map[string]string              `pulumi:"tags"`
	UserRoleArn                   string                         `pulumi:"userRoleArn"`
}

// The set of arguments for constructing a Studio resource.
type StudioArgs struct {
	AdminRoleArn                  pulumi.StringInput
	DisplayName                   pulumi.StringInput
	StudioEncryptionConfiguration StudioEncryptionConfigurationPtrInput
	StudioName                    pulumi.StringPtrInput
	Tags                          pulumi.StringMapInput
	UserRoleArn                   pulumi.StringInput
}

func (StudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studioArgs)(nil)).Elem()
}

type StudioInput interface {
	pulumi.Input

	ToStudioOutput() StudioOutput
	ToStudioOutputWithContext(ctx context.Context) StudioOutput
}

func (*Studio) ElementType() reflect.Type {
	return reflect.TypeOf((**Studio)(nil)).Elem()
}

func (i *Studio) ToStudioOutput() StudioOutput {
	return i.ToStudioOutputWithContext(context.Background())
}

func (i *Studio) ToStudioOutputWithContext(ctx context.Context) StudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioOutput)
}

type StudioOutput struct{ *pulumi.OutputState }

func (StudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Studio)(nil)).Elem()
}

func (o StudioOutput) ToStudioOutput() StudioOutput {
	return o
}

func (o StudioOutput) ToStudioOutputWithContext(ctx context.Context) StudioOutput {
	return o
}

func (o StudioOutput) AdminRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.AdminRoleArn }).(pulumi.StringOutput)
}

func (o StudioOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o StudioOutput) HomeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.HomeRegion }).(pulumi.StringOutput)
}

func (o StudioOutput) SsoClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.SsoClientId }).(pulumi.StringOutput)
}

func (o StudioOutput) StudioEncryptionConfiguration() StudioEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *Studio) StudioEncryptionConfigurationPtrOutput { return v.StudioEncryptionConfiguration }).(StudioEncryptionConfigurationPtrOutput)
}

func (o StudioOutput) StudioId() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.StudioId }).(pulumi.StringOutput)
}

func (o StudioOutput) StudioName() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.StudioName }).(pulumi.StringOutput)
}

func (o StudioOutput) StudioUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.StudioUrl }).(pulumi.StringOutput)
}

func (o StudioOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o StudioOutput) UserRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Studio) pulumi.StringOutput { return v.UserRoleArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StudioInput)(nil)).Elem(), &Studio{})
	pulumi.RegisterOutputType(StudioOutput{})
}
