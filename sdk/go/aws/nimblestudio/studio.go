// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nimblestudio

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a studio that contains other Nimble Studio resources
type Studio struct {
	pulumi.CustomResourceState

	// <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
	AdminRoleArn pulumi.StringOutput `pulumi:"adminRoleArn"`
	// <p>A friendly name for the studio.</p>
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// <p>The Amazon Web Services Region where the studio resource is located.</p>
	HomeRegion pulumi.StringOutput `pulumi:"homeRegion"`
	// <p>The Amazon Web Services SSO application client ID used to integrate with Amazon Web Services SSO to enable Amazon Web Services SSO users to log in to Nimble Studio portal.</p>
	SsoClientId                   pulumi.StringOutput                    `pulumi:"ssoClientId"`
	StudioEncryptionConfiguration StudioEncryptionConfigurationPtrOutput `pulumi:"studioEncryptionConfiguration"`
	StudioId                      pulumi.StringOutput                    `pulumi:"studioId"`
	// <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
	StudioName pulumi.StringOutput `pulumi:"studioName"`
	// <p>The address of the web page for the studio.</p>
	StudioUrl pulumi.StringOutput `pulumi:"studioUrl"`
	Tags      StudioTagsPtrOutput `pulumi:"tags"`
	// <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
	UserRoleArn pulumi.StringOutput `pulumi:"userRoleArn"`
}

// NewStudio registers a new resource with the given unique name, arguments, and options.
func NewStudio(ctx *pulumi.Context,
	name string, args *StudioArgs, opts ...pulumi.ResourceOption) (*Studio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AdminRoleArn'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.StudioName == nil {
		return nil, errors.New("invalid value for required argument 'StudioName'")
	}
	if args.UserRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'UserRoleArn'")
	}
	var resource Studio
	err := ctx.RegisterResource("aws-native:nimblestudio:Studio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudio gets an existing Studio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudioState, opts ...pulumi.ResourceOption) (*Studio, error) {
	var resource Studio
	err := ctx.ReadResource("aws-native:nimblestudio:Studio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Studio resources.
type studioState struct {
}

type StudioState struct {
}

func (StudioState) ElementType() reflect.Type {
	return reflect.TypeOf((*studioState)(nil)).Elem()
}

type studioArgs struct {
	// <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
	AdminRoleArn string `pulumi:"adminRoleArn"`
	// <p>A friendly name for the studio.</p>
	DisplayName                   string                         `pulumi:"displayName"`
	StudioEncryptionConfiguration *StudioEncryptionConfiguration `pulumi:"studioEncryptionConfiguration"`
	// <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
	StudioName string      `pulumi:"studioName"`
	Tags       *StudioTags `pulumi:"tags"`
	// <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
	UserRoleArn string `pulumi:"userRoleArn"`
}

// The set of arguments for constructing a Studio resource.
type StudioArgs struct {
	// <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.</p>
	AdminRoleArn pulumi.StringInput
	// <p>A friendly name for the studio.</p>
	DisplayName                   pulumi.StringInput
	StudioEncryptionConfiguration StudioEncryptionConfigurationPtrInput
	// <p>The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.</p>
	StudioName pulumi.StringInput
	Tags       StudioTagsPtrInput
	// <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.</p>
	UserRoleArn pulumi.StringInput
}

func (StudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studioArgs)(nil)).Elem()
}

type StudioInput interface {
	pulumi.Input

	ToStudioOutput() StudioOutput
	ToStudioOutputWithContext(ctx context.Context) StudioOutput
}

func (*Studio) ElementType() reflect.Type {
	return reflect.TypeOf((*Studio)(nil))
}

func (i *Studio) ToStudioOutput() StudioOutput {
	return i.ToStudioOutputWithContext(context.Background())
}

func (i *Studio) ToStudioOutputWithContext(ctx context.Context) StudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudioOutput)
}

type StudioOutput struct{ *pulumi.OutputState }

func (StudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Studio)(nil))
}

func (o StudioOutput) ToStudioOutput() StudioOutput {
	return o
}

func (o StudioOutput) ToStudioOutputWithContext(ctx context.Context) StudioOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StudioOutput{})
}
