// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::OpsWorks::App
//
// Deprecated: App is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type App struct {
	pulumi.CustomResourceState

	AppSource        AppSourcePtrOutput                `pulumi:"appSource"`
	Attributes       pulumi.AnyOutput                  `pulumi:"attributes"`
	DataSources      AppDataSourceArrayOutput          `pulumi:"dataSources"`
	Description      pulumi.StringPtrOutput            `pulumi:"description"`
	Domains          pulumi.StringArrayOutput          `pulumi:"domains"`
	EnableSsl        pulumi.BoolPtrOutput              `pulumi:"enableSsl"`
	Environment      AppEnvironmentVariableArrayOutput `pulumi:"environment"`
	Name             pulumi.StringOutput               `pulumi:"name"`
	Shortname        pulumi.StringPtrOutput            `pulumi:"shortname"`
	SslConfiguration AppSslConfigurationPtrOutput      `pulumi:"sslConfiguration"`
	StackId          pulumi.StringOutput               `pulumi:"stackId"`
	Type             pulumi.StringOutput               `pulumi:"type"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource App
	err := ctx.RegisterResource("aws-native:opsworks:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("aws-native:opsworks:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
}

type AppState struct {
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	AppSource        *AppSource               `pulumi:"appSource"`
	Attributes       interface{}              `pulumi:"attributes"`
	DataSources      []AppDataSource          `pulumi:"dataSources"`
	Description      *string                  `pulumi:"description"`
	Domains          []string                 `pulumi:"domains"`
	EnableSsl        *bool                    `pulumi:"enableSsl"`
	Environment      []AppEnvironmentVariable `pulumi:"environment"`
	Name             *string                  `pulumi:"name"`
	Shortname        *string                  `pulumi:"shortname"`
	SslConfiguration *AppSslConfiguration     `pulumi:"sslConfiguration"`
	StackId          string                   `pulumi:"stackId"`
	Type             string                   `pulumi:"type"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	AppSource        AppSourcePtrInput
	Attributes       pulumi.Input
	DataSources      AppDataSourceArrayInput
	Description      pulumi.StringPtrInput
	Domains          pulumi.StringArrayInput
	EnableSsl        pulumi.BoolPtrInput
	Environment      AppEnvironmentVariableArrayInput
	Name             pulumi.StringPtrInput
	Shortname        pulumi.StringPtrInput
	SslConfiguration AppSslConfigurationPtrInput
	StackId          pulumi.StringInput
	Type             pulumi.StringInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

func (o AppOutput) AppSource() AppSourcePtrOutput {
	return o.ApplyT(func(v *App) AppSourcePtrOutput { return v.AppSource }).(AppSourcePtrOutput)
}

func (o AppOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v *App) pulumi.AnyOutput { return v.Attributes }).(pulumi.AnyOutput)
}

func (o AppOutput) DataSources() AppDataSourceArrayOutput {
	return o.ApplyT(func(v *App) AppDataSourceArrayOutput { return v.DataSources }).(AppDataSourceArrayOutput)
}

func (o AppOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AppOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *App) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

func (o AppOutput) EnableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *App) pulumi.BoolPtrOutput { return v.EnableSsl }).(pulumi.BoolPtrOutput)
}

func (o AppOutput) Environment() AppEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *App) AppEnvironmentVariableArrayOutput { return v.Environment }).(AppEnvironmentVariableArrayOutput)
}

func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AppOutput) Shortname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.Shortname }).(pulumi.StringPtrOutput)
}

func (o AppOutput) SslConfiguration() AppSslConfigurationPtrOutput {
	return o.ApplyT(func(v *App) AppSslConfigurationPtrOutput { return v.SslConfiguration }).(AppSslConfigurationPtrOutput)
}

func (o AppOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

func (o AppOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterOutputType(AppOutput{})
}
