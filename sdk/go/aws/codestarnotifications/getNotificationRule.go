// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarnotifications

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CodeStarNotifications::NotificationRule
func LookupNotificationRule(ctx *pulumi.Context, args *LookupNotificationRuleArgs, opts ...pulumi.InvokeOption) (*LookupNotificationRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNotificationRuleResult
	err := ctx.Invoke("aws-native:codestarnotifications:getNotificationRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNotificationRuleArgs struct {
	// The Amazon Resource Name (ARN) of the notification rule.
	Arn string `pulumi:"arn"`
}

type LookupNotificationRuleResult struct {
	// The Amazon Resource Name (ARN) of the notification rule.
	Arn *string `pulumi:"arn"`
	// The name or email alias of the person who created the notification rule.
	CreatedBy *string `pulumi:"createdBy"`
	// The level of detail to include in the notifications for this resource. `BASIC` will include only the contents of the event as it would appear in Amazon CloudWatch. `FULL` will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
	DetailType *NotificationRuleDetailType `pulumi:"detailType"`
	// A list of event types associated with this notification rule. For a complete list of event types and IDs, see [Notification concepts](https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#concepts-api) in the *Developer Tools Console User Guide* .
	EventTypeIds []string `pulumi:"eventTypeIds"`
	// The name for the notification rule. Notification rule names must be unique in your AWS account .
	Name *string `pulumi:"name"`
	// The status of the notification rule. The default value is `ENABLED` . If the status is set to `DISABLED` , notifications aren't sent for the notification rule.
	Status *NotificationRuleStatus `pulumi:"status"`
	// A list of tags to apply to this notification rule. Key names cannot start with " `aws` ".
	Tags map[string]string `pulumi:"tags"`
	// Information about the AWS Chatbot topics or AWS Chatbot clients associated with a notification rule.
	Targets []NotificationRuleTarget `pulumi:"targets"`
}

func LookupNotificationRuleOutput(ctx *pulumi.Context, args LookupNotificationRuleOutputArgs, opts ...pulumi.InvokeOption) LookupNotificationRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNotificationRuleResult, error) {
			args := v.(LookupNotificationRuleArgs)
			r, err := LookupNotificationRule(ctx, &args, opts...)
			var s LookupNotificationRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNotificationRuleResultOutput)
}

type LookupNotificationRuleOutputArgs struct {
	// The Amazon Resource Name (ARN) of the notification rule.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupNotificationRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationRuleArgs)(nil)).Elem()
}

type LookupNotificationRuleResultOutput struct{ *pulumi.OutputState }

func (LookupNotificationRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationRuleResult)(nil)).Elem()
}

func (o LookupNotificationRuleResultOutput) ToLookupNotificationRuleResultOutput() LookupNotificationRuleResultOutput {
	return o
}

func (o LookupNotificationRuleResultOutput) ToLookupNotificationRuleResultOutputWithContext(ctx context.Context) LookupNotificationRuleResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the notification rule.
func (o LookupNotificationRuleResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The name or email alias of the person who created the notification rule.
func (o LookupNotificationRuleResultOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The level of detail to include in the notifications for this resource. `BASIC` will include only the contents of the event as it would appear in Amazon CloudWatch. `FULL` will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
func (o LookupNotificationRuleResultOutput) DetailType() NotificationRuleDetailTypePtrOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) *NotificationRuleDetailType { return v.DetailType }).(NotificationRuleDetailTypePtrOutput)
}

// A list of event types associated with this notification rule. For a complete list of event types and IDs, see [Notification concepts](https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#concepts-api) in the *Developer Tools Console User Guide* .
func (o LookupNotificationRuleResultOutput) EventTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) []string { return v.EventTypeIds }).(pulumi.StringArrayOutput)
}

// The name for the notification rule. Notification rule names must be unique in your AWS account .
func (o LookupNotificationRuleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The status of the notification rule. The default value is `ENABLED` . If the status is set to `DISABLED` , notifications aren't sent for the notification rule.
func (o LookupNotificationRuleResultOutput) Status() NotificationRuleStatusPtrOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) *NotificationRuleStatus { return v.Status }).(NotificationRuleStatusPtrOutput)
}

// A list of tags to apply to this notification rule. Key names cannot start with " `aws` ".
func (o LookupNotificationRuleResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Information about the AWS Chatbot topics or AWS Chatbot clients associated with a notification rule.
func (o LookupNotificationRuleResultOutput) Targets() NotificationRuleTargetArrayOutput {
	return o.ApplyT(func(v LookupNotificationRuleResult) []NotificationRuleTarget { return v.Targets }).(NotificationRuleTargetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNotificationRuleResultOutput{})
}
