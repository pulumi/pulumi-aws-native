// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Describes a data repository association's automatic export policy. The “AutoExportPolicy“ defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
//
//	The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
type DataRepositoryAssociationAutoExportPolicy struct {
	// The ``AutoExportPolicy`` can have the following event values:
	//   +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
	//   +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
	//   +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
	//
	//  You can define any combination of event types for your ``AutoExportPolicy``.
	Events []DataRepositoryAssociationEventType `pulumi:"events"`
}

// DataRepositoryAssociationAutoExportPolicyInput is an input type that accepts DataRepositoryAssociationAutoExportPolicyArgs and DataRepositoryAssociationAutoExportPolicyOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationAutoExportPolicyInput` via:
//
//	DataRepositoryAssociationAutoExportPolicyArgs{...}
type DataRepositoryAssociationAutoExportPolicyInput interface {
	pulumi.Input

	ToDataRepositoryAssociationAutoExportPolicyOutput() DataRepositoryAssociationAutoExportPolicyOutput
	ToDataRepositoryAssociationAutoExportPolicyOutputWithContext(context.Context) DataRepositoryAssociationAutoExportPolicyOutput
}

// Describes a data repository association's automatic export policy. The “AutoExportPolicy“ defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
//
//	The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
type DataRepositoryAssociationAutoExportPolicyArgs struct {
	// The ``AutoExportPolicy`` can have the following event values:
	//   +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
	//   +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
	//   +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
	//
	//  You can define any combination of event types for your ``AutoExportPolicy``.
	Events DataRepositoryAssociationEventTypeArrayInput `pulumi:"events"`
}

func (DataRepositoryAssociationAutoExportPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociationAutoExportPolicy)(nil)).Elem()
}

func (i DataRepositoryAssociationAutoExportPolicyArgs) ToDataRepositoryAssociationAutoExportPolicyOutput() DataRepositoryAssociationAutoExportPolicyOutput {
	return i.ToDataRepositoryAssociationAutoExportPolicyOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationAutoExportPolicyArgs) ToDataRepositoryAssociationAutoExportPolicyOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoExportPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationAutoExportPolicyOutput)
}

func (i DataRepositoryAssociationAutoExportPolicyArgs) ToDataRepositoryAssociationAutoExportPolicyPtrOutput() DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return i.ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationAutoExportPolicyArgs) ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationAutoExportPolicyOutput).ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(ctx)
}

// DataRepositoryAssociationAutoExportPolicyPtrInput is an input type that accepts DataRepositoryAssociationAutoExportPolicyArgs, DataRepositoryAssociationAutoExportPolicyPtr and DataRepositoryAssociationAutoExportPolicyPtrOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationAutoExportPolicyPtrInput` via:
//
//	        DataRepositoryAssociationAutoExportPolicyArgs{...}
//
//	or:
//
//	        nil
type DataRepositoryAssociationAutoExportPolicyPtrInput interface {
	pulumi.Input

	ToDataRepositoryAssociationAutoExportPolicyPtrOutput() DataRepositoryAssociationAutoExportPolicyPtrOutput
	ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(context.Context) DataRepositoryAssociationAutoExportPolicyPtrOutput
}

type dataRepositoryAssociationAutoExportPolicyPtrType DataRepositoryAssociationAutoExportPolicyArgs

func DataRepositoryAssociationAutoExportPolicyPtr(v *DataRepositoryAssociationAutoExportPolicyArgs) DataRepositoryAssociationAutoExportPolicyPtrInput {
	return (*dataRepositoryAssociationAutoExportPolicyPtrType)(v)
}

func (*dataRepositoryAssociationAutoExportPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociationAutoExportPolicy)(nil)).Elem()
}

func (i *dataRepositoryAssociationAutoExportPolicyPtrType) ToDataRepositoryAssociationAutoExportPolicyPtrOutput() DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return i.ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(context.Background())
}

func (i *dataRepositoryAssociationAutoExportPolicyPtrType) ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationAutoExportPolicyPtrOutput)
}

// Describes a data repository association's automatic export policy. The “AutoExportPolicy“ defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
//
//	The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
type DataRepositoryAssociationAutoExportPolicyOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationAutoExportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociationAutoExportPolicy)(nil)).Elem()
}

func (o DataRepositoryAssociationAutoExportPolicyOutput) ToDataRepositoryAssociationAutoExportPolicyOutput() DataRepositoryAssociationAutoExportPolicyOutput {
	return o
}

func (o DataRepositoryAssociationAutoExportPolicyOutput) ToDataRepositoryAssociationAutoExportPolicyOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoExportPolicyOutput {
	return o
}

func (o DataRepositoryAssociationAutoExportPolicyOutput) ToDataRepositoryAssociationAutoExportPolicyPtrOutput() DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return o.ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(context.Background())
}

func (o DataRepositoryAssociationAutoExportPolicyOutput) ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataRepositoryAssociationAutoExportPolicy) *DataRepositoryAssociationAutoExportPolicy {
		return &v
	}).(DataRepositoryAssociationAutoExportPolicyPtrOutput)
}

// The “AutoExportPolicy“ can have the following event values:
//
//   - “NEW“ - New files and directories are automatically exported to the data repository as they are added to the file system.
//
//   - “CHANGED“ - Changes to files and directories on the file system are automatically exported to the data repository.
//
//   - “DELETED“ - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
//
//     You can define any combination of event types for your “AutoExportPolicy“.
func (o DataRepositoryAssociationAutoExportPolicyOutput) Events() DataRepositoryAssociationEventTypeArrayOutput {
	return o.ApplyT(func(v DataRepositoryAssociationAutoExportPolicy) []DataRepositoryAssociationEventType {
		return v.Events
	}).(DataRepositoryAssociationEventTypeArrayOutput)
}

type DataRepositoryAssociationAutoExportPolicyPtrOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationAutoExportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociationAutoExportPolicy)(nil)).Elem()
}

func (o DataRepositoryAssociationAutoExportPolicyPtrOutput) ToDataRepositoryAssociationAutoExportPolicyPtrOutput() DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return o
}

func (o DataRepositoryAssociationAutoExportPolicyPtrOutput) ToDataRepositoryAssociationAutoExportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return o
}

func (o DataRepositoryAssociationAutoExportPolicyPtrOutput) Elem() DataRepositoryAssociationAutoExportPolicyOutput {
	return o.ApplyT(func(v *DataRepositoryAssociationAutoExportPolicy) DataRepositoryAssociationAutoExportPolicy {
		if v != nil {
			return *v
		}
		var ret DataRepositoryAssociationAutoExportPolicy
		return ret
	}).(DataRepositoryAssociationAutoExportPolicyOutput)
}

// The “AutoExportPolicy“ can have the following event values:
//
//   - “NEW“ - New files and directories are automatically exported to the data repository as they are added to the file system.
//
//   - “CHANGED“ - Changes to files and directories on the file system are automatically exported to the data repository.
//
//   - “DELETED“ - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
//
//     You can define any combination of event types for your “AutoExportPolicy“.
func (o DataRepositoryAssociationAutoExportPolicyPtrOutput) Events() DataRepositoryAssociationEventTypeArrayOutput {
	return o.ApplyT(func(v *DataRepositoryAssociationAutoExportPolicy) []DataRepositoryAssociationEventType {
		if v == nil {
			return nil
		}
		return v.Events
	}).(DataRepositoryAssociationEventTypeArrayOutput)
}

// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
//
//	The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
type DataRepositoryAssociationAutoImportPolicy struct {
	// The ``AutoImportPolicy`` can have the following event values:
	//   +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
	//   +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
	//   +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
	//
	//  You can define any combination of event types for your ``AutoImportPolicy``.
	Events []DataRepositoryAssociationEventType `pulumi:"events"`
}

// DataRepositoryAssociationAutoImportPolicyInput is an input type that accepts DataRepositoryAssociationAutoImportPolicyArgs and DataRepositoryAssociationAutoImportPolicyOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationAutoImportPolicyInput` via:
//
//	DataRepositoryAssociationAutoImportPolicyArgs{...}
type DataRepositoryAssociationAutoImportPolicyInput interface {
	pulumi.Input

	ToDataRepositoryAssociationAutoImportPolicyOutput() DataRepositoryAssociationAutoImportPolicyOutput
	ToDataRepositoryAssociationAutoImportPolicyOutputWithContext(context.Context) DataRepositoryAssociationAutoImportPolicyOutput
}

// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
//
//	The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
type DataRepositoryAssociationAutoImportPolicyArgs struct {
	// The ``AutoImportPolicy`` can have the following event values:
	//   +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
	//   +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
	//   +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
	//
	//  You can define any combination of event types for your ``AutoImportPolicy``.
	Events DataRepositoryAssociationEventTypeArrayInput `pulumi:"events"`
}

func (DataRepositoryAssociationAutoImportPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociationAutoImportPolicy)(nil)).Elem()
}

func (i DataRepositoryAssociationAutoImportPolicyArgs) ToDataRepositoryAssociationAutoImportPolicyOutput() DataRepositoryAssociationAutoImportPolicyOutput {
	return i.ToDataRepositoryAssociationAutoImportPolicyOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationAutoImportPolicyArgs) ToDataRepositoryAssociationAutoImportPolicyOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoImportPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationAutoImportPolicyOutput)
}

func (i DataRepositoryAssociationAutoImportPolicyArgs) ToDataRepositoryAssociationAutoImportPolicyPtrOutput() DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return i.ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationAutoImportPolicyArgs) ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationAutoImportPolicyOutput).ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(ctx)
}

// DataRepositoryAssociationAutoImportPolicyPtrInput is an input type that accepts DataRepositoryAssociationAutoImportPolicyArgs, DataRepositoryAssociationAutoImportPolicyPtr and DataRepositoryAssociationAutoImportPolicyPtrOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationAutoImportPolicyPtrInput` via:
//
//	        DataRepositoryAssociationAutoImportPolicyArgs{...}
//
//	or:
//
//	        nil
type DataRepositoryAssociationAutoImportPolicyPtrInput interface {
	pulumi.Input

	ToDataRepositoryAssociationAutoImportPolicyPtrOutput() DataRepositoryAssociationAutoImportPolicyPtrOutput
	ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(context.Context) DataRepositoryAssociationAutoImportPolicyPtrOutput
}

type dataRepositoryAssociationAutoImportPolicyPtrType DataRepositoryAssociationAutoImportPolicyArgs

func DataRepositoryAssociationAutoImportPolicyPtr(v *DataRepositoryAssociationAutoImportPolicyArgs) DataRepositoryAssociationAutoImportPolicyPtrInput {
	return (*dataRepositoryAssociationAutoImportPolicyPtrType)(v)
}

func (*dataRepositoryAssociationAutoImportPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociationAutoImportPolicy)(nil)).Elem()
}

func (i *dataRepositoryAssociationAutoImportPolicyPtrType) ToDataRepositoryAssociationAutoImportPolicyPtrOutput() DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return i.ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(context.Background())
}

func (i *dataRepositoryAssociationAutoImportPolicyPtrType) ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationAutoImportPolicyPtrOutput)
}

// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
//
//	The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
type DataRepositoryAssociationAutoImportPolicyOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationAutoImportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociationAutoImportPolicy)(nil)).Elem()
}

func (o DataRepositoryAssociationAutoImportPolicyOutput) ToDataRepositoryAssociationAutoImportPolicyOutput() DataRepositoryAssociationAutoImportPolicyOutput {
	return o
}

func (o DataRepositoryAssociationAutoImportPolicyOutput) ToDataRepositoryAssociationAutoImportPolicyOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoImportPolicyOutput {
	return o
}

func (o DataRepositoryAssociationAutoImportPolicyOutput) ToDataRepositoryAssociationAutoImportPolicyPtrOutput() DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return o.ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(context.Background())
}

func (o DataRepositoryAssociationAutoImportPolicyOutput) ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataRepositoryAssociationAutoImportPolicy) *DataRepositoryAssociationAutoImportPolicy {
		return &v
	}).(DataRepositoryAssociationAutoImportPolicyPtrOutput)
}

// The “AutoImportPolicy“ can have the following event values:
//
//   - “NEW“ - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
//
//   - “CHANGED“ - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
//
//   - “DELETED“ - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
//
//     You can define any combination of event types for your “AutoImportPolicy“.
func (o DataRepositoryAssociationAutoImportPolicyOutput) Events() DataRepositoryAssociationEventTypeArrayOutput {
	return o.ApplyT(func(v DataRepositoryAssociationAutoImportPolicy) []DataRepositoryAssociationEventType {
		return v.Events
	}).(DataRepositoryAssociationEventTypeArrayOutput)
}

type DataRepositoryAssociationAutoImportPolicyPtrOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationAutoImportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociationAutoImportPolicy)(nil)).Elem()
}

func (o DataRepositoryAssociationAutoImportPolicyPtrOutput) ToDataRepositoryAssociationAutoImportPolicyPtrOutput() DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return o
}

func (o DataRepositoryAssociationAutoImportPolicyPtrOutput) ToDataRepositoryAssociationAutoImportPolicyPtrOutputWithContext(ctx context.Context) DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return o
}

func (o DataRepositoryAssociationAutoImportPolicyPtrOutput) Elem() DataRepositoryAssociationAutoImportPolicyOutput {
	return o.ApplyT(func(v *DataRepositoryAssociationAutoImportPolicy) DataRepositoryAssociationAutoImportPolicy {
		if v != nil {
			return *v
		}
		var ret DataRepositoryAssociationAutoImportPolicy
		return ret
	}).(DataRepositoryAssociationAutoImportPolicyOutput)
}

// The “AutoImportPolicy“ can have the following event values:
//
//   - “NEW“ - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
//
//   - “CHANGED“ - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
//
//   - “DELETED“ - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
//
//     You can define any combination of event types for your “AutoImportPolicy“.
func (o DataRepositoryAssociationAutoImportPolicyPtrOutput) Events() DataRepositoryAssociationEventTypeArrayOutput {
	return o.ApplyT(func(v *DataRepositoryAssociationAutoImportPolicy) []DataRepositoryAssociationEventType {
		if v == nil {
			return nil
		}
		return v.Events
	}).(DataRepositoryAssociationEventTypeArrayOutput)
}

// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
type DataRepositoryAssociationS3 struct {
	// Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
	//  The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
	AutoExportPolicy *DataRepositoryAssociationAutoExportPolicy `pulumi:"autoExportPolicy"`
	// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
	//  The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
	AutoImportPolicy *DataRepositoryAssociationAutoImportPolicy `pulumi:"autoImportPolicy"`
}

// DataRepositoryAssociationS3Input is an input type that accepts DataRepositoryAssociationS3Args and DataRepositoryAssociationS3Output values.
// You can construct a concrete instance of `DataRepositoryAssociationS3Input` via:
//
//	DataRepositoryAssociationS3Args{...}
type DataRepositoryAssociationS3Input interface {
	pulumi.Input

	ToDataRepositoryAssociationS3Output() DataRepositoryAssociationS3Output
	ToDataRepositoryAssociationS3OutputWithContext(context.Context) DataRepositoryAssociationS3Output
}

// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
type DataRepositoryAssociationS3Args struct {
	// Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
	//  The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
	AutoExportPolicy DataRepositoryAssociationAutoExportPolicyPtrInput `pulumi:"autoExportPolicy"`
	// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
	//  The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
	AutoImportPolicy DataRepositoryAssociationAutoImportPolicyPtrInput `pulumi:"autoImportPolicy"`
}

func (DataRepositoryAssociationS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociationS3)(nil)).Elem()
}

func (i DataRepositoryAssociationS3Args) ToDataRepositoryAssociationS3Output() DataRepositoryAssociationS3Output {
	return i.ToDataRepositoryAssociationS3OutputWithContext(context.Background())
}

func (i DataRepositoryAssociationS3Args) ToDataRepositoryAssociationS3OutputWithContext(ctx context.Context) DataRepositoryAssociationS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationS3Output)
}

func (i DataRepositoryAssociationS3Args) ToDataRepositoryAssociationS3PtrOutput() DataRepositoryAssociationS3PtrOutput {
	return i.ToDataRepositoryAssociationS3PtrOutputWithContext(context.Background())
}

func (i DataRepositoryAssociationS3Args) ToDataRepositoryAssociationS3PtrOutputWithContext(ctx context.Context) DataRepositoryAssociationS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationS3Output).ToDataRepositoryAssociationS3PtrOutputWithContext(ctx)
}

// DataRepositoryAssociationS3PtrInput is an input type that accepts DataRepositoryAssociationS3Args, DataRepositoryAssociationS3Ptr and DataRepositoryAssociationS3PtrOutput values.
// You can construct a concrete instance of `DataRepositoryAssociationS3PtrInput` via:
//
//	        DataRepositoryAssociationS3Args{...}
//
//	or:
//
//	        nil
type DataRepositoryAssociationS3PtrInput interface {
	pulumi.Input

	ToDataRepositoryAssociationS3PtrOutput() DataRepositoryAssociationS3PtrOutput
	ToDataRepositoryAssociationS3PtrOutputWithContext(context.Context) DataRepositoryAssociationS3PtrOutput
}

type dataRepositoryAssociationS3PtrType DataRepositoryAssociationS3Args

func DataRepositoryAssociationS3Ptr(v *DataRepositoryAssociationS3Args) DataRepositoryAssociationS3PtrInput {
	return (*dataRepositoryAssociationS3PtrType)(v)
}

func (*dataRepositoryAssociationS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociationS3)(nil)).Elem()
}

func (i *dataRepositoryAssociationS3PtrType) ToDataRepositoryAssociationS3PtrOutput() DataRepositoryAssociationS3PtrOutput {
	return i.ToDataRepositoryAssociationS3PtrOutputWithContext(context.Background())
}

func (i *dataRepositoryAssociationS3PtrType) ToDataRepositoryAssociationS3PtrOutputWithContext(ctx context.Context) DataRepositoryAssociationS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationS3PtrOutput)
}

// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
type DataRepositoryAssociationS3Output struct{ *pulumi.OutputState }

func (DataRepositoryAssociationS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DataRepositoryAssociationS3)(nil)).Elem()
}

func (o DataRepositoryAssociationS3Output) ToDataRepositoryAssociationS3Output() DataRepositoryAssociationS3Output {
	return o
}

func (o DataRepositoryAssociationS3Output) ToDataRepositoryAssociationS3OutputWithContext(ctx context.Context) DataRepositoryAssociationS3Output {
	return o
}

func (o DataRepositoryAssociationS3Output) ToDataRepositoryAssociationS3PtrOutput() DataRepositoryAssociationS3PtrOutput {
	return o.ToDataRepositoryAssociationS3PtrOutputWithContext(context.Background())
}

func (o DataRepositoryAssociationS3Output) ToDataRepositoryAssociationS3PtrOutputWithContext(ctx context.Context) DataRepositoryAssociationS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataRepositoryAssociationS3) *DataRepositoryAssociationS3 {
		return &v
	}).(DataRepositoryAssociationS3PtrOutput)
}

// Describes a data repository association's automatic export policy. The “AutoExportPolicy“ defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
//
//	The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
func (o DataRepositoryAssociationS3Output) AutoExportPolicy() DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return o.ApplyT(func(v DataRepositoryAssociationS3) *DataRepositoryAssociationAutoExportPolicy {
		return v.AutoExportPolicy
	}).(DataRepositoryAssociationAutoExportPolicyPtrOutput)
}

// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
//
//	The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
func (o DataRepositoryAssociationS3Output) AutoImportPolicy() DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return o.ApplyT(func(v DataRepositoryAssociationS3) *DataRepositoryAssociationAutoImportPolicy {
		return v.AutoImportPolicy
	}).(DataRepositoryAssociationAutoImportPolicyPtrOutput)
}

type DataRepositoryAssociationS3PtrOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociationS3)(nil)).Elem()
}

func (o DataRepositoryAssociationS3PtrOutput) ToDataRepositoryAssociationS3PtrOutput() DataRepositoryAssociationS3PtrOutput {
	return o
}

func (o DataRepositoryAssociationS3PtrOutput) ToDataRepositoryAssociationS3PtrOutputWithContext(ctx context.Context) DataRepositoryAssociationS3PtrOutput {
	return o
}

func (o DataRepositoryAssociationS3PtrOutput) Elem() DataRepositoryAssociationS3Output {
	return o.ApplyT(func(v *DataRepositoryAssociationS3) DataRepositoryAssociationS3 {
		if v != nil {
			return *v
		}
		var ret DataRepositoryAssociationS3
		return ret
	}).(DataRepositoryAssociationS3Output)
}

// Describes a data repository association's automatic export policy. The “AutoExportPolicy“ defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
//
//	The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
func (o DataRepositoryAssociationS3PtrOutput) AutoExportPolicy() DataRepositoryAssociationAutoExportPolicyPtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociationS3) *DataRepositoryAssociationAutoExportPolicy {
		if v == nil {
			return nil
		}
		return v.AutoExportPolicy
	}).(DataRepositoryAssociationAutoExportPolicyPtrOutput)
}

// Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
//
//	The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
func (o DataRepositoryAssociationS3PtrOutput) AutoImportPolicy() DataRepositoryAssociationAutoImportPolicyPtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociationS3) *DataRepositoryAssociationAutoImportPolicy {
		if v == nil {
			return nil
		}
		return v.AutoImportPolicy
	}).(DataRepositoryAssociationAutoImportPolicyPtrOutput)
}

// Specifies a key-value pair for a resource tag.
type DataRepositoryAssociationTag struct {
	// A value that specifies the ``TagKey``, the name of the tag. Tag keys must be unique for the resource to which they are attached.
	Key string `pulumi:"key"`
	// A value that specifies the ``TagValue``, the value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key-value pair in a tag set of ``finances : April`` and also of ``payroll : April``.
	Value string `pulumi:"value"`
}

type S3AccessPointAttachmentFileSystemGid struct {
	Gid float64 `pulumi:"gid"`
}

// S3AccessPointAttachmentFileSystemGidInput is an input type that accepts S3AccessPointAttachmentFileSystemGidArgs and S3AccessPointAttachmentFileSystemGidOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentFileSystemGidInput` via:
//
//	S3AccessPointAttachmentFileSystemGidArgs{...}
type S3AccessPointAttachmentFileSystemGidInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentFileSystemGidOutput() S3AccessPointAttachmentFileSystemGidOutput
	ToS3AccessPointAttachmentFileSystemGidOutputWithContext(context.Context) S3AccessPointAttachmentFileSystemGidOutput
}

type S3AccessPointAttachmentFileSystemGidArgs struct {
	Gid pulumi.Float64Input `pulumi:"gid"`
}

func (S3AccessPointAttachmentFileSystemGidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentFileSystemGid)(nil)).Elem()
}

func (i S3AccessPointAttachmentFileSystemGidArgs) ToS3AccessPointAttachmentFileSystemGidOutput() S3AccessPointAttachmentFileSystemGidOutput {
	return i.ToS3AccessPointAttachmentFileSystemGidOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentFileSystemGidArgs) ToS3AccessPointAttachmentFileSystemGidOutputWithContext(ctx context.Context) S3AccessPointAttachmentFileSystemGidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentFileSystemGidOutput)
}

// S3AccessPointAttachmentFileSystemGidArrayInput is an input type that accepts S3AccessPointAttachmentFileSystemGidArray and S3AccessPointAttachmentFileSystemGidArrayOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentFileSystemGidArrayInput` via:
//
//	S3AccessPointAttachmentFileSystemGidArray{ S3AccessPointAttachmentFileSystemGidArgs{...} }
type S3AccessPointAttachmentFileSystemGidArrayInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentFileSystemGidArrayOutput() S3AccessPointAttachmentFileSystemGidArrayOutput
	ToS3AccessPointAttachmentFileSystemGidArrayOutputWithContext(context.Context) S3AccessPointAttachmentFileSystemGidArrayOutput
}

type S3AccessPointAttachmentFileSystemGidArray []S3AccessPointAttachmentFileSystemGidInput

func (S3AccessPointAttachmentFileSystemGidArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AccessPointAttachmentFileSystemGid)(nil)).Elem()
}

func (i S3AccessPointAttachmentFileSystemGidArray) ToS3AccessPointAttachmentFileSystemGidArrayOutput() S3AccessPointAttachmentFileSystemGidArrayOutput {
	return i.ToS3AccessPointAttachmentFileSystemGidArrayOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentFileSystemGidArray) ToS3AccessPointAttachmentFileSystemGidArrayOutputWithContext(ctx context.Context) S3AccessPointAttachmentFileSystemGidArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentFileSystemGidArrayOutput)
}

type S3AccessPointAttachmentFileSystemGidOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentFileSystemGidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentFileSystemGid)(nil)).Elem()
}

func (o S3AccessPointAttachmentFileSystemGidOutput) ToS3AccessPointAttachmentFileSystemGidOutput() S3AccessPointAttachmentFileSystemGidOutput {
	return o
}

func (o S3AccessPointAttachmentFileSystemGidOutput) ToS3AccessPointAttachmentFileSystemGidOutputWithContext(ctx context.Context) S3AccessPointAttachmentFileSystemGidOutput {
	return o
}

func (o S3AccessPointAttachmentFileSystemGidOutput) Gid() pulumi.Float64Output {
	return o.ApplyT(func(v S3AccessPointAttachmentFileSystemGid) float64 { return v.Gid }).(pulumi.Float64Output)
}

type S3AccessPointAttachmentFileSystemGidArrayOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentFileSystemGidArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AccessPointAttachmentFileSystemGid)(nil)).Elem()
}

func (o S3AccessPointAttachmentFileSystemGidArrayOutput) ToS3AccessPointAttachmentFileSystemGidArrayOutput() S3AccessPointAttachmentFileSystemGidArrayOutput {
	return o
}

func (o S3AccessPointAttachmentFileSystemGidArrayOutput) ToS3AccessPointAttachmentFileSystemGidArrayOutputWithContext(ctx context.Context) S3AccessPointAttachmentFileSystemGidArrayOutput {
	return o
}

func (o S3AccessPointAttachmentFileSystemGidArrayOutput) Index(i pulumi.IntInput) S3AccessPointAttachmentFileSystemGidOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3AccessPointAttachmentFileSystemGid {
		return vs[0].([]S3AccessPointAttachmentFileSystemGid)[vs[1].(int)]
	}).(S3AccessPointAttachmentFileSystemGidOutput)
}

type S3AccessPointAttachmentOpenZfsFileSystemIdentity struct {
	PosixUser S3AccessPointAttachmentOpenZfsPosixFileSystemUser    `pulumi:"posixUser"`
	Type      S3AccessPointAttachmentOpenZfsFileSystemIdentityType `pulumi:"type"`
}

// S3AccessPointAttachmentOpenZfsFileSystemIdentityInput is an input type that accepts S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs and S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentOpenZfsFileSystemIdentityInput` via:
//
//	S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs{...}
type S3AccessPointAttachmentOpenZfsFileSystemIdentityInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutput() S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput
	ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutputWithContext(context.Context) S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput
}

type S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs struct {
	PosixUser S3AccessPointAttachmentOpenZfsPosixFileSystemUserInput    `pulumi:"posixUser"`
	Type      S3AccessPointAttachmentOpenZfsFileSystemIdentityTypeInput `pulumi:"type"`
}

func (S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentOpenZfsFileSystemIdentity)(nil)).Elem()
}

func (i S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs) ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutput() S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput {
	return i.ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs) ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutputWithContext(ctx context.Context) S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput)
}

type S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentOpenZfsFileSystemIdentity)(nil)).Elem()
}

func (o S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput) ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutput() S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput {
	return o
}

func (o S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput) ToS3AccessPointAttachmentOpenZfsFileSystemIdentityOutputWithContext(ctx context.Context) S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput {
	return o
}

func (o S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput) PosixUser() S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentOpenZfsFileSystemIdentity) S3AccessPointAttachmentOpenZfsPosixFileSystemUser {
		return v.PosixUser
	}).(S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput)
}

func (o S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput) Type() S3AccessPointAttachmentOpenZfsFileSystemIdentityTypeOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentOpenZfsFileSystemIdentity) S3AccessPointAttachmentOpenZfsFileSystemIdentityType {
		return v.Type
	}).(S3AccessPointAttachmentOpenZfsFileSystemIdentityTypeOutput)
}

type S3AccessPointAttachmentOpenZfsPosixFileSystemUser struct {
	Gid           float64                                `pulumi:"gid"`
	SecondaryGids []S3AccessPointAttachmentFileSystemGid `pulumi:"secondaryGids"`
	Uid           float64                                `pulumi:"uid"`
}

// S3AccessPointAttachmentOpenZfsPosixFileSystemUserInput is an input type that accepts S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs and S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentOpenZfsPosixFileSystemUserInput` via:
//
//	S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs{...}
type S3AccessPointAttachmentOpenZfsPosixFileSystemUserInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput() S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput
	ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutputWithContext(context.Context) S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput
}

type S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs struct {
	Gid           pulumi.Float64Input                            `pulumi:"gid"`
	SecondaryGids S3AccessPointAttachmentFileSystemGidArrayInput `pulumi:"secondaryGids"`
	Uid           pulumi.Float64Input                            `pulumi:"uid"`
}

func (S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentOpenZfsPosixFileSystemUser)(nil)).Elem()
}

func (i S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs) ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput() S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput {
	return i.ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs) ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutputWithContext(ctx context.Context) S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput)
}

type S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentOpenZfsPosixFileSystemUser)(nil)).Elem()
}

func (o S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput) ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput() S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput {
	return o
}

func (o S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput) ToS3AccessPointAttachmentOpenZfsPosixFileSystemUserOutputWithContext(ctx context.Context) S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput {
	return o
}

func (o S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput) Gid() pulumi.Float64Output {
	return o.ApplyT(func(v S3AccessPointAttachmentOpenZfsPosixFileSystemUser) float64 { return v.Gid }).(pulumi.Float64Output)
}

func (o S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput) SecondaryGids() S3AccessPointAttachmentFileSystemGidArrayOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentOpenZfsPosixFileSystemUser) []S3AccessPointAttachmentFileSystemGid {
		return v.SecondaryGids
	}).(S3AccessPointAttachmentFileSystemGidArrayOutput)
}

func (o S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput) Uid() pulumi.Float64Output {
	return o.ApplyT(func(v S3AccessPointAttachmentOpenZfsPosixFileSystemUser) float64 { return v.Uid }).(pulumi.Float64Output)
}

type S3AccessPointAttachmentS3AccessPoint struct {
	Alias            *string                                               `pulumi:"alias"`
	Policy           interface{}                                           `pulumi:"policy"`
	ResourceArn      *string                                               `pulumi:"resourceArn"`
	VpcConfiguration *S3AccessPointAttachmentS3AccessPointVpcConfiguration `pulumi:"vpcConfiguration"`
}

// S3AccessPointAttachmentS3AccessPointInput is an input type that accepts S3AccessPointAttachmentS3AccessPointArgs and S3AccessPointAttachmentS3AccessPointOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentS3AccessPointInput` via:
//
//	S3AccessPointAttachmentS3AccessPointArgs{...}
type S3AccessPointAttachmentS3AccessPointInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentS3AccessPointOutput() S3AccessPointAttachmentS3AccessPointOutput
	ToS3AccessPointAttachmentS3AccessPointOutputWithContext(context.Context) S3AccessPointAttachmentS3AccessPointOutput
}

type S3AccessPointAttachmentS3AccessPointArgs struct {
	Alias            pulumi.StringPtrInput                                        `pulumi:"alias"`
	Policy           pulumi.Input                                                 `pulumi:"policy"`
	ResourceArn      pulumi.StringPtrInput                                        `pulumi:"resourceArn"`
	VpcConfiguration S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrInput `pulumi:"vpcConfiguration"`
}

func (S3AccessPointAttachmentS3AccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentS3AccessPoint)(nil)).Elem()
}

func (i S3AccessPointAttachmentS3AccessPointArgs) ToS3AccessPointAttachmentS3AccessPointOutput() S3AccessPointAttachmentS3AccessPointOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentS3AccessPointArgs) ToS3AccessPointAttachmentS3AccessPointOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointOutput)
}

func (i S3AccessPointAttachmentS3AccessPointArgs) ToS3AccessPointAttachmentS3AccessPointPtrOutput() S3AccessPointAttachmentS3AccessPointPtrOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentS3AccessPointArgs) ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointOutput).ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(ctx)
}

// S3AccessPointAttachmentS3AccessPointPtrInput is an input type that accepts S3AccessPointAttachmentS3AccessPointArgs, S3AccessPointAttachmentS3AccessPointPtr and S3AccessPointAttachmentS3AccessPointPtrOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentS3AccessPointPtrInput` via:
//
//	        S3AccessPointAttachmentS3AccessPointArgs{...}
//
//	or:
//
//	        nil
type S3AccessPointAttachmentS3AccessPointPtrInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentS3AccessPointPtrOutput() S3AccessPointAttachmentS3AccessPointPtrOutput
	ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(context.Context) S3AccessPointAttachmentS3AccessPointPtrOutput
}

type s3accessPointAttachmentS3AccessPointPtrType S3AccessPointAttachmentS3AccessPointArgs

func S3AccessPointAttachmentS3AccessPointPtr(v *S3AccessPointAttachmentS3AccessPointArgs) S3AccessPointAttachmentS3AccessPointPtrInput {
	return (*s3accessPointAttachmentS3AccessPointPtrType)(v)
}

func (*s3accessPointAttachmentS3AccessPointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AccessPointAttachmentS3AccessPoint)(nil)).Elem()
}

func (i *s3accessPointAttachmentS3AccessPointPtrType) ToS3AccessPointAttachmentS3AccessPointPtrOutput() S3AccessPointAttachmentS3AccessPointPtrOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(context.Background())
}

func (i *s3accessPointAttachmentS3AccessPointPtrType) ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointPtrOutput)
}

type S3AccessPointAttachmentS3AccessPointOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentS3AccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentS3AccessPoint)(nil)).Elem()
}

func (o S3AccessPointAttachmentS3AccessPointOutput) ToS3AccessPointAttachmentS3AccessPointOutput() S3AccessPointAttachmentS3AccessPointOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointOutput) ToS3AccessPointAttachmentS3AccessPointOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointOutput) ToS3AccessPointAttachmentS3AccessPointPtrOutput() S3AccessPointAttachmentS3AccessPointPtrOutput {
	return o.ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(context.Background())
}

func (o S3AccessPointAttachmentS3AccessPointOutput) ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3AccessPointAttachmentS3AccessPoint) *S3AccessPointAttachmentS3AccessPoint {
		return &v
	}).(S3AccessPointAttachmentS3AccessPointPtrOutput)
}

func (o S3AccessPointAttachmentS3AccessPointOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPoint) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

func (o S3AccessPointAttachmentS3AccessPointOutput) Policy() pulumi.AnyOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPoint) interface{} { return v.Policy }).(pulumi.AnyOutput)
}

func (o S3AccessPointAttachmentS3AccessPointOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPoint) *string { return v.ResourceArn }).(pulumi.StringPtrOutput)
}

func (o S3AccessPointAttachmentS3AccessPointOutput) VpcConfiguration() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPoint) *S3AccessPointAttachmentS3AccessPointVpcConfiguration {
		return v.VpcConfiguration
	}).(S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput)
}

type S3AccessPointAttachmentS3AccessPointPtrOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentS3AccessPointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AccessPointAttachmentS3AccessPoint)(nil)).Elem()
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) ToS3AccessPointAttachmentS3AccessPointPtrOutput() S3AccessPointAttachmentS3AccessPointPtrOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) ToS3AccessPointAttachmentS3AccessPointPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointPtrOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) Elem() S3AccessPointAttachmentS3AccessPointOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPoint) S3AccessPointAttachmentS3AccessPoint {
		if v != nil {
			return *v
		}
		var ret S3AccessPointAttachmentS3AccessPoint
		return ret
	}).(S3AccessPointAttachmentS3AccessPointOutput)
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPoint) *string {
		if v == nil {
			return nil
		}
		return v.Alias
	}).(pulumi.StringPtrOutput)
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) Policy() pulumi.AnyOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPoint) interface{} {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.AnyOutput)
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPoint) *string {
		if v == nil {
			return nil
		}
		return v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o S3AccessPointAttachmentS3AccessPointPtrOutput) VpcConfiguration() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPoint) *S3AccessPointAttachmentS3AccessPointVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.VpcConfiguration
	}).(S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput)
}

type S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration struct {
	FileSystemIdentity S3AccessPointAttachmentOpenZfsFileSystemIdentity `pulumi:"fileSystemIdentity"`
	VolumeId           string                                           `pulumi:"volumeId"`
}

// S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationInput is an input type that accepts S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs and S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationInput` via:
//
//	S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs{...}
type S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput() S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput
	ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutputWithContext(context.Context) S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput
}

type S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs struct {
	FileSystemIdentity S3AccessPointAttachmentOpenZfsFileSystemIdentityInput `pulumi:"fileSystemIdentity"`
	VolumeId           pulumi.StringInput                                    `pulumi:"volumeId"`
}

func (S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration)(nil)).Elem()
}

func (i S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs) ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput() S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs) ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput)
}

type S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration)(nil)).Elem()
}

func (o S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput) ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput() S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput) ToS3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput) FileSystemIdentity() S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration) S3AccessPointAttachmentOpenZfsFileSystemIdentity {
		return v.FileSystemIdentity
	}).(S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput)
}

func (o S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration) string { return v.VolumeId }).(pulumi.StringOutput)
}

type S3AccessPointAttachmentS3AccessPointVpcConfiguration struct {
	VpcId string `pulumi:"vpcId"`
}

// S3AccessPointAttachmentS3AccessPointVpcConfigurationInput is an input type that accepts S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs and S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentS3AccessPointVpcConfigurationInput` via:
//
//	S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs{...}
type S3AccessPointAttachmentS3AccessPointVpcConfigurationInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput
	ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutputWithContext(context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput
}

type S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs struct {
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointVpcConfiguration)(nil)).Elem()
}

func (i S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput)
}

func (i S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput).ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(ctx)
}

// S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrInput is an input type that accepts S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs, S3AccessPointAttachmentS3AccessPointVpcConfigurationPtr and S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrInput` via:
//
//	        S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput
	ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput
}

type s3accessPointAttachmentS3AccessPointVpcConfigurationPtrType S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs

func S3AccessPointAttachmentS3AccessPointVpcConfigurationPtr(v *S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs) S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrInput {
	return (*s3accessPointAttachmentS3AccessPointVpcConfigurationPtrType)(v)
}

func (*s3accessPointAttachmentS3AccessPointVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AccessPointAttachmentS3AccessPointVpcConfiguration)(nil)).Elem()
}

func (i *s3accessPointAttachmentS3AccessPointVpcConfigurationPtrType) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return i.ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *s3accessPointAttachmentS3AccessPointVpcConfigurationPtrType) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput)
}

type S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointVpcConfiguration)(nil)).Elem()
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return o.ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3AccessPointAttachmentS3AccessPointVpcConfiguration) *S3AccessPointAttachmentS3AccessPointVpcConfiguration {
		return &v
	}).(S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput)
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v S3AccessPointAttachmentS3AccessPointVpcConfiguration) string { return v.VpcId }).(pulumi.StringOutput)
}

type S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AccessPointAttachmentS3AccessPointVpcConfiguration)(nil)).Elem()
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput() S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput) ToS3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput {
	return o
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput) Elem() S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPointVpcConfiguration) S3AccessPointAttachmentS3AccessPointVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret S3AccessPointAttachmentS3AccessPointVpcConfiguration
		return ret
	}).(S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput)
}

func (o S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AccessPointAttachmentS3AccessPointVpcConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationAutoExportPolicyInput)(nil)).Elem(), DataRepositoryAssociationAutoExportPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationAutoExportPolicyPtrInput)(nil)).Elem(), DataRepositoryAssociationAutoExportPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationAutoImportPolicyInput)(nil)).Elem(), DataRepositoryAssociationAutoImportPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationAutoImportPolicyPtrInput)(nil)).Elem(), DataRepositoryAssociationAutoImportPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationS3Input)(nil)).Elem(), DataRepositoryAssociationS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationS3PtrInput)(nil)).Elem(), DataRepositoryAssociationS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentFileSystemGidInput)(nil)).Elem(), S3AccessPointAttachmentFileSystemGidArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentFileSystemGidArrayInput)(nil)).Elem(), S3AccessPointAttachmentFileSystemGidArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentOpenZfsFileSystemIdentityInput)(nil)).Elem(), S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentOpenZfsPosixFileSystemUserInput)(nil)).Elem(), S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointInput)(nil)).Elem(), S3AccessPointAttachmentS3AccessPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointPtrInput)(nil)).Elem(), S3AccessPointAttachmentS3AccessPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationInput)(nil)).Elem(), S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointVpcConfigurationInput)(nil)).Elem(), S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrInput)(nil)).Elem(), S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs{})
	pulumi.RegisterOutputType(DataRepositoryAssociationAutoExportPolicyOutput{})
	pulumi.RegisterOutputType(DataRepositoryAssociationAutoExportPolicyPtrOutput{})
	pulumi.RegisterOutputType(DataRepositoryAssociationAutoImportPolicyOutput{})
	pulumi.RegisterOutputType(DataRepositoryAssociationAutoImportPolicyPtrOutput{})
	pulumi.RegisterOutputType(DataRepositoryAssociationS3Output{})
	pulumi.RegisterOutputType(DataRepositoryAssociationS3PtrOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentFileSystemGidOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentFileSystemGidArrayOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentOpenZfsFileSystemIdentityOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentOpenZfsPosixFileSystemUserOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentS3AccessPointOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentS3AccessPointPtrOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentS3AccessPointVpcConfigurationOutput{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentS3AccessPointVpcConfigurationPtrOutput{})
}
