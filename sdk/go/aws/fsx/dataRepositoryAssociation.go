// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::FSx::DataRepositoryAssociation
type DataRepositoryAssociation struct {
	pulumi.CustomResourceState

	// The system-generated, unique ID of the data repository association.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true.
	BatchImportMetaDataOnCreate pulumi.BoolPtrOutput `pulumi:"batchImportMetaDataOnCreate"`
	// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/ . This path specifies where in the S3 data repository files will be imported from or exported to.
	DataRepositoryPath pulumi.StringOutput `pulumi:"dataRepositoryPath"`
	// The globally unique ID of the file system, assigned by Amazon FSx.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath pulumi.StringOutput `pulumi:"fileSystemPath"`
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize pulumi.IntPtrOutput `pulumi:"importedFileChunkSize"`
	// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 DataRepositoryAssociationS3PtrOutput `pulumi:"s3"`
	// A list of Tag values, with a maximum of 50 elements.
	Tags DataRepositoryAssociationTagArrayOutput `pulumi:"tags"`
}

// NewDataRepositoryAssociation registers a new resource with the given unique name, arguments, and options.
func NewDataRepositoryAssociation(ctx *pulumi.Context,
	name string, args *DataRepositoryAssociationArgs, opts ...pulumi.ResourceOption) (*DataRepositoryAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataRepositoryPath == nil {
		return nil, errors.New("invalid value for required argument 'DataRepositoryPath'")
	}
	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.FileSystemPath == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemPath'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"batchImportMetaDataOnCreate",
		"dataRepositoryPath",
		"fileSystemId",
		"fileSystemPath",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataRepositoryAssociation
	err := ctx.RegisterResource("aws-native:fsx:DataRepositoryAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataRepositoryAssociation gets an existing DataRepositoryAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataRepositoryAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataRepositoryAssociationState, opts ...pulumi.ResourceOption) (*DataRepositoryAssociation, error) {
	var resource DataRepositoryAssociation
	err := ctx.ReadResource("aws-native:fsx:DataRepositoryAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataRepositoryAssociation resources.
type dataRepositoryAssociationState struct {
}

type DataRepositoryAssociationState struct {
}

func (DataRepositoryAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataRepositoryAssociationState)(nil)).Elem()
}

type dataRepositoryAssociationArgs struct {
	// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true.
	BatchImportMetaDataOnCreate *bool `pulumi:"batchImportMetaDataOnCreate"`
	// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/ . This path specifies where in the S3 data repository files will be imported from or exported to.
	DataRepositoryPath string `pulumi:"dataRepositoryPath"`
	// The globally unique ID of the file system, assigned by Amazon FSx.
	FileSystemId string `pulumi:"fileSystemId"`
	// This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath string `pulumi:"fileSystemPath"`
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize *int `pulumi:"importedFileChunkSize"`
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 *DataRepositoryAssociationS3 `pulumi:"s3"`
	// A list of Tag values, with a maximum of 50 elements.
	Tags []DataRepositoryAssociationTag `pulumi:"tags"`
}

// The set of arguments for constructing a DataRepositoryAssociation resource.
type DataRepositoryAssociationArgs struct {
	// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true.
	BatchImportMetaDataOnCreate pulumi.BoolPtrInput
	// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/ . This path specifies where in the S3 data repository files will be imported from or exported to.
	DataRepositoryPath pulumi.StringInput
	// The globally unique ID of the file system, assigned by Amazon FSx.
	FileSystemId pulumi.StringInput
	// This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	FileSystemPath pulumi.StringInput
	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	ImportedFileChunkSize pulumi.IntPtrInput
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	S3 DataRepositoryAssociationS3PtrInput
	// A list of Tag values, with a maximum of 50 elements.
	Tags DataRepositoryAssociationTagArrayInput
}

func (DataRepositoryAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataRepositoryAssociationArgs)(nil)).Elem()
}

type DataRepositoryAssociationInput interface {
	pulumi.Input

	ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput
	ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput
}

func (*DataRepositoryAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociation)(nil)).Elem()
}

func (i *DataRepositoryAssociation) ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput {
	return i.ToDataRepositoryAssociationOutputWithContext(context.Background())
}

func (i *DataRepositoryAssociation) ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataRepositoryAssociationOutput)
}

type DataRepositoryAssociationOutput struct{ *pulumi.OutputState }

func (DataRepositoryAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataRepositoryAssociation)(nil)).Elem()
}

func (o DataRepositoryAssociationOutput) ToDataRepositoryAssociationOutput() DataRepositoryAssociationOutput {
	return o
}

func (o DataRepositoryAssociationOutput) ToDataRepositoryAssociationOutputWithContext(ctx context.Context) DataRepositoryAssociationOutput {
	return o
}

// The system-generated, unique ID of the data repository association.
func (o DataRepositoryAssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true.
func (o DataRepositoryAssociationOutput) BatchImportMetaDataOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.BoolPtrOutput { return v.BatchImportMetaDataOnCreate }).(pulumi.BoolPtrOutput)
}

// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/ . This path specifies where in the S3 data repository files will be imported from or exported to.
func (o DataRepositoryAssociationOutput) DataRepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.DataRepositoryPath }).(pulumi.StringOutput)
}

// The globally unique ID of the file system, assigned by Amazon FSx.
func (o DataRepositoryAssociationOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
func (o DataRepositoryAssociationOutput) FileSystemPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.FileSystemPath }).(pulumi.StringOutput)
}

// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
func (o DataRepositoryAssociationOutput) ImportedFileChunkSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.IntPtrOutput { return v.ImportedFileChunkSize }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
func (o DataRepositoryAssociationOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
func (o DataRepositoryAssociationOutput) S3() DataRepositoryAssociationS3PtrOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) DataRepositoryAssociationS3PtrOutput { return v.S3 }).(DataRepositoryAssociationS3PtrOutput)
}

// A list of Tag values, with a maximum of 50 elements.
func (o DataRepositoryAssociationOutput) Tags() DataRepositoryAssociationTagArrayOutput {
	return o.ApplyT(func(v *DataRepositoryAssociation) DataRepositoryAssociationTagArrayOutput { return v.Tags }).(DataRepositoryAssociationTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataRepositoryAssociationInput)(nil)).Elem(), &DataRepositoryAssociation{})
	pulumi.RegisterOutputType(DataRepositoryAssociationOutput{})
}
