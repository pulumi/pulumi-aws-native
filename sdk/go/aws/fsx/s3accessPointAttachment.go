// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::FSx::S3AccessPointAttachment
type S3AccessPointAttachment struct {
	pulumi.CustomResourceState

	// The Name of the S3AccessPointAttachment
	Name pulumi.StringOutput `pulumi:"name"`
	// The OpenZFSConfiguration of the S3 access point attachment.
	OpenZfsConfiguration S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput `pulumi:"openZfsConfiguration"`
	// The S3 access point configuration of the S3 access point attachment.
	S3AccessPoint S3AccessPointAttachmentS3AccessPointPtrOutput `pulumi:"s3AccessPoint"`
	// The type of Amazon FSx volume that the S3 access point is attached to.
	Type S3AccessPointAttachmentTypeOutput `pulumi:"type"`
}

// NewS3AccessPointAttachment registers a new resource with the given unique name, arguments, and options.
func NewS3AccessPointAttachment(ctx *pulumi.Context,
	name string, args *S3AccessPointAttachmentArgs, opts ...pulumi.ResourceOption) (*S3AccessPointAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OpenZfsConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'OpenZfsConfiguration'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"openZfsConfiguration",
		"s3AccessPoint",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3AccessPointAttachment
	err := ctx.RegisterResource("aws-native:fsx:S3AccessPointAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3AccessPointAttachment gets an existing S3AccessPointAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3AccessPointAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3AccessPointAttachmentState, opts ...pulumi.ResourceOption) (*S3AccessPointAttachment, error) {
	var resource S3AccessPointAttachment
	err := ctx.ReadResource("aws-native:fsx:S3AccessPointAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3AccessPointAttachment resources.
type s3accessPointAttachmentState struct {
}

type S3AccessPointAttachmentState struct {
}

func (S3AccessPointAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3accessPointAttachmentState)(nil)).Elem()
}

type s3accessPointAttachmentArgs struct {
	// The Name of the S3AccessPointAttachment
	Name *string `pulumi:"name"`
	// The OpenZFSConfiguration of the S3 access point attachment.
	OpenZfsConfiguration S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration `pulumi:"openZfsConfiguration"`
	// The S3 access point configuration of the S3 access point attachment.
	S3AccessPoint *S3AccessPointAttachmentS3AccessPoint `pulumi:"s3AccessPoint"`
	// The type of Amazon FSx volume that the S3 access point is attached to.
	Type S3AccessPointAttachmentType `pulumi:"type"`
}

// The set of arguments for constructing a S3AccessPointAttachment resource.
type S3AccessPointAttachmentArgs struct {
	// The Name of the S3AccessPointAttachment
	Name pulumi.StringPtrInput
	// The OpenZFSConfiguration of the S3 access point attachment.
	OpenZfsConfiguration S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationInput
	// The S3 access point configuration of the S3 access point attachment.
	S3AccessPoint S3AccessPointAttachmentS3AccessPointPtrInput
	// The type of Amazon FSx volume that the S3 access point is attached to.
	Type S3AccessPointAttachmentTypeInput
}

func (S3AccessPointAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3accessPointAttachmentArgs)(nil)).Elem()
}

type S3AccessPointAttachmentInput interface {
	pulumi.Input

	ToS3AccessPointAttachmentOutput() S3AccessPointAttachmentOutput
	ToS3AccessPointAttachmentOutputWithContext(ctx context.Context) S3AccessPointAttachmentOutput
}

func (*S3AccessPointAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AccessPointAttachment)(nil)).Elem()
}

func (i *S3AccessPointAttachment) ToS3AccessPointAttachmentOutput() S3AccessPointAttachmentOutput {
	return i.ToS3AccessPointAttachmentOutputWithContext(context.Background())
}

func (i *S3AccessPointAttachment) ToS3AccessPointAttachmentOutputWithContext(ctx context.Context) S3AccessPointAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AccessPointAttachmentOutput)
}

type S3AccessPointAttachmentOutput struct{ *pulumi.OutputState }

func (S3AccessPointAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AccessPointAttachment)(nil)).Elem()
}

func (o S3AccessPointAttachmentOutput) ToS3AccessPointAttachmentOutput() S3AccessPointAttachmentOutput {
	return o
}

func (o S3AccessPointAttachmentOutput) ToS3AccessPointAttachmentOutputWithContext(ctx context.Context) S3AccessPointAttachmentOutput {
	return o
}

// The Name of the S3AccessPointAttachment
func (o S3AccessPointAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *S3AccessPointAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The OpenZFSConfiguration of the S3 access point attachment.
func (o S3AccessPointAttachmentOutput) OpenZfsConfiguration() S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput {
	return o.ApplyT(func(v *S3AccessPointAttachment) S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput {
		return v.OpenZfsConfiguration
	}).(S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationOutput)
}

// The S3 access point configuration of the S3 access point attachment.
func (o S3AccessPointAttachmentOutput) S3AccessPoint() S3AccessPointAttachmentS3AccessPointPtrOutput {
	return o.ApplyT(func(v *S3AccessPointAttachment) S3AccessPointAttachmentS3AccessPointPtrOutput { return v.S3AccessPoint }).(S3AccessPointAttachmentS3AccessPointPtrOutput)
}

// The type of Amazon FSx volume that the S3 access point is attached to.
func (o S3AccessPointAttachmentOutput) Type() S3AccessPointAttachmentTypeOutput {
	return o.ApplyT(func(v *S3AccessPointAttachment) S3AccessPointAttachmentTypeOutput { return v.Type }).(S3AccessPointAttachmentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3AccessPointAttachmentInput)(nil)).Elem(), &S3AccessPointAttachment{})
	pulumi.RegisterOutputType(S3AccessPointAttachmentOutput{})
}
