// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::FSx::FileSystem
//
// Deprecated: FileSystem is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type FileSystem struct {
	pulumi.CustomResourceState

	BackupId             pulumi.StringPtrOutput                  `pulumi:"backupId"`
	DNSName              pulumi.StringOutput                     `pulumi:"dNSName"`
	FileSystemType       pulumi.StringOutput                     `pulumi:"fileSystemType"`
	KmsKeyId             pulumi.StringPtrOutput                  `pulumi:"kmsKeyId"`
	LustreConfiguration  FileSystemLustreConfigurationPtrOutput  `pulumi:"lustreConfiguration"`
	LustreMountName      pulumi.StringOutput                     `pulumi:"lustreMountName"`
	SecurityGroupIds     pulumi.StringArrayOutput                `pulumi:"securityGroupIds"`
	StorageCapacity      pulumi.IntPtrOutput                     `pulumi:"storageCapacity"`
	StorageType          pulumi.StringPtrOutput                  `pulumi:"storageType"`
	SubnetIds            pulumi.StringArrayOutput                `pulumi:"subnetIds"`
	Tags                 FileSystemTagArrayOutput                `pulumi:"tags"`
	WindowsConfiguration FileSystemWindowsConfigurationPtrOutput `pulumi:"windowsConfiguration"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemType == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemType'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	var resource FileSystem
	err := ctx.RegisterResource("aws-native:fsx:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("aws-native:fsx:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
}

type FileSystemState struct {
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	BackupId             *string                         `pulumi:"backupId"`
	FileSystemType       string                          `pulumi:"fileSystemType"`
	KmsKeyId             *string                         `pulumi:"kmsKeyId"`
	LustreConfiguration  *FileSystemLustreConfiguration  `pulumi:"lustreConfiguration"`
	SecurityGroupIds     []string                        `pulumi:"securityGroupIds"`
	StorageCapacity      *int                            `pulumi:"storageCapacity"`
	StorageType          *string                         `pulumi:"storageType"`
	SubnetIds            []string                        `pulumi:"subnetIds"`
	Tags                 []FileSystemTag                 `pulumi:"tags"`
	WindowsConfiguration *FileSystemWindowsConfiguration `pulumi:"windowsConfiguration"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	BackupId             pulumi.StringPtrInput
	FileSystemType       pulumi.StringInput
	KmsKeyId             pulumi.StringPtrInput
	LustreConfiguration  FileSystemLustreConfigurationPtrInput
	SecurityGroupIds     pulumi.StringArrayInput
	StorageCapacity      pulumi.IntPtrInput
	StorageType          pulumi.StringPtrInput
	SubnetIds            pulumi.StringArrayInput
	Tags                 FileSystemTagArrayInput
	WindowsConfiguration FileSystemWindowsConfigurationPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystem)(nil))
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystem)(nil))
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FileSystemOutput{})
}
