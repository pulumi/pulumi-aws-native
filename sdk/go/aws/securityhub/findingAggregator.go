// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::SecurityHub::FindingAggregator“ resource enables cross-Region aggregation. When cross-Region aggregation is enabled, you can aggregate findings, finding updates, insights, control compliance statuses, and security scores from one or more linked Regions to a single aggregation Region. You can then view and manage all of this data from the aggregation Region. For more details about cross-Region aggregation, see [Cross-Region aggregation](https://docs.aws.amazon.com/securityhub/latest/userguide/finding-aggregation.html) in the *User Guide*
//
//	This resource must be created in the Region that you want to designate as your aggregation Region.
//	Cross-Region aggregation is also a prerequisite for using [central configuration](https://docs.aws.amazon.com/securityhub/latest/userguide/central-configuration-intro.html) in ASH.
type FindingAggregator struct {
	pulumi.CustomResourceState

	// The aggregation Region.
	FindingAggregationRegion pulumi.StringOutput `pulumi:"findingAggregationRegion"`
	// The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.
	FindingAggregatorArn pulumi.StringOutput `pulumi:"findingAggregatorArn"`
	// Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	//  The selected option also determines how to use the Regions provided in the Regions list.
	//  The options are as follows:
	//   +   ``ALL_REGIONS`` - Aggregates findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
	//   +   ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Aggregates findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
	//   +   ``SPECIFIED_REGIONS`` - Aggregates findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions.
	//   +   ``NO_REGIONS`` - Aggregates no data because no Regions are selected as linked Regions.
	RegionLinkingMode FindingAggregatorRegionLinkingModeOutput `pulumi:"regionLinkingMode"`
	// If ``RegionLinkingMode`` is ``ALL_REGIONS_EXCEPT_SPECIFIED``, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.
	//  If ``RegionLinkingMode`` is ``SPECIFIED_REGIONS``, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.
	//  An ``InvalidInputException`` error results if you populate this field while ``RegionLinkingMode`` is ``NO_REGIONS``.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
}

// NewFindingAggregator registers a new resource with the given unique name, arguments, and options.
func NewFindingAggregator(ctx *pulumi.Context,
	name string, args *FindingAggregatorArgs, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionLinkingMode == nil {
		return nil, errors.New("invalid value for required argument 'RegionLinkingMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FindingAggregator
	err := ctx.RegisterResource("aws-native:securityhub:FindingAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingAggregator gets an existing FindingAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingAggregatorState, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	var resource FindingAggregator
	err := ctx.ReadResource("aws-native:securityhub:FindingAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingAggregator resources.
type findingAggregatorState struct {
}

type FindingAggregatorState struct {
}

func (FindingAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorState)(nil)).Elem()
}

type findingAggregatorArgs struct {
	// Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	//  The selected option also determines how to use the Regions provided in the Regions list.
	//  The options are as follows:
	//   +   ``ALL_REGIONS`` - Aggregates findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
	//   +   ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Aggregates findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
	//   +   ``SPECIFIED_REGIONS`` - Aggregates findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions.
	//   +   ``NO_REGIONS`` - Aggregates no data because no Regions are selected as linked Regions.
	RegionLinkingMode FindingAggregatorRegionLinkingMode `pulumi:"regionLinkingMode"`
	// If ``RegionLinkingMode`` is ``ALL_REGIONS_EXCEPT_SPECIFIED``, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.
	//  If ``RegionLinkingMode`` is ``SPECIFIED_REGIONS``, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.
	//  An ``InvalidInputException`` error results if you populate this field while ``RegionLinkingMode`` is ``NO_REGIONS``.
	Regions []string `pulumi:"regions"`
}

// The set of arguments for constructing a FindingAggregator resource.
type FindingAggregatorArgs struct {
	// Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
	//  The selected option also determines how to use the Regions provided in the Regions list.
	//  The options are as follows:
	//   +   ``ALL_REGIONS`` - Aggregates findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
	//   +   ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Aggregates findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
	//   +   ``SPECIFIED_REGIONS`` - Aggregates findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions.
	//   +   ``NO_REGIONS`` - Aggregates no data because no Regions are selected as linked Regions.
	RegionLinkingMode FindingAggregatorRegionLinkingModeInput
	// If ``RegionLinkingMode`` is ``ALL_REGIONS_EXCEPT_SPECIFIED``, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.
	//  If ``RegionLinkingMode`` is ``SPECIFIED_REGIONS``, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.
	//  An ``InvalidInputException`` error results if you populate this field while ``RegionLinkingMode`` is ``NO_REGIONS``.
	Regions pulumi.StringArrayInput
}

func (FindingAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorArgs)(nil)).Elem()
}

type FindingAggregatorInput interface {
	pulumi.Input

	ToFindingAggregatorOutput() FindingAggregatorOutput
	ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput
}

func (*FindingAggregator) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (i *FindingAggregator) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return i.ToFindingAggregatorOutputWithContext(context.Background())
}

func (i *FindingAggregator) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorOutput)
}

type FindingAggregatorOutput struct{ *pulumi.OutputState }

func (FindingAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return o
}

// The aggregation Region.
func (o FindingAggregatorOutput) FindingAggregationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringOutput { return v.FindingAggregationRegion }).(pulumi.StringOutput)
}

// The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.
func (o FindingAggregatorOutput) FindingAggregatorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringOutput { return v.FindingAggregatorArn }).(pulumi.StringOutput)
}

// Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
//
//	The selected option also determines how to use the Regions provided in the Regions list.
//	The options are as follows:
//	 +   ``ALL_REGIONS`` - Aggregates findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
//	 +   ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Aggregates findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
//	 +   ``SPECIFIED_REGIONS`` - Aggregates findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions.
//	 +   ``NO_REGIONS`` - Aggregates no data because no Regions are selected as linked Regions.
func (o FindingAggregatorOutput) RegionLinkingMode() FindingAggregatorRegionLinkingModeOutput {
	return o.ApplyT(func(v *FindingAggregator) FindingAggregatorRegionLinkingModeOutput { return v.RegionLinkingMode }).(FindingAggregatorRegionLinkingModeOutput)
}

// If “RegionLinkingMode“ is “ALL_REGIONS_EXCEPT_SPECIFIED“, then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region.
//
//	If ``RegionLinkingMode`` is ``SPECIFIED_REGIONS``, then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.
//	An ``InvalidInputException`` error results if you populate this field while ``RegionLinkingMode`` is ``NO_REGIONS``.
func (o FindingAggregatorOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorInput)(nil)).Elem(), &FindingAggregator{})
	pulumi.RegisterOutputType(FindingAggregatorOutput{})
}
