// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.
type FindingAggregator struct {
	pulumi.CustomResourceState

	// The aggregation Region of the FindingAggregator
	FindingAggregationRegion pulumi.StringOutput `pulumi:"findingAggregationRegion"`
	// The ARN of the FindingAggregator being created and assigned as the unique identifier
	FindingAggregatorArn pulumi.StringOutput `pulumi:"findingAggregatorArn"`
	// Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
	RegionLinkingMode FindingAggregatorRegionLinkingModeOutput `pulumi:"regionLinkingMode"`
	// The list of excluded Regions or included Regions
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
}

// NewFindingAggregator registers a new resource with the given unique name, arguments, and options.
func NewFindingAggregator(ctx *pulumi.Context,
	name string, args *FindingAggregatorArgs, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionLinkingMode == nil {
		return nil, errors.New("invalid value for required argument 'RegionLinkingMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FindingAggregator
	err := ctx.RegisterResource("aws-native:securityhub:FindingAggregator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingAggregator gets an existing FindingAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingAggregator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingAggregatorState, opts ...pulumi.ResourceOption) (*FindingAggregator, error) {
	var resource FindingAggregator
	err := ctx.ReadResource("aws-native:securityhub:FindingAggregator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingAggregator resources.
type findingAggregatorState struct {
}

type FindingAggregatorState struct {
}

func (FindingAggregatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorState)(nil)).Elem()
}

type findingAggregatorArgs struct {
	// Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
	RegionLinkingMode FindingAggregatorRegionLinkingMode `pulumi:"regionLinkingMode"`
	// The list of excluded Regions or included Regions
	Regions []string `pulumi:"regions"`
}

// The set of arguments for constructing a FindingAggregator resource.
type FindingAggregatorArgs struct {
	// Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
	RegionLinkingMode FindingAggregatorRegionLinkingModeInput
	// The list of excluded Regions or included Regions
	Regions pulumi.StringArrayInput
}

func (FindingAggregatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingAggregatorArgs)(nil)).Elem()
}

type FindingAggregatorInput interface {
	pulumi.Input

	ToFindingAggregatorOutput() FindingAggregatorOutput
	ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput
}

func (*FindingAggregator) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (i *FindingAggregator) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return i.ToFindingAggregatorOutputWithContext(context.Background())
}

func (i *FindingAggregator) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingAggregatorOutput)
}

type FindingAggregatorOutput struct{ *pulumi.OutputState }

func (FindingAggregatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingAggregator)(nil)).Elem()
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutput() FindingAggregatorOutput {
	return o
}

func (o FindingAggregatorOutput) ToFindingAggregatorOutputWithContext(ctx context.Context) FindingAggregatorOutput {
	return o
}

// The aggregation Region of the FindingAggregator
func (o FindingAggregatorOutput) FindingAggregationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringOutput { return v.FindingAggregationRegion }).(pulumi.StringOutput)
}

// The ARN of the FindingAggregator being created and assigned as the unique identifier
func (o FindingAggregatorOutput) FindingAggregatorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringOutput { return v.FindingAggregatorArn }).(pulumi.StringOutput)
}

// Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
func (o FindingAggregatorOutput) RegionLinkingMode() FindingAggregatorRegionLinkingModeOutput {
	return o.ApplyT(func(v *FindingAggregator) FindingAggregatorRegionLinkingModeOutput { return v.RegionLinkingMode }).(FindingAggregatorRegionLinkingModeOutput)
}

// The list of excluded Regions or included Regions
func (o FindingAggregatorOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FindingAggregator) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FindingAggregatorInput)(nil)).Elem(), &FindingAggregator{})
	pulumi.RegisterOutputType(FindingAggregatorOutput{})
}
