// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.
func LookupFindingAggregator(ctx *pulumi.Context, args *LookupFindingAggregatorArgs, opts ...pulumi.InvokeOption) (*LookupFindingAggregatorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFindingAggregatorResult
	err := ctx.Invoke("aws-native:securityhub:getFindingAggregator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFindingAggregatorArgs struct {
	// The ARN of the FindingAggregator being created and assigned as the unique identifier
	FindingAggregatorArn string `pulumi:"findingAggregatorArn"`
}

type LookupFindingAggregatorResult struct {
	// The aggregation Region of the FindingAggregator
	FindingAggregationRegion *string `pulumi:"findingAggregationRegion"`
	// The ARN of the FindingAggregator being created and assigned as the unique identifier
	FindingAggregatorArn *string `pulumi:"findingAggregatorArn"`
	// Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
	RegionLinkingMode *FindingAggregatorRegionLinkingMode `pulumi:"regionLinkingMode"`
	// The list of excluded Regions or included Regions
	Regions []string `pulumi:"regions"`
}

func LookupFindingAggregatorOutput(ctx *pulumi.Context, args LookupFindingAggregatorOutputArgs, opts ...pulumi.InvokeOption) LookupFindingAggregatorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFindingAggregatorResult, error) {
			args := v.(LookupFindingAggregatorArgs)
			r, err := LookupFindingAggregator(ctx, &args, opts...)
			var s LookupFindingAggregatorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFindingAggregatorResultOutput)
}

type LookupFindingAggregatorOutputArgs struct {
	// The ARN of the FindingAggregator being created and assigned as the unique identifier
	FindingAggregatorArn pulumi.StringInput `pulumi:"findingAggregatorArn"`
}

func (LookupFindingAggregatorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFindingAggregatorArgs)(nil)).Elem()
}

type LookupFindingAggregatorResultOutput struct{ *pulumi.OutputState }

func (LookupFindingAggregatorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFindingAggregatorResult)(nil)).Elem()
}

func (o LookupFindingAggregatorResultOutput) ToLookupFindingAggregatorResultOutput() LookupFindingAggregatorResultOutput {
	return o
}

func (o LookupFindingAggregatorResultOutput) ToLookupFindingAggregatorResultOutputWithContext(ctx context.Context) LookupFindingAggregatorResultOutput {
	return o
}

// The aggregation Region of the FindingAggregator
func (o LookupFindingAggregatorResultOutput) FindingAggregationRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFindingAggregatorResult) *string { return v.FindingAggregationRegion }).(pulumi.StringPtrOutput)
}

// The ARN of the FindingAggregator being created and assigned as the unique identifier
func (o LookupFindingAggregatorResultOutput) FindingAggregatorArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFindingAggregatorResult) *string { return v.FindingAggregatorArn }).(pulumi.StringPtrOutput)
}

// Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
func (o LookupFindingAggregatorResultOutput) RegionLinkingMode() FindingAggregatorRegionLinkingModePtrOutput {
	return o.ApplyT(func(v LookupFindingAggregatorResult) *FindingAggregatorRegionLinkingMode { return v.RegionLinkingMode }).(FindingAggregatorRegionLinkingModePtrOutput)
}

// The list of excluded Regions or included Regions
func (o LookupFindingAggregatorResultOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFindingAggregatorResult) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFindingAggregatorResultOutput{})
}
