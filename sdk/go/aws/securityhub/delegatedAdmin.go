// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SecurityHub::DelegatedAdmin resource represents the AWS Security Hub delegated admin account in your organization. One delegated admin resource is allowed to create for the organization in each region in which you configure the AdminAccountId.
type DelegatedAdmin struct {
	pulumi.CustomResourceState

	// The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
	AdminAccountId pulumi.StringOutput `pulumi:"adminAccountId"`
	// The identifier of the DelegatedAdmin being created and assigned as the unique identifier
	DelegatedAdminIdentifier pulumi.StringOutput `pulumi:"delegatedAdminIdentifier"`
	// The current status of the Security Hub administrator account. Indicates whether the account is currently enabled as a Security Hub administrator
	Status DelegatedAdminStatusOutput `pulumi:"status"`
}

// NewDelegatedAdmin registers a new resource with the given unique name, arguments, and options.
func NewDelegatedAdmin(ctx *pulumi.Context,
	name string, args *DelegatedAdminArgs, opts ...pulumi.ResourceOption) (*DelegatedAdmin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AdminAccountId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"adminAccountId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DelegatedAdmin
	err := ctx.RegisterResource("aws-native:securityhub:DelegatedAdmin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegatedAdmin gets an existing DelegatedAdmin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegatedAdmin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegatedAdminState, opts ...pulumi.ResourceOption) (*DelegatedAdmin, error) {
	var resource DelegatedAdmin
	err := ctx.ReadResource("aws-native:securityhub:DelegatedAdmin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegatedAdmin resources.
type delegatedAdminState struct {
}

type DelegatedAdminState struct {
}

func (DelegatedAdminState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminState)(nil)).Elem()
}

type delegatedAdminArgs struct {
	// The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
	AdminAccountId string `pulumi:"adminAccountId"`
}

// The set of arguments for constructing a DelegatedAdmin resource.
type DelegatedAdminArgs struct {
	// The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
	AdminAccountId pulumi.StringInput
}

func (DelegatedAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminArgs)(nil)).Elem()
}

type DelegatedAdminInput interface {
	pulumi.Input

	ToDelegatedAdminOutput() DelegatedAdminOutput
	ToDelegatedAdminOutputWithContext(ctx context.Context) DelegatedAdminOutput
}

func (*DelegatedAdmin) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedAdmin)(nil)).Elem()
}

func (i *DelegatedAdmin) ToDelegatedAdminOutput() DelegatedAdminOutput {
	return i.ToDelegatedAdminOutputWithContext(context.Background())
}

func (i *DelegatedAdmin) ToDelegatedAdminOutputWithContext(ctx context.Context) DelegatedAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedAdminOutput)
}

type DelegatedAdminOutput struct{ *pulumi.OutputState }

func (DelegatedAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedAdmin)(nil)).Elem()
}

func (o DelegatedAdminOutput) ToDelegatedAdminOutput() DelegatedAdminOutput {
	return o
}

func (o DelegatedAdminOutput) ToDelegatedAdminOutputWithContext(ctx context.Context) DelegatedAdminOutput {
	return o
}

// The Amazon Web Services account identifier of the account to designate as the Security Hub administrator account
func (o DelegatedAdminOutput) AdminAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegatedAdmin) pulumi.StringOutput { return v.AdminAccountId }).(pulumi.StringOutput)
}

// The identifier of the DelegatedAdmin being created and assigned as the unique identifier
func (o DelegatedAdminOutput) DelegatedAdminIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegatedAdmin) pulumi.StringOutput { return v.DelegatedAdminIdentifier }).(pulumi.StringOutput)
}

// The current status of the Security Hub administrator account. Indicates whether the account is currently enabled as a Security Hub administrator
func (o DelegatedAdminOutput) Status() DelegatedAdminStatusOutput {
	return o.ApplyT(func(v *DelegatedAdmin) DelegatedAdminStatusOutput { return v.Status }).(DelegatedAdminStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DelegatedAdminInput)(nil)).Elem(), &DelegatedAdmin{})
	pulumi.RegisterOutputType(DelegatedAdminOutput{})
}
