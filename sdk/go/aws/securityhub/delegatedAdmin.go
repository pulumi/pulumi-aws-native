// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::SecurityHub::DelegatedAdmin“ resource designates the delegated ASHlong administrator account for an organization. You must enable the integration between ASH and AOlong before you can designate a delegated ASH administrator. Only the management account for an organization can designate the delegated ASH administrator account. For more information, see [Designating the delegated administrator](https://docs.aws.amazon.com/securityhub/latest/userguide/designate-orgs-admin-account.html#designate-admin-instructions) in the *User Guide*.
//
//	To change the delegated administrator account, remove the current delegated administrator account, and then designate the new account.
//	To designate multiple delegated administrators in different organizations and AWS-Regions, we recommend using [mappings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html).
//	Tags aren't supported for this resource.
type DelegatedAdmin struct {
	pulumi.CustomResourceState

	// The AWS-account identifier of the account to designate as the Security Hub administrator account.
	AdminAccountId pulumi.StringOutput `pulumi:"adminAccountId"`
	// The ID of the delegated Security Hub administrator account, in the format of `accountID/Region` .
	DelegatedAdminIdentifier pulumi.StringOutput `pulumi:"delegatedAdminIdentifier"`
	// Whether the delegated Security Hub administrator is set for the organization.
	Status DelegatedAdminStatusOutput `pulumi:"status"`
}

// NewDelegatedAdmin registers a new resource with the given unique name, arguments, and options.
func NewDelegatedAdmin(ctx *pulumi.Context,
	name string, args *DelegatedAdminArgs, opts ...pulumi.ResourceOption) (*DelegatedAdmin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AdminAccountId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"adminAccountId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DelegatedAdmin
	err := ctx.RegisterResource("aws-native:securityhub:DelegatedAdmin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDelegatedAdmin gets an existing DelegatedAdmin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDelegatedAdmin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DelegatedAdminState, opts ...pulumi.ResourceOption) (*DelegatedAdmin, error) {
	var resource DelegatedAdmin
	err := ctx.ReadResource("aws-native:securityhub:DelegatedAdmin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DelegatedAdmin resources.
type delegatedAdminState struct {
}

type DelegatedAdminState struct {
}

func (DelegatedAdminState) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminState)(nil)).Elem()
}

type delegatedAdminArgs struct {
	// The AWS-account identifier of the account to designate as the Security Hub administrator account.
	AdminAccountId string `pulumi:"adminAccountId"`
}

// The set of arguments for constructing a DelegatedAdmin resource.
type DelegatedAdminArgs struct {
	// The AWS-account identifier of the account to designate as the Security Hub administrator account.
	AdminAccountId pulumi.StringInput
}

func (DelegatedAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*delegatedAdminArgs)(nil)).Elem()
}

type DelegatedAdminInput interface {
	pulumi.Input

	ToDelegatedAdminOutput() DelegatedAdminOutput
	ToDelegatedAdminOutputWithContext(ctx context.Context) DelegatedAdminOutput
}

func (*DelegatedAdmin) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedAdmin)(nil)).Elem()
}

func (i *DelegatedAdmin) ToDelegatedAdminOutput() DelegatedAdminOutput {
	return i.ToDelegatedAdminOutputWithContext(context.Background())
}

func (i *DelegatedAdmin) ToDelegatedAdminOutputWithContext(ctx context.Context) DelegatedAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedAdminOutput)
}

type DelegatedAdminOutput struct{ *pulumi.OutputState }

func (DelegatedAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedAdmin)(nil)).Elem()
}

func (o DelegatedAdminOutput) ToDelegatedAdminOutput() DelegatedAdminOutput {
	return o
}

func (o DelegatedAdminOutput) ToDelegatedAdminOutputWithContext(ctx context.Context) DelegatedAdminOutput {
	return o
}

// The AWS-account identifier of the account to designate as the Security Hub administrator account.
func (o DelegatedAdminOutput) AdminAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegatedAdmin) pulumi.StringOutput { return v.AdminAccountId }).(pulumi.StringOutput)
}

// The ID of the delegated Security Hub administrator account, in the format of `accountID/Region` .
func (o DelegatedAdminOutput) DelegatedAdminIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DelegatedAdmin) pulumi.StringOutput { return v.DelegatedAdminIdentifier }).(pulumi.StringOutput)
}

// Whether the delegated Security Hub administrator is set for the organization.
func (o DelegatedAdminOutput) Status() DelegatedAdminStatusOutput {
	return o.ApplyT(func(v *DelegatedAdmin) DelegatedAdminStatusOutput { return v.Status }).(DelegatedAdminStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DelegatedAdminInput)(nil)).Elem(), &DelegatedAdmin{})
	pulumi.RegisterOutputType(DelegatedAdminOutput{})
}
