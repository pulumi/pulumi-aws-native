// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SecurityHub::ProductSubscription resource represents a subscription to a service that is allowed to generate findings for your Security Hub account. One product subscription resource is created for each product enabled.
type ProductSubscription struct {
	pulumi.CustomResourceState

	// The generic ARN of the product being subscribed to
	ProductArn pulumi.StringOutput `pulumi:"productArn"`
	// The ARN of the product subscription for the account
	ProductSubscriptionArn pulumi.StringOutput `pulumi:"productSubscriptionArn"`
}

// NewProductSubscription registers a new resource with the given unique name, arguments, and options.
func NewProductSubscription(ctx *pulumi.Context,
	name string, args *ProductSubscriptionArgs, opts ...pulumi.ResourceOption) (*ProductSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductArn == nil {
		return nil, errors.New("invalid value for required argument 'ProductArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"productArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProductSubscription
	err := ctx.RegisterResource("aws-native:securityhub:ProductSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductSubscription gets an existing ProductSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductSubscriptionState, opts ...pulumi.ResourceOption) (*ProductSubscription, error) {
	var resource ProductSubscription
	err := ctx.ReadResource("aws-native:securityhub:ProductSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductSubscription resources.
type productSubscriptionState struct {
}

type ProductSubscriptionState struct {
}

func (ProductSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*productSubscriptionState)(nil)).Elem()
}

type productSubscriptionArgs struct {
	// The generic ARN of the product being subscribed to
	ProductArn string `pulumi:"productArn"`
}

// The set of arguments for constructing a ProductSubscription resource.
type ProductSubscriptionArgs struct {
	// The generic ARN of the product being subscribed to
	ProductArn pulumi.StringInput
}

func (ProductSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productSubscriptionArgs)(nil)).Elem()
}

type ProductSubscriptionInput interface {
	pulumi.Input

	ToProductSubscriptionOutput() ProductSubscriptionOutput
	ToProductSubscriptionOutputWithContext(ctx context.Context) ProductSubscriptionOutput
}

func (*ProductSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductSubscription)(nil)).Elem()
}

func (i *ProductSubscription) ToProductSubscriptionOutput() ProductSubscriptionOutput {
	return i.ToProductSubscriptionOutputWithContext(context.Background())
}

func (i *ProductSubscription) ToProductSubscriptionOutputWithContext(ctx context.Context) ProductSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductSubscriptionOutput)
}

type ProductSubscriptionOutput struct{ *pulumi.OutputState }

func (ProductSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductSubscription)(nil)).Elem()
}

func (o ProductSubscriptionOutput) ToProductSubscriptionOutput() ProductSubscriptionOutput {
	return o
}

func (o ProductSubscriptionOutput) ToProductSubscriptionOutputWithContext(ctx context.Context) ProductSubscriptionOutput {
	return o
}

// The generic ARN of the product being subscribed to
func (o ProductSubscriptionOutput) ProductArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductSubscription) pulumi.StringOutput { return v.ProductArn }).(pulumi.StringOutput)
}

// The ARN of the product subscription for the account
func (o ProductSubscriptionOutput) ProductSubscriptionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductSubscription) pulumi.StringOutput { return v.ProductSubscriptionArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductSubscriptionInput)(nil)).Elem(), &ProductSubscription{})
	pulumi.RegisterOutputType(ProductSubscriptionOutput{})
}
