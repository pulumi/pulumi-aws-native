// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::SecurityHub::Standard“ resource specifies the enablement of a security standard. The standard is identified by the “StandardsArn“ property. To view a list of ASH standards and their Amazon Resource Names (ARNs), use the [DescribeStandards](https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html) API operation.
//
//	You must create a separate ``AWS::SecurityHub::Standard`` resource for each standard that you want to enable.
//	For more information about ASH standards, see [standards reference](https://docs.aws.amazon.com/securityhub/latest/userguide/standards-reference.html) in the *User Guide*.
func LookupStandard(ctx *pulumi.Context, args *LookupStandardArgs, opts ...pulumi.InvokeOption) (*LookupStandardResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStandardResult
	err := ctx.Invoke("aws-native:securityhub:getStandard", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStandardArgs struct {
	StandardsSubscriptionArn string `pulumi:"standardsSubscriptionArn"`
}

type LookupStandardResult struct {
	// Specifies which controls are to be disabled in a standard.
	//  *Maximum*: ``100``
	DisabledStandardsControls []StandardsControl `pulumi:"disabledStandardsControls"`
	StandardsSubscriptionArn  *string            `pulumi:"standardsSubscriptionArn"`
}

func LookupStandardOutput(ctx *pulumi.Context, args LookupStandardOutputArgs, opts ...pulumi.InvokeOption) LookupStandardResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStandardResult, error) {
			args := v.(LookupStandardArgs)
			r, err := LookupStandard(ctx, &args, opts...)
			var s LookupStandardResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStandardResultOutput)
}

type LookupStandardOutputArgs struct {
	StandardsSubscriptionArn pulumi.StringInput `pulumi:"standardsSubscriptionArn"`
}

func (LookupStandardOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStandardArgs)(nil)).Elem()
}

type LookupStandardResultOutput struct{ *pulumi.OutputState }

func (LookupStandardResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStandardResult)(nil)).Elem()
}

func (o LookupStandardResultOutput) ToLookupStandardResultOutput() LookupStandardResultOutput {
	return o
}

func (o LookupStandardResultOutput) ToLookupStandardResultOutputWithContext(ctx context.Context) LookupStandardResultOutput {
	return o
}

// Specifies which controls are to be disabled in a standard.
//
//	*Maximum*: ``100``
func (o LookupStandardResultOutput) DisabledStandardsControls() StandardsControlArrayOutput {
	return o.ApplyT(func(v LookupStandardResult) []StandardsControl { return v.DisabledStandardsControls }).(StandardsControlArrayOutput)
}

func (o LookupStandardResultOutput) StandardsSubscriptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStandardResult) *string { return v.StandardsSubscriptionArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStandardResultOutput{})
}
