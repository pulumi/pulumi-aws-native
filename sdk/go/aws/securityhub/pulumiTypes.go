// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An individual StandardsControl within the Standard.
type StandardsControl struct {
	// the reason the standard control is disabled
	Reason *string `pulumi:"reason"`
	// the Arn for the standard control.
	StandardsControlArn string `pulumi:"standardsControlArn"`
}

// StandardsControlInput is an input type that accepts StandardsControlArgs and StandardsControlOutput values.
// You can construct a concrete instance of `StandardsControlInput` via:
//
//	StandardsControlArgs{...}
type StandardsControlInput interface {
	pulumi.Input

	ToStandardsControlOutput() StandardsControlOutput
	ToStandardsControlOutputWithContext(context.Context) StandardsControlOutput
}

// An individual StandardsControl within the Standard.
type StandardsControlArgs struct {
	// the reason the standard control is disabled
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// the Arn for the standard control.
	StandardsControlArn pulumi.StringInput `pulumi:"standardsControlArn"`
}

func (StandardsControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardsControl)(nil)).Elem()
}

func (i StandardsControlArgs) ToStandardsControlOutput() StandardsControlOutput {
	return i.ToStandardsControlOutputWithContext(context.Background())
}

func (i StandardsControlArgs) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlOutput)
}

// StandardsControlArrayInput is an input type that accepts StandardsControlArray and StandardsControlArrayOutput values.
// You can construct a concrete instance of `StandardsControlArrayInput` via:
//
//	StandardsControlArray{ StandardsControlArgs{...} }
type StandardsControlArrayInput interface {
	pulumi.Input

	ToStandardsControlArrayOutput() StandardsControlArrayOutput
	ToStandardsControlArrayOutputWithContext(context.Context) StandardsControlArrayOutput
}

type StandardsControlArray []StandardsControlInput

func (StandardsControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardsControl)(nil)).Elem()
}

func (i StandardsControlArray) ToStandardsControlArrayOutput() StandardsControlArrayOutput {
	return i.ToStandardsControlArrayOutputWithContext(context.Background())
}

func (i StandardsControlArray) ToStandardsControlArrayOutputWithContext(ctx context.Context) StandardsControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardsControlArrayOutput)
}

// An individual StandardsControl within the Standard.
type StandardsControlOutput struct{ *pulumi.OutputState }

func (StandardsControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardsControl)(nil)).Elem()
}

func (o StandardsControlOutput) ToStandardsControlOutput() StandardsControlOutput {
	return o
}

func (o StandardsControlOutput) ToStandardsControlOutputWithContext(ctx context.Context) StandardsControlOutput {
	return o
}

// the reason the standard control is disabled
func (o StandardsControlOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardsControl) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// the Arn for the standard control.
func (o StandardsControlOutput) StandardsControlArn() pulumi.StringOutput {
	return o.ApplyT(func(v StandardsControl) string { return v.StandardsControlArn }).(pulumi.StringOutput)
}

type StandardsControlArrayOutput struct{ *pulumi.OutputState }

func (StandardsControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardsControl)(nil)).Elem()
}

func (o StandardsControlArrayOutput) ToStandardsControlArrayOutput() StandardsControlArrayOutput {
	return o
}

func (o StandardsControlArrayOutput) ToStandardsControlArrayOutputWithContext(ctx context.Context) StandardsControlArrayOutput {
	return o
}

func (o StandardsControlArrayOutput) Index(i pulumi.IntInput) StandardsControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardsControl {
		return vs[0].([]StandardsControl)[vs[1].(int)]
	}).(StandardsControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlInput)(nil)).Elem(), StandardsControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardsControlArrayInput)(nil)).Elem(), StandardsControlArray{})
	pulumi.RegisterOutputType(StandardsControlOutput{})
	pulumi.RegisterOutputType(StandardsControlArrayOutput{})
}
