// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecurityHub::Hub
//
// Deprecated: Hub is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Hub struct {
	pulumi.CustomResourceState

	AutoEnableControls      pulumi.BoolPtrOutput   `pulumi:"autoEnableControls"`
	ControlFindingGenerator pulumi.StringPtrOutput `pulumi:"controlFindingGenerator"`
	EnableDefaultStandards  pulumi.BoolPtrOutput   `pulumi:"enableDefaultStandards"`
	Tags                    pulumi.AnyOutput       `pulumi:"tags"`
}

// NewHub registers a new resource with the given unique name, arguments, and options.
func NewHub(ctx *pulumi.Context,
	name string, args *HubArgs, opts ...pulumi.ResourceOption) (*Hub, error) {
	if args == nil {
		args = &HubArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hub
	err := ctx.RegisterResource("aws-native:securityhub:Hub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHub gets an existing Hub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubState, opts ...pulumi.ResourceOption) (*Hub, error) {
	var resource Hub
	err := ctx.ReadResource("aws-native:securityhub:Hub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hub resources.
type hubState struct {
}

type HubState struct {
}

func (HubState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubState)(nil)).Elem()
}

type hubArgs struct {
	AutoEnableControls      *bool       `pulumi:"autoEnableControls"`
	ControlFindingGenerator *string     `pulumi:"controlFindingGenerator"`
	EnableDefaultStandards  *bool       `pulumi:"enableDefaultStandards"`
	Tags                    interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Hub resource.
type HubArgs struct {
	AutoEnableControls      pulumi.BoolPtrInput
	ControlFindingGenerator pulumi.StringPtrInput
	EnableDefaultStandards  pulumi.BoolPtrInput
	Tags                    pulumi.Input
}

func (HubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubArgs)(nil)).Elem()
}

type HubInput interface {
	pulumi.Input

	ToHubOutput() HubOutput
	ToHubOutputWithContext(ctx context.Context) HubOutput
}

func (*Hub) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (i *Hub) ToHubOutput() HubOutput {
	return i.ToHubOutputWithContext(context.Background())
}

func (i *Hub) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubOutput)
}

type HubOutput struct{ *pulumi.OutputState }

func (HubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (o HubOutput) ToHubOutput() HubOutput {
	return o
}

func (o HubOutput) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return o
}

func (o HubOutput) AutoEnableControls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.AutoEnableControls }).(pulumi.BoolPtrOutput)
}

func (o HubOutput) ControlFindingGenerator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.ControlFindingGenerator }).(pulumi.StringPtrOutput)
}

func (o HubOutput) EnableDefaultStandards() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.EnableDefaultStandards }).(pulumi.BoolPtrOutput)
}

func (o HubOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Hub) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubInput)(nil)).Elem(), &Hub{})
	pulumi.RegisterOutputType(HubOutput{})
}
