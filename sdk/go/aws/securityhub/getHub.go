// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SecurityHub::Hub resource represents the implementation of the AWS Security Hub service in your account. One hub resource is created for each Region in which you enable Security Hub.
func LookupHub(ctx *pulumi.Context, args *LookupHubArgs, opts ...pulumi.InvokeOption) (*LookupHubResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHubResult
	err := ctx.Invoke("aws-native:securityhub:getHub", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupHubArgs struct {
	// An ARN is automatically created for the customer.
	Arn string `pulumi:"arn"`
}

type LookupHubResult struct {
	// An ARN is automatically created for the customer.
	Arn *string `pulumi:"arn"`
	// Whether to automatically enable new controls when they are added to standards that are enabled
	AutoEnableControls *bool `pulumi:"autoEnableControls"`
	// This field, used when enabling Security Hub, specifies whether the calling account has consolidated control findings turned on. If the value for this field is set to SECURITY_CONTROL, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.  If the value for this field is set to STANDARD_CONTROL, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.
	ControlFindingGenerator *string `pulumi:"controlFindingGenerator"`
	// The date and time when Security Hub was enabled in the account.
	SubscribedAt *string  `pulumi:"subscribedAt"`
	Tags         *HubTags `pulumi:"tags"`
}

func LookupHubOutput(ctx *pulumi.Context, args LookupHubOutputArgs, opts ...pulumi.InvokeOption) LookupHubResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHubResult, error) {
			args := v.(LookupHubArgs)
			r, err := LookupHub(ctx, &args, opts...)
			var s LookupHubResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHubResultOutput)
}

type LookupHubOutputArgs struct {
	// An ARN is automatically created for the customer.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupHubOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHubArgs)(nil)).Elem()
}

type LookupHubResultOutput struct{ *pulumi.OutputState }

func (LookupHubResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHubResult)(nil)).Elem()
}

func (o LookupHubResultOutput) ToLookupHubResultOutput() LookupHubResultOutput {
	return o
}

func (o LookupHubResultOutput) ToLookupHubResultOutputWithContext(ctx context.Context) LookupHubResultOutput {
	return o
}

// An ARN is automatically created for the customer.
func (o LookupHubResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Whether to automatically enable new controls when they are added to standards that are enabled
func (o LookupHubResultOutput) AutoEnableControls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *bool { return v.AutoEnableControls }).(pulumi.BoolPtrOutput)
}

// This field, used when enabling Security Hub, specifies whether the calling account has consolidated control findings turned on. If the value for this field is set to SECURITY_CONTROL, Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards.  If the value for this field is set to STANDARD_CONTROL, Security Hub generates separate findings for a control check when the check applies to multiple enabled standards.
func (o LookupHubResultOutput) ControlFindingGenerator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *string { return v.ControlFindingGenerator }).(pulumi.StringPtrOutput)
}

// The date and time when Security Hub was enabled in the account.
func (o LookupHubResultOutput) SubscribedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *string { return v.SubscribedAt }).(pulumi.StringPtrOutput)
}

func (o LookupHubResultOutput) Tags() HubTagsPtrOutput {
	return o.ApplyT(func(v LookupHubResult) *HubTags { return v.Tags }).(HubTagsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHubResultOutput{})
}
