// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SecurityHub::AggregatorV2 resource represents the AWS Security Hub AggregatorV2 in your account. One aggregatorv2 resource is created for each account in non opt-in region in which you configure region linking mode.
type AggregatorV2 struct {
	pulumi.CustomResourceState

	// The aggregation Region of the AggregatorV2
	AggregationRegion pulumi.StringOutput `pulumi:"aggregationRegion"`
	// The ARN of the AggregatorV2 being created and assigned as the unique identifier
	AggregatorV2Arn pulumi.StringOutput `pulumi:"aggregatorV2Arn"`
	// The list of included Regions
	LinkedRegions pulumi.StringArrayOutput `pulumi:"linkedRegions"`
	// Indicates to link a list of included Regions
	RegionLinkingMode AggregatorV2RegionLinkingModeOutput `pulumi:"regionLinkingMode"`
	Tags              pulumi.StringMapOutput              `pulumi:"tags"`
}

// NewAggregatorV2 registers a new resource with the given unique name, arguments, and options.
func NewAggregatorV2(ctx *pulumi.Context,
	name string, args *AggregatorV2Args, opts ...pulumi.ResourceOption) (*AggregatorV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinkedRegions == nil {
		return nil, errors.New("invalid value for required argument 'LinkedRegions'")
	}
	if args.RegionLinkingMode == nil {
		return nil, errors.New("invalid value for required argument 'RegionLinkingMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AggregatorV2
	err := ctx.RegisterResource("aws-native:securityhub:AggregatorV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAggregatorV2 gets an existing AggregatorV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregatorV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AggregatorV2State, opts ...pulumi.ResourceOption) (*AggregatorV2, error) {
	var resource AggregatorV2
	err := ctx.ReadResource("aws-native:securityhub:AggregatorV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AggregatorV2 resources.
type aggregatorV2State struct {
}

type AggregatorV2State struct {
}

func (AggregatorV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregatorV2State)(nil)).Elem()
}

type aggregatorV2Args struct {
	// The list of included Regions
	LinkedRegions []string `pulumi:"linkedRegions"`
	// Indicates to link a list of included Regions
	RegionLinkingMode AggregatorV2RegionLinkingMode `pulumi:"regionLinkingMode"`
	Tags              map[string]string             `pulumi:"tags"`
}

// The set of arguments for constructing a AggregatorV2 resource.
type AggregatorV2Args struct {
	// The list of included Regions
	LinkedRegions pulumi.StringArrayInput
	// Indicates to link a list of included Regions
	RegionLinkingMode AggregatorV2RegionLinkingModeInput
	Tags              pulumi.StringMapInput
}

func (AggregatorV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregatorV2Args)(nil)).Elem()
}

type AggregatorV2Input interface {
	pulumi.Input

	ToAggregatorV2Output() AggregatorV2Output
	ToAggregatorV2OutputWithContext(ctx context.Context) AggregatorV2Output
}

func (*AggregatorV2) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregatorV2)(nil)).Elem()
}

func (i *AggregatorV2) ToAggregatorV2Output() AggregatorV2Output {
	return i.ToAggregatorV2OutputWithContext(context.Background())
}

func (i *AggregatorV2) ToAggregatorV2OutputWithContext(ctx context.Context) AggregatorV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(AggregatorV2Output)
}

type AggregatorV2Output struct{ *pulumi.OutputState }

func (AggregatorV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregatorV2)(nil)).Elem()
}

func (o AggregatorV2Output) ToAggregatorV2Output() AggregatorV2Output {
	return o
}

func (o AggregatorV2Output) ToAggregatorV2OutputWithContext(ctx context.Context) AggregatorV2Output {
	return o
}

// The aggregation Region of the AggregatorV2
func (o AggregatorV2Output) AggregationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregatorV2) pulumi.StringOutput { return v.AggregationRegion }).(pulumi.StringOutput)
}

// The ARN of the AggregatorV2 being created and assigned as the unique identifier
func (o AggregatorV2Output) AggregatorV2Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AggregatorV2) pulumi.StringOutput { return v.AggregatorV2Arn }).(pulumi.StringOutput)
}

// The list of included Regions
func (o AggregatorV2Output) LinkedRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AggregatorV2) pulumi.StringArrayOutput { return v.LinkedRegions }).(pulumi.StringArrayOutput)
}

// Indicates to link a list of included Regions
func (o AggregatorV2Output) RegionLinkingMode() AggregatorV2RegionLinkingModeOutput {
	return o.ApplyT(func(v *AggregatorV2) AggregatorV2RegionLinkingModeOutput { return v.RegionLinkingMode }).(AggregatorV2RegionLinkingModeOutput)
}

func (o AggregatorV2Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AggregatorV2) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregatorV2Input)(nil)).Elem(), &AggregatorV2{})
	pulumi.RegisterOutputType(AggregatorV2Output{})
}
