// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CodeBuild::ReportGroup
//
// Deprecated: ReportGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type ReportGroup struct {
	pulumi.CustomResourceState

	Arn           pulumi.StringOutput                 `pulumi:"arn"`
	DeleteReports pulumi.BoolPtrOutput                `pulumi:"deleteReports"`
	ExportConfig  ReportGroupReportExportConfigOutput `pulumi:"exportConfig"`
	Name          pulumi.StringPtrOutput              `pulumi:"name"`
	Tags          ReportGroupTagArrayOutput           `pulumi:"tags"`
	Type          pulumi.StringOutput                 `pulumi:"type"`
}

// NewReportGroup registers a new resource with the given unique name, arguments, and options.
func NewReportGroup(ctx *pulumi.Context,
	name string, args *ReportGroupArgs, opts ...pulumi.ResourceOption) (*ReportGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExportConfig == nil {
		return nil, errors.New("invalid value for required argument 'ExportConfig'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ReportGroup
	err := ctx.RegisterResource("aws-native:codebuild:ReportGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportGroup gets an existing ReportGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportGroupState, opts ...pulumi.ResourceOption) (*ReportGroup, error) {
	var resource ReportGroup
	err := ctx.ReadResource("aws-native:codebuild:ReportGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportGroup resources.
type reportGroupState struct {
}

type ReportGroupState struct {
}

func (ReportGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportGroupState)(nil)).Elem()
}

type reportGroupArgs struct {
	DeleteReports *bool                         `pulumi:"deleteReports"`
	ExportConfig  ReportGroupReportExportConfig `pulumi:"exportConfig"`
	Name          *string                       `pulumi:"name"`
	Tags          []ReportGroupTag              `pulumi:"tags"`
	Type          string                        `pulumi:"type"`
}

// The set of arguments for constructing a ReportGroup resource.
type ReportGroupArgs struct {
	DeleteReports pulumi.BoolPtrInput
	ExportConfig  ReportGroupReportExportConfigInput
	Name          pulumi.StringPtrInput
	Tags          ReportGroupTagArrayInput
	Type          pulumi.StringInput
}

func (ReportGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportGroupArgs)(nil)).Elem()
}

type ReportGroupInput interface {
	pulumi.Input

	ToReportGroupOutput() ReportGroupOutput
	ToReportGroupOutputWithContext(ctx context.Context) ReportGroupOutput
}

func (*ReportGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroup)(nil)).Elem()
}

func (i *ReportGroup) ToReportGroupOutput() ReportGroupOutput {
	return i.ToReportGroupOutputWithContext(context.Background())
}

func (i *ReportGroup) ToReportGroupOutputWithContext(ctx context.Context) ReportGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupOutput)
}

type ReportGroupOutput struct{ *pulumi.OutputState }

func (ReportGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGroup)(nil)).Elem()
}

func (o ReportGroupOutput) ToReportGroupOutput() ReportGroupOutput {
	return o
}

func (o ReportGroupOutput) ToReportGroupOutputWithContext(ctx context.Context) ReportGroupOutput {
	return o
}

func (o ReportGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ReportGroupOutput) DeleteReports() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.BoolPtrOutput { return v.DeleteReports }).(pulumi.BoolPtrOutput)
}

func (o ReportGroupOutput) ExportConfig() ReportGroupReportExportConfigOutput {
	return o.ApplyT(func(v *ReportGroup) ReportGroupReportExportConfigOutput { return v.ExportConfig }).(ReportGroupReportExportConfigOutput)
}

func (o ReportGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ReportGroupOutput) Tags() ReportGroupTagArrayOutput {
	return o.ApplyT(func(v *ReportGroup) ReportGroupTagArrayOutput { return v.Tags }).(ReportGroupTagArrayOutput)
}

func (o ReportGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportGroupInput)(nil)).Elem(), &ReportGroup{})
	pulumi.RegisterOutputType(ReportGroupOutput{})
}
