// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CodeBuild::ReportGroup
func LookupReportGroup(ctx *pulumi.Context, args *LookupReportGroupArgs, opts ...pulumi.InvokeOption) (*LookupReportGroupResult, error) {
	var rv LookupReportGroupResult
	err := ctx.Invoke("aws-native:codebuild:getReportGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupReportGroupArgs struct {
	Id string `pulumi:"id"`
}

type LookupReportGroupResult struct {
	Arn           *string                        `pulumi:"arn"`
	DeleteReports *bool                          `pulumi:"deleteReports"`
	ExportConfig  *ReportGroupReportExportConfig `pulumi:"exportConfig"`
	Id            *string                        `pulumi:"id"`
	Tags          []ReportGroupTag               `pulumi:"tags"`
}

func LookupReportGroupOutput(ctx *pulumi.Context, args LookupReportGroupOutputArgs, opts ...pulumi.InvokeOption) LookupReportGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReportGroupResult, error) {
			args := v.(LookupReportGroupArgs)
			r, err := LookupReportGroup(ctx, &args, opts...)
			var s LookupReportGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReportGroupResultOutput)
}

type LookupReportGroupOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupReportGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReportGroupArgs)(nil)).Elem()
}

type LookupReportGroupResultOutput struct{ *pulumi.OutputState }

func (LookupReportGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReportGroupResult)(nil)).Elem()
}

func (o LookupReportGroupResultOutput) ToLookupReportGroupResultOutput() LookupReportGroupResultOutput {
	return o
}

func (o LookupReportGroupResultOutput) ToLookupReportGroupResultOutputWithContext(ctx context.Context) LookupReportGroupResultOutput {
	return o
}

func (o LookupReportGroupResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupReportGroupResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupReportGroupResultOutput) DeleteReports() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupReportGroupResult) *bool { return v.DeleteReports }).(pulumi.BoolPtrOutput)
}

func (o LookupReportGroupResultOutput) ExportConfig() ReportGroupReportExportConfigPtrOutput {
	return o.ApplyT(func(v LookupReportGroupResult) *ReportGroupReportExportConfig { return v.ExportConfig }).(ReportGroupReportExportConfigPtrOutput)
}

func (o LookupReportGroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupReportGroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupReportGroupResultOutput) Tags() ReportGroupTagArrayOutput {
	return o.ApplyT(func(v LookupReportGroupResult) []ReportGroupTag { return v.Tags }).(ReportGroupTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReportGroupResultOutput{})
}
