// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > Updating this field is not allowed for `MAC_ARM` .
//
// Information about the compute resources the compute fleet uses. Available values include:
//
// - `BUILD_GENERAL1_SMALL` : Use up to 3 GB memory and 2 vCPUs for builds.
// - `BUILD_GENERAL1_MEDIUM` : Use up to 7 GB memory and 4 vCPUs for builds.
// - `BUILD_GENERAL1_LARGE` : Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
// - `BUILD_GENERAL1_XLARGE` : Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
// - `BUILD_GENERAL1_2XLARGE` : Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
//
// If you use `BUILD_GENERAL1_SMALL` :
//
// - For environment type `LINUX_CONTAINER` , you can use up to 3 GB memory and 2 vCPUs for builds.
// - For environment type `LINUX_GPU_CONTAINER` , you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
// - For environment type `ARM_CONTAINER` , you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.
//
// If you use `BUILD_GENERAL1_LARGE` :
//
// - For environment type `LINUX_CONTAINER` , you can use up to 15 GB memory and 8 vCPUs for builds.
// - For environment type `LINUX_GPU_CONTAINER` , you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
// - For environment type `ARM_CONTAINER` , you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.
//
// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild User Guide.*
type FleetComputeType string

const (
	FleetComputeTypeBuildGeneral1Small   = FleetComputeType("BUILD_GENERAL1_SMALL")
	FleetComputeTypeBuildGeneral1Medium  = FleetComputeType("BUILD_GENERAL1_MEDIUM")
	FleetComputeTypeBuildGeneral1Large   = FleetComputeType("BUILD_GENERAL1_LARGE")
	FleetComputeTypeBuildGeneral1Xlarge  = FleetComputeType("BUILD_GENERAL1_XLARGE")
	FleetComputeTypeBuildGeneral12xlarge = FleetComputeType("BUILD_GENERAL1_2XLARGE")
)

func (FleetComputeType) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetComputeType)(nil)).Elem()
}

func (e FleetComputeType) ToFleetComputeTypeOutput() FleetComputeTypeOutput {
	return pulumi.ToOutput(e).(FleetComputeTypeOutput)
}

func (e FleetComputeType) ToFleetComputeTypeOutputWithContext(ctx context.Context) FleetComputeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FleetComputeTypeOutput)
}

func (e FleetComputeType) ToFleetComputeTypePtrOutput() FleetComputeTypePtrOutput {
	return e.ToFleetComputeTypePtrOutputWithContext(context.Background())
}

func (e FleetComputeType) ToFleetComputeTypePtrOutputWithContext(ctx context.Context) FleetComputeTypePtrOutput {
	return FleetComputeType(e).ToFleetComputeTypeOutputWithContext(ctx).ToFleetComputeTypePtrOutputWithContext(ctx)
}

func (e FleetComputeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FleetComputeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FleetComputeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FleetComputeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FleetComputeTypeOutput struct{ *pulumi.OutputState }

func (FleetComputeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetComputeType)(nil)).Elem()
}

func (o FleetComputeTypeOutput) ToFleetComputeTypeOutput() FleetComputeTypeOutput {
	return o
}

func (o FleetComputeTypeOutput) ToFleetComputeTypeOutputWithContext(ctx context.Context) FleetComputeTypeOutput {
	return o
}

func (o FleetComputeTypeOutput) ToFleetComputeTypePtrOutput() FleetComputeTypePtrOutput {
	return o.ToFleetComputeTypePtrOutputWithContext(context.Background())
}

func (o FleetComputeTypeOutput) ToFleetComputeTypePtrOutputWithContext(ctx context.Context) FleetComputeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetComputeType) *FleetComputeType {
		return &v
	}).(FleetComputeTypePtrOutput)
}

func (o FleetComputeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FleetComputeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FleetComputeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FleetComputeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FleetComputeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FleetComputeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FleetComputeTypePtrOutput struct{ *pulumi.OutputState }

func (FleetComputeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetComputeType)(nil)).Elem()
}

func (o FleetComputeTypePtrOutput) ToFleetComputeTypePtrOutput() FleetComputeTypePtrOutput {
	return o
}

func (o FleetComputeTypePtrOutput) ToFleetComputeTypePtrOutputWithContext(ctx context.Context) FleetComputeTypePtrOutput {
	return o
}

func (o FleetComputeTypePtrOutput) Elem() FleetComputeTypeOutput {
	return o.ApplyT(func(v *FleetComputeType) FleetComputeType {
		if v != nil {
			return *v
		}
		var ret FleetComputeType
		return ret
	}).(FleetComputeTypeOutput)
}

func (o FleetComputeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FleetComputeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FleetComputeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FleetComputeTypeInput is an input type that accepts values of the FleetComputeType enum
// A concrete instance of `FleetComputeTypeInput` can be one of the following:
//
//	FleetComputeTypeBuildGeneral1Small
//	FleetComputeTypeBuildGeneral1Medium
//	FleetComputeTypeBuildGeneral1Large
//	FleetComputeTypeBuildGeneral1Xlarge
//	FleetComputeTypeBuildGeneral12xlarge
type FleetComputeTypeInput interface {
	pulumi.Input

	ToFleetComputeTypeOutput() FleetComputeTypeOutput
	ToFleetComputeTypeOutputWithContext(context.Context) FleetComputeTypeOutput
}

var fleetComputeTypePtrType = reflect.TypeOf((**FleetComputeType)(nil)).Elem()

type FleetComputeTypePtrInput interface {
	pulumi.Input

	ToFleetComputeTypePtrOutput() FleetComputeTypePtrOutput
	ToFleetComputeTypePtrOutputWithContext(context.Context) FleetComputeTypePtrOutput
}

type fleetComputeTypePtr string

func FleetComputeTypePtr(v string) FleetComputeTypePtrInput {
	return (*fleetComputeTypePtr)(&v)
}

func (*fleetComputeTypePtr) ElementType() reflect.Type {
	return fleetComputeTypePtrType
}

func (in *fleetComputeTypePtr) ToFleetComputeTypePtrOutput() FleetComputeTypePtrOutput {
	return pulumi.ToOutput(in).(FleetComputeTypePtrOutput)
}

func (in *fleetComputeTypePtr) ToFleetComputeTypePtrOutputWithContext(ctx context.Context) FleetComputeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FleetComputeTypePtrOutput)
}

// > Updating this field is not allowed for `MAC_ARM` .
//
// The environment type of the compute fleet.
//
// - The environment type `ARM_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
// - The environment type `LINUX_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
// - The environment type `LINUX_GPU_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
// - The environment type `WINDOWS_SERVER_2019_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
// - The environment type `WINDOWS_SERVER_2022_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).
//
// For more information, see [Build environment compute types](https://docs.aws.amazon.com//codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild user guide* .
type FleetEnvironmentType string

const (
	FleetEnvironmentTypeWindowsServer2019Container = FleetEnvironmentType("WINDOWS_SERVER_2019_CONTAINER")
	FleetEnvironmentTypeWindowsServer2022Container = FleetEnvironmentType("WINDOWS_SERVER_2022_CONTAINER")
	FleetEnvironmentTypeLinuxContainer             = FleetEnvironmentType("LINUX_CONTAINER")
	FleetEnvironmentTypeLinuxGpuContainer          = FleetEnvironmentType("LINUX_GPU_CONTAINER")
	FleetEnvironmentTypeArmContainer               = FleetEnvironmentType("ARM_CONTAINER")
	FleetEnvironmentTypeMacArm                     = FleetEnvironmentType("MAC_ARM")
)

func (FleetEnvironmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetEnvironmentType)(nil)).Elem()
}

func (e FleetEnvironmentType) ToFleetEnvironmentTypeOutput() FleetEnvironmentTypeOutput {
	return pulumi.ToOutput(e).(FleetEnvironmentTypeOutput)
}

func (e FleetEnvironmentType) ToFleetEnvironmentTypeOutputWithContext(ctx context.Context) FleetEnvironmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FleetEnvironmentTypeOutput)
}

func (e FleetEnvironmentType) ToFleetEnvironmentTypePtrOutput() FleetEnvironmentTypePtrOutput {
	return e.ToFleetEnvironmentTypePtrOutputWithContext(context.Background())
}

func (e FleetEnvironmentType) ToFleetEnvironmentTypePtrOutputWithContext(ctx context.Context) FleetEnvironmentTypePtrOutput {
	return FleetEnvironmentType(e).ToFleetEnvironmentTypeOutputWithContext(ctx).ToFleetEnvironmentTypePtrOutputWithContext(ctx)
}

func (e FleetEnvironmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FleetEnvironmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FleetEnvironmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FleetEnvironmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FleetEnvironmentTypeOutput struct{ *pulumi.OutputState }

func (FleetEnvironmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetEnvironmentType)(nil)).Elem()
}

func (o FleetEnvironmentTypeOutput) ToFleetEnvironmentTypeOutput() FleetEnvironmentTypeOutput {
	return o
}

func (o FleetEnvironmentTypeOutput) ToFleetEnvironmentTypeOutputWithContext(ctx context.Context) FleetEnvironmentTypeOutput {
	return o
}

func (o FleetEnvironmentTypeOutput) ToFleetEnvironmentTypePtrOutput() FleetEnvironmentTypePtrOutput {
	return o.ToFleetEnvironmentTypePtrOutputWithContext(context.Background())
}

func (o FleetEnvironmentTypeOutput) ToFleetEnvironmentTypePtrOutputWithContext(ctx context.Context) FleetEnvironmentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetEnvironmentType) *FleetEnvironmentType {
		return &v
	}).(FleetEnvironmentTypePtrOutput)
}

func (o FleetEnvironmentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FleetEnvironmentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FleetEnvironmentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FleetEnvironmentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FleetEnvironmentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FleetEnvironmentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FleetEnvironmentTypePtrOutput struct{ *pulumi.OutputState }

func (FleetEnvironmentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetEnvironmentType)(nil)).Elem()
}

func (o FleetEnvironmentTypePtrOutput) ToFleetEnvironmentTypePtrOutput() FleetEnvironmentTypePtrOutput {
	return o
}

func (o FleetEnvironmentTypePtrOutput) ToFleetEnvironmentTypePtrOutputWithContext(ctx context.Context) FleetEnvironmentTypePtrOutput {
	return o
}

func (o FleetEnvironmentTypePtrOutput) Elem() FleetEnvironmentTypeOutput {
	return o.ApplyT(func(v *FleetEnvironmentType) FleetEnvironmentType {
		if v != nil {
			return *v
		}
		var ret FleetEnvironmentType
		return ret
	}).(FleetEnvironmentTypeOutput)
}

func (o FleetEnvironmentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FleetEnvironmentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FleetEnvironmentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FleetEnvironmentTypeInput is an input type that accepts values of the FleetEnvironmentType enum
// A concrete instance of `FleetEnvironmentTypeInput` can be one of the following:
//
//	FleetEnvironmentTypeWindowsServer2019Container
//	FleetEnvironmentTypeWindowsServer2022Container
//	FleetEnvironmentTypeLinuxContainer
//	FleetEnvironmentTypeLinuxGpuContainer
//	FleetEnvironmentTypeArmContainer
//	FleetEnvironmentTypeMacArm
type FleetEnvironmentTypeInput interface {
	pulumi.Input

	ToFleetEnvironmentTypeOutput() FleetEnvironmentTypeOutput
	ToFleetEnvironmentTypeOutputWithContext(context.Context) FleetEnvironmentTypeOutput
}

var fleetEnvironmentTypePtrType = reflect.TypeOf((**FleetEnvironmentType)(nil)).Elem()

type FleetEnvironmentTypePtrInput interface {
	pulumi.Input

	ToFleetEnvironmentTypePtrOutput() FleetEnvironmentTypePtrOutput
	ToFleetEnvironmentTypePtrOutputWithContext(context.Context) FleetEnvironmentTypePtrOutput
}

type fleetEnvironmentTypePtr string

func FleetEnvironmentTypePtr(v string) FleetEnvironmentTypePtrInput {
	return (*fleetEnvironmentTypePtr)(&v)
}

func (*fleetEnvironmentTypePtr) ElementType() reflect.Type {
	return fleetEnvironmentTypePtrType
}

func (in *fleetEnvironmentTypePtr) ToFleetEnvironmentTypePtrOutput() FleetEnvironmentTypePtrOutput {
	return pulumi.ToOutput(in).(FleetEnvironmentTypePtrOutput)
}

func (in *fleetEnvironmentTypePtr) ToFleetEnvironmentTypePtrOutputWithContext(ctx context.Context) FleetEnvironmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FleetEnvironmentTypePtrOutput)
}

// The compute fleet overflow behavior.
//
// - For overflow behavior `QUEUE` , your overflow builds need to wait on the existing fleet instance to become available.
// - For overflow behavior `ON_DEMAND` , your overflow builds run on CodeBuild on-demand.
//
// > If you choose to set your overflow behavior to on-demand while creating a VPC-connected fleet, make sure that you add the required VPC permissions to your project service role. For more information, see [Example policy statement to allow CodeBuild access to AWS services required to create a VPC network interface](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-create-vpc-network-interface) .
type FleetOverflowBehavior string

const (
	FleetOverflowBehaviorQueue    = FleetOverflowBehavior("QUEUE")
	FleetOverflowBehaviorOnDemand = FleetOverflowBehavior("ON_DEMAND")
)

func (FleetOverflowBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetOverflowBehavior)(nil)).Elem()
}

func (e FleetOverflowBehavior) ToFleetOverflowBehaviorOutput() FleetOverflowBehaviorOutput {
	return pulumi.ToOutput(e).(FleetOverflowBehaviorOutput)
}

func (e FleetOverflowBehavior) ToFleetOverflowBehaviorOutputWithContext(ctx context.Context) FleetOverflowBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FleetOverflowBehaviorOutput)
}

func (e FleetOverflowBehavior) ToFleetOverflowBehaviorPtrOutput() FleetOverflowBehaviorPtrOutput {
	return e.ToFleetOverflowBehaviorPtrOutputWithContext(context.Background())
}

func (e FleetOverflowBehavior) ToFleetOverflowBehaviorPtrOutputWithContext(ctx context.Context) FleetOverflowBehaviorPtrOutput {
	return FleetOverflowBehavior(e).ToFleetOverflowBehaviorOutputWithContext(ctx).ToFleetOverflowBehaviorPtrOutputWithContext(ctx)
}

func (e FleetOverflowBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FleetOverflowBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FleetOverflowBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FleetOverflowBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FleetOverflowBehaviorOutput struct{ *pulumi.OutputState }

func (FleetOverflowBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetOverflowBehavior)(nil)).Elem()
}

func (o FleetOverflowBehaviorOutput) ToFleetOverflowBehaviorOutput() FleetOverflowBehaviorOutput {
	return o
}

func (o FleetOverflowBehaviorOutput) ToFleetOverflowBehaviorOutputWithContext(ctx context.Context) FleetOverflowBehaviorOutput {
	return o
}

func (o FleetOverflowBehaviorOutput) ToFleetOverflowBehaviorPtrOutput() FleetOverflowBehaviorPtrOutput {
	return o.ToFleetOverflowBehaviorPtrOutputWithContext(context.Background())
}

func (o FleetOverflowBehaviorOutput) ToFleetOverflowBehaviorPtrOutputWithContext(ctx context.Context) FleetOverflowBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetOverflowBehavior) *FleetOverflowBehavior {
		return &v
	}).(FleetOverflowBehaviorPtrOutput)
}

func (o FleetOverflowBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FleetOverflowBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FleetOverflowBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FleetOverflowBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FleetOverflowBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FleetOverflowBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FleetOverflowBehaviorPtrOutput struct{ *pulumi.OutputState }

func (FleetOverflowBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetOverflowBehavior)(nil)).Elem()
}

func (o FleetOverflowBehaviorPtrOutput) ToFleetOverflowBehaviorPtrOutput() FleetOverflowBehaviorPtrOutput {
	return o
}

func (o FleetOverflowBehaviorPtrOutput) ToFleetOverflowBehaviorPtrOutputWithContext(ctx context.Context) FleetOverflowBehaviorPtrOutput {
	return o
}

func (o FleetOverflowBehaviorPtrOutput) Elem() FleetOverflowBehaviorOutput {
	return o.ApplyT(func(v *FleetOverflowBehavior) FleetOverflowBehavior {
		if v != nil {
			return *v
		}
		var ret FleetOverflowBehavior
		return ret
	}).(FleetOverflowBehaviorOutput)
}

func (o FleetOverflowBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FleetOverflowBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FleetOverflowBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FleetOverflowBehaviorInput is an input type that accepts values of the FleetOverflowBehavior enum
// A concrete instance of `FleetOverflowBehaviorInput` can be one of the following:
//
//	FleetOverflowBehaviorQueue
//	FleetOverflowBehaviorOnDemand
type FleetOverflowBehaviorInput interface {
	pulumi.Input

	ToFleetOverflowBehaviorOutput() FleetOverflowBehaviorOutput
	ToFleetOverflowBehaviorOutputWithContext(context.Context) FleetOverflowBehaviorOutput
}

var fleetOverflowBehaviorPtrType = reflect.TypeOf((**FleetOverflowBehavior)(nil)).Elem()

type FleetOverflowBehaviorPtrInput interface {
	pulumi.Input

	ToFleetOverflowBehaviorPtrOutput() FleetOverflowBehaviorPtrOutput
	ToFleetOverflowBehaviorPtrOutputWithContext(context.Context) FleetOverflowBehaviorPtrOutput
}

type fleetOverflowBehaviorPtr string

func FleetOverflowBehaviorPtr(v string) FleetOverflowBehaviorPtrInput {
	return (*fleetOverflowBehaviorPtr)(&v)
}

func (*fleetOverflowBehaviorPtr) ElementType() reflect.Type {
	return fleetOverflowBehaviorPtrType
}

func (in *fleetOverflowBehaviorPtr) ToFleetOverflowBehaviorPtrOutput() FleetOverflowBehaviorPtrOutput {
	return pulumi.ToOutput(in).(FleetOverflowBehaviorPtrOutput)
}

func (in *fleetOverflowBehaviorPtr) ToFleetOverflowBehaviorPtrOutputWithContext(ctx context.Context) FleetOverflowBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FleetOverflowBehaviorPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetComputeTypeInput)(nil)).Elem(), FleetComputeType("BUILD_GENERAL1_SMALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*FleetComputeTypePtrInput)(nil)).Elem(), FleetComputeType("BUILD_GENERAL1_SMALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*FleetEnvironmentTypeInput)(nil)).Elem(), FleetEnvironmentType("WINDOWS_SERVER_2019_CONTAINER"))
	pulumi.RegisterInputType(reflect.TypeOf((*FleetEnvironmentTypePtrInput)(nil)).Elem(), FleetEnvironmentType("WINDOWS_SERVER_2019_CONTAINER"))
	pulumi.RegisterInputType(reflect.TypeOf((*FleetOverflowBehaviorInput)(nil)).Elem(), FleetOverflowBehavior("QUEUE"))
	pulumi.RegisterInputType(reflect.TypeOf((*FleetOverflowBehaviorPtrInput)(nil)).Elem(), FleetOverflowBehavior("QUEUE"))
	pulumi.RegisterOutputType(FleetComputeTypeOutput{})
	pulumi.RegisterOutputType(FleetComputeTypePtrOutput{})
	pulumi.RegisterOutputType(FleetEnvironmentTypeOutput{})
	pulumi.RegisterOutputType(FleetEnvironmentTypePtrOutput{})
	pulumi.RegisterOutputType(FleetOverflowBehaviorOutput{})
	pulumi.RegisterOutputType(FleetOverflowBehaviorPtrOutput{})
}
