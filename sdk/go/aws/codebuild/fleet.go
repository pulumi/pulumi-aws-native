// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::CodeBuild::Fleet
type Fleet struct {
	pulumi.CustomResourceState

	Arn             pulumi.StringOutput           `pulumi:"arn"`
	BaseCapacity    pulumi.IntPtrOutput           `pulumi:"baseCapacity"`
	ComputeType     FleetComputeTypePtrOutput     `pulumi:"computeType"`
	EnvironmentType FleetEnvironmentTypePtrOutput `pulumi:"environmentType"`
	Name            pulumi.StringPtrOutput        `pulumi:"name"`
	Tags            FleetTagArrayOutput           `pulumi:"tags"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		args = &FleetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws-native:codebuild:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws-native:codebuild:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
}

type FleetState struct {
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	BaseCapacity    *int                  `pulumi:"baseCapacity"`
	ComputeType     *FleetComputeType     `pulumi:"computeType"`
	EnvironmentType *FleetEnvironmentType `pulumi:"environmentType"`
	Name            *string               `pulumi:"name"`
	Tags            []FleetTag            `pulumi:"tags"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	BaseCapacity    pulumi.IntPtrInput
	ComputeType     FleetComputeTypePtrInput
	EnvironmentType FleetEnvironmentTypePtrInput
	Name            pulumi.StringPtrInput
	Tags            FleetTagArrayInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(ctx context.Context) FleetOutput
}

func (*Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *Fleet) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i *Fleet) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

func (i *Fleet) ToOutput(ctx context.Context) pulumix.Output[*Fleet] {
	return pulumix.Output[*Fleet]{
		OutputState: i.ToFleetOutputWithContext(ctx).OutputState,
	}
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) ToOutput(ctx context.Context) pulumix.Output[*Fleet] {
	return pulumix.Output[*Fleet]{
		OutputState: o.OutputState,
	}
}

func (o FleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FleetOutput) BaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.IntPtrOutput { return v.BaseCapacity }).(pulumi.IntPtrOutput)
}

func (o FleetOutput) ComputeType() FleetComputeTypePtrOutput {
	return o.ApplyT(func(v *Fleet) FleetComputeTypePtrOutput { return v.ComputeType }).(FleetComputeTypePtrOutput)
}

func (o FleetOutput) EnvironmentType() FleetEnvironmentTypePtrOutput {
	return o.ApplyT(func(v *Fleet) FleetEnvironmentTypePtrOutput { return v.EnvironmentType }).(FleetEnvironmentTypePtrOutput)
}

func (o FleetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) Tags() FleetTagArrayOutput {
	return o.ApplyT(func(v *Fleet) FleetTagArrayOutput { return v.Tags }).(FleetTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), &Fleet{})
	pulumi.RegisterOutputType(FleetOutput{})
}
