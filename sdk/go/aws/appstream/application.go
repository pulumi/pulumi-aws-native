// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppStream::Application
type Application struct {
	pulumi.CustomResourceState

	AppBlockArn        pulumi.StringOutput         `pulumi:"appBlockArn"`
	Arn                pulumi.StringOutput         `pulumi:"arn"`
	AttributesToDelete pulumi.StringArrayOutput    `pulumi:"attributesToDelete"`
	CreatedTime        pulumi.StringOutput         `pulumi:"createdTime"`
	Description        pulumi.StringPtrOutput      `pulumi:"description"`
	DisplayName        pulumi.StringPtrOutput      `pulumi:"displayName"`
	IconS3Location     ApplicationS3LocationOutput `pulumi:"iconS3Location"`
	InstanceFamilies   pulumi.StringArrayOutput    `pulumi:"instanceFamilies"`
	LaunchParameters   pulumi.StringPtrOutput      `pulumi:"launchParameters"`
	LaunchPath         pulumi.StringOutput         `pulumi:"launchPath"`
	Name               pulumi.StringOutput         `pulumi:"name"`
	Platforms          pulumi.StringArrayOutput    `pulumi:"platforms"`
	Tags               ApplicationTagArrayOutput   `pulumi:"tags"`
	WorkingDirectory   pulumi.StringPtrOutput      `pulumi:"workingDirectory"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppBlockArn == nil {
		return nil, errors.New("invalid value for required argument 'AppBlockArn'")
	}
	if args.IconS3Location == nil {
		return nil, errors.New("invalid value for required argument 'IconS3Location'")
	}
	if args.InstanceFamilies == nil {
		return nil, errors.New("invalid value for required argument 'InstanceFamilies'")
	}
	if args.LaunchPath == nil {
		return nil, errors.New("invalid value for required argument 'LaunchPath'")
	}
	if args.Platforms == nil {
		return nil, errors.New("invalid value for required argument 'Platforms'")
	}
	var resource Application
	err := ctx.RegisterResource("aws-native:appstream:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:appstream:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	AppBlockArn        string                `pulumi:"appBlockArn"`
	AttributesToDelete []string              `pulumi:"attributesToDelete"`
	Description        *string               `pulumi:"description"`
	DisplayName        *string               `pulumi:"displayName"`
	IconS3Location     ApplicationS3Location `pulumi:"iconS3Location"`
	InstanceFamilies   []string              `pulumi:"instanceFamilies"`
	LaunchParameters   *string               `pulumi:"launchParameters"`
	LaunchPath         string                `pulumi:"launchPath"`
	Name               *string               `pulumi:"name"`
	Platforms          []string              `pulumi:"platforms"`
	Tags               []ApplicationTag      `pulumi:"tags"`
	WorkingDirectory   *string               `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	AppBlockArn        pulumi.StringInput
	AttributesToDelete pulumi.StringArrayInput
	Description        pulumi.StringPtrInput
	DisplayName        pulumi.StringPtrInput
	IconS3Location     ApplicationS3LocationInput
	InstanceFamilies   pulumi.StringArrayInput
	LaunchParameters   pulumi.StringPtrInput
	LaunchPath         pulumi.StringInput
	Name               pulumi.StringPtrInput
	Platforms          pulumi.StringArrayInput
	Tags               ApplicationTagArrayInput
	WorkingDirectory   pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
