// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppStream::Application
type Application struct {
	pulumi.CustomResourceState

	// The app block ARN with which the application should be associated.
	AppBlockArn pulumi.StringOutput `pulumi:"appBlockArn"`
	// The ARN of the application.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A list of attributes to delete from an application.
	AttributesToDelete pulumi.StringArrayOutput `pulumi:"attributesToDelete"`
	// The time when the application was created.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the application. This name is visible to users in the application catalog.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The S3 location of the application icon.
	IconS3Location ApplicationS3LocationOutput `pulumi:"iconS3Location"`
	// The instance families the application supports.
	//
	// *Allowed Values* : `GENERAL_PURPOSE` | `GRAPHICS_G4`
	InstanceFamilies pulumi.StringArrayOutput `pulumi:"instanceFamilies"`
	// The launch parameters of the application.
	LaunchParameters pulumi.StringPtrOutput `pulumi:"launchParameters"`
	// The launch path of the application.
	LaunchPath pulumi.StringOutput `pulumi:"launchPath"`
	// The name of the application. This name is visible to users when a name is not specified in the DisplayName property.
	//
	// *Pattern* : `^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$`
	Name pulumi.StringOutput `pulumi:"name"`
	// The platforms the application supports.
	//
	// *Allowed Values* : `WINDOWS_SERVER_2019` | `AMAZON_LINUX2`
	Platforms pulumi.StringArrayOutput `pulumi:"platforms"`
	// The tag of the application.
	Tags pulumi.ArrayOutput `pulumi:"tags"`
	// The working directory of the application.
	WorkingDirectory pulumi.StringPtrOutput `pulumi:"workingDirectory"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppBlockArn == nil {
		return nil, errors.New("invalid value for required argument 'AppBlockArn'")
	}
	if args.IconS3Location == nil {
		return nil, errors.New("invalid value for required argument 'IconS3Location'")
	}
	if args.InstanceFamilies == nil {
		return nil, errors.New("invalid value for required argument 'InstanceFamilies'")
	}
	if args.LaunchPath == nil {
		return nil, errors.New("invalid value for required argument 'LaunchPath'")
	}
	if args.Platforms == nil {
		return nil, errors.New("invalid value for required argument 'Platforms'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"instanceFamilies[*]",
		"name",
		"platforms[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:appstream:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:appstream:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The app block ARN with which the application should be associated.
	AppBlockArn string `pulumi:"appBlockArn"`
	// A list of attributes to delete from an application.
	AttributesToDelete []string `pulumi:"attributesToDelete"`
	// The description of the application.
	Description *string `pulumi:"description"`
	// The display name of the application. This name is visible to users in the application catalog.
	DisplayName *string `pulumi:"displayName"`
	// The S3 location of the application icon.
	IconS3Location ApplicationS3Location `pulumi:"iconS3Location"`
	// The instance families the application supports.
	//
	// *Allowed Values* : `GENERAL_PURPOSE` | `GRAPHICS_G4`
	InstanceFamilies []string `pulumi:"instanceFamilies"`
	// The launch parameters of the application.
	LaunchParameters *string `pulumi:"launchParameters"`
	// The launch path of the application.
	LaunchPath string `pulumi:"launchPath"`
	// The name of the application. This name is visible to users when a name is not specified in the DisplayName property.
	//
	// *Pattern* : `^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$`
	Name *string `pulumi:"name"`
	// The platforms the application supports.
	//
	// *Allowed Values* : `WINDOWS_SERVER_2019` | `AMAZON_LINUX2`
	Platforms []string `pulumi:"platforms"`
	// The tag of the application.
	Tags []interface{} `pulumi:"tags"`
	// The working directory of the application.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The app block ARN with which the application should be associated.
	AppBlockArn pulumi.StringInput
	// A list of attributes to delete from an application.
	AttributesToDelete pulumi.StringArrayInput
	// The description of the application.
	Description pulumi.StringPtrInput
	// The display name of the application. This name is visible to users in the application catalog.
	DisplayName pulumi.StringPtrInput
	// The S3 location of the application icon.
	IconS3Location ApplicationS3LocationInput
	// The instance families the application supports.
	//
	// *Allowed Values* : `GENERAL_PURPOSE` | `GRAPHICS_G4`
	InstanceFamilies pulumi.StringArrayInput
	// The launch parameters of the application.
	LaunchParameters pulumi.StringPtrInput
	// The launch path of the application.
	LaunchPath pulumi.StringInput
	// The name of the application. This name is visible to users when a name is not specified in the DisplayName property.
	//
	// *Pattern* : `^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$`
	Name pulumi.StringPtrInput
	// The platforms the application supports.
	//
	// *Allowed Values* : `WINDOWS_SERVER_2019` | `AMAZON_LINUX2`
	Platforms pulumi.StringArrayInput
	// The tag of the application.
	Tags pulumi.ArrayInput
	// The working directory of the application.
	WorkingDirectory pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The app block ARN with which the application should be associated.
func (o ApplicationOutput) AppBlockArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AppBlockArn }).(pulumi.StringOutput)
}

// The ARN of the application.
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A list of attributes to delete from an application.
func (o ApplicationOutput) AttributesToDelete() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.AttributesToDelete }).(pulumi.StringArrayOutput)
}

// The time when the application was created.
func (o ApplicationOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The description of the application.
func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the application. This name is visible to users in the application catalog.
func (o ApplicationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The S3 location of the application icon.
func (o ApplicationOutput) IconS3Location() ApplicationS3LocationOutput {
	return o.ApplyT(func(v *Application) ApplicationS3LocationOutput { return v.IconS3Location }).(ApplicationS3LocationOutput)
}

// The instance families the application supports.
//
// *Allowed Values* : `GENERAL_PURPOSE` | `GRAPHICS_G4`
func (o ApplicationOutput) InstanceFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.InstanceFamilies }).(pulumi.StringArrayOutput)
}

// The launch parameters of the application.
func (o ApplicationOutput) LaunchParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.LaunchParameters }).(pulumi.StringPtrOutput)
}

// The launch path of the application.
func (o ApplicationOutput) LaunchPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.LaunchPath }).(pulumi.StringOutput)
}

// The name of the application. This name is visible to users when a name is not specified in the DisplayName property.
//
// *Pattern* : `^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,100}$`
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The platforms the application supports.
//
// *Allowed Values* : `WINDOWS_SERVER_2019` | `AMAZON_LINUX2`
func (o ApplicationOutput) Platforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.Platforms }).(pulumi.StringArrayOutput)
}

// The tag of the application.
func (o ApplicationOutput) Tags() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.ArrayOutput { return v.Tags }).(pulumi.ArrayOutput)
}

// The working directory of the application.
func (o ApplicationOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
