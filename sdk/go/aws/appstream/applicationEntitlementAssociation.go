// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppStream::ApplicationEntitlementAssociation
type ApplicationEntitlementAssociation struct {
	pulumi.CustomResourceState

	// The identifier of the application.
	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	// The name of the entitlement.
	EntitlementName pulumi.StringOutput `pulumi:"entitlementName"`
	// The name of the stack.
	StackName pulumi.StringOutput `pulumi:"stackName"`
}

// NewApplicationEntitlementAssociation registers a new resource with the given unique name, arguments, and options.
func NewApplicationEntitlementAssociation(ctx *pulumi.Context,
	name string, args *ApplicationEntitlementAssociationArgs, opts ...pulumi.ResourceOption) (*ApplicationEntitlementAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.EntitlementName == nil {
		return nil, errors.New("invalid value for required argument 'EntitlementName'")
	}
	if args.StackName == nil {
		return nil, errors.New("invalid value for required argument 'StackName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationIdentifier",
		"entitlementName",
		"stackName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationEntitlementAssociation
	err := ctx.RegisterResource("aws-native:appstream:ApplicationEntitlementAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationEntitlementAssociation gets an existing ApplicationEntitlementAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationEntitlementAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationEntitlementAssociationState, opts ...pulumi.ResourceOption) (*ApplicationEntitlementAssociation, error) {
	var resource ApplicationEntitlementAssociation
	err := ctx.ReadResource("aws-native:appstream:ApplicationEntitlementAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationEntitlementAssociation resources.
type applicationEntitlementAssociationState struct {
}

type ApplicationEntitlementAssociationState struct {
}

func (ApplicationEntitlementAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationEntitlementAssociationState)(nil)).Elem()
}

type applicationEntitlementAssociationArgs struct {
	// The identifier of the application.
	ApplicationIdentifier string `pulumi:"applicationIdentifier"`
	// The name of the entitlement.
	EntitlementName string `pulumi:"entitlementName"`
	// The name of the stack.
	StackName string `pulumi:"stackName"`
}

// The set of arguments for constructing a ApplicationEntitlementAssociation resource.
type ApplicationEntitlementAssociationArgs struct {
	// The identifier of the application.
	ApplicationIdentifier pulumi.StringInput
	// The name of the entitlement.
	EntitlementName pulumi.StringInput
	// The name of the stack.
	StackName pulumi.StringInput
}

func (ApplicationEntitlementAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationEntitlementAssociationArgs)(nil)).Elem()
}

type ApplicationEntitlementAssociationInput interface {
	pulumi.Input

	ToApplicationEntitlementAssociationOutput() ApplicationEntitlementAssociationOutput
	ToApplicationEntitlementAssociationOutputWithContext(ctx context.Context) ApplicationEntitlementAssociationOutput
}

func (*ApplicationEntitlementAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationEntitlementAssociation)(nil)).Elem()
}

func (i *ApplicationEntitlementAssociation) ToApplicationEntitlementAssociationOutput() ApplicationEntitlementAssociationOutput {
	return i.ToApplicationEntitlementAssociationOutputWithContext(context.Background())
}

func (i *ApplicationEntitlementAssociation) ToApplicationEntitlementAssociationOutputWithContext(ctx context.Context) ApplicationEntitlementAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEntitlementAssociationOutput)
}

type ApplicationEntitlementAssociationOutput struct{ *pulumi.OutputState }

func (ApplicationEntitlementAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationEntitlementAssociation)(nil)).Elem()
}

func (o ApplicationEntitlementAssociationOutput) ToApplicationEntitlementAssociationOutput() ApplicationEntitlementAssociationOutput {
	return o
}

func (o ApplicationEntitlementAssociationOutput) ToApplicationEntitlementAssociationOutputWithContext(ctx context.Context) ApplicationEntitlementAssociationOutput {
	return o
}

// The identifier of the application.
func (o ApplicationEntitlementAssociationOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationEntitlementAssociation) pulumi.StringOutput { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// The name of the entitlement.
func (o ApplicationEntitlementAssociationOutput) EntitlementName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationEntitlementAssociation) pulumi.StringOutput { return v.EntitlementName }).(pulumi.StringOutput)
}

// The name of the stack.
func (o ApplicationEntitlementAssociationOutput) StackName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationEntitlementAssociation) pulumi.StringOutput { return v.StackName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationEntitlementAssociationInput)(nil)).Elem(), &ApplicationEntitlementAssociation{})
	pulumi.RegisterOutputType(ApplicationEntitlementAssociationOutput{})
}
