// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppStream::StackUserAssociation
//
// Deprecated: StackUserAssociation is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type StackUserAssociation struct {
	pulumi.CustomResourceState

	AuthenticationType    pulumi.StringOutput  `pulumi:"authenticationType"`
	SendEmailNotification pulumi.BoolPtrOutput `pulumi:"sendEmailNotification"`
	StackName             pulumi.StringOutput  `pulumi:"stackName"`
	UserName              pulumi.StringOutput  `pulumi:"userName"`
}

// NewStackUserAssociation registers a new resource with the given unique name, arguments, and options.
func NewStackUserAssociation(ctx *pulumi.Context,
	name string, args *StackUserAssociationArgs, opts ...pulumi.ResourceOption) (*StackUserAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.StackName == nil {
		return nil, errors.New("invalid value for required argument 'StackName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	var resource StackUserAssociation
	err := ctx.RegisterResource("aws-native:appstream:StackUserAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackUserAssociation gets an existing StackUserAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackUserAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackUserAssociationState, opts ...pulumi.ResourceOption) (*StackUserAssociation, error) {
	var resource StackUserAssociation
	err := ctx.ReadResource("aws-native:appstream:StackUserAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackUserAssociation resources.
type stackUserAssociationState struct {
}

type StackUserAssociationState struct {
}

func (StackUserAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackUserAssociationState)(nil)).Elem()
}

type stackUserAssociationArgs struct {
	AuthenticationType    string `pulumi:"authenticationType"`
	SendEmailNotification *bool  `pulumi:"sendEmailNotification"`
	StackName             string `pulumi:"stackName"`
	UserName              string `pulumi:"userName"`
}

// The set of arguments for constructing a StackUserAssociation resource.
type StackUserAssociationArgs struct {
	AuthenticationType    pulumi.StringInput
	SendEmailNotification pulumi.BoolPtrInput
	StackName             pulumi.StringInput
	UserName              pulumi.StringInput
}

func (StackUserAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackUserAssociationArgs)(nil)).Elem()
}

type StackUserAssociationInput interface {
	pulumi.Input

	ToStackUserAssociationOutput() StackUserAssociationOutput
	ToStackUserAssociationOutputWithContext(ctx context.Context) StackUserAssociationOutput
}

func (*StackUserAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*StackUserAssociation)(nil))
}

func (i *StackUserAssociation) ToStackUserAssociationOutput() StackUserAssociationOutput {
	return i.ToStackUserAssociationOutputWithContext(context.Background())
}

func (i *StackUserAssociation) ToStackUserAssociationOutputWithContext(ctx context.Context) StackUserAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackUserAssociationOutput)
}

type StackUserAssociationOutput struct{ *pulumi.OutputState }

func (StackUserAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackUserAssociation)(nil))
}

func (o StackUserAssociationOutput) ToStackUserAssociationOutput() StackUserAssociationOutput {
	return o
}

func (o StackUserAssociationOutput) ToStackUserAssociationOutputWithContext(ctx context.Context) StackUserAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackUserAssociationOutput{})
}
