// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appstream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppStream::ImageBuilder
func LookupImageBuilder(ctx *pulumi.Context, args *LookupImageBuilderArgs, opts ...pulumi.InvokeOption) (*LookupImageBuilderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageBuilderResult
	err := ctx.Invoke("aws-native:appstream:getImageBuilder", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupImageBuilderArgs struct {
	// A unique name for the image builder.
	Name string `pulumi:"name"`
}

type LookupImageBuilderResult struct {
	// Describes an interface VPC endpoint (interface endpoint) that lets you create a private connection between the virtual private cloud (VPC) that you specify and AppStream 2.0. When you specify an interface endpoint for a stack, users of the stack can connect to AppStream 2.0 only through that endpoint. When you specify an interface endpoint for an image builder, administrators can connect to the image builder only through that endpoint.
	AccessEndpoints []ImageBuilderAccessEndpoint `pulumi:"accessEndpoints"`
	// The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST].
	AppstreamAgentVersion *string `pulumi:"appstreamAgentVersion"`
	// The description to display.
	Description *string `pulumi:"description"`
	// The image builder name to display.
	DisplayName *string `pulumi:"displayName"`
	// The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain.
	DomainJoinInfo *ImageBuilderDomainJoinInfo `pulumi:"domainJoinInfo"`
	// Enables or disables default internet access for the image builder.
	EnableDefaultInternetAccess *bool `pulumi:"enableDefaultInternetAccess"`
	// The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service `AssumeRole` API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the *appstream_machine_role* credential profile on the instance.
	//
	// For more information, see [Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances](https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html) in the *Amazon AppStream 2.0 Administration Guide* .
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// The ARN of the public, private, or shared image to use.
	ImageArn *string `pulumi:"imageArn"`
	// The name of the image used to create the image builder.
	ImageName *string `pulumi:"imageName"`
	// The instance type to use when launching the image builder. The following instance types are available:
	//
	// - stream.standard.small
	// - stream.standard.medium
	// - stream.standard.large
	// - stream.compute.large
	// - stream.compute.xlarge
	// - stream.compute.2xlarge
	// - stream.compute.4xlarge
	// - stream.compute.8xlarge
	// - stream.memory.large
	// - stream.memory.xlarge
	// - stream.memory.2xlarge
	// - stream.memory.4xlarge
	// - stream.memory.8xlarge
	// - stream.memory.z1d.large
	// - stream.memory.z1d.xlarge
	// - stream.memory.z1d.2xlarge
	// - stream.memory.z1d.3xlarge
	// - stream.memory.z1d.6xlarge
	// - stream.memory.z1d.12xlarge
	// - stream.graphics-design.large
	// - stream.graphics-design.xlarge
	// - stream.graphics-design.2xlarge
	// - stream.graphics-design.4xlarge
	// - stream.graphics-desktop.2xlarge
	// - stream.graphics.g4dn.xlarge
	// - stream.graphics.g4dn.2xlarge
	// - stream.graphics.g4dn.4xlarge
	// - stream.graphics.g4dn.8xlarge
	// - stream.graphics.g4dn.12xlarge
	// - stream.graphics.g4dn.16xlarge
	// - stream.graphics-pro.4xlarge
	// - stream.graphics-pro.8xlarge
	// - stream.graphics-pro.16xlarge
	InstanceType *string `pulumi:"instanceType"`
	// A unique name for the image builder.
	Name *string `pulumi:"name"`
	// The URL to start an image builder streaming session, returned as a string.
	StreamingUrl *string `pulumi:"streamingUrl"`
	// The tag of the image builder.
	Tags []aws.Tag `pulumi:"tags"`
	// The VPC configuration for the image builder.
	VpcConfig *ImageBuilderVpcConfig `pulumi:"vpcConfig"`
}

func LookupImageBuilderOutput(ctx *pulumi.Context, args LookupImageBuilderOutputArgs, opts ...pulumi.InvokeOption) LookupImageBuilderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImageBuilderResult, error) {
			args := v.(LookupImageBuilderArgs)
			r, err := LookupImageBuilder(ctx, &args, opts...)
			var s LookupImageBuilderResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImageBuilderResultOutput)
}

type LookupImageBuilderOutputArgs struct {
	// A unique name for the image builder.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupImageBuilderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageBuilderArgs)(nil)).Elem()
}

type LookupImageBuilderResultOutput struct{ *pulumi.OutputState }

func (LookupImageBuilderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageBuilderResult)(nil)).Elem()
}

func (o LookupImageBuilderResultOutput) ToLookupImageBuilderResultOutput() LookupImageBuilderResultOutput {
	return o
}

func (o LookupImageBuilderResultOutput) ToLookupImageBuilderResultOutputWithContext(ctx context.Context) LookupImageBuilderResultOutput {
	return o
}

// Describes an interface VPC endpoint (interface endpoint) that lets you create a private connection between the virtual private cloud (VPC) that you specify and AppStream 2.0. When you specify an interface endpoint for a stack, users of the stack can connect to AppStream 2.0 only through that endpoint. When you specify an interface endpoint for an image builder, administrators can connect to the image builder only through that endpoint.
func (o LookupImageBuilderResultOutput) AccessEndpoints() ImageBuilderAccessEndpointArrayOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) []ImageBuilderAccessEndpoint { return v.AccessEndpoints }).(ImageBuilderAccessEndpointArrayOutput)
}

// The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST].
func (o LookupImageBuilderResultOutput) AppstreamAgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.AppstreamAgentVersion }).(pulumi.StringPtrOutput)
}

// The description to display.
func (o LookupImageBuilderResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The image builder name to display.
func (o LookupImageBuilderResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain.
func (o LookupImageBuilderResultOutput) DomainJoinInfo() ImageBuilderDomainJoinInfoPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *ImageBuilderDomainJoinInfo { return v.DomainJoinInfo }).(ImageBuilderDomainJoinInfoPtrOutput)
}

// Enables or disables default internet access for the image builder.
func (o LookupImageBuilderResultOutput) EnableDefaultInternetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *bool { return v.EnableDefaultInternetAccess }).(pulumi.BoolPtrOutput)
}

// The ARN of the IAM role that is applied to the image builder. To assume a role, the image builder calls the AWS Security Token Service `AssumeRole` API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the *appstream_machine_role* credential profile on the instance.
//
// For more information, see [Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances](https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html) in the *Amazon AppStream 2.0 Administration Guide* .
func (o LookupImageBuilderResultOutput) IamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.IamRoleArn }).(pulumi.StringPtrOutput)
}

// The ARN of the public, private, or shared image to use.
func (o LookupImageBuilderResultOutput) ImageArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.ImageArn }).(pulumi.StringPtrOutput)
}

// The name of the image used to create the image builder.
func (o LookupImageBuilderResultOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// The instance type to use when launching the image builder. The following instance types are available:
//
// - stream.standard.small
// - stream.standard.medium
// - stream.standard.large
// - stream.compute.large
// - stream.compute.xlarge
// - stream.compute.2xlarge
// - stream.compute.4xlarge
// - stream.compute.8xlarge
// - stream.memory.large
// - stream.memory.xlarge
// - stream.memory.2xlarge
// - stream.memory.4xlarge
// - stream.memory.8xlarge
// - stream.memory.z1d.large
// - stream.memory.z1d.xlarge
// - stream.memory.z1d.2xlarge
// - stream.memory.z1d.3xlarge
// - stream.memory.z1d.6xlarge
// - stream.memory.z1d.12xlarge
// - stream.graphics-design.large
// - stream.graphics-design.xlarge
// - stream.graphics-design.2xlarge
// - stream.graphics-design.4xlarge
// - stream.graphics-desktop.2xlarge
// - stream.graphics.g4dn.xlarge
// - stream.graphics.g4dn.2xlarge
// - stream.graphics.g4dn.4xlarge
// - stream.graphics.g4dn.8xlarge
// - stream.graphics.g4dn.12xlarge
// - stream.graphics.g4dn.16xlarge
// - stream.graphics-pro.4xlarge
// - stream.graphics-pro.8xlarge
// - stream.graphics-pro.16xlarge
func (o LookupImageBuilderResultOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// A unique name for the image builder.
func (o LookupImageBuilderResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The URL to start an image builder streaming session, returned as a string.
func (o LookupImageBuilderResultOutput) StreamingUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *string { return v.StreamingUrl }).(pulumi.StringPtrOutput)
}

// The tag of the image builder.
func (o LookupImageBuilderResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The VPC configuration for the image builder.
func (o LookupImageBuilderResultOutput) VpcConfig() ImageBuilderVpcConfigPtrOutput {
	return o.ApplyT(func(v LookupImageBuilderResult) *ImageBuilderVpcConfig { return v.VpcConfig }).(ImageBuilderVpcConfigPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageBuilderResultOutput{})
}
