// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecretsManager::RotationSchedule
func LookupRotationSchedule(ctx *pulumi.Context, args *LookupRotationScheduleArgs, opts ...pulumi.InvokeOption) (*LookupRotationScheduleResult, error) {
	var rv LookupRotationScheduleResult
	err := ctx.Invoke("aws-native:secretsmanager:getRotationSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRotationScheduleArgs struct {
	Id string `pulumi:"id"`
}

type LookupRotationScheduleResult struct {
	HostedRotationLambda      *RotationScheduleHostedRotationLambda `pulumi:"hostedRotationLambda"`
	Id                        *string                               `pulumi:"id"`
	RotateImmediatelyOnUpdate *bool                                 `pulumi:"rotateImmediatelyOnUpdate"`
	RotationLambdaARN         *string                               `pulumi:"rotationLambdaARN"`
	RotationRules             *RotationScheduleRotationRules        `pulumi:"rotationRules"`
}

func LookupRotationScheduleOutput(ctx *pulumi.Context, args LookupRotationScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupRotationScheduleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRotationScheduleResult, error) {
			args := v.(LookupRotationScheduleArgs)
			r, err := LookupRotationSchedule(ctx, &args, opts...)
			return *r, err
		}).(LookupRotationScheduleResultOutput)
}

type LookupRotationScheduleOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupRotationScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRotationScheduleArgs)(nil)).Elem()
}

type LookupRotationScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupRotationScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRotationScheduleResult)(nil)).Elem()
}

func (o LookupRotationScheduleResultOutput) ToLookupRotationScheduleResultOutput() LookupRotationScheduleResultOutput {
	return o
}

func (o LookupRotationScheduleResultOutput) ToLookupRotationScheduleResultOutputWithContext(ctx context.Context) LookupRotationScheduleResultOutput {
	return o
}

func (o LookupRotationScheduleResultOutput) HostedRotationLambda() RotationScheduleHostedRotationLambdaPtrOutput {
	return o.ApplyT(func(v LookupRotationScheduleResult) *RotationScheduleHostedRotationLambda {
		return v.HostedRotationLambda
	}).(RotationScheduleHostedRotationLambdaPtrOutput)
}

func (o LookupRotationScheduleResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRotationScheduleResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupRotationScheduleResultOutput) RotateImmediatelyOnUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRotationScheduleResult) *bool { return v.RotateImmediatelyOnUpdate }).(pulumi.BoolPtrOutput)
}

func (o LookupRotationScheduleResultOutput) RotationLambdaARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRotationScheduleResult) *string { return v.RotationLambdaARN }).(pulumi.StringPtrOutput)
}

func (o LookupRotationScheduleResultOutput) RotationRules() RotationScheduleRotationRulesPtrOutput {
	return o.ApplyT(func(v LookupRotationScheduleResult) *RotationScheduleRotationRules { return v.RotationRules }).(RotationScheduleRotationRulesPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRotationScheduleResultOutput{})
}
