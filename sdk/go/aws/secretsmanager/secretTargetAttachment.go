// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecretsManager::SecretTargetAttachment
type SecretTargetAttachment struct {
	pulumi.CustomResourceState

	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The ARN or name of the secret. To reference a secret also created in this template, use the see [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html) function with the secret's logical ID. This field is unique for each target attachment definition.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// The ID of the database or cluster.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// A string that defines the type of service or database associated with the secret. This value instructs Secrets Manager how to update the secret with the details of the service or database. This value must be one of the following:
	//
	// - AWS::RDS::DBInstance
	// - AWS::RDS::DBCluster
	// - AWS::Redshift::Cluster
	// - AWS::RedshiftServerless::Namespace
	// - AWS::DocDB::DBInstance
	// - AWS::DocDB::DBCluster
	// - AWS::DocDBElastic::Cluster
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewSecretTargetAttachment registers a new resource with the given unique name, arguments, and options.
func NewSecretTargetAttachment(ctx *pulumi.Context,
	name string, args *SecretTargetAttachmentArgs, opts ...pulumi.ResourceOption) (*SecretTargetAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	if args.TargetType == nil {
		return nil, errors.New("invalid value for required argument 'TargetType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"secretId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecretTargetAttachment
	err := ctx.RegisterResource("aws-native:secretsmanager:SecretTargetAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretTargetAttachment gets an existing SecretTargetAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretTargetAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretTargetAttachmentState, opts ...pulumi.ResourceOption) (*SecretTargetAttachment, error) {
	var resource SecretTargetAttachment
	err := ctx.ReadResource("aws-native:secretsmanager:SecretTargetAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretTargetAttachment resources.
type secretTargetAttachmentState struct {
}

type SecretTargetAttachmentState struct {
}

func (SecretTargetAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretTargetAttachmentState)(nil)).Elem()
}

type secretTargetAttachmentArgs struct {
	// The ARN or name of the secret. To reference a secret also created in this template, use the see [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html) function with the secret's logical ID. This field is unique for each target attachment definition.
	SecretId string `pulumi:"secretId"`
	// The ID of the database or cluster.
	TargetId string `pulumi:"targetId"`
	// A string that defines the type of service or database associated with the secret. This value instructs Secrets Manager how to update the secret with the details of the service or database. This value must be one of the following:
	//
	// - AWS::RDS::DBInstance
	// - AWS::RDS::DBCluster
	// - AWS::Redshift::Cluster
	// - AWS::RedshiftServerless::Namespace
	// - AWS::DocDB::DBInstance
	// - AWS::DocDB::DBCluster
	// - AWS::DocDBElastic::Cluster
	TargetType string `pulumi:"targetType"`
}

// The set of arguments for constructing a SecretTargetAttachment resource.
type SecretTargetAttachmentArgs struct {
	// The ARN or name of the secret. To reference a secret also created in this template, use the see [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html) function with the secret's logical ID. This field is unique for each target attachment definition.
	SecretId pulumi.StringInput
	// The ID of the database or cluster.
	TargetId pulumi.StringInput
	// A string that defines the type of service or database associated with the secret. This value instructs Secrets Manager how to update the secret with the details of the service or database. This value must be one of the following:
	//
	// - AWS::RDS::DBInstance
	// - AWS::RDS::DBCluster
	// - AWS::Redshift::Cluster
	// - AWS::RedshiftServerless::Namespace
	// - AWS::DocDB::DBInstance
	// - AWS::DocDB::DBCluster
	// - AWS::DocDBElastic::Cluster
	TargetType pulumi.StringInput
}

func (SecretTargetAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretTargetAttachmentArgs)(nil)).Elem()
}

type SecretTargetAttachmentInput interface {
	pulumi.Input

	ToSecretTargetAttachmentOutput() SecretTargetAttachmentOutput
	ToSecretTargetAttachmentOutputWithContext(ctx context.Context) SecretTargetAttachmentOutput
}

func (*SecretTargetAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretTargetAttachment)(nil)).Elem()
}

func (i *SecretTargetAttachment) ToSecretTargetAttachmentOutput() SecretTargetAttachmentOutput {
	return i.ToSecretTargetAttachmentOutputWithContext(context.Background())
}

func (i *SecretTargetAttachment) ToSecretTargetAttachmentOutputWithContext(ctx context.Context) SecretTargetAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTargetAttachmentOutput)
}

type SecretTargetAttachmentOutput struct{ *pulumi.OutputState }

func (SecretTargetAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretTargetAttachment)(nil)).Elem()
}

func (o SecretTargetAttachmentOutput) ToSecretTargetAttachmentOutput() SecretTargetAttachmentOutput {
	return o
}

func (o SecretTargetAttachmentOutput) ToSecretTargetAttachmentOutputWithContext(ctx context.Context) SecretTargetAttachmentOutput {
	return o
}

func (o SecretTargetAttachmentOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTargetAttachment) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The ARN or name of the secret. To reference a secret also created in this template, use the see [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html) function with the secret's logical ID. This field is unique for each target attachment definition.
func (o SecretTargetAttachmentOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTargetAttachment) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// The ID of the database or cluster.
func (o SecretTargetAttachmentOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTargetAttachment) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

// A string that defines the type of service or database associated with the secret. This value instructs Secrets Manager how to update the secret with the details of the service or database. This value must be one of the following:
//
// - AWS::RDS::DBInstance
// - AWS::RDS::DBCluster
// - AWS::Redshift::Cluster
// - AWS::RedshiftServerless::Namespace
// - AWS::DocDB::DBInstance
// - AWS::DocDB::DBCluster
// - AWS::DocDBElastic::Cluster
func (o SecretTargetAttachmentOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretTargetAttachment) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTargetAttachmentInput)(nil)).Elem(), &SecretTargetAttachment{})
	pulumi.RegisterOutputType(SecretTargetAttachmentOutput{})
}
