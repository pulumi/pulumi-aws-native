// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Generates a random password. We recommend that you specify the maximum length and include every character type that the system you are generating a password for can support.
//
//	*Required permissions:* ``secretsmanager:GetRandomPassword``. For more information, see [IAM policy actions for Secrets Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#awssecretsmanager-actions-as-permissions) and [Authentication and access control in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
type SecretGenerateSecretString struct {
	// A string of the characters that you don't want in the password.
	ExcludeCharacters *string `pulumi:"excludeCharacters"`
	// Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.
	ExcludeLowercase *bool `pulumi:"excludeLowercase"`
	// Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.
	ExcludeNumbers *bool `pulumi:"excludeNumbers"`
	// Specifies whether to exclude the following punctuation characters from the password: ``! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~``. If you don't include this switch, the password can contain punctuation.
	ExcludePunctuation *bool `pulumi:"excludePunctuation"`
	// Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.
	ExcludeUppercase *bool `pulumi:"excludeUppercase"`
	// The JSON key name for the key/value pair, where the value is the generated password. This pair is added to the JSON structure specified by the ``SecretStringTemplate`` parameter. If you specify this parameter, then you must also specify ``SecretStringTemplate``.
	GenerateStringKey *string `pulumi:"generateStringKey"`
	// Specifies whether to include the space character. If you include this switch, the password can contain space characters.
	IncludeSpace *bool `pulumi:"includeSpace"`
	// The length of the password. If you don't include this parameter, the default length is 32 characters.
	PasswordLength *int `pulumi:"passwordLength"`
	// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.
	RequireEachIncludedType *bool `pulumi:"requireEachIncludedType"`
	// A template that the generated string must match. When you make a change to this property, a new secret version is created.
	SecretStringTemplate *string `pulumi:"secretStringTemplate"`
}

// SecretGenerateSecretStringInput is an input type that accepts SecretGenerateSecretStringArgs and SecretGenerateSecretStringOutput values.
// You can construct a concrete instance of `SecretGenerateSecretStringInput` via:
//
//	SecretGenerateSecretStringArgs{...}
type SecretGenerateSecretStringInput interface {
	pulumi.Input

	ToSecretGenerateSecretStringOutput() SecretGenerateSecretStringOutput
	ToSecretGenerateSecretStringOutputWithContext(context.Context) SecretGenerateSecretStringOutput
}

// Generates a random password. We recommend that you specify the maximum length and include every character type that the system you are generating a password for can support.
//
//	*Required permissions:* ``secretsmanager:GetRandomPassword``. For more information, see [IAM policy actions for Secrets Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#awssecretsmanager-actions-as-permissions) and [Authentication and access control in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
type SecretGenerateSecretStringArgs struct {
	// A string of the characters that you don't want in the password.
	ExcludeCharacters pulumi.StringPtrInput `pulumi:"excludeCharacters"`
	// Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.
	ExcludeLowercase pulumi.BoolPtrInput `pulumi:"excludeLowercase"`
	// Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.
	ExcludeNumbers pulumi.BoolPtrInput `pulumi:"excludeNumbers"`
	// Specifies whether to exclude the following punctuation characters from the password: ``! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~``. If you don't include this switch, the password can contain punctuation.
	ExcludePunctuation pulumi.BoolPtrInput `pulumi:"excludePunctuation"`
	// Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.
	ExcludeUppercase pulumi.BoolPtrInput `pulumi:"excludeUppercase"`
	// The JSON key name for the key/value pair, where the value is the generated password. This pair is added to the JSON structure specified by the ``SecretStringTemplate`` parameter. If you specify this parameter, then you must also specify ``SecretStringTemplate``.
	GenerateStringKey pulumi.StringPtrInput `pulumi:"generateStringKey"`
	// Specifies whether to include the space character. If you include this switch, the password can contain space characters.
	IncludeSpace pulumi.BoolPtrInput `pulumi:"includeSpace"`
	// The length of the password. If you don't include this parameter, the default length is 32 characters.
	PasswordLength pulumi.IntPtrInput `pulumi:"passwordLength"`
	// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.
	RequireEachIncludedType pulumi.BoolPtrInput `pulumi:"requireEachIncludedType"`
	// A template that the generated string must match. When you make a change to this property, a new secret version is created.
	SecretStringTemplate pulumi.StringPtrInput `pulumi:"secretStringTemplate"`
}

func (SecretGenerateSecretStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretGenerateSecretString)(nil)).Elem()
}

func (i SecretGenerateSecretStringArgs) ToSecretGenerateSecretStringOutput() SecretGenerateSecretStringOutput {
	return i.ToSecretGenerateSecretStringOutputWithContext(context.Background())
}

func (i SecretGenerateSecretStringArgs) ToSecretGenerateSecretStringOutputWithContext(ctx context.Context) SecretGenerateSecretStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretGenerateSecretStringOutput)
}

func (i SecretGenerateSecretStringArgs) ToSecretGenerateSecretStringPtrOutput() SecretGenerateSecretStringPtrOutput {
	return i.ToSecretGenerateSecretStringPtrOutputWithContext(context.Background())
}

func (i SecretGenerateSecretStringArgs) ToSecretGenerateSecretStringPtrOutputWithContext(ctx context.Context) SecretGenerateSecretStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretGenerateSecretStringOutput).ToSecretGenerateSecretStringPtrOutputWithContext(ctx)
}

// SecretGenerateSecretStringPtrInput is an input type that accepts SecretGenerateSecretStringArgs, SecretGenerateSecretStringPtr and SecretGenerateSecretStringPtrOutput values.
// You can construct a concrete instance of `SecretGenerateSecretStringPtrInput` via:
//
//	        SecretGenerateSecretStringArgs{...}
//
//	or:
//
//	        nil
type SecretGenerateSecretStringPtrInput interface {
	pulumi.Input

	ToSecretGenerateSecretStringPtrOutput() SecretGenerateSecretStringPtrOutput
	ToSecretGenerateSecretStringPtrOutputWithContext(context.Context) SecretGenerateSecretStringPtrOutput
}

type secretGenerateSecretStringPtrType SecretGenerateSecretStringArgs

func SecretGenerateSecretStringPtr(v *SecretGenerateSecretStringArgs) SecretGenerateSecretStringPtrInput {
	return (*secretGenerateSecretStringPtrType)(v)
}

func (*secretGenerateSecretStringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretGenerateSecretString)(nil)).Elem()
}

func (i *secretGenerateSecretStringPtrType) ToSecretGenerateSecretStringPtrOutput() SecretGenerateSecretStringPtrOutput {
	return i.ToSecretGenerateSecretStringPtrOutputWithContext(context.Background())
}

func (i *secretGenerateSecretStringPtrType) ToSecretGenerateSecretStringPtrOutputWithContext(ctx context.Context) SecretGenerateSecretStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretGenerateSecretStringPtrOutput)
}

// Generates a random password. We recommend that you specify the maximum length and include every character type that the system you are generating a password for can support.
//
//	*Required permissions:* ``secretsmanager:GetRandomPassword``. For more information, see [IAM policy actions for Secrets Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#awssecretsmanager-actions-as-permissions) and [Authentication and access control in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
type SecretGenerateSecretStringOutput struct{ *pulumi.OutputState }

func (SecretGenerateSecretStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretGenerateSecretString)(nil)).Elem()
}

func (o SecretGenerateSecretStringOutput) ToSecretGenerateSecretStringOutput() SecretGenerateSecretStringOutput {
	return o
}

func (o SecretGenerateSecretStringOutput) ToSecretGenerateSecretStringOutputWithContext(ctx context.Context) SecretGenerateSecretStringOutput {
	return o
}

func (o SecretGenerateSecretStringOutput) ToSecretGenerateSecretStringPtrOutput() SecretGenerateSecretStringPtrOutput {
	return o.ToSecretGenerateSecretStringPtrOutputWithContext(context.Background())
}

func (o SecretGenerateSecretStringOutput) ToSecretGenerateSecretStringPtrOutputWithContext(ctx context.Context) SecretGenerateSecretStringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretGenerateSecretString) *SecretGenerateSecretString {
		return &v
	}).(SecretGenerateSecretStringPtrOutput)
}

// A string of the characters that you don't want in the password.
func (o SecretGenerateSecretStringOutput) ExcludeCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *string { return v.ExcludeCharacters }).(pulumi.StringPtrOutput)
}

// Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.
func (o SecretGenerateSecretStringOutput) ExcludeLowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *bool { return v.ExcludeLowercase }).(pulumi.BoolPtrOutput)
}

// Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.
func (o SecretGenerateSecretStringOutput) ExcludeNumbers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *bool { return v.ExcludeNumbers }).(pulumi.BoolPtrOutput)
}

// Specifies whether to exclude the following punctuation characters from the password: “! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~“. If you don't include this switch, the password can contain punctuation.
func (o SecretGenerateSecretStringOutput) ExcludePunctuation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *bool { return v.ExcludePunctuation }).(pulumi.BoolPtrOutput)
}

// Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.
func (o SecretGenerateSecretStringOutput) ExcludeUppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *bool { return v.ExcludeUppercase }).(pulumi.BoolPtrOutput)
}

// The JSON key name for the key/value pair, where the value is the generated password. This pair is added to the JSON structure specified by the “SecretStringTemplate“ parameter. If you specify this parameter, then you must also specify “SecretStringTemplate“.
func (o SecretGenerateSecretStringOutput) GenerateStringKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *string { return v.GenerateStringKey }).(pulumi.StringPtrOutput)
}

// Specifies whether to include the space character. If you include this switch, the password can contain space characters.
func (o SecretGenerateSecretStringOutput) IncludeSpace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *bool { return v.IncludeSpace }).(pulumi.BoolPtrOutput)
}

// The length of the password. If you don't include this parameter, the default length is 32 characters.
func (o SecretGenerateSecretStringOutput) PasswordLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *int { return v.PasswordLength }).(pulumi.IntPtrOutput)
}

// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.
func (o SecretGenerateSecretStringOutput) RequireEachIncludedType() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *bool { return v.RequireEachIncludedType }).(pulumi.BoolPtrOutput)
}

// A template that the generated string must match. When you make a change to this property, a new secret version is created.
func (o SecretGenerateSecretStringOutput) SecretStringTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretGenerateSecretString) *string { return v.SecretStringTemplate }).(pulumi.StringPtrOutput)
}

type SecretGenerateSecretStringPtrOutput struct{ *pulumi.OutputState }

func (SecretGenerateSecretStringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretGenerateSecretString)(nil)).Elem()
}

func (o SecretGenerateSecretStringPtrOutput) ToSecretGenerateSecretStringPtrOutput() SecretGenerateSecretStringPtrOutput {
	return o
}

func (o SecretGenerateSecretStringPtrOutput) ToSecretGenerateSecretStringPtrOutputWithContext(ctx context.Context) SecretGenerateSecretStringPtrOutput {
	return o
}

func (o SecretGenerateSecretStringPtrOutput) Elem() SecretGenerateSecretStringOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) SecretGenerateSecretString {
		if v != nil {
			return *v
		}
		var ret SecretGenerateSecretString
		return ret
	}).(SecretGenerateSecretStringOutput)
}

// A string of the characters that you don't want in the password.
func (o SecretGenerateSecretStringPtrOutput) ExcludeCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *string {
		if v == nil {
			return nil
		}
		return v.ExcludeCharacters
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.
func (o SecretGenerateSecretStringPtrOutput) ExcludeLowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeLowercase
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.
func (o SecretGenerateSecretStringPtrOutput) ExcludeNumbers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeNumbers
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to exclude the following punctuation characters from the password: “! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~“. If you don't include this switch, the password can contain punctuation.
func (o SecretGenerateSecretStringPtrOutput) ExcludePunctuation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludePunctuation
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.
func (o SecretGenerateSecretStringPtrOutput) ExcludeUppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeUppercase
	}).(pulumi.BoolPtrOutput)
}

// The JSON key name for the key/value pair, where the value is the generated password. This pair is added to the JSON structure specified by the “SecretStringTemplate“ parameter. If you specify this parameter, then you must also specify “SecretStringTemplate“.
func (o SecretGenerateSecretStringPtrOutput) GenerateStringKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *string {
		if v == nil {
			return nil
		}
		return v.GenerateStringKey
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to include the space character. If you include this switch, the password can contain space characters.
func (o SecretGenerateSecretStringPtrOutput) IncludeSpace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeSpace
	}).(pulumi.BoolPtrOutput)
}

// The length of the password. If you don't include this parameter, the default length is 32 characters.
func (o SecretGenerateSecretStringPtrOutput) PasswordLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *int {
		if v == nil {
			return nil
		}
		return v.PasswordLength
	}).(pulumi.IntPtrOutput)
}

// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.
func (o SecretGenerateSecretStringPtrOutput) RequireEachIncludedType() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *bool {
		if v == nil {
			return nil
		}
		return v.RequireEachIncludedType
	}).(pulumi.BoolPtrOutput)
}

// A template that the generated string must match. When you make a change to this property, a new secret version is created.
func (o SecretGenerateSecretStringPtrOutput) SecretStringTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretGenerateSecretString) *string {
		if v == nil {
			return nil
		}
		return v.SecretStringTemplate
	}).(pulumi.StringPtrOutput)
}

// Specifies a “Region“ and the “KmsKeyId“ for a replica secret.
type SecretReplicaRegion struct {
	// The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses ``aws/secretsmanager``.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// A string that represents a ``Region``, for example "us-east-1".
	Region string `pulumi:"region"`
}

// SecretReplicaRegionInput is an input type that accepts SecretReplicaRegionArgs and SecretReplicaRegionOutput values.
// You can construct a concrete instance of `SecretReplicaRegionInput` via:
//
//	SecretReplicaRegionArgs{...}
type SecretReplicaRegionInput interface {
	pulumi.Input

	ToSecretReplicaRegionOutput() SecretReplicaRegionOutput
	ToSecretReplicaRegionOutputWithContext(context.Context) SecretReplicaRegionOutput
}

// Specifies a “Region“ and the “KmsKeyId“ for a replica secret.
type SecretReplicaRegionArgs struct {
	// The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses ``aws/secretsmanager``.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// A string that represents a ``Region``, for example "us-east-1".
	Region pulumi.StringInput `pulumi:"region"`
}

func (SecretReplicaRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReplicaRegion)(nil)).Elem()
}

func (i SecretReplicaRegionArgs) ToSecretReplicaRegionOutput() SecretReplicaRegionOutput {
	return i.ToSecretReplicaRegionOutputWithContext(context.Background())
}

func (i SecretReplicaRegionArgs) ToSecretReplicaRegionOutputWithContext(ctx context.Context) SecretReplicaRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReplicaRegionOutput)
}

// SecretReplicaRegionArrayInput is an input type that accepts SecretReplicaRegionArray and SecretReplicaRegionArrayOutput values.
// You can construct a concrete instance of `SecretReplicaRegionArrayInput` via:
//
//	SecretReplicaRegionArray{ SecretReplicaRegionArgs{...} }
type SecretReplicaRegionArrayInput interface {
	pulumi.Input

	ToSecretReplicaRegionArrayOutput() SecretReplicaRegionArrayOutput
	ToSecretReplicaRegionArrayOutputWithContext(context.Context) SecretReplicaRegionArrayOutput
}

type SecretReplicaRegionArray []SecretReplicaRegionInput

func (SecretReplicaRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReplicaRegion)(nil)).Elem()
}

func (i SecretReplicaRegionArray) ToSecretReplicaRegionArrayOutput() SecretReplicaRegionArrayOutput {
	return i.ToSecretReplicaRegionArrayOutputWithContext(context.Background())
}

func (i SecretReplicaRegionArray) ToSecretReplicaRegionArrayOutputWithContext(ctx context.Context) SecretReplicaRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReplicaRegionArrayOutput)
}

// Specifies a “Region“ and the “KmsKeyId“ for a replica secret.
type SecretReplicaRegionOutput struct{ *pulumi.OutputState }

func (SecretReplicaRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReplicaRegion)(nil)).Elem()
}

func (o SecretReplicaRegionOutput) ToSecretReplicaRegionOutput() SecretReplicaRegionOutput {
	return o
}

func (o SecretReplicaRegionOutput) ToSecretReplicaRegionOutputWithContext(ctx context.Context) SecretReplicaRegionOutput {
	return o
}

// The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses “aws/secretsmanager“.
func (o SecretReplicaRegionOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReplicaRegion) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// A string that represents a “Region“, for example "us-east-1".
func (o SecretReplicaRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReplicaRegion) string { return v.Region }).(pulumi.StringOutput)
}

type SecretReplicaRegionArrayOutput struct{ *pulumi.OutputState }

func (SecretReplicaRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReplicaRegion)(nil)).Elem()
}

func (o SecretReplicaRegionArrayOutput) ToSecretReplicaRegionArrayOutput() SecretReplicaRegionArrayOutput {
	return o
}

func (o SecretReplicaRegionArrayOutput) ToSecretReplicaRegionArrayOutputWithContext(ctx context.Context) SecretReplicaRegionArrayOutput {
	return o
}

func (o SecretReplicaRegionArrayOutput) Index(i pulumi.IntInput) SecretReplicaRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretReplicaRegion {
		return vs[0].([]SecretReplicaRegion)[vs[1].(int)]
	}).(SecretReplicaRegionOutput)
}

// A structure that contains information about a tag.
type SecretTag struct {
	// The key identifier, or name, of the tag.
	Key string `pulumi:"key"`
	// The string value associated with the key of the tag.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretGenerateSecretStringInput)(nil)).Elem(), SecretGenerateSecretStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretGenerateSecretStringPtrInput)(nil)).Elem(), SecretGenerateSecretStringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretReplicaRegionInput)(nil)).Elem(), SecretReplicaRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretReplicaRegionArrayInput)(nil)).Elem(), SecretReplicaRegionArray{})
	pulumi.RegisterOutputType(SecretGenerateSecretStringOutput{})
	pulumi.RegisterOutputType(SecretGenerateSecretStringPtrOutput{})
	pulumi.RegisterOutputType(SecretReplicaRegionOutput{})
	pulumi.RegisterOutputType(SecretReplicaRegionArrayOutput{})
}
