// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package secretsmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecretsManager::Secret
//
// Deprecated: Secret is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Secret struct {
	pulumi.CustomResourceState

	Description          pulumi.StringPtrOutput              `pulumi:"description"`
	GenerateSecretString SecretGenerateSecretStringPtrOutput `pulumi:"generateSecretString"`
	KmsKeyId             pulumi.StringPtrOutput              `pulumi:"kmsKeyId"`
	Name                 pulumi.StringPtrOutput              `pulumi:"name"`
	ReplicaRegions       SecretReplicaRegionArrayOutput      `pulumi:"replicaRegions"`
	SecretString         pulumi.StringPtrOutput              `pulumi:"secretString"`
	Tags                 SecretTagArrayOutput                `pulumi:"tags"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		args = &SecretArgs{}
	}

	var resource Secret
	err := ctx.RegisterResource("aws-native:secretsmanager:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("aws-native:secretsmanager:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
}

type SecretState struct {
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	Description          *string                     `pulumi:"description"`
	GenerateSecretString *SecretGenerateSecretString `pulumi:"generateSecretString"`
	KmsKeyId             *string                     `pulumi:"kmsKeyId"`
	Name                 *string                     `pulumi:"name"`
	ReplicaRegions       []SecretReplicaRegion       `pulumi:"replicaRegions"`
	SecretString         *string                     `pulumi:"secretString"`
	Tags                 []SecretTag                 `pulumi:"tags"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	Description          pulumi.StringPtrInput
	GenerateSecretString SecretGenerateSecretStringPtrInput
	KmsKeyId             pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	ReplicaRegions       SecretReplicaRegionArrayInput
	SecretString         pulumi.StringPtrInput
	Tags                 SecretTagArrayInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil))
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil))
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterOutputType(SecretOutput{})
}
