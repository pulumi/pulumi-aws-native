// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type LinkResourceType string

const (
	LinkResourceTypeAwsCloudWatchMetric = LinkResourceType("AWS::CloudWatch::Metric")
	LinkResourceTypeAwsLogsLogGroup     = LinkResourceType("AWS::Logs::LogGroup")
	LinkResourceTypeAwsxRayTrace        = LinkResourceType("AWS::XRay::Trace")
)

func (LinkResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkResourceType)(nil)).Elem()
}

func (e LinkResourceType) ToLinkResourceTypeOutput() LinkResourceTypeOutput {
	return pulumi.ToOutput(e).(LinkResourceTypeOutput)
}

func (e LinkResourceType) ToLinkResourceTypeOutputWithContext(ctx context.Context) LinkResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LinkResourceTypeOutput)
}

func (e LinkResourceType) ToLinkResourceTypePtrOutput() LinkResourceTypePtrOutput {
	return e.ToLinkResourceTypePtrOutputWithContext(context.Background())
}

func (e LinkResourceType) ToLinkResourceTypePtrOutputWithContext(ctx context.Context) LinkResourceTypePtrOutput {
	return LinkResourceType(e).ToLinkResourceTypeOutputWithContext(ctx).ToLinkResourceTypePtrOutputWithContext(ctx)
}

func (e LinkResourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkResourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkResourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LinkResourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LinkResourceTypeOutput struct{ *pulumi.OutputState }

func (LinkResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkResourceType)(nil)).Elem()
}

func (o LinkResourceTypeOutput) ToLinkResourceTypeOutput() LinkResourceTypeOutput {
	return o
}

func (o LinkResourceTypeOutput) ToLinkResourceTypeOutputWithContext(ctx context.Context) LinkResourceTypeOutput {
	return o
}

func (o LinkResourceTypeOutput) ToLinkResourceTypePtrOutput() LinkResourceTypePtrOutput {
	return o.ToLinkResourceTypePtrOutputWithContext(context.Background())
}

func (o LinkResourceTypeOutput) ToLinkResourceTypePtrOutputWithContext(ctx context.Context) LinkResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkResourceType) *LinkResourceType {
		return &v
	}).(LinkResourceTypePtrOutput)
}

func (o LinkResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[LinkResourceType] {
	return pulumix.Output[LinkResourceType]{
		OutputState: o.OutputState,
	}
}

func (o LinkResourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LinkResourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LinkResourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LinkResourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LinkResourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LinkResourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LinkResourceTypePtrOutput struct{ *pulumi.OutputState }

func (LinkResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkResourceType)(nil)).Elem()
}

func (o LinkResourceTypePtrOutput) ToLinkResourceTypePtrOutput() LinkResourceTypePtrOutput {
	return o
}

func (o LinkResourceTypePtrOutput) ToLinkResourceTypePtrOutputWithContext(ctx context.Context) LinkResourceTypePtrOutput {
	return o
}

func (o LinkResourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LinkResourceType] {
	return pulumix.Output[*LinkResourceType]{
		OutputState: o.OutputState,
	}
}

func (o LinkResourceTypePtrOutput) Elem() LinkResourceTypeOutput {
	return o.ApplyT(func(v *LinkResourceType) LinkResourceType {
		if v != nil {
			return *v
		}
		var ret LinkResourceType
		return ret
	}).(LinkResourceTypeOutput)
}

func (o LinkResourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LinkResourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LinkResourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LinkResourceTypeInput is an input type that accepts LinkResourceTypeArgs and LinkResourceTypeOutput values.
// You can construct a concrete instance of `LinkResourceTypeInput` via:
//
//	LinkResourceTypeArgs{...}
type LinkResourceTypeInput interface {
	pulumi.Input

	ToLinkResourceTypeOutput() LinkResourceTypeOutput
	ToLinkResourceTypeOutputWithContext(context.Context) LinkResourceTypeOutput
}

var linkResourceTypePtrType = reflect.TypeOf((**LinkResourceType)(nil)).Elem()

type LinkResourceTypePtrInput interface {
	pulumi.Input

	ToLinkResourceTypePtrOutput() LinkResourceTypePtrOutput
	ToLinkResourceTypePtrOutputWithContext(context.Context) LinkResourceTypePtrOutput
}

type linkResourceTypePtr string

func LinkResourceTypePtr(v string) LinkResourceTypePtrInput {
	return (*linkResourceTypePtr)(&v)
}

func (*linkResourceTypePtr) ElementType() reflect.Type {
	return linkResourceTypePtrType
}

func (in *linkResourceTypePtr) ToLinkResourceTypePtrOutput() LinkResourceTypePtrOutput {
	return pulumi.ToOutput(in).(LinkResourceTypePtrOutput)
}

func (in *linkResourceTypePtr) ToLinkResourceTypePtrOutputWithContext(ctx context.Context) LinkResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LinkResourceTypePtrOutput)
}

func (in *linkResourceTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LinkResourceType] {
	return pulumix.Output[*LinkResourceType]{
		OutputState: in.ToLinkResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

// LinkResourceTypeArrayInput is an input type that accepts LinkResourceTypeArray and LinkResourceTypeArrayOutput values.
// You can construct a concrete instance of `LinkResourceTypeArrayInput` via:
//
//	LinkResourceTypeArray{ LinkResourceTypeArgs{...} }
type LinkResourceTypeArrayInput interface {
	pulumi.Input

	ToLinkResourceTypeArrayOutput() LinkResourceTypeArrayOutput
	ToLinkResourceTypeArrayOutputWithContext(context.Context) LinkResourceTypeArrayOutput
}

type LinkResourceTypeArray []LinkResourceType

func (LinkResourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkResourceType)(nil)).Elem()
}

func (i LinkResourceTypeArray) ToLinkResourceTypeArrayOutput() LinkResourceTypeArrayOutput {
	return i.ToLinkResourceTypeArrayOutputWithContext(context.Background())
}

func (i LinkResourceTypeArray) ToLinkResourceTypeArrayOutputWithContext(ctx context.Context) LinkResourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkResourceTypeArrayOutput)
}

func (i LinkResourceTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]LinkResourceType] {
	return pulumix.Output[[]LinkResourceType]{
		OutputState: i.ToLinkResourceTypeArrayOutputWithContext(ctx).OutputState,
	}
}

type LinkResourceTypeArrayOutput struct{ *pulumi.OutputState }

func (LinkResourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkResourceType)(nil)).Elem()
}

func (o LinkResourceTypeArrayOutput) ToLinkResourceTypeArrayOutput() LinkResourceTypeArrayOutput {
	return o
}

func (o LinkResourceTypeArrayOutput) ToLinkResourceTypeArrayOutputWithContext(ctx context.Context) LinkResourceTypeArrayOutput {
	return o
}

func (o LinkResourceTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LinkResourceType] {
	return pulumix.Output[[]LinkResourceType]{
		OutputState: o.OutputState,
	}
}

func (o LinkResourceTypeArrayOutput) Index(i pulumi.IntInput) LinkResourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkResourceType {
		return vs[0].([]LinkResourceType)[vs[1].(int)]
	}).(LinkResourceTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkResourceTypeInput)(nil)).Elem(), LinkResourceType("AWS::CloudWatch::Metric"))
	pulumi.RegisterInputType(reflect.TypeOf((*LinkResourceTypePtrInput)(nil)).Elem(), LinkResourceType("AWS::CloudWatch::Metric"))
	pulumi.RegisterInputType(reflect.TypeOf((*LinkResourceTypeArrayInput)(nil)).Elem(), LinkResourceTypeArray{})
	pulumi.RegisterOutputType(LinkResourceTypeOutput{})
	pulumi.RegisterOutputType(LinkResourceTypePtrOutput{})
	pulumi.RegisterOutputType(LinkResourceTypeArrayOutput{})
}
