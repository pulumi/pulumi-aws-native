// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::PCS::ComputeNodeGroup resource creates an AWS PCS compute node group.
type ComputeNodeGroup struct {
	pulumi.CustomResourceState

	// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
	AmiId pulumi.StringPtrOutput `pulumi:"amiId"`
	// The unique Amazon Resource Name (ARN) of the compute node group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The generated unique ID of the compute node group.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The ID of the cluster of the compute node group.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
	CustomLaunchTemplate CustomLaunchTemplatePropertiesOutput `pulumi:"customLaunchTemplate"`
	// The list of errors that occurred during compute node group provisioning.
	ErrorInfo ComputeNodeGroupErrorInfoArrayOutput `pulumi:"errorInfo"`
	// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
	IamInstanceProfileArn pulumi.StringOutput `pulumi:"iamInstanceProfileArn"`
	// A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
	InstanceConfigs ComputeNodeGroupInstanceConfigArrayOutput `pulumi:"instanceConfigs"`
	// The name that identifies the compute node group.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
	PurchaseOption ComputeNodeGroupPurchaseOptionPtrOutput `pulumi:"purchaseOption"`
	// Specifies the boundaries of the compute node group auto scaling.
	ScalingConfiguration ScalingConfigurationPropertiesOutput `pulumi:"scalingConfiguration"`
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration SlurmConfigurationPropertiesPtrOutput `pulumi:"slurmConfiguration"`
	// Additional configuration when you specify SPOT as the purchase option.
	SpotOptions SpotOptionsPropertiesPtrOutput `pulumi:"spotOptions"`
	// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
	Status ComputeNodeGroupStatusOutput `pulumi:"status"`
	// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewComputeNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewComputeNodeGroup(ctx *pulumi.Context,
	name string, args *ComputeNodeGroupArgs, opts ...pulumi.ResourceOption) (*ComputeNodeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.CustomLaunchTemplate == nil {
		return nil, errors.New("invalid value for required argument 'CustomLaunchTemplate'")
	}
	if args.IamInstanceProfileArn == nil {
		return nil, errors.New("invalid value for required argument 'IamInstanceProfileArn'")
	}
	if args.InstanceConfigs == nil {
		return nil, errors.New("invalid value for required argument 'InstanceConfigs'")
	}
	if args.ScalingConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ScalingConfiguration'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterId",
		"instanceConfigs[*]",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeNodeGroup
	err := ctx.RegisterResource("aws-native:pcs:ComputeNodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeNodeGroup gets an existing ComputeNodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeNodeGroupState, opts ...pulumi.ResourceOption) (*ComputeNodeGroup, error) {
	var resource ComputeNodeGroup
	err := ctx.ReadResource("aws-native:pcs:ComputeNodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeNodeGroup resources.
type computeNodeGroupState struct {
}

type ComputeNodeGroupState struct {
}

func (ComputeNodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNodeGroupState)(nil)).Elem()
}

type computeNodeGroupArgs struct {
	// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
	AmiId *string `pulumi:"amiId"`
	// The ID of the cluster of the compute node group.
	ClusterId string `pulumi:"clusterId"`
	// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
	CustomLaunchTemplate CustomLaunchTemplateProperties `pulumi:"customLaunchTemplate"`
	// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
	IamInstanceProfileArn string `pulumi:"iamInstanceProfileArn"`
	// A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
	InstanceConfigs []ComputeNodeGroupInstanceConfig `pulumi:"instanceConfigs"`
	// The name that identifies the compute node group.
	Name *string `pulumi:"name"`
	// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
	PurchaseOption *ComputeNodeGroupPurchaseOption `pulumi:"purchaseOption"`
	// Specifies the boundaries of the compute node group auto scaling.
	ScalingConfiguration ScalingConfigurationProperties `pulumi:"scalingConfiguration"`
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration *SlurmConfigurationProperties `pulumi:"slurmConfiguration"`
	// Additional configuration when you specify SPOT as the purchase option.
	SpotOptions *SpotOptionsProperties `pulumi:"spotOptions"`
	// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
	SubnetIds []string `pulumi:"subnetIds"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ComputeNodeGroup resource.
type ComputeNodeGroupArgs struct {
	// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
	AmiId pulumi.StringPtrInput
	// The ID of the cluster of the compute node group.
	ClusterId pulumi.StringInput
	// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
	CustomLaunchTemplate CustomLaunchTemplatePropertiesInput
	// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
	IamInstanceProfileArn pulumi.StringInput
	// A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
	InstanceConfigs ComputeNodeGroupInstanceConfigArrayInput
	// The name that identifies the compute node group.
	Name pulumi.StringPtrInput
	// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
	PurchaseOption ComputeNodeGroupPurchaseOptionPtrInput
	// Specifies the boundaries of the compute node group auto scaling.
	ScalingConfiguration ScalingConfigurationPropertiesInput
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration SlurmConfigurationPropertiesPtrInput
	// Additional configuration when you specify SPOT as the purchase option.
	SpotOptions SpotOptionsPropertiesPtrInput
	// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
	SubnetIds pulumi.StringArrayInput
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags pulumi.StringMapInput
}

func (ComputeNodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeNodeGroupArgs)(nil)).Elem()
}

type ComputeNodeGroupInput interface {
	pulumi.Input

	ToComputeNodeGroupOutput() ComputeNodeGroupOutput
	ToComputeNodeGroupOutputWithContext(ctx context.Context) ComputeNodeGroupOutput
}

func (*ComputeNodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNodeGroup)(nil)).Elem()
}

func (i *ComputeNodeGroup) ToComputeNodeGroupOutput() ComputeNodeGroupOutput {
	return i.ToComputeNodeGroupOutputWithContext(context.Background())
}

func (i *ComputeNodeGroup) ToComputeNodeGroupOutputWithContext(ctx context.Context) ComputeNodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeNodeGroupOutput)
}

type ComputeNodeGroupOutput struct{ *pulumi.OutputState }

func (ComputeNodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeNodeGroup)(nil)).Elem()
}

func (o ComputeNodeGroupOutput) ToComputeNodeGroupOutput() ComputeNodeGroupOutput {
	return o
}

func (o ComputeNodeGroupOutput) ToComputeNodeGroupOutputWithContext(ctx context.Context) ComputeNodeGroupOutput {
	return o
}

// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
func (o ComputeNodeGroupOutput) AmiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringPtrOutput { return v.AmiId }).(pulumi.StringPtrOutput)
}

// The unique Amazon Resource Name (ARN) of the compute node group.
func (o ComputeNodeGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The generated unique ID of the compute node group.
func (o ComputeNodeGroupOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The ID of the cluster of the compute node group.
func (o ComputeNodeGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
func (o ComputeNodeGroupOutput) CustomLaunchTemplate() CustomLaunchTemplatePropertiesOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) CustomLaunchTemplatePropertiesOutput { return v.CustomLaunchTemplate }).(CustomLaunchTemplatePropertiesOutput)
}

// The list of errors that occurred during compute node group provisioning.
func (o ComputeNodeGroupOutput) ErrorInfo() ComputeNodeGroupErrorInfoArrayOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupErrorInfoArrayOutput { return v.ErrorInfo }).(ComputeNodeGroupErrorInfoArrayOutput)
}

// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
func (o ComputeNodeGroupOutput) IamInstanceProfileArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringOutput { return v.IamInstanceProfileArn }).(pulumi.StringOutput)
}

// A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
func (o ComputeNodeGroupOutput) InstanceConfigs() ComputeNodeGroupInstanceConfigArrayOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupInstanceConfigArrayOutput { return v.InstanceConfigs }).(ComputeNodeGroupInstanceConfigArrayOutput)
}

// The name that identifies the compute node group.
func (o ComputeNodeGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
func (o ComputeNodeGroupOutput) PurchaseOption() ComputeNodeGroupPurchaseOptionPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupPurchaseOptionPtrOutput { return v.PurchaseOption }).(ComputeNodeGroupPurchaseOptionPtrOutput)
}

// Specifies the boundaries of the compute node group auto scaling.
func (o ComputeNodeGroupOutput) ScalingConfiguration() ScalingConfigurationPropertiesOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ScalingConfigurationPropertiesOutput { return v.ScalingConfiguration }).(ScalingConfigurationPropertiesOutput)
}

// Additional options related to the Slurm scheduler.
func (o ComputeNodeGroupOutput) SlurmConfiguration() SlurmConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) SlurmConfigurationPropertiesPtrOutput { return v.SlurmConfiguration }).(SlurmConfigurationPropertiesPtrOutput)
}

// Additional configuration when you specify SPOT as the purchase option.
func (o ComputeNodeGroupOutput) SpotOptions() SpotOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) SpotOptionsPropertiesPtrOutput { return v.SpotOptions }).(SpotOptionsPropertiesPtrOutput)
}

// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
func (o ComputeNodeGroupOutput) Status() ComputeNodeGroupStatusOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) ComputeNodeGroupStatusOutput { return v.Status }).(ComputeNodeGroupStatusOutput)
}

// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
func (o ComputeNodeGroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
func (o ComputeNodeGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeNodeGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeNodeGroupInput)(nil)).Elem(), &ComputeNodeGroup{})
	pulumi.RegisterOutputType(ComputeNodeGroupOutput{})
}
