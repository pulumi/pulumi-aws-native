// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::PCS::Cluster resource creates an AWS PCS cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws-native:pcs:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	// The unique Amazon Resource Name (ARN) of the cluster.
	Arn string `pulumi:"arn"`
}

type LookupClusterResult struct {
	// The unique Amazon Resource Name (ARN) of the cluster.
	Arn *string `pulumi:"arn"`
	// The list of endpoints available for interaction with the scheduler.
	Endpoints []ClusterEndpoint `pulumi:"endpoints"`
	// The list of errors that occurred during cluster provisioning.
	ErrorInfo []ClusterErrorInfo `pulumi:"errorInfo"`
	// The generated unique ID of the cluster.
	Id *string `pulumi:"id"`
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration *SlurmConfigurationProperties `pulumi:"slurmConfiguration"`
	// The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
	Status *ClusterStatus `pulumi:"status"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags map[string]string `pulumi:"tags"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterResultOutput, error) {
			args := v.(LookupClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:pcs:getCluster", args, LookupClusterResultOutput{}, options).(LookupClusterResultOutput), nil
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	// The unique Amazon Resource Name (ARN) of the cluster.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The unique Amazon Resource Name (ARN) of the cluster.
func (o LookupClusterResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The list of endpoints available for interaction with the scheduler.
func (o LookupClusterResultOutput) Endpoints() ClusterEndpointArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterEndpoint { return v.Endpoints }).(ClusterEndpointArrayOutput)
}

// The list of errors that occurred during cluster provisioning.
func (o LookupClusterResultOutput) ErrorInfo() ClusterErrorInfoArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterErrorInfo { return v.ErrorInfo }).(ClusterErrorInfoArrayOutput)
}

// The generated unique ID of the cluster.
func (o LookupClusterResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Additional options related to the Slurm scheduler.
func (o LookupClusterResultOutput) SlurmConfiguration() SlurmConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *SlurmConfigurationProperties { return v.SlurmConfiguration }).(SlurmConfigurationPropertiesPtrOutput)
}

// The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
func (o LookupClusterResultOutput) Status() ClusterStatusPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterStatus { return v.Status }).(ClusterStatusPtrOutput)
}

// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
