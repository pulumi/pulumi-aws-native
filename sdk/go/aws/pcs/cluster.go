// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::PCS::Cluster resource creates an AWS PCS cluster.
type Cluster struct {
	pulumi.CustomResourceState

	// The unique Amazon Resource Name (ARN) of the cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The generated unique ID of the cluster.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The list of endpoints available for interaction with the scheduler.
	Endpoints ClusterEndpointArrayOutput `pulumi:"endpoints"`
	// The list of errors that occurred during cluster provisioning.
	ErrorInfo ClusterErrorInfoArrayOutput `pulumi:"errorInfo"`
	// The name that identifies the cluster.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The networking configuration for the cluster's control plane.
	Networking NetworkingPropertiesOutput `pulumi:"networking"`
	// The cluster management and job scheduling software associated with the cluster.
	Scheduler SchedulerPropertiesOutput `pulumi:"scheduler"`
	// The size of the cluster.
	Size ClusterSizeOutput `pulumi:"size"`
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration SlurmConfigurationPropertiesPtrOutput `pulumi:"slurmConfiguration"`
	// The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
	Status ClusterStatusOutput `pulumi:"status"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Networking == nil {
		return nil, errors.New("invalid value for required argument 'Networking'")
	}
	if args.Scheduler == nil {
		return nil, errors.New("invalid value for required argument 'Scheduler'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"networking",
		"scheduler",
		"size",
		"slurmConfiguration",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws-native:pcs:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:pcs:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The name that identifies the cluster.
	Name *string `pulumi:"name"`
	// The networking configuration for the cluster's control plane.
	Networking NetworkingProperties `pulumi:"networking"`
	// The cluster management and job scheduling software associated with the cluster.
	Scheduler SchedulerProperties `pulumi:"scheduler"`
	// The size of the cluster.
	Size ClusterSize `pulumi:"size"`
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration *SlurmConfigurationProperties `pulumi:"slurmConfiguration"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name that identifies the cluster.
	Name pulumi.StringPtrInput
	// The networking configuration for the cluster's control plane.
	Networking NetworkingPropertiesInput
	// The cluster management and job scheduling software associated with the cluster.
	Scheduler SchedulerPropertiesInput
	// The size of the cluster.
	Size ClusterSizeInput
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration SlurmConfigurationPropertiesPtrInput
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The unique Amazon Resource Name (ARN) of the cluster.
func (o ClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The generated unique ID of the cluster.
func (o ClusterOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The list of endpoints available for interaction with the scheduler.
func (o ClusterOutput) Endpoints() ClusterEndpointArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterEndpointArrayOutput { return v.Endpoints }).(ClusterEndpointArrayOutput)
}

// The list of errors that occurred during cluster provisioning.
func (o ClusterOutput) ErrorInfo() ClusterErrorInfoArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterErrorInfoArrayOutput { return v.ErrorInfo }).(ClusterErrorInfoArrayOutput)
}

// The name that identifies the cluster.
func (o ClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The networking configuration for the cluster's control plane.
func (o ClusterOutput) Networking() NetworkingPropertiesOutput {
	return o.ApplyT(func(v *Cluster) NetworkingPropertiesOutput { return v.Networking }).(NetworkingPropertiesOutput)
}

// The cluster management and job scheduling software associated with the cluster.
func (o ClusterOutput) Scheduler() SchedulerPropertiesOutput {
	return o.ApplyT(func(v *Cluster) SchedulerPropertiesOutput { return v.Scheduler }).(SchedulerPropertiesOutput)
}

// The size of the cluster.
func (o ClusterOutput) Size() ClusterSizeOutput {
	return o.ApplyT(func(v *Cluster) ClusterSizeOutput { return v.Size }).(ClusterSizeOutput)
}

// Additional options related to the Slurm scheduler.
func (o ClusterOutput) SlurmConfiguration() SlurmConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *Cluster) SlurmConfigurationPropertiesPtrOutput { return v.SlurmConfiguration }).(SlurmConfigurationPropertiesPtrOutput)
}

// The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
func (o ClusterOutput) Status() ClusterStatusOutput {
	return o.ApplyT(func(v *Cluster) ClusterStatusOutput { return v.Status }).(ClusterStatusOutput)
}

// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
