// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::PCS::Queue resource creates an AWS PCS queue.
type Queue struct {
	pulumi.CustomResourceState

	// The unique Amazon Resource Name (ARN) of the queue.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The generated unique ID of the queue.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The ID of the cluster of the queue.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
	ComputeNodeGroupConfigurations QueueComputeNodeGroupConfigurationArrayOutput `pulumi:"computeNodeGroupConfigurations"`
	// The list of errors that occurred during queue provisioning.
	ErrorInfo QueueErrorInfoArrayOutput `pulumi:"errorInfo"`
	// The name that identifies the queue.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The Slurm configuration for the queue.
	SlurmConfiguration SlurmConfigurationPropertiesPtrOutput `pulumi:"slurmConfiguration"`
	// The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
	Status QueueStatusOutput `pulumi:"status"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterId",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("aws-native:pcs:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws-native:pcs:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
}

type QueueState struct {
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	// The ID of the cluster of the queue.
	ClusterId string `pulumi:"clusterId"`
	// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
	ComputeNodeGroupConfigurations []QueueComputeNodeGroupConfiguration `pulumi:"computeNodeGroupConfigurations"`
	// The name that identifies the queue.
	Name *string `pulumi:"name"`
	// The Slurm configuration for the queue.
	SlurmConfiguration *SlurmConfigurationProperties `pulumi:"slurmConfiguration"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// The ID of the cluster of the queue.
	ClusterId pulumi.StringInput
	// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
	ComputeNodeGroupConfigurations QueueComputeNodeGroupConfigurationArrayInput
	// The name that identifies the queue.
	Name pulumi.StringPtrInput
	// The Slurm configuration for the queue.
	SlurmConfiguration SlurmConfigurationPropertiesPtrInput
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags pulumi.StringMapInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

// The unique Amazon Resource Name (ARN) of the queue.
func (o QueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The generated unique ID of the queue.
func (o QueueOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The ID of the cluster of the queue.
func (o QueueOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
func (o QueueOutput) ComputeNodeGroupConfigurations() QueueComputeNodeGroupConfigurationArrayOutput {
	return o.ApplyT(func(v *Queue) QueueComputeNodeGroupConfigurationArrayOutput { return v.ComputeNodeGroupConfigurations }).(QueueComputeNodeGroupConfigurationArrayOutput)
}

// The list of errors that occurred during queue provisioning.
func (o QueueOutput) ErrorInfo() QueueErrorInfoArrayOutput {
	return o.ApplyT(func(v *Queue) QueueErrorInfoArrayOutput { return v.ErrorInfo }).(QueueErrorInfoArrayOutput)
}

// The name that identifies the queue.
func (o QueueOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The Slurm configuration for the queue.
func (o QueueOutput) SlurmConfiguration() SlurmConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *Queue) SlurmConfigurationPropertiesPtrOutput { return v.SlurmConfiguration }).(SlurmConfigurationPropertiesPtrOutput)
}

// The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
func (o QueueOutput) Status() QueueStatusOutput {
	return o.ApplyT(func(v *Queue) QueueStatusOutput { return v.Status }).(QueueStatusOutput)
}

// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
func (o QueueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterOutputType(QueueOutput{})
}
