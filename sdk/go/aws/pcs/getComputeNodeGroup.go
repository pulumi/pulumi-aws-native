// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::PCS::ComputeNodeGroup resource creates an AWS PCS compute node group.
func LookupComputeNodeGroup(ctx *pulumi.Context, args *LookupComputeNodeGroupArgs, opts ...pulumi.InvokeOption) (*LookupComputeNodeGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeNodeGroupResult
	err := ctx.Invoke("aws-native:pcs:getComputeNodeGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupComputeNodeGroupArgs struct {
	// The unique Amazon Resource Name (ARN) of the compute node group.
	Arn string `pulumi:"arn"`
}

type LookupComputeNodeGroupResult struct {
	// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
	AmiId *string `pulumi:"amiId"`
	// The unique Amazon Resource Name (ARN) of the compute node group.
	Arn *string `pulumi:"arn"`
	// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
	CustomLaunchTemplate *CustomLaunchTemplateProperties `pulumi:"customLaunchTemplate"`
	// The list of errors that occurred during compute node group provisioning.
	ErrorInfo []ComputeNodeGroupErrorInfo `pulumi:"errorInfo"`
	// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
	IamInstanceProfileArn *string `pulumi:"iamInstanceProfileArn"`
	// The generated unique ID of the compute node group.
	Id *string `pulumi:"id"`
	// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand, Spot and Capacity Block instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
	PurchaseOption *ComputeNodeGroupPurchaseOption `pulumi:"purchaseOption"`
	// Specifies the boundaries of the compute node group auto scaling.
	ScalingConfiguration *ScalingConfigurationProperties `pulumi:"scalingConfiguration"`
	// Additional options related to the Slurm scheduler.
	SlurmConfiguration *SlurmConfigurationProperties `pulumi:"slurmConfiguration"`
	// Additional configuration when you specify SPOT as the purchase option.
	SpotOptions *SpotOptionsProperties `pulumi:"spotOptions"`
	// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
	Status *ComputeNodeGroupStatus `pulumi:"status"`
	// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
	SubnetIds []string `pulumi:"subnetIds"`
	// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
	Tags map[string]string `pulumi:"tags"`
}

func LookupComputeNodeGroupOutput(ctx *pulumi.Context, args LookupComputeNodeGroupOutputArgs, opts ...pulumi.InvokeOption) LookupComputeNodeGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupComputeNodeGroupResultOutput, error) {
			args := v.(LookupComputeNodeGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:pcs:getComputeNodeGroup", args, LookupComputeNodeGroupResultOutput{}, options).(LookupComputeNodeGroupResultOutput), nil
		}).(LookupComputeNodeGroupResultOutput)
}

type LookupComputeNodeGroupOutputArgs struct {
	// The unique Amazon Resource Name (ARN) of the compute node group.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupComputeNodeGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeNodeGroupArgs)(nil)).Elem()
}

type LookupComputeNodeGroupResultOutput struct{ *pulumi.OutputState }

func (LookupComputeNodeGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeNodeGroupResult)(nil)).Elem()
}

func (o LookupComputeNodeGroupResultOutput) ToLookupComputeNodeGroupResultOutput() LookupComputeNodeGroupResultOutput {
	return o
}

func (o LookupComputeNodeGroupResultOutput) ToLookupComputeNodeGroupResultOutputWithContext(ctx context.Context) LookupComputeNodeGroupResultOutput {
	return o
}

// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
func (o LookupComputeNodeGroupResultOutput) AmiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *string { return v.AmiId }).(pulumi.StringPtrOutput)
}

// The unique Amazon Resource Name (ARN) of the compute node group.
func (o LookupComputeNodeGroupResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
func (o LookupComputeNodeGroupResultOutput) CustomLaunchTemplate() CustomLaunchTemplatePropertiesPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *CustomLaunchTemplateProperties { return v.CustomLaunchTemplate }).(CustomLaunchTemplatePropertiesPtrOutput)
}

// The list of errors that occurred during compute node group provisioning.
func (o LookupComputeNodeGroupResultOutput) ErrorInfo() ComputeNodeGroupErrorInfoArrayOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) []ComputeNodeGroupErrorInfo { return v.ErrorInfo }).(ComputeNodeGroupErrorInfoArrayOutput)
}

// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
func (o LookupComputeNodeGroupResultOutput) IamInstanceProfileArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *string { return v.IamInstanceProfileArn }).(pulumi.StringPtrOutput)
}

// The generated unique ID of the compute node group.
func (o LookupComputeNodeGroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand, Spot and Capacity Block instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
func (o LookupComputeNodeGroupResultOutput) PurchaseOption() ComputeNodeGroupPurchaseOptionPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *ComputeNodeGroupPurchaseOption { return v.PurchaseOption }).(ComputeNodeGroupPurchaseOptionPtrOutput)
}

// Specifies the boundaries of the compute node group auto scaling.
func (o LookupComputeNodeGroupResultOutput) ScalingConfiguration() ScalingConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *ScalingConfigurationProperties { return v.ScalingConfiguration }).(ScalingConfigurationPropertiesPtrOutput)
}

// Additional options related to the Slurm scheduler.
func (o LookupComputeNodeGroupResultOutput) SlurmConfiguration() SlurmConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *SlurmConfigurationProperties { return v.SlurmConfiguration }).(SlurmConfigurationPropertiesPtrOutput)
}

// Additional configuration when you specify SPOT as the purchase option.
func (o LookupComputeNodeGroupResultOutput) SpotOptions() SpotOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *SpotOptionsProperties { return v.SpotOptions }).(SpotOptionsPropertiesPtrOutput)
}

// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
func (o LookupComputeNodeGroupResultOutput) Status() ComputeNodeGroupStatusPtrOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) *ComputeNodeGroupStatus { return v.Status }).(ComputeNodeGroupStatusPtrOutput)
}

// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
func (o LookupComputeNodeGroupResultOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
func (o LookupComputeNodeGroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComputeNodeGroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComputeNodeGroupResultOutput{})
}
