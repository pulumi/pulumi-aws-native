// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AutoScaling::LifecycleHook
//
// Deprecated: LifecycleHook is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type LifecycleHook struct {
	pulumi.CustomResourceState

	AutoScalingGroupName  pulumi.StringOutput    `pulumi:"autoScalingGroupName"`
	DefaultResult         pulumi.StringPtrOutput `pulumi:"defaultResult"`
	HeartbeatTimeout      pulumi.IntPtrOutput    `pulumi:"heartbeatTimeout"`
	LifecycleHookName     pulumi.StringPtrOutput `pulumi:"lifecycleHookName"`
	LifecycleTransition   pulumi.StringOutput    `pulumi:"lifecycleTransition"`
	NotificationMetadata  pulumi.StringPtrOutput `pulumi:"notificationMetadata"`
	NotificationTargetARN pulumi.StringPtrOutput `pulumi:"notificationTargetARN"`
	RoleARN               pulumi.StringPtrOutput `pulumi:"roleARN"`
}

// NewLifecycleHook registers a new resource with the given unique name, arguments, and options.
func NewLifecycleHook(ctx *pulumi.Context,
	name string, args *LifecycleHookArgs, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoScalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AutoScalingGroupName'")
	}
	if args.LifecycleTransition == nil {
		return nil, errors.New("invalid value for required argument 'LifecycleTransition'")
	}
	var resource LifecycleHook
	err := ctx.RegisterResource("aws-native:autoscaling:LifecycleHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecycleHook gets an existing LifecycleHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycleHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecycleHookState, opts ...pulumi.ResourceOption) (*LifecycleHook, error) {
	var resource LifecycleHook
	err := ctx.ReadResource("aws-native:autoscaling:LifecycleHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LifecycleHook resources.
type lifecycleHookState struct {
}

type LifecycleHookState struct {
}

func (LifecycleHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookState)(nil)).Elem()
}

type lifecycleHookArgs struct {
	AutoScalingGroupName  string  `pulumi:"autoScalingGroupName"`
	DefaultResult         *string `pulumi:"defaultResult"`
	HeartbeatTimeout      *int    `pulumi:"heartbeatTimeout"`
	LifecycleHookName     *string `pulumi:"lifecycleHookName"`
	LifecycleTransition   string  `pulumi:"lifecycleTransition"`
	NotificationMetadata  *string `pulumi:"notificationMetadata"`
	NotificationTargetARN *string `pulumi:"notificationTargetARN"`
	RoleARN               *string `pulumi:"roleARN"`
}

// The set of arguments for constructing a LifecycleHook resource.
type LifecycleHookArgs struct {
	AutoScalingGroupName  pulumi.StringInput
	DefaultResult         pulumi.StringPtrInput
	HeartbeatTimeout      pulumi.IntPtrInput
	LifecycleHookName     pulumi.StringPtrInput
	LifecycleTransition   pulumi.StringInput
	NotificationMetadata  pulumi.StringPtrInput
	NotificationTargetARN pulumi.StringPtrInput
	RoleARN               pulumi.StringPtrInput
}

func (LifecycleHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleHookArgs)(nil)).Elem()
}

type LifecycleHookInput interface {
	pulumi.Input

	ToLifecycleHookOutput() LifecycleHookOutput
	ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput
}

func (*LifecycleHook) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecycleHook)(nil))
}

func (i *LifecycleHook) ToLifecycleHookOutput() LifecycleHookOutput {
	return i.ToLifecycleHookOutputWithContext(context.Background())
}

func (i *LifecycleHook) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleHookOutput)
}

type LifecycleHookOutput struct{ *pulumi.OutputState }

func (LifecycleHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecycleHook)(nil))
}

func (o LifecycleHookOutput) ToLifecycleHookOutput() LifecycleHookOutput {
	return o
}

func (o LifecycleHookOutput) ToLifecycleHookOutputWithContext(ctx context.Context) LifecycleHookOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LifecycleHookOutput{})
}
