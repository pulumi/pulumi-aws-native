// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration that can be used by an Auto Scaling group to configure Amazon EC2 instances.
type LaunchConfiguration struct {
	pulumi.CustomResourceState

	// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
	AssociatePublicIpAddress pulumi.BoolPtrOutput `pulumi:"associatePublicIpAddress"`
	// Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
	BlockDeviceMappings LaunchConfigurationBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
	ClassicLinkVPCId pulumi.StringPtrOutput `pulumi:"classicLinkVPCId"`
	// The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
	ClassicLinkVPCSecurityGroups pulumi.StringArrayOutput `pulumi:"classicLinkVPCSecurityGroups"`
	// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
	EbsOptimized pulumi.BoolPtrOutput `pulumi:"ebsOptimized"`
	// Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The ID of the Amazon EC2 instance you want to use to create the launch configuration.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
	InstanceMonitoring pulumi.BoolPtrOutput `pulumi:"instanceMonitoring"`
	// Specifies the instance type of the EC2 instance.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Provides the ID of the kernel associated with the EC2 AMI.
	KernelId pulumi.StringPtrOutput `pulumi:"kernelId"`
	// Provides the name of the EC2 key pair.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// The name of the launch configuration. This name must be unique per Region per account.
	LaunchConfigurationName pulumi.StringPtrOutput `pulumi:"launchConfigurationName"`
	// The metadata options for the instances.
	MetadataOptions LaunchConfigurationMetadataOptionsPtrOutput `pulumi:"metadataOptions"`
	// The tenancy of the instance, either default or dedicated.
	PlacementTenancy pulumi.StringPtrOutput `pulumi:"placementTenancy"`
	// The ID of the RAM disk to select.
	RamDiskId pulumi.StringPtrOutput `pulumi:"ramDiskId"`
	// A list that contains the security groups to assign to the instances in the Auto Scaling group.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
	SpotPrice pulumi.StringPtrOutput `pulumi:"spotPrice"`
	// The Base64-encoded user data to make available to the launched EC2 instances.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
}

// NewLaunchConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLaunchConfiguration(ctx *pulumi.Context,
	name string, args *LaunchConfigurationArgs, opts ...pulumi.ResourceOption) (*LaunchConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	var resource LaunchConfiguration
	err := ctx.RegisterResource("aws-native:autoscaling:LaunchConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLaunchConfiguration gets an existing LaunchConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLaunchConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaunchConfigurationState, opts ...pulumi.ResourceOption) (*LaunchConfiguration, error) {
	var resource LaunchConfiguration
	err := ctx.ReadResource("aws-native:autoscaling:LaunchConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LaunchConfiguration resources.
type launchConfigurationState struct {
}

type LaunchConfigurationState struct {
}

func (LaunchConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*launchConfigurationState)(nil)).Elem()
}

type launchConfigurationArgs struct {
	// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
	BlockDeviceMappings []LaunchConfigurationBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
	ClassicLinkVPCId *string `pulumi:"classicLinkVPCId"`
	// The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
	ClassicLinkVPCSecurityGroups []string `pulumi:"classicLinkVPCSecurityGroups"`
	// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
	ImageId string `pulumi:"imageId"`
	// The ID of the Amazon EC2 instance you want to use to create the launch configuration.
	InstanceId *string `pulumi:"instanceId"`
	// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
	InstanceMonitoring *bool `pulumi:"instanceMonitoring"`
	// Specifies the instance type of the EC2 instance.
	InstanceType string `pulumi:"instanceType"`
	// Provides the ID of the kernel associated with the EC2 AMI.
	KernelId *string `pulumi:"kernelId"`
	// Provides the name of the EC2 key pair.
	KeyName *string `pulumi:"keyName"`
	// The name of the launch configuration. This name must be unique per Region per account.
	LaunchConfigurationName *string `pulumi:"launchConfigurationName"`
	// The metadata options for the instances.
	MetadataOptions *LaunchConfigurationMetadataOptions `pulumi:"metadataOptions"`
	// The tenancy of the instance, either default or dedicated.
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The ID of the RAM disk to select.
	RamDiskId *string `pulumi:"ramDiskId"`
	// A list that contains the security groups to assign to the instances in the Auto Scaling group.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
	SpotPrice *string `pulumi:"spotPrice"`
	// The Base64-encoded user data to make available to the launched EC2 instances.
	UserData *string `pulumi:"userData"`
}

// The set of arguments for constructing a LaunchConfiguration resource.
type LaunchConfigurationArgs struct {
	// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
	BlockDeviceMappings LaunchConfigurationBlockDeviceMappingArrayInput
	// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
	ClassicLinkVPCId pulumi.StringPtrInput
	// The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
	ClassicLinkVPCSecurityGroups pulumi.StringArrayInput
	// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
	EbsOptimized pulumi.BoolPtrInput
	// Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
	IamInstanceProfile pulumi.StringPtrInput
	// Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
	ImageId pulumi.StringInput
	// The ID of the Amazon EC2 instance you want to use to create the launch configuration.
	InstanceId pulumi.StringPtrInput
	// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
	InstanceMonitoring pulumi.BoolPtrInput
	// Specifies the instance type of the EC2 instance.
	InstanceType pulumi.StringInput
	// Provides the ID of the kernel associated with the EC2 AMI.
	KernelId pulumi.StringPtrInput
	// Provides the name of the EC2 key pair.
	KeyName pulumi.StringPtrInput
	// The name of the launch configuration. This name must be unique per Region per account.
	LaunchConfigurationName pulumi.StringPtrInput
	// The metadata options for the instances.
	MetadataOptions LaunchConfigurationMetadataOptionsPtrInput
	// The tenancy of the instance, either default or dedicated.
	PlacementTenancy pulumi.StringPtrInput
	// The ID of the RAM disk to select.
	RamDiskId pulumi.StringPtrInput
	// A list that contains the security groups to assign to the instances in the Auto Scaling group.
	SecurityGroups pulumi.StringArrayInput
	// The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
	SpotPrice pulumi.StringPtrInput
	// The Base64-encoded user data to make available to the launched EC2 instances.
	UserData pulumi.StringPtrInput
}

func (LaunchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*launchConfigurationArgs)(nil)).Elem()
}

type LaunchConfigurationInput interface {
	pulumi.Input

	ToLaunchConfigurationOutput() LaunchConfigurationOutput
	ToLaunchConfigurationOutputWithContext(ctx context.Context) LaunchConfigurationOutput
}

func (*LaunchConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchConfiguration)(nil))
}

func (i *LaunchConfiguration) ToLaunchConfigurationOutput() LaunchConfigurationOutput {
	return i.ToLaunchConfigurationOutputWithContext(context.Background())
}

func (i *LaunchConfiguration) ToLaunchConfigurationOutputWithContext(ctx context.Context) LaunchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchConfigurationOutput)
}

type LaunchConfigurationOutput struct{ *pulumi.OutputState }

func (LaunchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchConfiguration)(nil))
}

func (o LaunchConfigurationOutput) ToLaunchConfigurationOutput() LaunchConfigurationOutput {
	return o
}

func (o LaunchConfigurationOutput) ToLaunchConfigurationOutputWithContext(ctx context.Context) LaunchConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchConfigurationInput)(nil)).Elem(), &LaunchConfiguration{})
	pulumi.RegisterOutputType(LaunchConfigurationOutput{})
}
