// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmcontacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about the contact channel that SSM Incident Manager uses to engage the contact.
type ContactChannelTargetInfo struct {
	// The Amazon Resource Name (ARN) of the contact channel.
	ChannelId string `pulumi:"channelId"`
	// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
	RetryIntervalInMinutes int `pulumi:"retryIntervalInMinutes"`
}

// ContactChannelTargetInfoInput is an input type that accepts ContactChannelTargetInfoArgs and ContactChannelTargetInfoOutput values.
// You can construct a concrete instance of `ContactChannelTargetInfoInput` via:
//
//	ContactChannelTargetInfoArgs{...}
type ContactChannelTargetInfoInput interface {
	pulumi.Input

	ToContactChannelTargetInfoOutput() ContactChannelTargetInfoOutput
	ToContactChannelTargetInfoOutputWithContext(context.Context) ContactChannelTargetInfoOutput
}

// Information about the contact channel that SSM Incident Manager uses to engage the contact.
type ContactChannelTargetInfoArgs struct {
	// The Amazon Resource Name (ARN) of the contact channel.
	ChannelId pulumi.StringInput `pulumi:"channelId"`
	// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
	RetryIntervalInMinutes pulumi.IntInput `pulumi:"retryIntervalInMinutes"`
}

func (ContactChannelTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactChannelTargetInfo)(nil)).Elem()
}

func (i ContactChannelTargetInfoArgs) ToContactChannelTargetInfoOutput() ContactChannelTargetInfoOutput {
	return i.ToContactChannelTargetInfoOutputWithContext(context.Background())
}

func (i ContactChannelTargetInfoArgs) ToContactChannelTargetInfoOutputWithContext(ctx context.Context) ContactChannelTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelTargetInfoOutput)
}

func (i ContactChannelTargetInfoArgs) ToContactChannelTargetInfoPtrOutput() ContactChannelTargetInfoPtrOutput {
	return i.ToContactChannelTargetInfoPtrOutputWithContext(context.Background())
}

func (i ContactChannelTargetInfoArgs) ToContactChannelTargetInfoPtrOutputWithContext(ctx context.Context) ContactChannelTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelTargetInfoOutput).ToContactChannelTargetInfoPtrOutputWithContext(ctx)
}

// ContactChannelTargetInfoPtrInput is an input type that accepts ContactChannelTargetInfoArgs, ContactChannelTargetInfoPtr and ContactChannelTargetInfoPtrOutput values.
// You can construct a concrete instance of `ContactChannelTargetInfoPtrInput` via:
//
//	        ContactChannelTargetInfoArgs{...}
//
//	or:
//
//	        nil
type ContactChannelTargetInfoPtrInput interface {
	pulumi.Input

	ToContactChannelTargetInfoPtrOutput() ContactChannelTargetInfoPtrOutput
	ToContactChannelTargetInfoPtrOutputWithContext(context.Context) ContactChannelTargetInfoPtrOutput
}

type contactChannelTargetInfoPtrType ContactChannelTargetInfoArgs

func ContactChannelTargetInfoPtr(v *ContactChannelTargetInfoArgs) ContactChannelTargetInfoPtrInput {
	return (*contactChannelTargetInfoPtrType)(v)
}

func (*contactChannelTargetInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactChannelTargetInfo)(nil)).Elem()
}

func (i *contactChannelTargetInfoPtrType) ToContactChannelTargetInfoPtrOutput() ContactChannelTargetInfoPtrOutput {
	return i.ToContactChannelTargetInfoPtrOutputWithContext(context.Background())
}

func (i *contactChannelTargetInfoPtrType) ToContactChannelTargetInfoPtrOutputWithContext(ctx context.Context) ContactChannelTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactChannelTargetInfoPtrOutput)
}

// Information about the contact channel that SSM Incident Manager uses to engage the contact.
type ContactChannelTargetInfoOutput struct{ *pulumi.OutputState }

func (ContactChannelTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactChannelTargetInfo)(nil)).Elem()
}

func (o ContactChannelTargetInfoOutput) ToContactChannelTargetInfoOutput() ContactChannelTargetInfoOutput {
	return o
}

func (o ContactChannelTargetInfoOutput) ToContactChannelTargetInfoOutputWithContext(ctx context.Context) ContactChannelTargetInfoOutput {
	return o
}

func (o ContactChannelTargetInfoOutput) ToContactChannelTargetInfoPtrOutput() ContactChannelTargetInfoPtrOutput {
	return o.ToContactChannelTargetInfoPtrOutputWithContext(context.Background())
}

func (o ContactChannelTargetInfoOutput) ToContactChannelTargetInfoPtrOutputWithContext(ctx context.Context) ContactChannelTargetInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactChannelTargetInfo) *ContactChannelTargetInfo {
		return &v
	}).(ContactChannelTargetInfoPtrOutput)
}

// The Amazon Resource Name (ARN) of the contact channel.
func (o ContactChannelTargetInfoOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactChannelTargetInfo) string { return v.ChannelId }).(pulumi.StringOutput)
}

// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
func (o ContactChannelTargetInfoOutput) RetryIntervalInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ContactChannelTargetInfo) int { return v.RetryIntervalInMinutes }).(pulumi.IntOutput)
}

type ContactChannelTargetInfoPtrOutput struct{ *pulumi.OutputState }

func (ContactChannelTargetInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactChannelTargetInfo)(nil)).Elem()
}

func (o ContactChannelTargetInfoPtrOutput) ToContactChannelTargetInfoPtrOutput() ContactChannelTargetInfoPtrOutput {
	return o
}

func (o ContactChannelTargetInfoPtrOutput) ToContactChannelTargetInfoPtrOutputWithContext(ctx context.Context) ContactChannelTargetInfoPtrOutput {
	return o
}

func (o ContactChannelTargetInfoPtrOutput) Elem() ContactChannelTargetInfoOutput {
	return o.ApplyT(func(v *ContactChannelTargetInfo) ContactChannelTargetInfo {
		if v != nil {
			return *v
		}
		var ret ContactChannelTargetInfo
		return ret
	}).(ContactChannelTargetInfoOutput)
}

// The Amazon Resource Name (ARN) of the contact channel.
func (o ContactChannelTargetInfoPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactChannelTargetInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
func (o ContactChannelTargetInfoPtrOutput) RetryIntervalInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContactChannelTargetInfo) *int {
		if v == nil {
			return nil
		}
		return &v.RetryIntervalInMinutes
	}).(pulumi.IntPtrOutput)
}

// A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type ContactStage struct {
	// The time to wait until beginning the next stage.
	DurationInMinutes *int `pulumi:"durationInMinutes"`
	// List of Rotation Ids to associate with Contact
	RotationIds []string `pulumi:"rotationIds"`
	// The contacts or contact methods that the escalation plan or engagement plan is engaging.
	Targets []ContactTargets `pulumi:"targets"`
}

// ContactStageInput is an input type that accepts ContactStageArgs and ContactStageOutput values.
// You can construct a concrete instance of `ContactStageInput` via:
//
//	ContactStageArgs{...}
type ContactStageInput interface {
	pulumi.Input

	ToContactStageOutput() ContactStageOutput
	ToContactStageOutputWithContext(context.Context) ContactStageOutput
}

// A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type ContactStageArgs struct {
	// The time to wait until beginning the next stage.
	DurationInMinutes pulumi.IntPtrInput `pulumi:"durationInMinutes"`
	// List of Rotation Ids to associate with Contact
	RotationIds pulumi.StringArrayInput `pulumi:"rotationIds"`
	// The contacts or contact methods that the escalation plan or engagement plan is engaging.
	Targets ContactTargetsArrayInput `pulumi:"targets"`
}

func (ContactStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactStage)(nil)).Elem()
}

func (i ContactStageArgs) ToContactStageOutput() ContactStageOutput {
	return i.ToContactStageOutputWithContext(context.Background())
}

func (i ContactStageArgs) ToContactStageOutputWithContext(ctx context.Context) ContactStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactStageOutput)
}

// ContactStageArrayInput is an input type that accepts ContactStageArray and ContactStageArrayOutput values.
// You can construct a concrete instance of `ContactStageArrayInput` via:
//
//	ContactStageArray{ ContactStageArgs{...} }
type ContactStageArrayInput interface {
	pulumi.Input

	ToContactStageArrayOutput() ContactStageArrayOutput
	ToContactStageArrayOutputWithContext(context.Context) ContactStageArrayOutput
}

type ContactStageArray []ContactStageInput

func (ContactStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactStage)(nil)).Elem()
}

func (i ContactStageArray) ToContactStageArrayOutput() ContactStageArrayOutput {
	return i.ToContactStageArrayOutputWithContext(context.Background())
}

func (i ContactStageArray) ToContactStageArrayOutputWithContext(ctx context.Context) ContactStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactStageArrayOutput)
}

// A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type ContactStageOutput struct{ *pulumi.OutputState }

func (ContactStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactStage)(nil)).Elem()
}

func (o ContactStageOutput) ToContactStageOutput() ContactStageOutput {
	return o
}

func (o ContactStageOutput) ToContactStageOutputWithContext(ctx context.Context) ContactStageOutput {
	return o
}

// The time to wait until beginning the next stage.
func (o ContactStageOutput) DurationInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactStage) *int { return v.DurationInMinutes }).(pulumi.IntPtrOutput)
}

// List of Rotation Ids to associate with Contact
func (o ContactStageOutput) RotationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactStage) []string { return v.RotationIds }).(pulumi.StringArrayOutput)
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
func (o ContactStageOutput) Targets() ContactTargetsArrayOutput {
	return o.ApplyT(func(v ContactStage) []ContactTargets { return v.Targets }).(ContactTargetsArrayOutput)
}

type ContactStageArrayOutput struct{ *pulumi.OutputState }

func (ContactStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactStage)(nil)).Elem()
}

func (o ContactStageArrayOutput) ToContactStageArrayOutput() ContactStageArrayOutput {
	return o
}

func (o ContactStageArrayOutput) ToContactStageArrayOutputWithContext(ctx context.Context) ContactStageArrayOutput {
	return o
}

func (o ContactStageArrayOutput) Index(i pulumi.IntInput) ContactStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactStage {
		return vs[0].([]ContactStage)[vs[1].(int)]
	}).(ContactStageOutput)
}

// The contact that SSM Incident Manager is engaging during an incident.
type ContactTargetInfo struct {
	// The Amazon Resource Name (ARN) of the contact.
	ContactId string `pulumi:"contactId"`
	// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
	IsEssential bool `pulumi:"isEssential"`
}

// ContactTargetInfoInput is an input type that accepts ContactTargetInfoArgs and ContactTargetInfoOutput values.
// You can construct a concrete instance of `ContactTargetInfoInput` via:
//
//	ContactTargetInfoArgs{...}
type ContactTargetInfoInput interface {
	pulumi.Input

	ToContactTargetInfoOutput() ContactTargetInfoOutput
	ToContactTargetInfoOutputWithContext(context.Context) ContactTargetInfoOutput
}

// The contact that SSM Incident Manager is engaging during an incident.
type ContactTargetInfoArgs struct {
	// The Amazon Resource Name (ARN) of the contact.
	ContactId pulumi.StringInput `pulumi:"contactId"`
	// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
	IsEssential pulumi.BoolInput `pulumi:"isEssential"`
}

func (ContactTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactTargetInfo)(nil)).Elem()
}

func (i ContactTargetInfoArgs) ToContactTargetInfoOutput() ContactTargetInfoOutput {
	return i.ToContactTargetInfoOutputWithContext(context.Background())
}

func (i ContactTargetInfoArgs) ToContactTargetInfoOutputWithContext(ctx context.Context) ContactTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactTargetInfoOutput)
}

func (i ContactTargetInfoArgs) ToContactTargetInfoPtrOutput() ContactTargetInfoPtrOutput {
	return i.ToContactTargetInfoPtrOutputWithContext(context.Background())
}

func (i ContactTargetInfoArgs) ToContactTargetInfoPtrOutputWithContext(ctx context.Context) ContactTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactTargetInfoOutput).ToContactTargetInfoPtrOutputWithContext(ctx)
}

// ContactTargetInfoPtrInput is an input type that accepts ContactTargetInfoArgs, ContactTargetInfoPtr and ContactTargetInfoPtrOutput values.
// You can construct a concrete instance of `ContactTargetInfoPtrInput` via:
//
//	        ContactTargetInfoArgs{...}
//
//	or:
//
//	        nil
type ContactTargetInfoPtrInput interface {
	pulumi.Input

	ToContactTargetInfoPtrOutput() ContactTargetInfoPtrOutput
	ToContactTargetInfoPtrOutputWithContext(context.Context) ContactTargetInfoPtrOutput
}

type contactTargetInfoPtrType ContactTargetInfoArgs

func ContactTargetInfoPtr(v *ContactTargetInfoArgs) ContactTargetInfoPtrInput {
	return (*contactTargetInfoPtrType)(v)
}

func (*contactTargetInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactTargetInfo)(nil)).Elem()
}

func (i *contactTargetInfoPtrType) ToContactTargetInfoPtrOutput() ContactTargetInfoPtrOutput {
	return i.ToContactTargetInfoPtrOutputWithContext(context.Background())
}

func (i *contactTargetInfoPtrType) ToContactTargetInfoPtrOutputWithContext(ctx context.Context) ContactTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactTargetInfoPtrOutput)
}

// The contact that SSM Incident Manager is engaging during an incident.
type ContactTargetInfoOutput struct{ *pulumi.OutputState }

func (ContactTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactTargetInfo)(nil)).Elem()
}

func (o ContactTargetInfoOutput) ToContactTargetInfoOutput() ContactTargetInfoOutput {
	return o
}

func (o ContactTargetInfoOutput) ToContactTargetInfoOutputWithContext(ctx context.Context) ContactTargetInfoOutput {
	return o
}

func (o ContactTargetInfoOutput) ToContactTargetInfoPtrOutput() ContactTargetInfoPtrOutput {
	return o.ToContactTargetInfoPtrOutputWithContext(context.Background())
}

func (o ContactTargetInfoOutput) ToContactTargetInfoPtrOutputWithContext(ctx context.Context) ContactTargetInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactTargetInfo) *ContactTargetInfo {
		return &v
	}).(ContactTargetInfoPtrOutput)
}

// The Amazon Resource Name (ARN) of the contact.
func (o ContactTargetInfoOutput) ContactId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactTargetInfo) string { return v.ContactId }).(pulumi.StringOutput)
}

// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
func (o ContactTargetInfoOutput) IsEssential() pulumi.BoolOutput {
	return o.ApplyT(func(v ContactTargetInfo) bool { return v.IsEssential }).(pulumi.BoolOutput)
}

type ContactTargetInfoPtrOutput struct{ *pulumi.OutputState }

func (ContactTargetInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactTargetInfo)(nil)).Elem()
}

func (o ContactTargetInfoPtrOutput) ToContactTargetInfoPtrOutput() ContactTargetInfoPtrOutput {
	return o
}

func (o ContactTargetInfoPtrOutput) ToContactTargetInfoPtrOutputWithContext(ctx context.Context) ContactTargetInfoPtrOutput {
	return o
}

func (o ContactTargetInfoPtrOutput) Elem() ContactTargetInfoOutput {
	return o.ApplyT(func(v *ContactTargetInfo) ContactTargetInfo {
		if v != nil {
			return *v
		}
		var ret ContactTargetInfo
		return ret
	}).(ContactTargetInfoOutput)
}

// The Amazon Resource Name (ARN) of the contact.
func (o ContactTargetInfoPtrOutput) ContactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactTargetInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ContactId
	}).(pulumi.StringPtrOutput)
}

// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
func (o ContactTargetInfoPtrOutput) IsEssential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContactTargetInfo) *bool {
		if v == nil {
			return nil
		}
		return &v.IsEssential
	}).(pulumi.BoolPtrOutput)
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
type ContactTargets struct {
	ChannelTargetInfo *ContactChannelTargetInfo `pulumi:"channelTargetInfo"`
	ContactTargetInfo *ContactTargetInfo        `pulumi:"contactTargetInfo"`
}

// ContactTargetsInput is an input type that accepts ContactTargetsArgs and ContactTargetsOutput values.
// You can construct a concrete instance of `ContactTargetsInput` via:
//
//	ContactTargetsArgs{...}
type ContactTargetsInput interface {
	pulumi.Input

	ToContactTargetsOutput() ContactTargetsOutput
	ToContactTargetsOutputWithContext(context.Context) ContactTargetsOutput
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
type ContactTargetsArgs struct {
	ChannelTargetInfo ContactChannelTargetInfoPtrInput `pulumi:"channelTargetInfo"`
	ContactTargetInfo ContactTargetInfoPtrInput        `pulumi:"contactTargetInfo"`
}

func (ContactTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactTargets)(nil)).Elem()
}

func (i ContactTargetsArgs) ToContactTargetsOutput() ContactTargetsOutput {
	return i.ToContactTargetsOutputWithContext(context.Background())
}

func (i ContactTargetsArgs) ToContactTargetsOutputWithContext(ctx context.Context) ContactTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactTargetsOutput)
}

// ContactTargetsArrayInput is an input type that accepts ContactTargetsArray and ContactTargetsArrayOutput values.
// You can construct a concrete instance of `ContactTargetsArrayInput` via:
//
//	ContactTargetsArray{ ContactTargetsArgs{...} }
type ContactTargetsArrayInput interface {
	pulumi.Input

	ToContactTargetsArrayOutput() ContactTargetsArrayOutput
	ToContactTargetsArrayOutputWithContext(context.Context) ContactTargetsArrayOutput
}

type ContactTargetsArray []ContactTargetsInput

func (ContactTargetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactTargets)(nil)).Elem()
}

func (i ContactTargetsArray) ToContactTargetsArrayOutput() ContactTargetsArrayOutput {
	return i.ToContactTargetsArrayOutputWithContext(context.Background())
}

func (i ContactTargetsArray) ToContactTargetsArrayOutputWithContext(ctx context.Context) ContactTargetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactTargetsArrayOutput)
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
type ContactTargetsOutput struct{ *pulumi.OutputState }

func (ContactTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactTargets)(nil)).Elem()
}

func (o ContactTargetsOutput) ToContactTargetsOutput() ContactTargetsOutput {
	return o
}

func (o ContactTargetsOutput) ToContactTargetsOutputWithContext(ctx context.Context) ContactTargetsOutput {
	return o
}

func (o ContactTargetsOutput) ChannelTargetInfo() ContactChannelTargetInfoPtrOutput {
	return o.ApplyT(func(v ContactTargets) *ContactChannelTargetInfo { return v.ChannelTargetInfo }).(ContactChannelTargetInfoPtrOutput)
}

func (o ContactTargetsOutput) ContactTargetInfo() ContactTargetInfoPtrOutput {
	return o.ApplyT(func(v ContactTargets) *ContactTargetInfo { return v.ContactTargetInfo }).(ContactTargetInfoPtrOutput)
}

type ContactTargetsArrayOutput struct{ *pulumi.OutputState }

func (ContactTargetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactTargets)(nil)).Elem()
}

func (o ContactTargetsArrayOutput) ToContactTargetsArrayOutput() ContactTargetsArrayOutput {
	return o
}

func (o ContactTargetsArrayOutput) ToContactTargetsArrayOutputWithContext(ctx context.Context) ContactTargetsArrayOutput {
	return o
}

func (o ContactTargetsArrayOutput) Index(i pulumi.IntInput) ContactTargetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactTargets {
		return vs[0].([]ContactTargets)[vs[1].(int)]
	}).(ContactTargetsOutput)
}

// Information about the contact channel that SSM Incident Manager uses to engage the contact.
type PlanChannelTargetInfo struct {
	// The Amazon Resource Name (ARN) of the contact channel.
	ChannelId string `pulumi:"channelId"`
	// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
	RetryIntervalInMinutes int `pulumi:"retryIntervalInMinutes"`
}

// PlanChannelTargetInfoInput is an input type that accepts PlanChannelTargetInfoArgs and PlanChannelTargetInfoOutput values.
// You can construct a concrete instance of `PlanChannelTargetInfoInput` via:
//
//	PlanChannelTargetInfoArgs{...}
type PlanChannelTargetInfoInput interface {
	pulumi.Input

	ToPlanChannelTargetInfoOutput() PlanChannelTargetInfoOutput
	ToPlanChannelTargetInfoOutputWithContext(context.Context) PlanChannelTargetInfoOutput
}

// Information about the contact channel that SSM Incident Manager uses to engage the contact.
type PlanChannelTargetInfoArgs struct {
	// The Amazon Resource Name (ARN) of the contact channel.
	ChannelId pulumi.StringInput `pulumi:"channelId"`
	// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
	RetryIntervalInMinutes pulumi.IntInput `pulumi:"retryIntervalInMinutes"`
}

func (PlanChannelTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanChannelTargetInfo)(nil)).Elem()
}

func (i PlanChannelTargetInfoArgs) ToPlanChannelTargetInfoOutput() PlanChannelTargetInfoOutput {
	return i.ToPlanChannelTargetInfoOutputWithContext(context.Background())
}

func (i PlanChannelTargetInfoArgs) ToPlanChannelTargetInfoOutputWithContext(ctx context.Context) PlanChannelTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanChannelTargetInfoOutput)
}

func (i PlanChannelTargetInfoArgs) ToPlanChannelTargetInfoPtrOutput() PlanChannelTargetInfoPtrOutput {
	return i.ToPlanChannelTargetInfoPtrOutputWithContext(context.Background())
}

func (i PlanChannelTargetInfoArgs) ToPlanChannelTargetInfoPtrOutputWithContext(ctx context.Context) PlanChannelTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanChannelTargetInfoOutput).ToPlanChannelTargetInfoPtrOutputWithContext(ctx)
}

// PlanChannelTargetInfoPtrInput is an input type that accepts PlanChannelTargetInfoArgs, PlanChannelTargetInfoPtr and PlanChannelTargetInfoPtrOutput values.
// You can construct a concrete instance of `PlanChannelTargetInfoPtrInput` via:
//
//	        PlanChannelTargetInfoArgs{...}
//
//	or:
//
//	        nil
type PlanChannelTargetInfoPtrInput interface {
	pulumi.Input

	ToPlanChannelTargetInfoPtrOutput() PlanChannelTargetInfoPtrOutput
	ToPlanChannelTargetInfoPtrOutputWithContext(context.Context) PlanChannelTargetInfoPtrOutput
}

type planChannelTargetInfoPtrType PlanChannelTargetInfoArgs

func PlanChannelTargetInfoPtr(v *PlanChannelTargetInfoArgs) PlanChannelTargetInfoPtrInput {
	return (*planChannelTargetInfoPtrType)(v)
}

func (*planChannelTargetInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanChannelTargetInfo)(nil)).Elem()
}

func (i *planChannelTargetInfoPtrType) ToPlanChannelTargetInfoPtrOutput() PlanChannelTargetInfoPtrOutput {
	return i.ToPlanChannelTargetInfoPtrOutputWithContext(context.Background())
}

func (i *planChannelTargetInfoPtrType) ToPlanChannelTargetInfoPtrOutputWithContext(ctx context.Context) PlanChannelTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanChannelTargetInfoPtrOutput)
}

// Information about the contact channel that SSM Incident Manager uses to engage the contact.
type PlanChannelTargetInfoOutput struct{ *pulumi.OutputState }

func (PlanChannelTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanChannelTargetInfo)(nil)).Elem()
}

func (o PlanChannelTargetInfoOutput) ToPlanChannelTargetInfoOutput() PlanChannelTargetInfoOutput {
	return o
}

func (o PlanChannelTargetInfoOutput) ToPlanChannelTargetInfoOutputWithContext(ctx context.Context) PlanChannelTargetInfoOutput {
	return o
}

func (o PlanChannelTargetInfoOutput) ToPlanChannelTargetInfoPtrOutput() PlanChannelTargetInfoPtrOutput {
	return o.ToPlanChannelTargetInfoPtrOutputWithContext(context.Background())
}

func (o PlanChannelTargetInfoOutput) ToPlanChannelTargetInfoPtrOutputWithContext(ctx context.Context) PlanChannelTargetInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanChannelTargetInfo) *PlanChannelTargetInfo {
		return &v
	}).(PlanChannelTargetInfoPtrOutput)
}

// The Amazon Resource Name (ARN) of the contact channel.
func (o PlanChannelTargetInfoOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v PlanChannelTargetInfo) string { return v.ChannelId }).(pulumi.StringOutput)
}

// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
func (o PlanChannelTargetInfoOutput) RetryIntervalInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v PlanChannelTargetInfo) int { return v.RetryIntervalInMinutes }).(pulumi.IntOutput)
}

type PlanChannelTargetInfoPtrOutput struct{ *pulumi.OutputState }

func (PlanChannelTargetInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanChannelTargetInfo)(nil)).Elem()
}

func (o PlanChannelTargetInfoPtrOutput) ToPlanChannelTargetInfoPtrOutput() PlanChannelTargetInfoPtrOutput {
	return o
}

func (o PlanChannelTargetInfoPtrOutput) ToPlanChannelTargetInfoPtrOutputWithContext(ctx context.Context) PlanChannelTargetInfoPtrOutput {
	return o
}

func (o PlanChannelTargetInfoPtrOutput) Elem() PlanChannelTargetInfoOutput {
	return o.ApplyT(func(v *PlanChannelTargetInfo) PlanChannelTargetInfo {
		if v != nil {
			return *v
		}
		var ret PlanChannelTargetInfo
		return ret
	}).(PlanChannelTargetInfoOutput)
}

// The Amazon Resource Name (ARN) of the contact channel.
func (o PlanChannelTargetInfoPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanChannelTargetInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
func (o PlanChannelTargetInfoPtrOutput) RetryIntervalInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanChannelTargetInfo) *int {
		if v == nil {
			return nil
		}
		return &v.RetryIntervalInMinutes
	}).(pulumi.IntPtrOutput)
}

// The contact that SSM Incident Manager is engaging during an incident.
type PlanContactTargetInfo struct {
	// The Amazon Resource Name (ARN) of the contact.
	ContactId string `pulumi:"contactId"`
	// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
	IsEssential bool `pulumi:"isEssential"`
}

// PlanContactTargetInfoInput is an input type that accepts PlanContactTargetInfoArgs and PlanContactTargetInfoOutput values.
// You can construct a concrete instance of `PlanContactTargetInfoInput` via:
//
//	PlanContactTargetInfoArgs{...}
type PlanContactTargetInfoInput interface {
	pulumi.Input

	ToPlanContactTargetInfoOutput() PlanContactTargetInfoOutput
	ToPlanContactTargetInfoOutputWithContext(context.Context) PlanContactTargetInfoOutput
}

// The contact that SSM Incident Manager is engaging during an incident.
type PlanContactTargetInfoArgs struct {
	// The Amazon Resource Name (ARN) of the contact.
	ContactId pulumi.StringInput `pulumi:"contactId"`
	// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
	IsEssential pulumi.BoolInput `pulumi:"isEssential"`
}

func (PlanContactTargetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanContactTargetInfo)(nil)).Elem()
}

func (i PlanContactTargetInfoArgs) ToPlanContactTargetInfoOutput() PlanContactTargetInfoOutput {
	return i.ToPlanContactTargetInfoOutputWithContext(context.Background())
}

func (i PlanContactTargetInfoArgs) ToPlanContactTargetInfoOutputWithContext(ctx context.Context) PlanContactTargetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanContactTargetInfoOutput)
}

func (i PlanContactTargetInfoArgs) ToPlanContactTargetInfoPtrOutput() PlanContactTargetInfoPtrOutput {
	return i.ToPlanContactTargetInfoPtrOutputWithContext(context.Background())
}

func (i PlanContactTargetInfoArgs) ToPlanContactTargetInfoPtrOutputWithContext(ctx context.Context) PlanContactTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanContactTargetInfoOutput).ToPlanContactTargetInfoPtrOutputWithContext(ctx)
}

// PlanContactTargetInfoPtrInput is an input type that accepts PlanContactTargetInfoArgs, PlanContactTargetInfoPtr and PlanContactTargetInfoPtrOutput values.
// You can construct a concrete instance of `PlanContactTargetInfoPtrInput` via:
//
//	        PlanContactTargetInfoArgs{...}
//
//	or:
//
//	        nil
type PlanContactTargetInfoPtrInput interface {
	pulumi.Input

	ToPlanContactTargetInfoPtrOutput() PlanContactTargetInfoPtrOutput
	ToPlanContactTargetInfoPtrOutputWithContext(context.Context) PlanContactTargetInfoPtrOutput
}

type planContactTargetInfoPtrType PlanContactTargetInfoArgs

func PlanContactTargetInfoPtr(v *PlanContactTargetInfoArgs) PlanContactTargetInfoPtrInput {
	return (*planContactTargetInfoPtrType)(v)
}

func (*planContactTargetInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanContactTargetInfo)(nil)).Elem()
}

func (i *planContactTargetInfoPtrType) ToPlanContactTargetInfoPtrOutput() PlanContactTargetInfoPtrOutput {
	return i.ToPlanContactTargetInfoPtrOutputWithContext(context.Background())
}

func (i *planContactTargetInfoPtrType) ToPlanContactTargetInfoPtrOutputWithContext(ctx context.Context) PlanContactTargetInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanContactTargetInfoPtrOutput)
}

// The contact that SSM Incident Manager is engaging during an incident.
type PlanContactTargetInfoOutput struct{ *pulumi.OutputState }

func (PlanContactTargetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanContactTargetInfo)(nil)).Elem()
}

func (o PlanContactTargetInfoOutput) ToPlanContactTargetInfoOutput() PlanContactTargetInfoOutput {
	return o
}

func (o PlanContactTargetInfoOutput) ToPlanContactTargetInfoOutputWithContext(ctx context.Context) PlanContactTargetInfoOutput {
	return o
}

func (o PlanContactTargetInfoOutput) ToPlanContactTargetInfoPtrOutput() PlanContactTargetInfoPtrOutput {
	return o.ToPlanContactTargetInfoPtrOutputWithContext(context.Background())
}

func (o PlanContactTargetInfoOutput) ToPlanContactTargetInfoPtrOutputWithContext(ctx context.Context) PlanContactTargetInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanContactTargetInfo) *PlanContactTargetInfo {
		return &v
	}).(PlanContactTargetInfoPtrOutput)
}

// The Amazon Resource Name (ARN) of the contact.
func (o PlanContactTargetInfoOutput) ContactId() pulumi.StringOutput {
	return o.ApplyT(func(v PlanContactTargetInfo) string { return v.ContactId }).(pulumi.StringOutput)
}

// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
func (o PlanContactTargetInfoOutput) IsEssential() pulumi.BoolOutput {
	return o.ApplyT(func(v PlanContactTargetInfo) bool { return v.IsEssential }).(pulumi.BoolOutput)
}

type PlanContactTargetInfoPtrOutput struct{ *pulumi.OutputState }

func (PlanContactTargetInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanContactTargetInfo)(nil)).Elem()
}

func (o PlanContactTargetInfoPtrOutput) ToPlanContactTargetInfoPtrOutput() PlanContactTargetInfoPtrOutput {
	return o
}

func (o PlanContactTargetInfoPtrOutput) ToPlanContactTargetInfoPtrOutputWithContext(ctx context.Context) PlanContactTargetInfoPtrOutput {
	return o
}

func (o PlanContactTargetInfoPtrOutput) Elem() PlanContactTargetInfoOutput {
	return o.ApplyT(func(v *PlanContactTargetInfo) PlanContactTargetInfo {
		if v != nil {
			return *v
		}
		var ret PlanContactTargetInfo
		return ret
	}).(PlanContactTargetInfoOutput)
}

// The Amazon Resource Name (ARN) of the contact.
func (o PlanContactTargetInfoPtrOutput) ContactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanContactTargetInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ContactId
	}).(pulumi.StringPtrOutput)
}

// A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
func (o PlanContactTargetInfoPtrOutput) IsEssential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanContactTargetInfo) *bool {
		if v == nil {
			return nil
		}
		return &v.IsEssential
	}).(pulumi.BoolPtrOutput)
}

// A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type PlanStage struct {
	// The time to wait until beginning the next stage.
	DurationInMinutes int `pulumi:"durationInMinutes"`
	// The contacts or contact methods that the escalation plan or engagement plan is engaging.
	Targets []PlanTargets `pulumi:"targets"`
}

// PlanStageInput is an input type that accepts PlanStageArgs and PlanStageOutput values.
// You can construct a concrete instance of `PlanStageInput` via:
//
//	PlanStageArgs{...}
type PlanStageInput interface {
	pulumi.Input

	ToPlanStageOutput() PlanStageOutput
	ToPlanStageOutputWithContext(context.Context) PlanStageOutput
}

// A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type PlanStageArgs struct {
	// The time to wait until beginning the next stage.
	DurationInMinutes pulumi.IntInput `pulumi:"durationInMinutes"`
	// The contacts or contact methods that the escalation plan or engagement plan is engaging.
	Targets PlanTargetsArrayInput `pulumi:"targets"`
}

func (PlanStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStage)(nil)).Elem()
}

func (i PlanStageArgs) ToPlanStageOutput() PlanStageOutput {
	return i.ToPlanStageOutputWithContext(context.Background())
}

func (i PlanStageArgs) ToPlanStageOutputWithContext(ctx context.Context) PlanStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStageOutput)
}

// PlanStageArrayInput is an input type that accepts PlanStageArray and PlanStageArrayOutput values.
// You can construct a concrete instance of `PlanStageArrayInput` via:
//
//	PlanStageArray{ PlanStageArgs{...} }
type PlanStageArrayInput interface {
	pulumi.Input

	ToPlanStageArrayOutput() PlanStageArrayOutput
	ToPlanStageArrayOutputWithContext(context.Context) PlanStageArrayOutput
}

type PlanStageArray []PlanStageInput

func (PlanStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanStage)(nil)).Elem()
}

func (i PlanStageArray) ToPlanStageArrayOutput() PlanStageArrayOutput {
	return i.ToPlanStageArrayOutputWithContext(context.Background())
}

func (i PlanStageArray) ToPlanStageArrayOutputWithContext(ctx context.Context) PlanStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStageArrayOutput)
}

// A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
type PlanStageOutput struct{ *pulumi.OutputState }

func (PlanStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStage)(nil)).Elem()
}

func (o PlanStageOutput) ToPlanStageOutput() PlanStageOutput {
	return o
}

func (o PlanStageOutput) ToPlanStageOutputWithContext(ctx context.Context) PlanStageOutput {
	return o
}

// The time to wait until beginning the next stage.
func (o PlanStageOutput) DurationInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v PlanStage) int { return v.DurationInMinutes }).(pulumi.IntOutput)
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
func (o PlanStageOutput) Targets() PlanTargetsArrayOutput {
	return o.ApplyT(func(v PlanStage) []PlanTargets { return v.Targets }).(PlanTargetsArrayOutput)
}

type PlanStageArrayOutput struct{ *pulumi.OutputState }

func (PlanStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanStage)(nil)).Elem()
}

func (o PlanStageArrayOutput) ToPlanStageArrayOutput() PlanStageArrayOutput {
	return o
}

func (o PlanStageArrayOutput) ToPlanStageArrayOutputWithContext(ctx context.Context) PlanStageArrayOutput {
	return o
}

func (o PlanStageArrayOutput) Index(i pulumi.IntInput) PlanStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanStage {
		return vs[0].([]PlanStage)[vs[1].(int)]
	}).(PlanStageOutput)
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
type PlanTargets struct {
	ChannelTargetInfo *PlanChannelTargetInfo `pulumi:"channelTargetInfo"`
	ContactTargetInfo *PlanContactTargetInfo `pulumi:"contactTargetInfo"`
}

// PlanTargetsInput is an input type that accepts PlanTargetsArgs and PlanTargetsOutput values.
// You can construct a concrete instance of `PlanTargetsInput` via:
//
//	PlanTargetsArgs{...}
type PlanTargetsInput interface {
	pulumi.Input

	ToPlanTargetsOutput() PlanTargetsOutput
	ToPlanTargetsOutputWithContext(context.Context) PlanTargetsOutput
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
type PlanTargetsArgs struct {
	ChannelTargetInfo PlanChannelTargetInfoPtrInput `pulumi:"channelTargetInfo"`
	ContactTargetInfo PlanContactTargetInfoPtrInput `pulumi:"contactTargetInfo"`
}

func (PlanTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanTargets)(nil)).Elem()
}

func (i PlanTargetsArgs) ToPlanTargetsOutput() PlanTargetsOutput {
	return i.ToPlanTargetsOutputWithContext(context.Background())
}

func (i PlanTargetsArgs) ToPlanTargetsOutputWithContext(ctx context.Context) PlanTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTargetsOutput)
}

// PlanTargetsArrayInput is an input type that accepts PlanTargetsArray and PlanTargetsArrayOutput values.
// You can construct a concrete instance of `PlanTargetsArrayInput` via:
//
//	PlanTargetsArray{ PlanTargetsArgs{...} }
type PlanTargetsArrayInput interface {
	pulumi.Input

	ToPlanTargetsArrayOutput() PlanTargetsArrayOutput
	ToPlanTargetsArrayOutputWithContext(context.Context) PlanTargetsArrayOutput
}

type PlanTargetsArray []PlanTargetsInput

func (PlanTargetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanTargets)(nil)).Elem()
}

func (i PlanTargetsArray) ToPlanTargetsArrayOutput() PlanTargetsArrayOutput {
	return i.ToPlanTargetsArrayOutputWithContext(context.Background())
}

func (i PlanTargetsArray) ToPlanTargetsArrayOutputWithContext(ctx context.Context) PlanTargetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTargetsArrayOutput)
}

// The contacts or contact methods that the escalation plan or engagement plan is engaging.
type PlanTargetsOutput struct{ *pulumi.OutputState }

func (PlanTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanTargets)(nil)).Elem()
}

func (o PlanTargetsOutput) ToPlanTargetsOutput() PlanTargetsOutput {
	return o
}

func (o PlanTargetsOutput) ToPlanTargetsOutputWithContext(ctx context.Context) PlanTargetsOutput {
	return o
}

func (o PlanTargetsOutput) ChannelTargetInfo() PlanChannelTargetInfoPtrOutput {
	return o.ApplyT(func(v PlanTargets) *PlanChannelTargetInfo { return v.ChannelTargetInfo }).(PlanChannelTargetInfoPtrOutput)
}

func (o PlanTargetsOutput) ContactTargetInfo() PlanContactTargetInfoPtrOutput {
	return o.ApplyT(func(v PlanTargets) *PlanContactTargetInfo { return v.ContactTargetInfo }).(PlanContactTargetInfoPtrOutput)
}

type PlanTargetsArrayOutput struct{ *pulumi.OutputState }

func (PlanTargetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanTargets)(nil)).Elem()
}

func (o PlanTargetsArrayOutput) ToPlanTargetsArrayOutput() PlanTargetsArrayOutput {
	return o
}

func (o PlanTargetsArrayOutput) ToPlanTargetsArrayOutputWithContext(ctx context.Context) PlanTargetsArrayOutput {
	return o
}

func (o PlanTargetsArrayOutput) Index(i pulumi.IntInput) PlanTargetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanTargets {
		return vs[0].([]PlanTargets)[vs[1].(int)]
	}).(PlanTargetsOutput)
}

// StartTime and EndTime for the Shift
type RotationCoverageTime struct {
	EndTime   string `pulumi:"endTime"`
	StartTime string `pulumi:"startTime"`
}

// RotationCoverageTimeInput is an input type that accepts RotationCoverageTimeArgs and RotationCoverageTimeOutput values.
// You can construct a concrete instance of `RotationCoverageTimeInput` via:
//
//	RotationCoverageTimeArgs{...}
type RotationCoverageTimeInput interface {
	pulumi.Input

	ToRotationCoverageTimeOutput() RotationCoverageTimeOutput
	ToRotationCoverageTimeOutputWithContext(context.Context) RotationCoverageTimeOutput
}

// StartTime and EndTime for the Shift
type RotationCoverageTimeArgs struct {
	EndTime   pulumi.StringInput `pulumi:"endTime"`
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (RotationCoverageTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationCoverageTime)(nil)).Elem()
}

func (i RotationCoverageTimeArgs) ToRotationCoverageTimeOutput() RotationCoverageTimeOutput {
	return i.ToRotationCoverageTimeOutputWithContext(context.Background())
}

func (i RotationCoverageTimeArgs) ToRotationCoverageTimeOutputWithContext(ctx context.Context) RotationCoverageTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationCoverageTimeOutput)
}

// RotationCoverageTimeArrayInput is an input type that accepts RotationCoverageTimeArray and RotationCoverageTimeArrayOutput values.
// You can construct a concrete instance of `RotationCoverageTimeArrayInput` via:
//
//	RotationCoverageTimeArray{ RotationCoverageTimeArgs{...} }
type RotationCoverageTimeArrayInput interface {
	pulumi.Input

	ToRotationCoverageTimeArrayOutput() RotationCoverageTimeArrayOutput
	ToRotationCoverageTimeArrayOutputWithContext(context.Context) RotationCoverageTimeArrayOutput
}

type RotationCoverageTimeArray []RotationCoverageTimeInput

func (RotationCoverageTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationCoverageTime)(nil)).Elem()
}

func (i RotationCoverageTimeArray) ToRotationCoverageTimeArrayOutput() RotationCoverageTimeArrayOutput {
	return i.ToRotationCoverageTimeArrayOutputWithContext(context.Background())
}

func (i RotationCoverageTimeArray) ToRotationCoverageTimeArrayOutputWithContext(ctx context.Context) RotationCoverageTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationCoverageTimeArrayOutput)
}

// StartTime and EndTime for the Shift
type RotationCoverageTimeOutput struct{ *pulumi.OutputState }

func (RotationCoverageTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationCoverageTime)(nil)).Elem()
}

func (o RotationCoverageTimeOutput) ToRotationCoverageTimeOutput() RotationCoverageTimeOutput {
	return o
}

func (o RotationCoverageTimeOutput) ToRotationCoverageTimeOutputWithContext(ctx context.Context) RotationCoverageTimeOutput {
	return o
}

func (o RotationCoverageTimeOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RotationCoverageTime) string { return v.EndTime }).(pulumi.StringOutput)
}

func (o RotationCoverageTimeOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RotationCoverageTime) string { return v.StartTime }).(pulumi.StringOutput)
}

type RotationCoverageTimeArrayOutput struct{ *pulumi.OutputState }

func (RotationCoverageTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationCoverageTime)(nil)).Elem()
}

func (o RotationCoverageTimeArrayOutput) ToRotationCoverageTimeArrayOutput() RotationCoverageTimeArrayOutput {
	return o
}

func (o RotationCoverageTimeArrayOutput) ToRotationCoverageTimeArrayOutputWithContext(ctx context.Context) RotationCoverageTimeArrayOutput {
	return o
}

func (o RotationCoverageTimeArrayOutput) Index(i pulumi.IntInput) RotationCoverageTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RotationCoverageTime {
		return vs[0].([]RotationCoverageTime)[vs[1].(int)]
	}).(RotationCoverageTimeOutput)
}

// DayOfWeek for Month and HandOff Time for Monthly Recurring Rotation.
type RotationMonthlySetting struct {
	// The day of the month when monthly recurring on-call rotations begin.
	DayOfMonth  int    `pulumi:"dayOfMonth"`
	HandOffTime string `pulumi:"handOffTime"`
}

// RotationMonthlySettingInput is an input type that accepts RotationMonthlySettingArgs and RotationMonthlySettingOutput values.
// You can construct a concrete instance of `RotationMonthlySettingInput` via:
//
//	RotationMonthlySettingArgs{...}
type RotationMonthlySettingInput interface {
	pulumi.Input

	ToRotationMonthlySettingOutput() RotationMonthlySettingOutput
	ToRotationMonthlySettingOutputWithContext(context.Context) RotationMonthlySettingOutput
}

// DayOfWeek for Month and HandOff Time for Monthly Recurring Rotation.
type RotationMonthlySettingArgs struct {
	// The day of the month when monthly recurring on-call rotations begin.
	DayOfMonth  pulumi.IntInput    `pulumi:"dayOfMonth"`
	HandOffTime pulumi.StringInput `pulumi:"handOffTime"`
}

func (RotationMonthlySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationMonthlySetting)(nil)).Elem()
}

func (i RotationMonthlySettingArgs) ToRotationMonthlySettingOutput() RotationMonthlySettingOutput {
	return i.ToRotationMonthlySettingOutputWithContext(context.Background())
}

func (i RotationMonthlySettingArgs) ToRotationMonthlySettingOutputWithContext(ctx context.Context) RotationMonthlySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationMonthlySettingOutput)
}

// RotationMonthlySettingArrayInput is an input type that accepts RotationMonthlySettingArray and RotationMonthlySettingArrayOutput values.
// You can construct a concrete instance of `RotationMonthlySettingArrayInput` via:
//
//	RotationMonthlySettingArray{ RotationMonthlySettingArgs{...} }
type RotationMonthlySettingArrayInput interface {
	pulumi.Input

	ToRotationMonthlySettingArrayOutput() RotationMonthlySettingArrayOutput
	ToRotationMonthlySettingArrayOutputWithContext(context.Context) RotationMonthlySettingArrayOutput
}

type RotationMonthlySettingArray []RotationMonthlySettingInput

func (RotationMonthlySettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationMonthlySetting)(nil)).Elem()
}

func (i RotationMonthlySettingArray) ToRotationMonthlySettingArrayOutput() RotationMonthlySettingArrayOutput {
	return i.ToRotationMonthlySettingArrayOutputWithContext(context.Background())
}

func (i RotationMonthlySettingArray) ToRotationMonthlySettingArrayOutputWithContext(ctx context.Context) RotationMonthlySettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationMonthlySettingArrayOutput)
}

// DayOfWeek for Month and HandOff Time for Monthly Recurring Rotation.
type RotationMonthlySettingOutput struct{ *pulumi.OutputState }

func (RotationMonthlySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationMonthlySetting)(nil)).Elem()
}

func (o RotationMonthlySettingOutput) ToRotationMonthlySettingOutput() RotationMonthlySettingOutput {
	return o
}

func (o RotationMonthlySettingOutput) ToRotationMonthlySettingOutputWithContext(ctx context.Context) RotationMonthlySettingOutput {
	return o
}

// The day of the month when monthly recurring on-call rotations begin.
func (o RotationMonthlySettingOutput) DayOfMonth() pulumi.IntOutput {
	return o.ApplyT(func(v RotationMonthlySetting) int { return v.DayOfMonth }).(pulumi.IntOutput)
}

func (o RotationMonthlySettingOutput) HandOffTime() pulumi.StringOutput {
	return o.ApplyT(func(v RotationMonthlySetting) string { return v.HandOffTime }).(pulumi.StringOutput)
}

type RotationMonthlySettingArrayOutput struct{ *pulumi.OutputState }

func (RotationMonthlySettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationMonthlySetting)(nil)).Elem()
}

func (o RotationMonthlySettingArrayOutput) ToRotationMonthlySettingArrayOutput() RotationMonthlySettingArrayOutput {
	return o
}

func (o RotationMonthlySettingArrayOutput) ToRotationMonthlySettingArrayOutputWithContext(ctx context.Context) RotationMonthlySettingArrayOutput {
	return o
}

func (o RotationMonthlySettingArrayOutput) Index(i pulumi.IntInput) RotationMonthlySettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RotationMonthlySetting {
		return vs[0].([]RotationMonthlySetting)[vs[1].(int)]
	}).(RotationMonthlySettingOutput)
}

// Information about when an on-call rotation is in effect and how long the rotation period lasts.
type RotationRecurrenceSettings struct {
	// Information about on-call rotations that recur daily.
	DailySettings []string `pulumi:"dailySettings"`
	// Information about on-call rotations that recur monthly.
	MonthlySettings []RotationMonthlySetting `pulumi:"monthlySettings"`
	// Number of Oncalls per shift.
	NumberOfOnCalls *int `pulumi:"numberOfOnCalls"`
	// The number of days, weeks, or months a single rotation lasts.
	RecurrenceMultiplier *int `pulumi:"recurrenceMultiplier"`
	// Information about the days of the week included in on-call rotation coverage.
	ShiftCoverages []RotationShiftCoverage `pulumi:"shiftCoverages"`
	// Information about on-call rotations that recur weekly.
	WeeklySettings []RotationWeeklySetting `pulumi:"weeklySettings"`
}

// RotationRecurrenceSettingsInput is an input type that accepts RotationRecurrenceSettingsArgs and RotationRecurrenceSettingsOutput values.
// You can construct a concrete instance of `RotationRecurrenceSettingsInput` via:
//
//	RotationRecurrenceSettingsArgs{...}
type RotationRecurrenceSettingsInput interface {
	pulumi.Input

	ToRotationRecurrenceSettingsOutput() RotationRecurrenceSettingsOutput
	ToRotationRecurrenceSettingsOutputWithContext(context.Context) RotationRecurrenceSettingsOutput
}

// Information about when an on-call rotation is in effect and how long the rotation period lasts.
type RotationRecurrenceSettingsArgs struct {
	// Information about on-call rotations that recur daily.
	DailySettings pulumi.StringArrayInput `pulumi:"dailySettings"`
	// Information about on-call rotations that recur monthly.
	MonthlySettings RotationMonthlySettingArrayInput `pulumi:"monthlySettings"`
	// Number of Oncalls per shift.
	NumberOfOnCalls pulumi.IntPtrInput `pulumi:"numberOfOnCalls"`
	// The number of days, weeks, or months a single rotation lasts.
	RecurrenceMultiplier pulumi.IntPtrInput `pulumi:"recurrenceMultiplier"`
	// Information about the days of the week included in on-call rotation coverage.
	ShiftCoverages RotationShiftCoverageArrayInput `pulumi:"shiftCoverages"`
	// Information about on-call rotations that recur weekly.
	WeeklySettings RotationWeeklySettingArrayInput `pulumi:"weeklySettings"`
}

func (RotationRecurrenceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationRecurrenceSettings)(nil)).Elem()
}

func (i RotationRecurrenceSettingsArgs) ToRotationRecurrenceSettingsOutput() RotationRecurrenceSettingsOutput {
	return i.ToRotationRecurrenceSettingsOutputWithContext(context.Background())
}

func (i RotationRecurrenceSettingsArgs) ToRotationRecurrenceSettingsOutputWithContext(ctx context.Context) RotationRecurrenceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationRecurrenceSettingsOutput)
}

// Information about when an on-call rotation is in effect and how long the rotation period lasts.
type RotationRecurrenceSettingsOutput struct{ *pulumi.OutputState }

func (RotationRecurrenceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationRecurrenceSettings)(nil)).Elem()
}

func (o RotationRecurrenceSettingsOutput) ToRotationRecurrenceSettingsOutput() RotationRecurrenceSettingsOutput {
	return o
}

func (o RotationRecurrenceSettingsOutput) ToRotationRecurrenceSettingsOutputWithContext(ctx context.Context) RotationRecurrenceSettingsOutput {
	return o
}

// Information about on-call rotations that recur daily.
func (o RotationRecurrenceSettingsOutput) DailySettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RotationRecurrenceSettings) []string { return v.DailySettings }).(pulumi.StringArrayOutput)
}

// Information about on-call rotations that recur monthly.
func (o RotationRecurrenceSettingsOutput) MonthlySettings() RotationMonthlySettingArrayOutput {
	return o.ApplyT(func(v RotationRecurrenceSettings) []RotationMonthlySetting { return v.MonthlySettings }).(RotationMonthlySettingArrayOutput)
}

// Number of Oncalls per shift.
func (o RotationRecurrenceSettingsOutput) NumberOfOnCalls() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RotationRecurrenceSettings) *int { return v.NumberOfOnCalls }).(pulumi.IntPtrOutput)
}

// The number of days, weeks, or months a single rotation lasts.
func (o RotationRecurrenceSettingsOutput) RecurrenceMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RotationRecurrenceSettings) *int { return v.RecurrenceMultiplier }).(pulumi.IntPtrOutput)
}

// Information about the days of the week included in on-call rotation coverage.
func (o RotationRecurrenceSettingsOutput) ShiftCoverages() RotationShiftCoverageArrayOutput {
	return o.ApplyT(func(v RotationRecurrenceSettings) []RotationShiftCoverage { return v.ShiftCoverages }).(RotationShiftCoverageArrayOutput)
}

// Information about on-call rotations that recur weekly.
func (o RotationRecurrenceSettingsOutput) WeeklySettings() RotationWeeklySettingArrayOutput {
	return o.ApplyT(func(v RotationRecurrenceSettings) []RotationWeeklySetting { return v.WeeklySettings }).(RotationWeeklySettingArrayOutput)
}

type RotationRecurrenceSettingsPtrOutput struct{ *pulumi.OutputState }

func (RotationRecurrenceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RotationRecurrenceSettings)(nil)).Elem()
}

func (o RotationRecurrenceSettingsPtrOutput) ToRotationRecurrenceSettingsPtrOutput() RotationRecurrenceSettingsPtrOutput {
	return o
}

func (o RotationRecurrenceSettingsPtrOutput) ToRotationRecurrenceSettingsPtrOutputWithContext(ctx context.Context) RotationRecurrenceSettingsPtrOutput {
	return o
}

func (o RotationRecurrenceSettingsPtrOutput) Elem() RotationRecurrenceSettingsOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) RotationRecurrenceSettings {
		if v != nil {
			return *v
		}
		var ret RotationRecurrenceSettings
		return ret
	}).(RotationRecurrenceSettingsOutput)
}

// Information about on-call rotations that recur daily.
func (o RotationRecurrenceSettingsPtrOutput) DailySettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) []string {
		if v == nil {
			return nil
		}
		return v.DailySettings
	}).(pulumi.StringArrayOutput)
}

// Information about on-call rotations that recur monthly.
func (o RotationRecurrenceSettingsPtrOutput) MonthlySettings() RotationMonthlySettingArrayOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) []RotationMonthlySetting {
		if v == nil {
			return nil
		}
		return v.MonthlySettings
	}).(RotationMonthlySettingArrayOutput)
}

// Number of Oncalls per shift.
func (o RotationRecurrenceSettingsPtrOutput) NumberOfOnCalls() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfOnCalls
	}).(pulumi.IntPtrOutput)
}

// The number of days, weeks, or months a single rotation lasts.
func (o RotationRecurrenceSettingsPtrOutput) RecurrenceMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) *int {
		if v == nil {
			return nil
		}
		return v.RecurrenceMultiplier
	}).(pulumi.IntPtrOutput)
}

// Information about the days of the week included in on-call rotation coverage.
func (o RotationRecurrenceSettingsPtrOutput) ShiftCoverages() RotationShiftCoverageArrayOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) []RotationShiftCoverage {
		if v == nil {
			return nil
		}
		return v.ShiftCoverages
	}).(RotationShiftCoverageArrayOutput)
}

// Information about on-call rotations that recur weekly.
func (o RotationRecurrenceSettingsPtrOutput) WeeklySettings() RotationWeeklySettingArrayOutput {
	return o.ApplyT(func(v *RotationRecurrenceSettings) []RotationWeeklySetting {
		if v == nil {
			return nil
		}
		return v.WeeklySettings
	}).(RotationWeeklySettingArrayOutput)
}

// Information about the days of the week included in on-call rotation coverage.
type RotationShiftCoverage struct {
	// Information about when an on-call shift begins and ends.
	CoverageTimes []RotationCoverageTime `pulumi:"coverageTimes"`
	DayOfWeek     RotationDayOfWeek      `pulumi:"dayOfWeek"`
}

// RotationShiftCoverageInput is an input type that accepts RotationShiftCoverageArgs and RotationShiftCoverageOutput values.
// You can construct a concrete instance of `RotationShiftCoverageInput` via:
//
//	RotationShiftCoverageArgs{...}
type RotationShiftCoverageInput interface {
	pulumi.Input

	ToRotationShiftCoverageOutput() RotationShiftCoverageOutput
	ToRotationShiftCoverageOutputWithContext(context.Context) RotationShiftCoverageOutput
}

// Information about the days of the week included in on-call rotation coverage.
type RotationShiftCoverageArgs struct {
	// Information about when an on-call shift begins and ends.
	CoverageTimes RotationCoverageTimeArrayInput `pulumi:"coverageTimes"`
	DayOfWeek     RotationDayOfWeekInput         `pulumi:"dayOfWeek"`
}

func (RotationShiftCoverageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationShiftCoverage)(nil)).Elem()
}

func (i RotationShiftCoverageArgs) ToRotationShiftCoverageOutput() RotationShiftCoverageOutput {
	return i.ToRotationShiftCoverageOutputWithContext(context.Background())
}

func (i RotationShiftCoverageArgs) ToRotationShiftCoverageOutputWithContext(ctx context.Context) RotationShiftCoverageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationShiftCoverageOutput)
}

// RotationShiftCoverageArrayInput is an input type that accepts RotationShiftCoverageArray and RotationShiftCoverageArrayOutput values.
// You can construct a concrete instance of `RotationShiftCoverageArrayInput` via:
//
//	RotationShiftCoverageArray{ RotationShiftCoverageArgs{...} }
type RotationShiftCoverageArrayInput interface {
	pulumi.Input

	ToRotationShiftCoverageArrayOutput() RotationShiftCoverageArrayOutput
	ToRotationShiftCoverageArrayOutputWithContext(context.Context) RotationShiftCoverageArrayOutput
}

type RotationShiftCoverageArray []RotationShiftCoverageInput

func (RotationShiftCoverageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationShiftCoverage)(nil)).Elem()
}

func (i RotationShiftCoverageArray) ToRotationShiftCoverageArrayOutput() RotationShiftCoverageArrayOutput {
	return i.ToRotationShiftCoverageArrayOutputWithContext(context.Background())
}

func (i RotationShiftCoverageArray) ToRotationShiftCoverageArrayOutputWithContext(ctx context.Context) RotationShiftCoverageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationShiftCoverageArrayOutput)
}

// Information about the days of the week included in on-call rotation coverage.
type RotationShiftCoverageOutput struct{ *pulumi.OutputState }

func (RotationShiftCoverageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationShiftCoverage)(nil)).Elem()
}

func (o RotationShiftCoverageOutput) ToRotationShiftCoverageOutput() RotationShiftCoverageOutput {
	return o
}

func (o RotationShiftCoverageOutput) ToRotationShiftCoverageOutputWithContext(ctx context.Context) RotationShiftCoverageOutput {
	return o
}

// Information about when an on-call shift begins and ends.
func (o RotationShiftCoverageOutput) CoverageTimes() RotationCoverageTimeArrayOutput {
	return o.ApplyT(func(v RotationShiftCoverage) []RotationCoverageTime { return v.CoverageTimes }).(RotationCoverageTimeArrayOutput)
}

func (o RotationShiftCoverageOutput) DayOfWeek() RotationDayOfWeekOutput {
	return o.ApplyT(func(v RotationShiftCoverage) RotationDayOfWeek { return v.DayOfWeek }).(RotationDayOfWeekOutput)
}

type RotationShiftCoverageArrayOutput struct{ *pulumi.OutputState }

func (RotationShiftCoverageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationShiftCoverage)(nil)).Elem()
}

func (o RotationShiftCoverageArrayOutput) ToRotationShiftCoverageArrayOutput() RotationShiftCoverageArrayOutput {
	return o
}

func (o RotationShiftCoverageArrayOutput) ToRotationShiftCoverageArrayOutputWithContext(ctx context.Context) RotationShiftCoverageArrayOutput {
	return o
}

func (o RotationShiftCoverageArrayOutput) Index(i pulumi.IntInput) RotationShiftCoverageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RotationShiftCoverage {
		return vs[0].([]RotationShiftCoverage)[vs[1].(int)]
	}).(RotationShiftCoverageOutput)
}

// A key-value pair to associate with a resource.
type RotationTag struct {
	// The key name of the tag
	Key string `pulumi:"key"`
	// The value for the tag.
	Value string `pulumi:"value"`
}

// RotationTagInput is an input type that accepts RotationTagArgs and RotationTagOutput values.
// You can construct a concrete instance of `RotationTagInput` via:
//
//	RotationTagArgs{...}
type RotationTagInput interface {
	pulumi.Input

	ToRotationTagOutput() RotationTagOutput
	ToRotationTagOutputWithContext(context.Context) RotationTagOutput
}

// A key-value pair to associate with a resource.
type RotationTagArgs struct {
	// The key name of the tag
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RotationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationTag)(nil)).Elem()
}

func (i RotationTagArgs) ToRotationTagOutput() RotationTagOutput {
	return i.ToRotationTagOutputWithContext(context.Background())
}

func (i RotationTagArgs) ToRotationTagOutputWithContext(ctx context.Context) RotationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationTagOutput)
}

// RotationTagArrayInput is an input type that accepts RotationTagArray and RotationTagArrayOutput values.
// You can construct a concrete instance of `RotationTagArrayInput` via:
//
//	RotationTagArray{ RotationTagArgs{...} }
type RotationTagArrayInput interface {
	pulumi.Input

	ToRotationTagArrayOutput() RotationTagArrayOutput
	ToRotationTagArrayOutputWithContext(context.Context) RotationTagArrayOutput
}

type RotationTagArray []RotationTagInput

func (RotationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationTag)(nil)).Elem()
}

func (i RotationTagArray) ToRotationTagArrayOutput() RotationTagArrayOutput {
	return i.ToRotationTagArrayOutputWithContext(context.Background())
}

func (i RotationTagArray) ToRotationTagArrayOutputWithContext(ctx context.Context) RotationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationTagArrayOutput)
}

// A key-value pair to associate with a resource.
type RotationTagOutput struct{ *pulumi.OutputState }

func (RotationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationTag)(nil)).Elem()
}

func (o RotationTagOutput) ToRotationTagOutput() RotationTagOutput {
	return o
}

func (o RotationTagOutput) ToRotationTagOutputWithContext(ctx context.Context) RotationTagOutput {
	return o
}

// The key name of the tag
func (o RotationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RotationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag.
func (o RotationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RotationTag) string { return v.Value }).(pulumi.StringOutput)
}

type RotationTagArrayOutput struct{ *pulumi.OutputState }

func (RotationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationTag)(nil)).Elem()
}

func (o RotationTagArrayOutput) ToRotationTagArrayOutput() RotationTagArrayOutput {
	return o
}

func (o RotationTagArrayOutput) ToRotationTagArrayOutputWithContext(ctx context.Context) RotationTagArrayOutput {
	return o
}

func (o RotationTagArrayOutput) Index(i pulumi.IntInput) RotationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RotationTag {
		return vs[0].([]RotationTag)[vs[1].(int)]
	}).(RotationTagOutput)
}

// DayOfWeek for Rotation and HandOff Time for Weekly Recurring Rotation.
type RotationWeeklySetting struct {
	DayOfWeek   RotationDayOfWeek `pulumi:"dayOfWeek"`
	HandOffTime string            `pulumi:"handOffTime"`
}

// RotationWeeklySettingInput is an input type that accepts RotationWeeklySettingArgs and RotationWeeklySettingOutput values.
// You can construct a concrete instance of `RotationWeeklySettingInput` via:
//
//	RotationWeeklySettingArgs{...}
type RotationWeeklySettingInput interface {
	pulumi.Input

	ToRotationWeeklySettingOutput() RotationWeeklySettingOutput
	ToRotationWeeklySettingOutputWithContext(context.Context) RotationWeeklySettingOutput
}

// DayOfWeek for Rotation and HandOff Time for Weekly Recurring Rotation.
type RotationWeeklySettingArgs struct {
	DayOfWeek   RotationDayOfWeekInput `pulumi:"dayOfWeek"`
	HandOffTime pulumi.StringInput     `pulumi:"handOffTime"`
}

func (RotationWeeklySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationWeeklySetting)(nil)).Elem()
}

func (i RotationWeeklySettingArgs) ToRotationWeeklySettingOutput() RotationWeeklySettingOutput {
	return i.ToRotationWeeklySettingOutputWithContext(context.Background())
}

func (i RotationWeeklySettingArgs) ToRotationWeeklySettingOutputWithContext(ctx context.Context) RotationWeeklySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationWeeklySettingOutput)
}

// RotationWeeklySettingArrayInput is an input type that accepts RotationWeeklySettingArray and RotationWeeklySettingArrayOutput values.
// You can construct a concrete instance of `RotationWeeklySettingArrayInput` via:
//
//	RotationWeeklySettingArray{ RotationWeeklySettingArgs{...} }
type RotationWeeklySettingArrayInput interface {
	pulumi.Input

	ToRotationWeeklySettingArrayOutput() RotationWeeklySettingArrayOutput
	ToRotationWeeklySettingArrayOutputWithContext(context.Context) RotationWeeklySettingArrayOutput
}

type RotationWeeklySettingArray []RotationWeeklySettingInput

func (RotationWeeklySettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationWeeklySetting)(nil)).Elem()
}

func (i RotationWeeklySettingArray) ToRotationWeeklySettingArrayOutput() RotationWeeklySettingArrayOutput {
	return i.ToRotationWeeklySettingArrayOutputWithContext(context.Background())
}

func (i RotationWeeklySettingArray) ToRotationWeeklySettingArrayOutputWithContext(ctx context.Context) RotationWeeklySettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationWeeklySettingArrayOutput)
}

// DayOfWeek for Rotation and HandOff Time for Weekly Recurring Rotation.
type RotationWeeklySettingOutput struct{ *pulumi.OutputState }

func (RotationWeeklySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationWeeklySetting)(nil)).Elem()
}

func (o RotationWeeklySettingOutput) ToRotationWeeklySettingOutput() RotationWeeklySettingOutput {
	return o
}

func (o RotationWeeklySettingOutput) ToRotationWeeklySettingOutputWithContext(ctx context.Context) RotationWeeklySettingOutput {
	return o
}

func (o RotationWeeklySettingOutput) DayOfWeek() RotationDayOfWeekOutput {
	return o.ApplyT(func(v RotationWeeklySetting) RotationDayOfWeek { return v.DayOfWeek }).(RotationDayOfWeekOutput)
}

func (o RotationWeeklySettingOutput) HandOffTime() pulumi.StringOutput {
	return o.ApplyT(func(v RotationWeeklySetting) string { return v.HandOffTime }).(pulumi.StringOutput)
}

type RotationWeeklySettingArrayOutput struct{ *pulumi.OutputState }

func (RotationWeeklySettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RotationWeeklySetting)(nil)).Elem()
}

func (o RotationWeeklySettingArrayOutput) ToRotationWeeklySettingArrayOutput() RotationWeeklySettingArrayOutput {
	return o
}

func (o RotationWeeklySettingArrayOutput) ToRotationWeeklySettingArrayOutputWithContext(ctx context.Context) RotationWeeklySettingArrayOutput {
	return o
}

func (o RotationWeeklySettingArrayOutput) Index(i pulumi.IntInput) RotationWeeklySettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RotationWeeklySetting {
		return vs[0].([]RotationWeeklySetting)[vs[1].(int)]
	}).(RotationWeeklySettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactChannelTargetInfoInput)(nil)).Elem(), ContactChannelTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactChannelTargetInfoPtrInput)(nil)).Elem(), ContactChannelTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactStageInput)(nil)).Elem(), ContactStageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactStageArrayInput)(nil)).Elem(), ContactStageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactTargetInfoInput)(nil)).Elem(), ContactTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactTargetInfoPtrInput)(nil)).Elem(), ContactTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactTargetsInput)(nil)).Elem(), ContactTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactTargetsArrayInput)(nil)).Elem(), ContactTargetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanChannelTargetInfoInput)(nil)).Elem(), PlanChannelTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanChannelTargetInfoPtrInput)(nil)).Elem(), PlanChannelTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanContactTargetInfoInput)(nil)).Elem(), PlanContactTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanContactTargetInfoPtrInput)(nil)).Elem(), PlanContactTargetInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanStageInput)(nil)).Elem(), PlanStageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanStageArrayInput)(nil)).Elem(), PlanStageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanTargetsInput)(nil)).Elem(), PlanTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlanTargetsArrayInput)(nil)).Elem(), PlanTargetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationCoverageTimeInput)(nil)).Elem(), RotationCoverageTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationCoverageTimeArrayInput)(nil)).Elem(), RotationCoverageTimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationMonthlySettingInput)(nil)).Elem(), RotationMonthlySettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationMonthlySettingArrayInput)(nil)).Elem(), RotationMonthlySettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationRecurrenceSettingsInput)(nil)).Elem(), RotationRecurrenceSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationShiftCoverageInput)(nil)).Elem(), RotationShiftCoverageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationShiftCoverageArrayInput)(nil)).Elem(), RotationShiftCoverageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationTagInput)(nil)).Elem(), RotationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationTagArrayInput)(nil)).Elem(), RotationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationWeeklySettingInput)(nil)).Elem(), RotationWeeklySettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationWeeklySettingArrayInput)(nil)).Elem(), RotationWeeklySettingArray{})
	pulumi.RegisterOutputType(ContactChannelTargetInfoOutput{})
	pulumi.RegisterOutputType(ContactChannelTargetInfoPtrOutput{})
	pulumi.RegisterOutputType(ContactStageOutput{})
	pulumi.RegisterOutputType(ContactStageArrayOutput{})
	pulumi.RegisterOutputType(ContactTargetInfoOutput{})
	pulumi.RegisterOutputType(ContactTargetInfoPtrOutput{})
	pulumi.RegisterOutputType(ContactTargetsOutput{})
	pulumi.RegisterOutputType(ContactTargetsArrayOutput{})
	pulumi.RegisterOutputType(PlanChannelTargetInfoOutput{})
	pulumi.RegisterOutputType(PlanChannelTargetInfoPtrOutput{})
	pulumi.RegisterOutputType(PlanContactTargetInfoOutput{})
	pulumi.RegisterOutputType(PlanContactTargetInfoPtrOutput{})
	pulumi.RegisterOutputType(PlanStageOutput{})
	pulumi.RegisterOutputType(PlanStageArrayOutput{})
	pulumi.RegisterOutputType(PlanTargetsOutput{})
	pulumi.RegisterOutputType(PlanTargetsArrayOutput{})
	pulumi.RegisterOutputType(RotationCoverageTimeOutput{})
	pulumi.RegisterOutputType(RotationCoverageTimeArrayOutput{})
	pulumi.RegisterOutputType(RotationMonthlySettingOutput{})
	pulumi.RegisterOutputType(RotationMonthlySettingArrayOutput{})
	pulumi.RegisterOutputType(RotationRecurrenceSettingsOutput{})
	pulumi.RegisterOutputType(RotationRecurrenceSettingsPtrOutput{})
	pulumi.RegisterOutputType(RotationShiftCoverageOutput{})
	pulumi.RegisterOutputType(RotationShiftCoverageArrayOutput{})
	pulumi.RegisterOutputType(RotationTagOutput{})
	pulumi.RegisterOutputType(RotationTagArrayOutput{})
	pulumi.RegisterOutputType(RotationWeeklySettingOutput{})
	pulumi.RegisterOutputType(RotationWeeklySettingArrayOutput{})
}
