// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecurityLake::Subscriber
func LookupSubscriber(ctx *pulumi.Context, args *LookupSubscriberArgs, opts ...pulumi.InvokeOption) (*LookupSubscriberResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubscriberResult
	err := ctx.Invoke("aws-native:securitylake:getSubscriber", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSubscriberArgs struct {
	// The Amazon Resource Name (ARN) of the Security Lake subscriber.
	SubscriberArn string `pulumi:"subscriberArn"`
}

type LookupSubscriberResult struct {
	// You can choose to notify subscribers of new objects with an Amazon Simple Queue Service (Amazon SQS) queue or through messaging to an HTTPS endpoint provided by the subscriber.
	//
	// Subscribers can consume data by directly querying AWS Lake Formation tables in your Amazon S3 bucket through services like Amazon Athena. This subscription type is defined as `LAKEFORMATION` .
	AccessTypes []SubscriberAccessTypesItem `pulumi:"accessTypes"`
	// The Amazon Resource Name (ARN) of the Amazon Security Lake subscriber.
	ResourceShareArn *string `pulumi:"resourceShareArn"`
	// The ARN name of the Amazon Security Lake subscriber.
	ResourceShareName *string `pulumi:"resourceShareName"`
	// The Amazon Resource Name (ARN) of the S3 bucket.
	S3BucketArn *string `pulumi:"s3BucketArn"`
	// The supported AWS services from which logs and events are collected.
	Sources []interface{} `pulumi:"sources"`
	// The Amazon Resource Name (ARN) of the Security Lake subscriber.
	SubscriberArn *string `pulumi:"subscriberArn"`
	// The description for your subscriber account in Security Lake.
	SubscriberDescription *string `pulumi:"subscriberDescription"`
	// The AWS identity used to access your data.
	SubscriberIdentity *SubscriberIdentityProperties `pulumi:"subscriberIdentity"`
	// The name of your Security Lake subscriber account.
	SubscriberName *string `pulumi:"subscriberName"`
	// The Amazon Resource Name (ARN) of the role used to create the Security Lake subscriber.
	SubscriberRoleArn *string `pulumi:"subscriberRoleArn"`
	// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupSubscriberOutput(ctx *pulumi.Context, args LookupSubscriberOutputArgs, opts ...pulumi.InvokeOption) LookupSubscriberResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubscriberResult, error) {
			args := v.(LookupSubscriberArgs)
			r, err := LookupSubscriber(ctx, &args, opts...)
			var s LookupSubscriberResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubscriberResultOutput)
}

type LookupSubscriberOutputArgs struct {
	// The Amazon Resource Name (ARN) of the Security Lake subscriber.
	SubscriberArn pulumi.StringInput `pulumi:"subscriberArn"`
}

func (LookupSubscriberOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriberArgs)(nil)).Elem()
}

type LookupSubscriberResultOutput struct{ *pulumi.OutputState }

func (LookupSubscriberResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriberResult)(nil)).Elem()
}

func (o LookupSubscriberResultOutput) ToLookupSubscriberResultOutput() LookupSubscriberResultOutput {
	return o
}

func (o LookupSubscriberResultOutput) ToLookupSubscriberResultOutputWithContext(ctx context.Context) LookupSubscriberResultOutput {
	return o
}

// You can choose to notify subscribers of new objects with an Amazon Simple Queue Service (Amazon SQS) queue or through messaging to an HTTPS endpoint provided by the subscriber.
//
// Subscribers can consume data by directly querying AWS Lake Formation tables in your Amazon S3 bucket through services like Amazon Athena. This subscription type is defined as `LAKEFORMATION` .
func (o LookupSubscriberResultOutput) AccessTypes() SubscriberAccessTypesItemArrayOutput {
	return o.ApplyT(func(v LookupSubscriberResult) []SubscriberAccessTypesItem { return v.AccessTypes }).(SubscriberAccessTypesItemArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon Security Lake subscriber.
func (o LookupSubscriberResultOutput) ResourceShareArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.ResourceShareArn }).(pulumi.StringPtrOutput)
}

// The ARN name of the Amazon Security Lake subscriber.
func (o LookupSubscriberResultOutput) ResourceShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.ResourceShareName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the S3 bucket.
func (o LookupSubscriberResultOutput) S3BucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.S3BucketArn }).(pulumi.StringPtrOutput)
}

// The supported AWS services from which logs and events are collected.
func (o LookupSubscriberResultOutput) Sources() pulumi.ArrayOutput {
	return o.ApplyT(func(v LookupSubscriberResult) []interface{} { return v.Sources }).(pulumi.ArrayOutput)
}

// The Amazon Resource Name (ARN) of the Security Lake subscriber.
func (o LookupSubscriberResultOutput) SubscriberArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.SubscriberArn }).(pulumi.StringPtrOutput)
}

// The description for your subscriber account in Security Lake.
func (o LookupSubscriberResultOutput) SubscriberDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.SubscriberDescription }).(pulumi.StringPtrOutput)
}

// The AWS identity used to access your data.
func (o LookupSubscriberResultOutput) SubscriberIdentity() SubscriberIdentityPropertiesPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *SubscriberIdentityProperties { return v.SubscriberIdentity }).(SubscriberIdentityPropertiesPtrOutput)
}

// The name of your Security Lake subscriber account.
func (o LookupSubscriberResultOutput) SubscriberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.SubscriberName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the role used to create the Security Lake subscriber.
func (o LookupSubscriberResultOutput) SubscriberRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberResult) *string { return v.SubscriberRoleArn }).(pulumi.StringPtrOutput)
}

// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
func (o LookupSubscriberResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupSubscriberResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscriberResultOutput{})
}
