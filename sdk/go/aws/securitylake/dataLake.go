// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecurityLake::DataLake
type DataLake struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) created by you to provide to the subscriber.
	Arn                     pulumi.StringOutput                      `pulumi:"arn"`
	EncryptionConfiguration DataLakeEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	LifecycleConfiguration  DataLakeLifecycleConfigurationPtrOutput  `pulumi:"lifecycleConfiguration"`
	// The Amazon Resource Name (ARN) used to index AWS Glue table partitions that are generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn  pulumi.StringPtrOutput                    `pulumi:"metaStoreManagerRoleArn"`
	ReplicationConfiguration DataLakeReplicationConfigurationPtrOutput `pulumi:"replicationConfiguration"`
	// The ARN for the Amazon Security Lake Amazon S3 bucket.
	S3BucketArn pulumi.StringOutput `pulumi:"s3BucketArn"`
	Tags        aws.TagArrayOutput  `pulumi:"tags"`
}

// NewDataLake registers a new resource with the given unique name, arguments, and options.
func NewDataLake(ctx *pulumi.Context,
	name string, args *DataLakeArgs, opts ...pulumi.ResourceOption) (*DataLake, error) {
	if args == nil {
		args = &DataLakeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataLake
	err := ctx.RegisterResource("aws-native:securitylake:DataLake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataLake gets an existing DataLake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataLakeState, opts ...pulumi.ResourceOption) (*DataLake, error) {
	var resource DataLake
	err := ctx.ReadResource("aws-native:securitylake:DataLake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataLake resources.
type dataLakeState struct {
}

type DataLakeState struct {
}

func (DataLakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeState)(nil)).Elem()
}

type dataLakeArgs struct {
	EncryptionConfiguration *DataLakeEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	LifecycleConfiguration  *DataLakeLifecycleConfiguration  `pulumi:"lifecycleConfiguration"`
	// The Amazon Resource Name (ARN) used to index AWS Glue table partitions that are generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn  *string                           `pulumi:"metaStoreManagerRoleArn"`
	ReplicationConfiguration *DataLakeReplicationConfiguration `pulumi:"replicationConfiguration"`
	Tags                     []aws.Tag                         `pulumi:"tags"`
}

// The set of arguments for constructing a DataLake resource.
type DataLakeArgs struct {
	EncryptionConfiguration DataLakeEncryptionConfigurationPtrInput
	LifecycleConfiguration  DataLakeLifecycleConfigurationPtrInput
	// The Amazon Resource Name (ARN) used to index AWS Glue table partitions that are generated by the ingestion and normalization of AWS log sources and custom sources.
	MetaStoreManagerRoleArn  pulumi.StringPtrInput
	ReplicationConfiguration DataLakeReplicationConfigurationPtrInput
	Tags                     aws.TagArrayInput
}

func (DataLakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeArgs)(nil)).Elem()
}

type DataLakeInput interface {
	pulumi.Input

	ToDataLakeOutput() DataLakeOutput
	ToDataLakeOutputWithContext(ctx context.Context) DataLakeOutput
}

func (*DataLake) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLake)(nil)).Elem()
}

func (i *DataLake) ToDataLakeOutput() DataLakeOutput {
	return i.ToDataLakeOutputWithContext(context.Background())
}

func (i *DataLake) ToDataLakeOutputWithContext(ctx context.Context) DataLakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeOutput)
}

type DataLakeOutput struct{ *pulumi.OutputState }

func (DataLakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLake)(nil)).Elem()
}

func (o DataLakeOutput) ToDataLakeOutput() DataLakeOutput {
	return o
}

func (o DataLakeOutput) ToDataLakeOutputWithContext(ctx context.Context) DataLakeOutput {
	return o
}

// The Amazon Resource Name (ARN) created by you to provide to the subscriber.
func (o DataLakeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DataLakeOutput) EncryptionConfiguration() DataLakeEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *DataLake) DataLakeEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(DataLakeEncryptionConfigurationPtrOutput)
}

func (o DataLakeOutput) LifecycleConfiguration() DataLakeLifecycleConfigurationPtrOutput {
	return o.ApplyT(func(v *DataLake) DataLakeLifecycleConfigurationPtrOutput { return v.LifecycleConfiguration }).(DataLakeLifecycleConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) used to index AWS Glue table partitions that are generated by the ingestion and normalization of AWS log sources and custom sources.
func (o DataLakeOutput) MetaStoreManagerRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringPtrOutput { return v.MetaStoreManagerRoleArn }).(pulumi.StringPtrOutput)
}

func (o DataLakeOutput) ReplicationConfiguration() DataLakeReplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *DataLake) DataLakeReplicationConfigurationPtrOutput { return v.ReplicationConfiguration }).(DataLakeReplicationConfigurationPtrOutput)
}

// The ARN for the Amazon Security Lake Amazon S3 bucket.
func (o DataLakeOutput) S3BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLake) pulumi.StringOutput { return v.S3BucketArn }).(pulumi.StringOutput)
}

func (o DataLakeOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DataLake) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeInput)(nil)).Elem(), &DataLake{})
	pulumi.RegisterOutputType(DataLakeOutput{})
}
