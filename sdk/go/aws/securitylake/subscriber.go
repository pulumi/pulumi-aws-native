// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecurityLake::Subscriber
type Subscriber struct {
	pulumi.CustomResourceState

	AccessTypes SubscriberAccessTypesItemArrayOutput `pulumi:"accessTypes"`
	// The ARN for the data lake.
	DataLakeArn       pulumi.StringOutput `pulumi:"dataLakeArn"`
	ResourceShareArn  pulumi.StringOutput `pulumi:"resourceShareArn"`
	ResourceShareName pulumi.StringOutput `pulumi:"resourceShareName"`
	S3BucketArn       pulumi.StringOutput `pulumi:"s3BucketArn"`
	// The supported AWS services from which logs and events are collected.
	Sources       pulumi.ArrayOutput  `pulumi:"sources"`
	SubscriberArn pulumi.StringOutput `pulumi:"subscriberArn"`
	// The description for your subscriber account in Security Lake.
	SubscriberDescription pulumi.StringPtrOutput `pulumi:"subscriberDescription"`
	// The AWS identity used to access your data.
	SubscriberIdentity SubscriberIdentityPropertiesOutput `pulumi:"subscriberIdentity"`
	// The name of your Security Lake subscriber account.
	SubscriberName    pulumi.StringOutput `pulumi:"subscriberName"`
	SubscriberRoleArn pulumi.StringOutput `pulumi:"subscriberRoleArn"`
	// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewSubscriber registers a new resource with the given unique name, arguments, and options.
func NewSubscriber(ctx *pulumi.Context,
	name string, args *SubscriberArgs, opts ...pulumi.ResourceOption) (*Subscriber, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessTypes == nil {
		return nil, errors.New("invalid value for required argument 'AccessTypes'")
	}
	if args.DataLakeArn == nil {
		return nil, errors.New("invalid value for required argument 'DataLakeArn'")
	}
	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	if args.SubscriberIdentity == nil {
		return nil, errors.New("invalid value for required argument 'SubscriberIdentity'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dataLakeArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subscriber
	err := ctx.RegisterResource("aws-native:securitylake:Subscriber", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriber gets an existing Subscriber resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriber(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriberState, opts ...pulumi.ResourceOption) (*Subscriber, error) {
	var resource Subscriber
	err := ctx.ReadResource("aws-native:securitylake:Subscriber", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscriber resources.
type subscriberState struct {
}

type SubscriberState struct {
}

func (SubscriberState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberState)(nil)).Elem()
}

type subscriberArgs struct {
	AccessTypes []SubscriberAccessTypesItem `pulumi:"accessTypes"`
	// The ARN for the data lake.
	DataLakeArn string `pulumi:"dataLakeArn"`
	// The supported AWS services from which logs and events are collected.
	Sources []interface{} `pulumi:"sources"`
	// The description for your subscriber account in Security Lake.
	SubscriberDescription *string `pulumi:"subscriberDescription"`
	// The AWS identity used to access your data.
	SubscriberIdentity SubscriberIdentityProperties `pulumi:"subscriberIdentity"`
	// The name of your Security Lake subscriber account.
	SubscriberName *string `pulumi:"subscriberName"`
	// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Subscriber resource.
type SubscriberArgs struct {
	AccessTypes SubscriberAccessTypesItemArrayInput
	// The ARN for the data lake.
	DataLakeArn pulumi.StringInput
	// The supported AWS services from which logs and events are collected.
	Sources pulumi.ArrayInput
	// The description for your subscriber account in Security Lake.
	SubscriberDescription pulumi.StringPtrInput
	// The AWS identity used to access your data.
	SubscriberIdentity SubscriberIdentityPropertiesInput
	// The name of your Security Lake subscriber account.
	SubscriberName pulumi.StringPtrInput
	// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
	Tags aws.TagArrayInput
}

func (SubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberArgs)(nil)).Elem()
}

type SubscriberInput interface {
	pulumi.Input

	ToSubscriberOutput() SubscriberOutput
	ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput
}

func (*Subscriber) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscriber)(nil)).Elem()
}

func (i *Subscriber) ToSubscriberOutput() SubscriberOutput {
	return i.ToSubscriberOutputWithContext(context.Background())
}

func (i *Subscriber) ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberOutput)
}

type SubscriberOutput struct{ *pulumi.OutputState }

func (SubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscriber)(nil)).Elem()
}

func (o SubscriberOutput) ToSubscriberOutput() SubscriberOutput {
	return o
}

func (o SubscriberOutput) ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput {
	return o
}

func (o SubscriberOutput) AccessTypes() SubscriberAccessTypesItemArrayOutput {
	return o.ApplyT(func(v *Subscriber) SubscriberAccessTypesItemArrayOutput { return v.AccessTypes }).(SubscriberAccessTypesItemArrayOutput)
}

// The ARN for the data lake.
func (o SubscriberOutput) DataLakeArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.DataLakeArn }).(pulumi.StringOutput)
}

func (o SubscriberOutput) ResourceShareArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.ResourceShareArn }).(pulumi.StringOutput)
}

func (o SubscriberOutput) ResourceShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.ResourceShareName }).(pulumi.StringOutput)
}

func (o SubscriberOutput) S3BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.S3BucketArn }).(pulumi.StringOutput)
}

// The supported AWS services from which logs and events are collected.
func (o SubscriberOutput) Sources() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.ArrayOutput { return v.Sources }).(pulumi.ArrayOutput)
}

func (o SubscriberOutput) SubscriberArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.SubscriberArn }).(pulumi.StringOutput)
}

// The description for your subscriber account in Security Lake.
func (o SubscriberOutput) SubscriberDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringPtrOutput { return v.SubscriberDescription }).(pulumi.StringPtrOutput)
}

// The AWS identity used to access your data.
func (o SubscriberOutput) SubscriberIdentity() SubscriberIdentityPropertiesOutput {
	return o.ApplyT(func(v *Subscriber) SubscriberIdentityPropertiesOutput { return v.SubscriberIdentity }).(SubscriberIdentityPropertiesOutput)
}

// The name of your Security Lake subscriber account.
func (o SubscriberOutput) SubscriberName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.SubscriberName }).(pulumi.StringOutput)
}

func (o SubscriberOutput) SubscriberRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscriber) pulumi.StringOutput { return v.SubscriberRoleArn }).(pulumi.StringOutput)
}

// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
func (o SubscriberOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Subscriber) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberInput)(nil)).Elem(), &Subscriber{})
	pulumi.RegisterOutputType(SubscriberOutput{})
}
