// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecurityLake::SubscriberNotification
type SubscriberNotification struct {
	pulumi.CustomResourceState

	// Specify the configurations you want to use for subscriber notification. The subscriber is notified when new data is written to the data lake for sources that the subscriber consumes in Security Lake .
	NotificationConfiguration SubscriberNotificationNotificationConfigurationOutput `pulumi:"notificationConfiguration"`
	// The ARN for the subscriber
	SubscriberArn pulumi.StringOutput `pulumi:"subscriberArn"`
	// The endpoint the subscriber should listen to for notifications
	SubscriberEndpoint pulumi.StringOutput `pulumi:"subscriberEndpoint"`
}

// NewSubscriberNotification registers a new resource with the given unique name, arguments, and options.
func NewSubscriberNotification(ctx *pulumi.Context,
	name string, args *SubscriberNotificationArgs, opts ...pulumi.ResourceOption) (*SubscriberNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'NotificationConfiguration'")
	}
	if args.SubscriberArn == nil {
		return nil, errors.New("invalid value for required argument 'SubscriberArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"subscriberArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriberNotification
	err := ctx.RegisterResource("aws-native:securitylake:SubscriberNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriberNotification gets an existing SubscriberNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriberNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriberNotificationState, opts ...pulumi.ResourceOption) (*SubscriberNotification, error) {
	var resource SubscriberNotification
	err := ctx.ReadResource("aws-native:securitylake:SubscriberNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriberNotification resources.
type subscriberNotificationState struct {
}

type SubscriberNotificationState struct {
}

func (SubscriberNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberNotificationState)(nil)).Elem()
}

type subscriberNotificationArgs struct {
	// Specify the configurations you want to use for subscriber notification. The subscriber is notified when new data is written to the data lake for sources that the subscriber consumes in Security Lake .
	NotificationConfiguration SubscriberNotificationNotificationConfiguration `pulumi:"notificationConfiguration"`
	// The ARN for the subscriber
	SubscriberArn string `pulumi:"subscriberArn"`
}

// The set of arguments for constructing a SubscriberNotification resource.
type SubscriberNotificationArgs struct {
	// Specify the configurations you want to use for subscriber notification. The subscriber is notified when new data is written to the data lake for sources that the subscriber consumes in Security Lake .
	NotificationConfiguration SubscriberNotificationNotificationConfigurationInput
	// The ARN for the subscriber
	SubscriberArn pulumi.StringInput
}

func (SubscriberNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriberNotificationArgs)(nil)).Elem()
}

type SubscriberNotificationInput interface {
	pulumi.Input

	ToSubscriberNotificationOutput() SubscriberNotificationOutput
	ToSubscriberNotificationOutputWithContext(ctx context.Context) SubscriberNotificationOutput
}

func (*SubscriberNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriberNotification)(nil)).Elem()
}

func (i *SubscriberNotification) ToSubscriberNotificationOutput() SubscriberNotificationOutput {
	return i.ToSubscriberNotificationOutputWithContext(context.Background())
}

func (i *SubscriberNotification) ToSubscriberNotificationOutputWithContext(ctx context.Context) SubscriberNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberNotificationOutput)
}

type SubscriberNotificationOutput struct{ *pulumi.OutputState }

func (SubscriberNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriberNotification)(nil)).Elem()
}

func (o SubscriberNotificationOutput) ToSubscriberNotificationOutput() SubscriberNotificationOutput {
	return o
}

func (o SubscriberNotificationOutput) ToSubscriberNotificationOutputWithContext(ctx context.Context) SubscriberNotificationOutput {
	return o
}

// Specify the configurations you want to use for subscriber notification. The subscriber is notified when new data is written to the data lake for sources that the subscriber consumes in Security Lake .
func (o SubscriberNotificationOutput) NotificationConfiguration() SubscriberNotificationNotificationConfigurationOutput {
	return o.ApplyT(func(v *SubscriberNotification) SubscriberNotificationNotificationConfigurationOutput {
		return v.NotificationConfiguration
	}).(SubscriberNotificationNotificationConfigurationOutput)
}

// The ARN for the subscriber
func (o SubscriberNotificationOutput) SubscriberArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriberNotification) pulumi.StringOutput { return v.SubscriberArn }).(pulumi.StringOutput)
}

// The endpoint the subscriber should listen to for notifications
func (o SubscriberNotificationOutput) SubscriberEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriberNotification) pulumi.StringOutput { return v.SubscriberEndpoint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriberNotificationInput)(nil)).Elem(), &SubscriberNotification{})
	pulumi.RegisterOutputType(SubscriberNotificationOutput{})
}
