// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitylake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SecurityLake::SubscriberNotification
func LookupSubscriberNotification(ctx *pulumi.Context, args *LookupSubscriberNotificationArgs, opts ...pulumi.InvokeOption) (*LookupSubscriberNotificationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubscriberNotificationResult
	err := ctx.Invoke("aws-native:securitylake:getSubscriberNotification", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSubscriberNotificationArgs struct {
	// The ARN for the subscriber
	SubscriberArn string `pulumi:"subscriberArn"`
}

type LookupSubscriberNotificationResult struct {
	// Specify the configurations you want to use for subscriber notification. The subscriber is notified when new data is written to the data lake for sources that the subscriber consumes in Security Lake .
	NotificationConfiguration *SubscriberNotificationNotificationConfiguration `pulumi:"notificationConfiguration"`
	// The endpoint the subscriber should listen to for notifications
	SubscriberEndpoint *string `pulumi:"subscriberEndpoint"`
}

func LookupSubscriberNotificationOutput(ctx *pulumi.Context, args LookupSubscriberNotificationOutputArgs, opts ...pulumi.InvokeOption) LookupSubscriberNotificationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubscriberNotificationResult, error) {
			args := v.(LookupSubscriberNotificationArgs)
			r, err := LookupSubscriberNotification(ctx, &args, opts...)
			var s LookupSubscriberNotificationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubscriberNotificationResultOutput)
}

type LookupSubscriberNotificationOutputArgs struct {
	// The ARN for the subscriber
	SubscriberArn pulumi.StringInput `pulumi:"subscriberArn"`
}

func (LookupSubscriberNotificationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriberNotificationArgs)(nil)).Elem()
}

type LookupSubscriberNotificationResultOutput struct{ *pulumi.OutputState }

func (LookupSubscriberNotificationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriberNotificationResult)(nil)).Elem()
}

func (o LookupSubscriberNotificationResultOutput) ToLookupSubscriberNotificationResultOutput() LookupSubscriberNotificationResultOutput {
	return o
}

func (o LookupSubscriberNotificationResultOutput) ToLookupSubscriberNotificationResultOutputWithContext(ctx context.Context) LookupSubscriberNotificationResultOutput {
	return o
}

// Specify the configurations you want to use for subscriber notification. The subscriber is notified when new data is written to the data lake for sources that the subscriber consumes in Security Lake .
func (o LookupSubscriberNotificationResultOutput) NotificationConfiguration() SubscriberNotificationNotificationConfigurationPtrOutput {
	return o.ApplyT(func(v LookupSubscriberNotificationResult) *SubscriberNotificationNotificationConfiguration {
		return v.NotificationConfiguration
	}).(SubscriberNotificationNotificationConfigurationPtrOutput)
}

// The endpoint the subscriber should listen to for notifications
func (o LookupSubscriberNotificationResultOutput) SubscriberEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriberNotificationResult) *string { return v.SubscriberEndpoint }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscriberNotificationResultOutput{})
}
