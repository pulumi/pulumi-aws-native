// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ClusterEncryptionInTransitClientBroker string

const (
	ClusterEncryptionInTransitClientBrokerTls          = ClusterEncryptionInTransitClientBroker("TLS")
	ClusterEncryptionInTransitClientBrokerTlsPlaintext = ClusterEncryptionInTransitClientBroker("TLS_PLAINTEXT")
	ClusterEncryptionInTransitClientBrokerPlaintext    = ClusterEncryptionInTransitClientBroker("PLAINTEXT")
)

func (ClusterEncryptionInTransitClientBroker) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInTransitClientBroker)(nil)).Elem()
}

func (e ClusterEncryptionInTransitClientBroker) ToClusterEncryptionInTransitClientBrokerOutput() ClusterEncryptionInTransitClientBrokerOutput {
	return pulumi.ToOutput(e).(ClusterEncryptionInTransitClientBrokerOutput)
}

func (e ClusterEncryptionInTransitClientBroker) ToClusterEncryptionInTransitClientBrokerOutputWithContext(ctx context.Context) ClusterEncryptionInTransitClientBrokerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ClusterEncryptionInTransitClientBrokerOutput)
}

func (e ClusterEncryptionInTransitClientBroker) ToClusterEncryptionInTransitClientBrokerPtrOutput() ClusterEncryptionInTransitClientBrokerPtrOutput {
	return e.ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(context.Background())
}

func (e ClusterEncryptionInTransitClientBroker) ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitClientBrokerPtrOutput {
	return ClusterEncryptionInTransitClientBroker(e).ToClusterEncryptionInTransitClientBrokerOutputWithContext(ctx).ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(ctx)
}

func (e ClusterEncryptionInTransitClientBroker) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterEncryptionInTransitClientBroker) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterEncryptionInTransitClientBroker) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterEncryptionInTransitClientBroker) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ClusterEncryptionInTransitClientBrokerOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInTransitClientBrokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInTransitClientBroker)(nil)).Elem()
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToClusterEncryptionInTransitClientBrokerOutput() ClusterEncryptionInTransitClientBrokerOutput {
	return o
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToClusterEncryptionInTransitClientBrokerOutputWithContext(ctx context.Context) ClusterEncryptionInTransitClientBrokerOutput {
	return o
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToClusterEncryptionInTransitClientBrokerPtrOutput() ClusterEncryptionInTransitClientBrokerPtrOutput {
	return o.ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitClientBrokerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEncryptionInTransitClientBroker) *ClusterEncryptionInTransitClientBroker {
		return &v
	}).(ClusterEncryptionInTransitClientBrokerPtrOutput)
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInTransitClientBroker] {
	return pulumix.Output[ClusterEncryptionInTransitClientBroker]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterEncryptionInTransitClientBroker) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInTransitClientBrokerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterEncryptionInTransitClientBroker) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ClusterEncryptionInTransitClientBrokerPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInTransitClientBrokerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInTransitClientBroker)(nil)).Elem()
}

func (o ClusterEncryptionInTransitClientBrokerPtrOutput) ToClusterEncryptionInTransitClientBrokerPtrOutput() ClusterEncryptionInTransitClientBrokerPtrOutput {
	return o
}

func (o ClusterEncryptionInTransitClientBrokerPtrOutput) ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitClientBrokerPtrOutput {
	return o
}

func (o ClusterEncryptionInTransitClientBrokerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInTransitClientBroker] {
	return pulumix.Output[*ClusterEncryptionInTransitClientBroker]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionInTransitClientBrokerPtrOutput) Elem() ClusterEncryptionInTransitClientBrokerOutput {
	return o.ApplyT(func(v *ClusterEncryptionInTransitClientBroker) ClusterEncryptionInTransitClientBroker {
		if v != nil {
			return *v
		}
		var ret ClusterEncryptionInTransitClientBroker
		return ret
	}).(ClusterEncryptionInTransitClientBrokerOutput)
}

func (o ClusterEncryptionInTransitClientBrokerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInTransitClientBrokerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ClusterEncryptionInTransitClientBroker) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ClusterEncryptionInTransitClientBrokerInput is an input type that accepts ClusterEncryptionInTransitClientBrokerArgs and ClusterEncryptionInTransitClientBrokerOutput values.
// You can construct a concrete instance of `ClusterEncryptionInTransitClientBrokerInput` via:
//
//	ClusterEncryptionInTransitClientBrokerArgs{...}
type ClusterEncryptionInTransitClientBrokerInput interface {
	pulumi.Input

	ToClusterEncryptionInTransitClientBrokerOutput() ClusterEncryptionInTransitClientBrokerOutput
	ToClusterEncryptionInTransitClientBrokerOutputWithContext(context.Context) ClusterEncryptionInTransitClientBrokerOutput
}

var clusterEncryptionInTransitClientBrokerPtrType = reflect.TypeOf((**ClusterEncryptionInTransitClientBroker)(nil)).Elem()

type ClusterEncryptionInTransitClientBrokerPtrInput interface {
	pulumi.Input

	ToClusterEncryptionInTransitClientBrokerPtrOutput() ClusterEncryptionInTransitClientBrokerPtrOutput
	ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(context.Context) ClusterEncryptionInTransitClientBrokerPtrOutput
}

type clusterEncryptionInTransitClientBrokerPtr string

func ClusterEncryptionInTransitClientBrokerPtr(v string) ClusterEncryptionInTransitClientBrokerPtrInput {
	return (*clusterEncryptionInTransitClientBrokerPtr)(&v)
}

func (*clusterEncryptionInTransitClientBrokerPtr) ElementType() reflect.Type {
	return clusterEncryptionInTransitClientBrokerPtrType
}

func (in *clusterEncryptionInTransitClientBrokerPtr) ToClusterEncryptionInTransitClientBrokerPtrOutput() ClusterEncryptionInTransitClientBrokerPtrOutput {
	return pulumi.ToOutput(in).(ClusterEncryptionInTransitClientBrokerPtrOutput)
}

func (in *clusterEncryptionInTransitClientBrokerPtr) ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitClientBrokerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ClusterEncryptionInTransitClientBrokerPtrOutput)
}

func (in *clusterEncryptionInTransitClientBrokerPtr) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInTransitClientBroker] {
	return pulumix.Output[*ClusterEncryptionInTransitClientBroker]{
		OutputState: in.ToClusterEncryptionInTransitClientBrokerPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterEnhancedMonitoring string

const (
	ClusterEnhancedMonitoringDefault              = ClusterEnhancedMonitoring("DEFAULT")
	ClusterEnhancedMonitoringPerBroker            = ClusterEnhancedMonitoring("PER_BROKER")
	ClusterEnhancedMonitoringPerTopicPerBroker    = ClusterEnhancedMonitoring("PER_TOPIC_PER_BROKER")
	ClusterEnhancedMonitoringPerTopicPerPartition = ClusterEnhancedMonitoring("PER_TOPIC_PER_PARTITION")
)

func (ClusterEnhancedMonitoring) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEnhancedMonitoring)(nil)).Elem()
}

func (e ClusterEnhancedMonitoring) ToClusterEnhancedMonitoringOutput() ClusterEnhancedMonitoringOutput {
	return pulumi.ToOutput(e).(ClusterEnhancedMonitoringOutput)
}

func (e ClusterEnhancedMonitoring) ToClusterEnhancedMonitoringOutputWithContext(ctx context.Context) ClusterEnhancedMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ClusterEnhancedMonitoringOutput)
}

func (e ClusterEnhancedMonitoring) ToClusterEnhancedMonitoringPtrOutput() ClusterEnhancedMonitoringPtrOutput {
	return e.ToClusterEnhancedMonitoringPtrOutputWithContext(context.Background())
}

func (e ClusterEnhancedMonitoring) ToClusterEnhancedMonitoringPtrOutputWithContext(ctx context.Context) ClusterEnhancedMonitoringPtrOutput {
	return ClusterEnhancedMonitoring(e).ToClusterEnhancedMonitoringOutputWithContext(ctx).ToClusterEnhancedMonitoringPtrOutputWithContext(ctx)
}

func (e ClusterEnhancedMonitoring) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterEnhancedMonitoring) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterEnhancedMonitoring) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterEnhancedMonitoring) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ClusterEnhancedMonitoringOutput struct{ *pulumi.OutputState }

func (ClusterEnhancedMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEnhancedMonitoring)(nil)).Elem()
}

func (o ClusterEnhancedMonitoringOutput) ToClusterEnhancedMonitoringOutput() ClusterEnhancedMonitoringOutput {
	return o
}

func (o ClusterEnhancedMonitoringOutput) ToClusterEnhancedMonitoringOutputWithContext(ctx context.Context) ClusterEnhancedMonitoringOutput {
	return o
}

func (o ClusterEnhancedMonitoringOutput) ToClusterEnhancedMonitoringPtrOutput() ClusterEnhancedMonitoringPtrOutput {
	return o.ToClusterEnhancedMonitoringPtrOutputWithContext(context.Background())
}

func (o ClusterEnhancedMonitoringOutput) ToClusterEnhancedMonitoringPtrOutputWithContext(ctx context.Context) ClusterEnhancedMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEnhancedMonitoring) *ClusterEnhancedMonitoring {
		return &v
	}).(ClusterEnhancedMonitoringPtrOutput)
}

func (o ClusterEnhancedMonitoringOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEnhancedMonitoring] {
	return pulumix.Output[ClusterEnhancedMonitoring]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEnhancedMonitoringOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ClusterEnhancedMonitoringOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterEnhancedMonitoring) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ClusterEnhancedMonitoringOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterEnhancedMonitoringOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterEnhancedMonitoring) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ClusterEnhancedMonitoringPtrOutput struct{ *pulumi.OutputState }

func (ClusterEnhancedMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEnhancedMonitoring)(nil)).Elem()
}

func (o ClusterEnhancedMonitoringPtrOutput) ToClusterEnhancedMonitoringPtrOutput() ClusterEnhancedMonitoringPtrOutput {
	return o
}

func (o ClusterEnhancedMonitoringPtrOutput) ToClusterEnhancedMonitoringPtrOutputWithContext(ctx context.Context) ClusterEnhancedMonitoringPtrOutput {
	return o
}

func (o ClusterEnhancedMonitoringPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterEnhancedMonitoring] {
	return pulumix.Output[*ClusterEnhancedMonitoring]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEnhancedMonitoringPtrOutput) Elem() ClusterEnhancedMonitoringOutput {
	return o.ApplyT(func(v *ClusterEnhancedMonitoring) ClusterEnhancedMonitoring {
		if v != nil {
			return *v
		}
		var ret ClusterEnhancedMonitoring
		return ret
	}).(ClusterEnhancedMonitoringOutput)
}

func (o ClusterEnhancedMonitoringPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterEnhancedMonitoringPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ClusterEnhancedMonitoring) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ClusterEnhancedMonitoringInput is an input type that accepts ClusterEnhancedMonitoringArgs and ClusterEnhancedMonitoringOutput values.
// You can construct a concrete instance of `ClusterEnhancedMonitoringInput` via:
//
//	ClusterEnhancedMonitoringArgs{...}
type ClusterEnhancedMonitoringInput interface {
	pulumi.Input

	ToClusterEnhancedMonitoringOutput() ClusterEnhancedMonitoringOutput
	ToClusterEnhancedMonitoringOutputWithContext(context.Context) ClusterEnhancedMonitoringOutput
}

var clusterEnhancedMonitoringPtrType = reflect.TypeOf((**ClusterEnhancedMonitoring)(nil)).Elem()

type ClusterEnhancedMonitoringPtrInput interface {
	pulumi.Input

	ToClusterEnhancedMonitoringPtrOutput() ClusterEnhancedMonitoringPtrOutput
	ToClusterEnhancedMonitoringPtrOutputWithContext(context.Context) ClusterEnhancedMonitoringPtrOutput
}

type clusterEnhancedMonitoringPtr string

func ClusterEnhancedMonitoringPtr(v string) ClusterEnhancedMonitoringPtrInput {
	return (*clusterEnhancedMonitoringPtr)(&v)
}

func (*clusterEnhancedMonitoringPtr) ElementType() reflect.Type {
	return clusterEnhancedMonitoringPtrType
}

func (in *clusterEnhancedMonitoringPtr) ToClusterEnhancedMonitoringPtrOutput() ClusterEnhancedMonitoringPtrOutput {
	return pulumi.ToOutput(in).(ClusterEnhancedMonitoringPtrOutput)
}

func (in *clusterEnhancedMonitoringPtr) ToClusterEnhancedMonitoringPtrOutputWithContext(ctx context.Context) ClusterEnhancedMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ClusterEnhancedMonitoringPtrOutput)
}

func (in *clusterEnhancedMonitoringPtr) ToOutput(ctx context.Context) pulumix.Output[*ClusterEnhancedMonitoring] {
	return pulumix.Output[*ClusterEnhancedMonitoring]{
		OutputState: in.ToClusterEnhancedMonitoringPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterStorageMode string

const (
	ClusterStorageModeLocal  = ClusterStorageMode("LOCAL")
	ClusterStorageModeTiered = ClusterStorageMode("TIERED")
)

func (ClusterStorageMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStorageMode)(nil)).Elem()
}

func (e ClusterStorageMode) ToClusterStorageModeOutput() ClusterStorageModeOutput {
	return pulumi.ToOutput(e).(ClusterStorageModeOutput)
}

func (e ClusterStorageMode) ToClusterStorageModeOutputWithContext(ctx context.Context) ClusterStorageModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ClusterStorageModeOutput)
}

func (e ClusterStorageMode) ToClusterStorageModePtrOutput() ClusterStorageModePtrOutput {
	return e.ToClusterStorageModePtrOutputWithContext(context.Background())
}

func (e ClusterStorageMode) ToClusterStorageModePtrOutputWithContext(ctx context.Context) ClusterStorageModePtrOutput {
	return ClusterStorageMode(e).ToClusterStorageModeOutputWithContext(ctx).ToClusterStorageModePtrOutputWithContext(ctx)
}

func (e ClusterStorageMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterStorageMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterStorageMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterStorageMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ClusterStorageModeOutput struct{ *pulumi.OutputState }

func (ClusterStorageModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStorageMode)(nil)).Elem()
}

func (o ClusterStorageModeOutput) ToClusterStorageModeOutput() ClusterStorageModeOutput {
	return o
}

func (o ClusterStorageModeOutput) ToClusterStorageModeOutputWithContext(ctx context.Context) ClusterStorageModeOutput {
	return o
}

func (o ClusterStorageModeOutput) ToClusterStorageModePtrOutput() ClusterStorageModePtrOutput {
	return o.ToClusterStorageModePtrOutputWithContext(context.Background())
}

func (o ClusterStorageModeOutput) ToClusterStorageModePtrOutputWithContext(ctx context.Context) ClusterStorageModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterStorageMode) *ClusterStorageMode {
		return &v
	}).(ClusterStorageModePtrOutput)
}

func (o ClusterStorageModeOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterStorageMode] {
	return pulumix.Output[ClusterStorageMode]{
		OutputState: o.OutputState,
	}
}

func (o ClusterStorageModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ClusterStorageModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterStorageMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ClusterStorageModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterStorageModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterStorageMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ClusterStorageModePtrOutput struct{ *pulumi.OutputState }

func (ClusterStorageModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStorageMode)(nil)).Elem()
}

func (o ClusterStorageModePtrOutput) ToClusterStorageModePtrOutput() ClusterStorageModePtrOutput {
	return o
}

func (o ClusterStorageModePtrOutput) ToClusterStorageModePtrOutputWithContext(ctx context.Context) ClusterStorageModePtrOutput {
	return o
}

func (o ClusterStorageModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterStorageMode] {
	return pulumix.Output[*ClusterStorageMode]{
		OutputState: o.OutputState,
	}
}

func (o ClusterStorageModePtrOutput) Elem() ClusterStorageModeOutput {
	return o.ApplyT(func(v *ClusterStorageMode) ClusterStorageMode {
		if v != nil {
			return *v
		}
		var ret ClusterStorageMode
		return ret
	}).(ClusterStorageModeOutput)
}

func (o ClusterStorageModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterStorageModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ClusterStorageMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ClusterStorageModeInput is an input type that accepts ClusterStorageModeArgs and ClusterStorageModeOutput values.
// You can construct a concrete instance of `ClusterStorageModeInput` via:
//
//	ClusterStorageModeArgs{...}
type ClusterStorageModeInput interface {
	pulumi.Input

	ToClusterStorageModeOutput() ClusterStorageModeOutput
	ToClusterStorageModeOutputWithContext(context.Context) ClusterStorageModeOutput
}

var clusterStorageModePtrType = reflect.TypeOf((**ClusterStorageMode)(nil)).Elem()

type ClusterStorageModePtrInput interface {
	pulumi.Input

	ToClusterStorageModePtrOutput() ClusterStorageModePtrOutput
	ToClusterStorageModePtrOutputWithContext(context.Context) ClusterStorageModePtrOutput
}

type clusterStorageModePtr string

func ClusterStorageModePtr(v string) ClusterStorageModePtrInput {
	return (*clusterStorageModePtr)(&v)
}

func (*clusterStorageModePtr) ElementType() reflect.Type {
	return clusterStorageModePtrType
}

func (in *clusterStorageModePtr) ToClusterStorageModePtrOutput() ClusterStorageModePtrOutput {
	return pulumi.ToOutput(in).(ClusterStorageModePtrOutput)
}

func (in *clusterStorageModePtr) ToClusterStorageModePtrOutputWithContext(ctx context.Context) ClusterStorageModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ClusterStorageModePtrOutput)
}

func (in *clusterStorageModePtr) ToOutput(ctx context.Context) pulumix.Output[*ClusterStorageMode] {
	return pulumix.Output[*ClusterStorageMode]{
		OutputState: in.ToClusterStorageModePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of compression to use writing records to target Kafka cluster.
type ReplicatorReplicationInfoTargetCompressionType string

const (
	ReplicatorReplicationInfoTargetCompressionTypeNone   = ReplicatorReplicationInfoTargetCompressionType("NONE")
	ReplicatorReplicationInfoTargetCompressionTypeGzip   = ReplicatorReplicationInfoTargetCompressionType("GZIP")
	ReplicatorReplicationInfoTargetCompressionTypeSnappy = ReplicatorReplicationInfoTargetCompressionType("SNAPPY")
	ReplicatorReplicationInfoTargetCompressionTypeLz4    = ReplicatorReplicationInfoTargetCompressionType("LZ4")
	ReplicatorReplicationInfoTargetCompressionTypeZstd   = ReplicatorReplicationInfoTargetCompressionType("ZSTD")
)

func (ReplicatorReplicationInfoTargetCompressionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorReplicationInfoTargetCompressionType)(nil)).Elem()
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToReplicatorReplicationInfoTargetCompressionTypeOutput() ReplicatorReplicationInfoTargetCompressionTypeOutput {
	return pulumi.ToOutput(e).(ReplicatorReplicationInfoTargetCompressionTypeOutput)
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToReplicatorReplicationInfoTargetCompressionTypeOutputWithContext(ctx context.Context) ReplicatorReplicationInfoTargetCompressionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReplicatorReplicationInfoTargetCompressionTypeOutput)
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToReplicatorReplicationInfoTargetCompressionTypePtrOutput() ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return e.ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(context.Background())
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(ctx context.Context) ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return ReplicatorReplicationInfoTargetCompressionType(e).ToReplicatorReplicationInfoTargetCompressionTypeOutputWithContext(ctx).ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(ctx)
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReplicatorReplicationInfoTargetCompressionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReplicatorReplicationInfoTargetCompressionTypeOutput struct{ *pulumi.OutputState }

func (ReplicatorReplicationInfoTargetCompressionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorReplicationInfoTargetCompressionType)(nil)).Elem()
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToReplicatorReplicationInfoTargetCompressionTypeOutput() ReplicatorReplicationInfoTargetCompressionTypeOutput {
	return o
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToReplicatorReplicationInfoTargetCompressionTypeOutputWithContext(ctx context.Context) ReplicatorReplicationInfoTargetCompressionTypeOutput {
	return o
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToReplicatorReplicationInfoTargetCompressionTypePtrOutput() ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return o.ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(context.Background())
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(ctx context.Context) ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicatorReplicationInfoTargetCompressionType) *ReplicatorReplicationInfoTargetCompressionType {
		return &v
	}).(ReplicatorReplicationInfoTargetCompressionTypePtrOutput)
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorReplicationInfoTargetCompressionType] {
	return pulumix.Output[ReplicatorReplicationInfoTargetCompressionType]{
		OutputState: o.OutputState,
	}
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReplicatorReplicationInfoTargetCompressionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReplicatorReplicationInfoTargetCompressionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReplicatorReplicationInfoTargetCompressionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReplicatorReplicationInfoTargetCompressionTypePtrOutput struct{ *pulumi.OutputState }

func (ReplicatorReplicationInfoTargetCompressionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicatorReplicationInfoTargetCompressionType)(nil)).Elem()
}

func (o ReplicatorReplicationInfoTargetCompressionTypePtrOutput) ToReplicatorReplicationInfoTargetCompressionTypePtrOutput() ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return o
}

func (o ReplicatorReplicationInfoTargetCompressionTypePtrOutput) ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(ctx context.Context) ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return o
}

func (o ReplicatorReplicationInfoTargetCompressionTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReplicatorReplicationInfoTargetCompressionType] {
	return pulumix.Output[*ReplicatorReplicationInfoTargetCompressionType]{
		OutputState: o.OutputState,
	}
}

func (o ReplicatorReplicationInfoTargetCompressionTypePtrOutput) Elem() ReplicatorReplicationInfoTargetCompressionTypeOutput {
	return o.ApplyT(func(v *ReplicatorReplicationInfoTargetCompressionType) ReplicatorReplicationInfoTargetCompressionType {
		if v != nil {
			return *v
		}
		var ret ReplicatorReplicationInfoTargetCompressionType
		return ret
	}).(ReplicatorReplicationInfoTargetCompressionTypeOutput)
}

func (o ReplicatorReplicationInfoTargetCompressionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReplicatorReplicationInfoTargetCompressionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReplicatorReplicationInfoTargetCompressionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReplicatorReplicationInfoTargetCompressionTypeInput is an input type that accepts ReplicatorReplicationInfoTargetCompressionTypeArgs and ReplicatorReplicationInfoTargetCompressionTypeOutput values.
// You can construct a concrete instance of `ReplicatorReplicationInfoTargetCompressionTypeInput` via:
//
//	ReplicatorReplicationInfoTargetCompressionTypeArgs{...}
type ReplicatorReplicationInfoTargetCompressionTypeInput interface {
	pulumi.Input

	ToReplicatorReplicationInfoTargetCompressionTypeOutput() ReplicatorReplicationInfoTargetCompressionTypeOutput
	ToReplicatorReplicationInfoTargetCompressionTypeOutputWithContext(context.Context) ReplicatorReplicationInfoTargetCompressionTypeOutput
}

var replicatorReplicationInfoTargetCompressionTypePtrType = reflect.TypeOf((**ReplicatorReplicationInfoTargetCompressionType)(nil)).Elem()

type ReplicatorReplicationInfoTargetCompressionTypePtrInput interface {
	pulumi.Input

	ToReplicatorReplicationInfoTargetCompressionTypePtrOutput() ReplicatorReplicationInfoTargetCompressionTypePtrOutput
	ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(context.Context) ReplicatorReplicationInfoTargetCompressionTypePtrOutput
}

type replicatorReplicationInfoTargetCompressionTypePtr string

func ReplicatorReplicationInfoTargetCompressionTypePtr(v string) ReplicatorReplicationInfoTargetCompressionTypePtrInput {
	return (*replicatorReplicationInfoTargetCompressionTypePtr)(&v)
}

func (*replicatorReplicationInfoTargetCompressionTypePtr) ElementType() reflect.Type {
	return replicatorReplicationInfoTargetCompressionTypePtrType
}

func (in *replicatorReplicationInfoTargetCompressionTypePtr) ToReplicatorReplicationInfoTargetCompressionTypePtrOutput() ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return pulumi.ToOutput(in).(ReplicatorReplicationInfoTargetCompressionTypePtrOutput)
}

func (in *replicatorReplicationInfoTargetCompressionTypePtr) ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(ctx context.Context) ReplicatorReplicationInfoTargetCompressionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReplicatorReplicationInfoTargetCompressionTypePtrOutput)
}

func (in *replicatorReplicationInfoTargetCompressionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReplicatorReplicationInfoTargetCompressionType] {
	return pulumix.Output[*ReplicatorReplicationInfoTargetCompressionType]{
		OutputState: in.ToReplicatorReplicationInfoTargetCompressionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of private link authentication
type VpcConnectionAuthentication string

const (
	VpcConnectionAuthenticationSaslIam   = VpcConnectionAuthentication("SASL_IAM")
	VpcConnectionAuthenticationSaslScram = VpcConnectionAuthentication("SASL_SCRAM")
	VpcConnectionAuthenticationTls       = VpcConnectionAuthentication("TLS")
)

func (VpcConnectionAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionAuthentication)(nil)).Elem()
}

func (e VpcConnectionAuthentication) ToVpcConnectionAuthenticationOutput() VpcConnectionAuthenticationOutput {
	return pulumi.ToOutput(e).(VpcConnectionAuthenticationOutput)
}

func (e VpcConnectionAuthentication) ToVpcConnectionAuthenticationOutputWithContext(ctx context.Context) VpcConnectionAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VpcConnectionAuthenticationOutput)
}

func (e VpcConnectionAuthentication) ToVpcConnectionAuthenticationPtrOutput() VpcConnectionAuthenticationPtrOutput {
	return e.ToVpcConnectionAuthenticationPtrOutputWithContext(context.Background())
}

func (e VpcConnectionAuthentication) ToVpcConnectionAuthenticationPtrOutputWithContext(ctx context.Context) VpcConnectionAuthenticationPtrOutput {
	return VpcConnectionAuthentication(e).ToVpcConnectionAuthenticationOutputWithContext(ctx).ToVpcConnectionAuthenticationPtrOutputWithContext(ctx)
}

func (e VpcConnectionAuthentication) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VpcConnectionAuthentication) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VpcConnectionAuthentication) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VpcConnectionAuthentication) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VpcConnectionAuthenticationOutput struct{ *pulumi.OutputState }

func (VpcConnectionAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionAuthentication)(nil)).Elem()
}

func (o VpcConnectionAuthenticationOutput) ToVpcConnectionAuthenticationOutput() VpcConnectionAuthenticationOutput {
	return o
}

func (o VpcConnectionAuthenticationOutput) ToVpcConnectionAuthenticationOutputWithContext(ctx context.Context) VpcConnectionAuthenticationOutput {
	return o
}

func (o VpcConnectionAuthenticationOutput) ToVpcConnectionAuthenticationPtrOutput() VpcConnectionAuthenticationPtrOutput {
	return o.ToVpcConnectionAuthenticationPtrOutputWithContext(context.Background())
}

func (o VpcConnectionAuthenticationOutput) ToVpcConnectionAuthenticationPtrOutputWithContext(ctx context.Context) VpcConnectionAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcConnectionAuthentication) *VpcConnectionAuthentication {
		return &v
	}).(VpcConnectionAuthenticationPtrOutput)
}

func (o VpcConnectionAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionAuthentication] {
	return pulumix.Output[VpcConnectionAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionAuthenticationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VpcConnectionAuthenticationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VpcConnectionAuthentication) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VpcConnectionAuthenticationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VpcConnectionAuthenticationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VpcConnectionAuthentication) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VpcConnectionAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (VpcConnectionAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionAuthentication)(nil)).Elem()
}

func (o VpcConnectionAuthenticationPtrOutput) ToVpcConnectionAuthenticationPtrOutput() VpcConnectionAuthenticationPtrOutput {
	return o
}

func (o VpcConnectionAuthenticationPtrOutput) ToVpcConnectionAuthenticationPtrOutputWithContext(ctx context.Context) VpcConnectionAuthenticationPtrOutput {
	return o
}

func (o VpcConnectionAuthenticationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcConnectionAuthentication] {
	return pulumix.Output[*VpcConnectionAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionAuthenticationPtrOutput) Elem() VpcConnectionAuthenticationOutput {
	return o.ApplyT(func(v *VpcConnectionAuthentication) VpcConnectionAuthentication {
		if v != nil {
			return *v
		}
		var ret VpcConnectionAuthentication
		return ret
	}).(VpcConnectionAuthenticationOutput)
}

func (o VpcConnectionAuthenticationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VpcConnectionAuthenticationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VpcConnectionAuthentication) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VpcConnectionAuthenticationInput is an input type that accepts VpcConnectionAuthenticationArgs and VpcConnectionAuthenticationOutput values.
// You can construct a concrete instance of `VpcConnectionAuthenticationInput` via:
//
//	VpcConnectionAuthenticationArgs{...}
type VpcConnectionAuthenticationInput interface {
	pulumi.Input

	ToVpcConnectionAuthenticationOutput() VpcConnectionAuthenticationOutput
	ToVpcConnectionAuthenticationOutputWithContext(context.Context) VpcConnectionAuthenticationOutput
}

var vpcConnectionAuthenticationPtrType = reflect.TypeOf((**VpcConnectionAuthentication)(nil)).Elem()

type VpcConnectionAuthenticationPtrInput interface {
	pulumi.Input

	ToVpcConnectionAuthenticationPtrOutput() VpcConnectionAuthenticationPtrOutput
	ToVpcConnectionAuthenticationPtrOutputWithContext(context.Context) VpcConnectionAuthenticationPtrOutput
}

type vpcConnectionAuthenticationPtr string

func VpcConnectionAuthenticationPtr(v string) VpcConnectionAuthenticationPtrInput {
	return (*vpcConnectionAuthenticationPtr)(&v)
}

func (*vpcConnectionAuthenticationPtr) ElementType() reflect.Type {
	return vpcConnectionAuthenticationPtrType
}

func (in *vpcConnectionAuthenticationPtr) ToVpcConnectionAuthenticationPtrOutput() VpcConnectionAuthenticationPtrOutput {
	return pulumi.ToOutput(in).(VpcConnectionAuthenticationPtrOutput)
}

func (in *vpcConnectionAuthenticationPtr) ToVpcConnectionAuthenticationPtrOutputWithContext(ctx context.Context) VpcConnectionAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VpcConnectionAuthenticationPtrOutput)
}

func (in *vpcConnectionAuthenticationPtr) ToOutput(ctx context.Context) pulumix.Output[*VpcConnectionAuthentication] {
	return pulumix.Output[*VpcConnectionAuthentication]{
		OutputState: in.ToVpcConnectionAuthenticationPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionInTransitClientBrokerInput)(nil)).Elem(), ClusterEncryptionInTransitClientBroker("TLS"))
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionInTransitClientBrokerPtrInput)(nil)).Elem(), ClusterEncryptionInTransitClientBroker("TLS"))
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEnhancedMonitoringInput)(nil)).Elem(), ClusterEnhancedMonitoring("DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEnhancedMonitoringPtrInput)(nil)).Elem(), ClusterEnhancedMonitoring("DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStorageModeInput)(nil)).Elem(), ClusterStorageMode("LOCAL"))
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStorageModePtrInput)(nil)).Elem(), ClusterStorageMode("LOCAL"))
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorReplicationInfoTargetCompressionTypeInput)(nil)).Elem(), ReplicatorReplicationInfoTargetCompressionType("NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorReplicationInfoTargetCompressionTypePtrInput)(nil)).Elem(), ReplicatorReplicationInfoTargetCompressionType("NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionAuthenticationInput)(nil)).Elem(), VpcConnectionAuthentication("SASL_IAM"))
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionAuthenticationPtrInput)(nil)).Elem(), VpcConnectionAuthentication("SASL_IAM"))
	pulumi.RegisterOutputType(ClusterEncryptionInTransitClientBrokerOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInTransitClientBrokerPtrOutput{})
	pulumi.RegisterOutputType(ClusterEnhancedMonitoringOutput{})
	pulumi.RegisterOutputType(ClusterEnhancedMonitoringPtrOutput{})
	pulumi.RegisterOutputType(ClusterStorageModeOutput{})
	pulumi.RegisterOutputType(ClusterStorageModePtrOutput{})
	pulumi.RegisterOutputType(ReplicatorReplicationInfoTargetCompressionTypeOutput{})
	pulumi.RegisterOutputType(ReplicatorReplicationInfoTargetCompressionTypePtrOutput{})
	pulumi.RegisterOutputType(VpcConnectionAuthenticationOutput{})
	pulumi.RegisterOutputType(VpcConnectionAuthenticationPtrOutput{})
}
