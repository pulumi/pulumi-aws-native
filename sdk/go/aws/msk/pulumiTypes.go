// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClusterBrokerLogs struct {
	CloudWatchLogs *ClusterCloudWatchLogs `pulumi:"cloudWatchLogs"`
	Firehose       *ClusterFirehose       `pulumi:"firehose"`
	S3             *ClusterS3             `pulumi:"s3"`
}

// ClusterBrokerLogsInput is an input type that accepts ClusterBrokerLogsArgs and ClusterBrokerLogsOutput values.
// You can construct a concrete instance of `ClusterBrokerLogsInput` via:
//
//	ClusterBrokerLogsArgs{...}
type ClusterBrokerLogsInput interface {
	pulumi.Input

	ToClusterBrokerLogsOutput() ClusterBrokerLogsOutput
	ToClusterBrokerLogsOutputWithContext(context.Context) ClusterBrokerLogsOutput
}

type ClusterBrokerLogsArgs struct {
	CloudWatchLogs ClusterCloudWatchLogsPtrInput `pulumi:"cloudWatchLogs"`
	Firehose       ClusterFirehosePtrInput       `pulumi:"firehose"`
	S3             ClusterS3PtrInput             `pulumi:"s3"`
}

func (ClusterBrokerLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerLogs)(nil)).Elem()
}

func (i ClusterBrokerLogsArgs) ToClusterBrokerLogsOutput() ClusterBrokerLogsOutput {
	return i.ToClusterBrokerLogsOutputWithContext(context.Background())
}

func (i ClusterBrokerLogsArgs) ToClusterBrokerLogsOutputWithContext(ctx context.Context) ClusterBrokerLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerLogsOutput)
}

func (i ClusterBrokerLogsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerLogs] {
	return pulumix.Output[ClusterBrokerLogs]{
		OutputState: i.ToClusterBrokerLogsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterBrokerLogsArgs) ToClusterBrokerLogsPtrOutput() ClusterBrokerLogsPtrOutput {
	return i.ToClusterBrokerLogsPtrOutputWithContext(context.Background())
}

func (i ClusterBrokerLogsArgs) ToClusterBrokerLogsPtrOutputWithContext(ctx context.Context) ClusterBrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerLogsOutput).ToClusterBrokerLogsPtrOutputWithContext(ctx)
}

// ClusterBrokerLogsPtrInput is an input type that accepts ClusterBrokerLogsArgs, ClusterBrokerLogsPtr and ClusterBrokerLogsPtrOutput values.
// You can construct a concrete instance of `ClusterBrokerLogsPtrInput` via:
//
//	        ClusterBrokerLogsArgs{...}
//
//	or:
//
//	        nil
type ClusterBrokerLogsPtrInput interface {
	pulumi.Input

	ToClusterBrokerLogsPtrOutput() ClusterBrokerLogsPtrOutput
	ToClusterBrokerLogsPtrOutputWithContext(context.Context) ClusterBrokerLogsPtrOutput
}

type clusterBrokerLogsPtrType ClusterBrokerLogsArgs

func ClusterBrokerLogsPtr(v *ClusterBrokerLogsArgs) ClusterBrokerLogsPtrInput {
	return (*clusterBrokerLogsPtrType)(v)
}

func (*clusterBrokerLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBrokerLogs)(nil)).Elem()
}

func (i *clusterBrokerLogsPtrType) ToClusterBrokerLogsPtrOutput() ClusterBrokerLogsPtrOutput {
	return i.ToClusterBrokerLogsPtrOutputWithContext(context.Background())
}

func (i *clusterBrokerLogsPtrType) ToClusterBrokerLogsPtrOutputWithContext(ctx context.Context) ClusterBrokerLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerLogsPtrOutput)
}

func (i *clusterBrokerLogsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerLogs] {
	return pulumix.Output[*ClusterBrokerLogs]{
		OutputState: i.ToClusterBrokerLogsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterBrokerLogsOutput struct{ *pulumi.OutputState }

func (ClusterBrokerLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerLogs)(nil)).Elem()
}

func (o ClusterBrokerLogsOutput) ToClusterBrokerLogsOutput() ClusterBrokerLogsOutput {
	return o
}

func (o ClusterBrokerLogsOutput) ToClusterBrokerLogsOutputWithContext(ctx context.Context) ClusterBrokerLogsOutput {
	return o
}

func (o ClusterBrokerLogsOutput) ToClusterBrokerLogsPtrOutput() ClusterBrokerLogsPtrOutput {
	return o.ToClusterBrokerLogsPtrOutputWithContext(context.Background())
}

func (o ClusterBrokerLogsOutput) ToClusterBrokerLogsPtrOutputWithContext(ctx context.Context) ClusterBrokerLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterBrokerLogs) *ClusterBrokerLogs {
		return &v
	}).(ClusterBrokerLogsPtrOutput)
}

func (o ClusterBrokerLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerLogs] {
	return pulumix.Output[ClusterBrokerLogs]{
		OutputState: o.OutputState,
	}
}

func (o ClusterBrokerLogsOutput) CloudWatchLogs() ClusterCloudWatchLogsPtrOutput {
	return o.ApplyT(func(v ClusterBrokerLogs) *ClusterCloudWatchLogs { return v.CloudWatchLogs }).(ClusterCloudWatchLogsPtrOutput)
}

func (o ClusterBrokerLogsOutput) Firehose() ClusterFirehosePtrOutput {
	return o.ApplyT(func(v ClusterBrokerLogs) *ClusterFirehose { return v.Firehose }).(ClusterFirehosePtrOutput)
}

func (o ClusterBrokerLogsOutput) S3() ClusterS3PtrOutput {
	return o.ApplyT(func(v ClusterBrokerLogs) *ClusterS3 { return v.S3 }).(ClusterS3PtrOutput)
}

type ClusterBrokerLogsPtrOutput struct{ *pulumi.OutputState }

func (ClusterBrokerLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBrokerLogs)(nil)).Elem()
}

func (o ClusterBrokerLogsPtrOutput) ToClusterBrokerLogsPtrOutput() ClusterBrokerLogsPtrOutput {
	return o
}

func (o ClusterBrokerLogsPtrOutput) ToClusterBrokerLogsPtrOutputWithContext(ctx context.Context) ClusterBrokerLogsPtrOutput {
	return o
}

func (o ClusterBrokerLogsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerLogs] {
	return pulumix.Output[*ClusterBrokerLogs]{
		OutputState: o.OutputState,
	}
}

func (o ClusterBrokerLogsPtrOutput) Elem() ClusterBrokerLogsOutput {
	return o.ApplyT(func(v *ClusterBrokerLogs) ClusterBrokerLogs {
		if v != nil {
			return *v
		}
		var ret ClusterBrokerLogs
		return ret
	}).(ClusterBrokerLogsOutput)
}

func (o ClusterBrokerLogsPtrOutput) CloudWatchLogs() ClusterCloudWatchLogsPtrOutput {
	return o.ApplyT(func(v *ClusterBrokerLogs) *ClusterCloudWatchLogs {
		if v == nil {
			return nil
		}
		return v.CloudWatchLogs
	}).(ClusterCloudWatchLogsPtrOutput)
}

func (o ClusterBrokerLogsPtrOutput) Firehose() ClusterFirehosePtrOutput {
	return o.ApplyT(func(v *ClusterBrokerLogs) *ClusterFirehose {
		if v == nil {
			return nil
		}
		return v.Firehose
	}).(ClusterFirehosePtrOutput)
}

func (o ClusterBrokerLogsPtrOutput) S3() ClusterS3PtrOutput {
	return o.ApplyT(func(v *ClusterBrokerLogs) *ClusterS3 {
		if v == nil {
			return nil
		}
		return v.S3
	}).(ClusterS3PtrOutput)
}

type ClusterBrokerNodeGroupInfo struct {
	BrokerAzDistribution *string                  `pulumi:"brokerAzDistribution"`
	ClientSubnets        []string                 `pulumi:"clientSubnets"`
	ConnectivityInfo     *ClusterConnectivityInfo `pulumi:"connectivityInfo"`
	InstanceType         string                   `pulumi:"instanceType"`
	SecurityGroups       []string                 `pulumi:"securityGroups"`
	StorageInfo          *ClusterStorageInfo      `pulumi:"storageInfo"`
}

// ClusterBrokerNodeGroupInfoInput is an input type that accepts ClusterBrokerNodeGroupInfoArgs and ClusterBrokerNodeGroupInfoOutput values.
// You can construct a concrete instance of `ClusterBrokerNodeGroupInfoInput` via:
//
//	ClusterBrokerNodeGroupInfoArgs{...}
type ClusterBrokerNodeGroupInfoInput interface {
	pulumi.Input

	ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput
	ToClusterBrokerNodeGroupInfoOutputWithContext(context.Context) ClusterBrokerNodeGroupInfoOutput
}

type ClusterBrokerNodeGroupInfoArgs struct {
	BrokerAzDistribution pulumi.StringPtrInput           `pulumi:"brokerAzDistribution"`
	ClientSubnets        pulumi.StringArrayInput         `pulumi:"clientSubnets"`
	ConnectivityInfo     ClusterConnectivityInfoPtrInput `pulumi:"connectivityInfo"`
	InstanceType         pulumi.StringInput              `pulumi:"instanceType"`
	SecurityGroups       pulumi.StringArrayInput         `pulumi:"securityGroups"`
	StorageInfo          ClusterStorageInfoPtrInput      `pulumi:"storageInfo"`
}

func (ClusterBrokerNodeGroupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput {
	return i.ToClusterBrokerNodeGroupInfoOutputWithContext(context.Background())
}

func (i ClusterBrokerNodeGroupInfoArgs) ToClusterBrokerNodeGroupInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBrokerNodeGroupInfoOutput)
}

func (i ClusterBrokerNodeGroupInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfo] {
	return pulumix.Output[ClusterBrokerNodeGroupInfo]{
		OutputState: i.ToClusterBrokerNodeGroupInfoOutputWithContext(ctx).OutputState,
	}
}

type ClusterBrokerNodeGroupInfoOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoOutput() ClusterBrokerNodeGroupInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoOutput) ToClusterBrokerNodeGroupInfoOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterBrokerNodeGroupInfo] {
	return pulumix.Output[ClusterBrokerNodeGroupInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterBrokerNodeGroupInfoOutput) BrokerAzDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) *string { return v.BrokerAzDistribution }).(pulumi.StringPtrOutput)
}

func (o ClusterBrokerNodeGroupInfoOutput) ClientSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) []string { return v.ClientSubnets }).(pulumi.StringArrayOutput)
}

func (o ClusterBrokerNodeGroupInfoOutput) ConnectivityInfo() ClusterConnectivityInfoPtrOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) *ClusterConnectivityInfo { return v.ConnectivityInfo }).(ClusterConnectivityInfoPtrOutput)
}

func (o ClusterBrokerNodeGroupInfoOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) string { return v.InstanceType }).(pulumi.StringOutput)
}

func (o ClusterBrokerNodeGroupInfoOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o ClusterBrokerNodeGroupInfoOutput) StorageInfo() ClusterStorageInfoPtrOutput {
	return o.ApplyT(func(v ClusterBrokerNodeGroupInfo) *ClusterStorageInfo { return v.StorageInfo }).(ClusterStorageInfoPtrOutput)
}

type ClusterBrokerNodeGroupInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterBrokerNodeGroupInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBrokerNodeGroupInfo)(nil)).Elem()
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ToClusterBrokerNodeGroupInfoPtrOutput() ClusterBrokerNodeGroupInfoPtrOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ToClusterBrokerNodeGroupInfoPtrOutputWithContext(ctx context.Context) ClusterBrokerNodeGroupInfoPtrOutput {
	return o
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterBrokerNodeGroupInfo] {
	return pulumix.Output[*ClusterBrokerNodeGroupInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) Elem() ClusterBrokerNodeGroupInfoOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) ClusterBrokerNodeGroupInfo {
		if v != nil {
			return *v
		}
		var ret ClusterBrokerNodeGroupInfo
		return ret
	}).(ClusterBrokerNodeGroupInfoOutput)
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) BrokerAzDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) *string {
		if v == nil {
			return nil
		}
		return v.BrokerAzDistribution
	}).(pulumi.StringPtrOutput)
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ClientSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) []string {
		if v == nil {
			return nil
		}
		return v.ClientSubnets
	}).(pulumi.StringArrayOutput)
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) ConnectivityInfo() ClusterConnectivityInfoPtrOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) *ClusterConnectivityInfo {
		if v == nil {
			return nil
		}
		return v.ConnectivityInfo
	}).(ClusterConnectivityInfoPtrOutput)
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceType
	}).(pulumi.StringPtrOutput)
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

func (o ClusterBrokerNodeGroupInfoPtrOutput) StorageInfo() ClusterStorageInfoPtrOutput {
	return o.ApplyT(func(v *ClusterBrokerNodeGroupInfo) *ClusterStorageInfo {
		if v == nil {
			return nil
		}
		return v.StorageInfo
	}).(ClusterStorageInfoPtrOutput)
}

type ClusterClientAuthentication struct {
	Sasl            *ClusterSasl            `pulumi:"sasl"`
	Tls             *ClusterTls             `pulumi:"tls"`
	Unauthenticated *ClusterUnauthenticated `pulumi:"unauthenticated"`
}

// ClusterClientAuthenticationInput is an input type that accepts ClusterClientAuthenticationArgs and ClusterClientAuthenticationOutput values.
// You can construct a concrete instance of `ClusterClientAuthenticationInput` via:
//
//	ClusterClientAuthenticationArgs{...}
type ClusterClientAuthenticationInput interface {
	pulumi.Input

	ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput
	ToClusterClientAuthenticationOutputWithContext(context.Context) ClusterClientAuthenticationOutput
}

type ClusterClientAuthenticationArgs struct {
	Sasl            ClusterSaslPtrInput            `pulumi:"sasl"`
	Tls             ClusterTlsPtrInput             `pulumi:"tls"`
	Unauthenticated ClusterUnauthenticatedPtrInput `pulumi:"unauthenticated"`
}

func (ClusterClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthentication)(nil)).Elem()
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput {
	return i.ToClusterClientAuthenticationOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationOutputWithContext(ctx context.Context) ClusterClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationOutput)
}

func (i ClusterClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterClientAuthentication] {
	return pulumix.Output[ClusterClientAuthentication]{
		OutputState: i.ToClusterClientAuthenticationOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return i.ToClusterClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i ClusterClientAuthenticationArgs) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationOutput).ToClusterClientAuthenticationPtrOutputWithContext(ctx)
}

// ClusterClientAuthenticationPtrInput is an input type that accepts ClusterClientAuthenticationArgs, ClusterClientAuthenticationPtr and ClusterClientAuthenticationPtrOutput values.
// You can construct a concrete instance of `ClusterClientAuthenticationPtrInput` via:
//
//	        ClusterClientAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ClusterClientAuthenticationPtrInput interface {
	pulumi.Input

	ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput
	ToClusterClientAuthenticationPtrOutputWithContext(context.Context) ClusterClientAuthenticationPtrOutput
}

type clusterClientAuthenticationPtrType ClusterClientAuthenticationArgs

func ClusterClientAuthenticationPtr(v *ClusterClientAuthenticationArgs) ClusterClientAuthenticationPtrInput {
	return (*clusterClientAuthenticationPtrType)(v)
}

func (*clusterClientAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientAuthentication)(nil)).Elem()
}

func (i *clusterClientAuthenticationPtrType) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return i.ToClusterClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i *clusterClientAuthenticationPtrType) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientAuthenticationPtrOutput)
}

func (i *clusterClientAuthenticationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterClientAuthentication] {
	return pulumix.Output[*ClusterClientAuthentication]{
		OutputState: i.ToClusterClientAuthenticationPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ClusterClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientAuthentication)(nil)).Elem()
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationOutput() ClusterClientAuthenticationOutput {
	return o
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationOutputWithContext(ctx context.Context) ClusterClientAuthenticationOutput {
	return o
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return o.ToClusterClientAuthenticationPtrOutputWithContext(context.Background())
}

func (o ClusterClientAuthenticationOutput) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterClientAuthentication) *ClusterClientAuthentication {
		return &v
	}).(ClusterClientAuthenticationPtrOutput)
}

func (o ClusterClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterClientAuthentication] {
	return pulumix.Output[ClusterClientAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ClusterClientAuthenticationOutput) Sasl() ClusterSaslPtrOutput {
	return o.ApplyT(func(v ClusterClientAuthentication) *ClusterSasl { return v.Sasl }).(ClusterSaslPtrOutput)
}

func (o ClusterClientAuthenticationOutput) Tls() ClusterTlsPtrOutput {
	return o.ApplyT(func(v ClusterClientAuthentication) *ClusterTls { return v.Tls }).(ClusterTlsPtrOutput)
}

func (o ClusterClientAuthenticationOutput) Unauthenticated() ClusterUnauthenticatedPtrOutput {
	return o.ApplyT(func(v ClusterClientAuthentication) *ClusterUnauthenticated { return v.Unauthenticated }).(ClusterUnauthenticatedPtrOutput)
}

type ClusterClientAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ClusterClientAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientAuthentication)(nil)).Elem()
}

func (o ClusterClientAuthenticationPtrOutput) ToClusterClientAuthenticationPtrOutput() ClusterClientAuthenticationPtrOutput {
	return o
}

func (o ClusterClientAuthenticationPtrOutput) ToClusterClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterClientAuthenticationPtrOutput {
	return o
}

func (o ClusterClientAuthenticationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterClientAuthentication] {
	return pulumix.Output[*ClusterClientAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ClusterClientAuthenticationPtrOutput) Elem() ClusterClientAuthenticationOutput {
	return o.ApplyT(func(v *ClusterClientAuthentication) ClusterClientAuthentication {
		if v != nil {
			return *v
		}
		var ret ClusterClientAuthentication
		return ret
	}).(ClusterClientAuthenticationOutput)
}

func (o ClusterClientAuthenticationPtrOutput) Sasl() ClusterSaslPtrOutput {
	return o.ApplyT(func(v *ClusterClientAuthentication) *ClusterSasl {
		if v == nil {
			return nil
		}
		return v.Sasl
	}).(ClusterSaslPtrOutput)
}

func (o ClusterClientAuthenticationPtrOutput) Tls() ClusterTlsPtrOutput {
	return o.ApplyT(func(v *ClusterClientAuthentication) *ClusterTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ClusterTlsPtrOutput)
}

func (o ClusterClientAuthenticationPtrOutput) Unauthenticated() ClusterUnauthenticatedPtrOutput {
	return o.ApplyT(func(v *ClusterClientAuthentication) *ClusterUnauthenticated {
		if v == nil {
			return nil
		}
		return v.Unauthenticated
	}).(ClusterUnauthenticatedPtrOutput)
}

type ClusterCloudWatchLogs struct {
	Enabled  bool    `pulumi:"enabled"`
	LogGroup *string `pulumi:"logGroup"`
}

// ClusterCloudWatchLogsInput is an input type that accepts ClusterCloudWatchLogsArgs and ClusterCloudWatchLogsOutput values.
// You can construct a concrete instance of `ClusterCloudWatchLogsInput` via:
//
//	ClusterCloudWatchLogsArgs{...}
type ClusterCloudWatchLogsInput interface {
	pulumi.Input

	ToClusterCloudWatchLogsOutput() ClusterCloudWatchLogsOutput
	ToClusterCloudWatchLogsOutputWithContext(context.Context) ClusterCloudWatchLogsOutput
}

type ClusterCloudWatchLogsArgs struct {
	Enabled  pulumi.BoolInput      `pulumi:"enabled"`
	LogGroup pulumi.StringPtrInput `pulumi:"logGroup"`
}

func (ClusterCloudWatchLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCloudWatchLogs)(nil)).Elem()
}

func (i ClusterCloudWatchLogsArgs) ToClusterCloudWatchLogsOutput() ClusterCloudWatchLogsOutput {
	return i.ToClusterCloudWatchLogsOutputWithContext(context.Background())
}

func (i ClusterCloudWatchLogsArgs) ToClusterCloudWatchLogsOutputWithContext(ctx context.Context) ClusterCloudWatchLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCloudWatchLogsOutput)
}

func (i ClusterCloudWatchLogsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterCloudWatchLogs] {
	return pulumix.Output[ClusterCloudWatchLogs]{
		OutputState: i.ToClusterCloudWatchLogsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterCloudWatchLogsArgs) ToClusterCloudWatchLogsPtrOutput() ClusterCloudWatchLogsPtrOutput {
	return i.ToClusterCloudWatchLogsPtrOutputWithContext(context.Background())
}

func (i ClusterCloudWatchLogsArgs) ToClusterCloudWatchLogsPtrOutputWithContext(ctx context.Context) ClusterCloudWatchLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCloudWatchLogsOutput).ToClusterCloudWatchLogsPtrOutputWithContext(ctx)
}

// ClusterCloudWatchLogsPtrInput is an input type that accepts ClusterCloudWatchLogsArgs, ClusterCloudWatchLogsPtr and ClusterCloudWatchLogsPtrOutput values.
// You can construct a concrete instance of `ClusterCloudWatchLogsPtrInput` via:
//
//	        ClusterCloudWatchLogsArgs{...}
//
//	or:
//
//	        nil
type ClusterCloudWatchLogsPtrInput interface {
	pulumi.Input

	ToClusterCloudWatchLogsPtrOutput() ClusterCloudWatchLogsPtrOutput
	ToClusterCloudWatchLogsPtrOutputWithContext(context.Context) ClusterCloudWatchLogsPtrOutput
}

type clusterCloudWatchLogsPtrType ClusterCloudWatchLogsArgs

func ClusterCloudWatchLogsPtr(v *ClusterCloudWatchLogsArgs) ClusterCloudWatchLogsPtrInput {
	return (*clusterCloudWatchLogsPtrType)(v)
}

func (*clusterCloudWatchLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCloudWatchLogs)(nil)).Elem()
}

func (i *clusterCloudWatchLogsPtrType) ToClusterCloudWatchLogsPtrOutput() ClusterCloudWatchLogsPtrOutput {
	return i.ToClusterCloudWatchLogsPtrOutputWithContext(context.Background())
}

func (i *clusterCloudWatchLogsPtrType) ToClusterCloudWatchLogsPtrOutputWithContext(ctx context.Context) ClusterCloudWatchLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCloudWatchLogsPtrOutput)
}

func (i *clusterCloudWatchLogsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterCloudWatchLogs] {
	return pulumix.Output[*ClusterCloudWatchLogs]{
		OutputState: i.ToClusterCloudWatchLogsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterCloudWatchLogsOutput struct{ *pulumi.OutputState }

func (ClusterCloudWatchLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCloudWatchLogs)(nil)).Elem()
}

func (o ClusterCloudWatchLogsOutput) ToClusterCloudWatchLogsOutput() ClusterCloudWatchLogsOutput {
	return o
}

func (o ClusterCloudWatchLogsOutput) ToClusterCloudWatchLogsOutputWithContext(ctx context.Context) ClusterCloudWatchLogsOutput {
	return o
}

func (o ClusterCloudWatchLogsOutput) ToClusterCloudWatchLogsPtrOutput() ClusterCloudWatchLogsPtrOutput {
	return o.ToClusterCloudWatchLogsPtrOutputWithContext(context.Background())
}

func (o ClusterCloudWatchLogsOutput) ToClusterCloudWatchLogsPtrOutputWithContext(ctx context.Context) ClusterCloudWatchLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterCloudWatchLogs) *ClusterCloudWatchLogs {
		return &v
	}).(ClusterCloudWatchLogsPtrOutput)
}

func (o ClusterCloudWatchLogsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCloudWatchLogs] {
	return pulumix.Output[ClusterCloudWatchLogs]{
		OutputState: o.OutputState,
	}
}

func (o ClusterCloudWatchLogsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterCloudWatchLogs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ClusterCloudWatchLogsOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCloudWatchLogs) *string { return v.LogGroup }).(pulumi.StringPtrOutput)
}

type ClusterCloudWatchLogsPtrOutput struct{ *pulumi.OutputState }

func (ClusterCloudWatchLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCloudWatchLogs)(nil)).Elem()
}

func (o ClusterCloudWatchLogsPtrOutput) ToClusterCloudWatchLogsPtrOutput() ClusterCloudWatchLogsPtrOutput {
	return o
}

func (o ClusterCloudWatchLogsPtrOutput) ToClusterCloudWatchLogsPtrOutputWithContext(ctx context.Context) ClusterCloudWatchLogsPtrOutput {
	return o
}

func (o ClusterCloudWatchLogsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterCloudWatchLogs] {
	return pulumix.Output[*ClusterCloudWatchLogs]{
		OutputState: o.OutputState,
	}
}

func (o ClusterCloudWatchLogsPtrOutput) Elem() ClusterCloudWatchLogsOutput {
	return o.ApplyT(func(v *ClusterCloudWatchLogs) ClusterCloudWatchLogs {
		if v != nil {
			return *v
		}
		var ret ClusterCloudWatchLogs
		return ret
	}).(ClusterCloudWatchLogsOutput)
}

func (o ClusterCloudWatchLogsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterCloudWatchLogs) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterCloudWatchLogsPtrOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCloudWatchLogs) *string {
		if v == nil {
			return nil
		}
		return v.LogGroup
	}).(pulumi.StringPtrOutput)
}

type ClusterConfigurationInfo struct {
	Arn      string `pulumi:"arn"`
	Revision int    `pulumi:"revision"`
}

// ClusterConfigurationInfoInput is an input type that accepts ClusterConfigurationInfoArgs and ClusterConfigurationInfoOutput values.
// You can construct a concrete instance of `ClusterConfigurationInfoInput` via:
//
//	ClusterConfigurationInfoArgs{...}
type ClusterConfigurationInfoInput interface {
	pulumi.Input

	ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput
	ToClusterConfigurationInfoOutputWithContext(context.Context) ClusterConfigurationInfoOutput
}

type ClusterConfigurationInfoArgs struct {
	Arn      pulumi.StringInput `pulumi:"arn"`
	Revision pulumi.IntInput    `pulumi:"revision"`
}

func (ClusterConfigurationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationInfo)(nil)).Elem()
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput {
	return i.ToClusterConfigurationInfoOutputWithContext(context.Background())
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoOutputWithContext(ctx context.Context) ClusterConfigurationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoOutput)
}

func (i ClusterConfigurationInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterConfigurationInfo] {
	return pulumix.Output[ClusterConfigurationInfo]{
		OutputState: i.ToClusterConfigurationInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return i.ToClusterConfigurationInfoPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationInfoArgs) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoOutput).ToClusterConfigurationInfoPtrOutputWithContext(ctx)
}

// ClusterConfigurationInfoPtrInput is an input type that accepts ClusterConfigurationInfoArgs, ClusterConfigurationInfoPtr and ClusterConfigurationInfoPtrOutput values.
// You can construct a concrete instance of `ClusterConfigurationInfoPtrInput` via:
//
//	        ClusterConfigurationInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigurationInfoPtrInput interface {
	pulumi.Input

	ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput
	ToClusterConfigurationInfoPtrOutputWithContext(context.Context) ClusterConfigurationInfoPtrOutput
}

type clusterConfigurationInfoPtrType ClusterConfigurationInfoArgs

func ClusterConfigurationInfoPtr(v *ClusterConfigurationInfoArgs) ClusterConfigurationInfoPtrInput {
	return (*clusterConfigurationInfoPtrType)(v)
}

func (*clusterConfigurationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationInfo)(nil)).Elem()
}

func (i *clusterConfigurationInfoPtrType) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return i.ToClusterConfigurationInfoPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationInfoPtrType) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationInfoPtrOutput)
}

func (i *clusterConfigurationInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfigurationInfo] {
	return pulumix.Output[*ClusterConfigurationInfo]{
		OutputState: i.ToClusterConfigurationInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterConfigurationInfoOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigurationInfo)(nil)).Elem()
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoOutput() ClusterConfigurationInfoOutput {
	return o
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoOutputWithContext(ctx context.Context) ClusterConfigurationInfoOutput {
	return o
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return o.ToClusterConfigurationInfoPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationInfoOutput) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfigurationInfo) *ClusterConfigurationInfo {
		return &v
	}).(ClusterConfigurationInfoPtrOutput)
}

func (o ClusterConfigurationInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfigurationInfo] {
	return pulumix.Output[ClusterConfigurationInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterConfigurationInfoOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConfigurationInfo) string { return v.Arn }).(pulumi.StringOutput)
}

func (o ClusterConfigurationInfoOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterConfigurationInfo) int { return v.Revision }).(pulumi.IntOutput)
}

type ClusterConfigurationInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigurationInfo)(nil)).Elem()
}

func (o ClusterConfigurationInfoPtrOutput) ToClusterConfigurationInfoPtrOutput() ClusterConfigurationInfoPtrOutput {
	return o
}

func (o ClusterConfigurationInfoPtrOutput) ToClusterConfigurationInfoPtrOutputWithContext(ctx context.Context) ClusterConfigurationInfoPtrOutput {
	return o
}

func (o ClusterConfigurationInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfigurationInfo] {
	return pulumix.Output[*ClusterConfigurationInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterConfigurationInfoPtrOutput) Elem() ClusterConfigurationInfoOutput {
	return o.ApplyT(func(v *ClusterConfigurationInfo) ClusterConfigurationInfo {
		if v != nil {
			return *v
		}
		var ret ClusterConfigurationInfo
		return ret
	}).(ClusterConfigurationInfoOutput)
}

func (o ClusterConfigurationInfoPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

func (o ClusterConfigurationInfoPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterConfigurationInfo) *int {
		if v == nil {
			return nil
		}
		return &v.Revision
	}).(pulumi.IntPtrOutput)
}

type ClusterConnectivityInfo struct {
	PublicAccess    *ClusterPublicAccess    `pulumi:"publicAccess"`
	VpcConnectivity *ClusterVpcConnectivity `pulumi:"vpcConnectivity"`
}

// ClusterConnectivityInfoInput is an input type that accepts ClusterConnectivityInfoArgs and ClusterConnectivityInfoOutput values.
// You can construct a concrete instance of `ClusterConnectivityInfoInput` via:
//
//	ClusterConnectivityInfoArgs{...}
type ClusterConnectivityInfoInput interface {
	pulumi.Input

	ToClusterConnectivityInfoOutput() ClusterConnectivityInfoOutput
	ToClusterConnectivityInfoOutputWithContext(context.Context) ClusterConnectivityInfoOutput
}

type ClusterConnectivityInfoArgs struct {
	PublicAccess    ClusterPublicAccessPtrInput    `pulumi:"publicAccess"`
	VpcConnectivity ClusterVpcConnectivityPtrInput `pulumi:"vpcConnectivity"`
}

func (ClusterConnectivityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConnectivityInfo)(nil)).Elem()
}

func (i ClusterConnectivityInfoArgs) ToClusterConnectivityInfoOutput() ClusterConnectivityInfoOutput {
	return i.ToClusterConnectivityInfoOutputWithContext(context.Background())
}

func (i ClusterConnectivityInfoArgs) ToClusterConnectivityInfoOutputWithContext(ctx context.Context) ClusterConnectivityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectivityInfoOutput)
}

func (i ClusterConnectivityInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterConnectivityInfo] {
	return pulumix.Output[ClusterConnectivityInfo]{
		OutputState: i.ToClusterConnectivityInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterConnectivityInfoArgs) ToClusterConnectivityInfoPtrOutput() ClusterConnectivityInfoPtrOutput {
	return i.ToClusterConnectivityInfoPtrOutputWithContext(context.Background())
}

func (i ClusterConnectivityInfoArgs) ToClusterConnectivityInfoPtrOutputWithContext(ctx context.Context) ClusterConnectivityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectivityInfoOutput).ToClusterConnectivityInfoPtrOutputWithContext(ctx)
}

// ClusterConnectivityInfoPtrInput is an input type that accepts ClusterConnectivityInfoArgs, ClusterConnectivityInfoPtr and ClusterConnectivityInfoPtrOutput values.
// You can construct a concrete instance of `ClusterConnectivityInfoPtrInput` via:
//
//	        ClusterConnectivityInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterConnectivityInfoPtrInput interface {
	pulumi.Input

	ToClusterConnectivityInfoPtrOutput() ClusterConnectivityInfoPtrOutput
	ToClusterConnectivityInfoPtrOutputWithContext(context.Context) ClusterConnectivityInfoPtrOutput
}

type clusterConnectivityInfoPtrType ClusterConnectivityInfoArgs

func ClusterConnectivityInfoPtr(v *ClusterConnectivityInfoArgs) ClusterConnectivityInfoPtrInput {
	return (*clusterConnectivityInfoPtrType)(v)
}

func (*clusterConnectivityInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConnectivityInfo)(nil)).Elem()
}

func (i *clusterConnectivityInfoPtrType) ToClusterConnectivityInfoPtrOutput() ClusterConnectivityInfoPtrOutput {
	return i.ToClusterConnectivityInfoPtrOutputWithContext(context.Background())
}

func (i *clusterConnectivityInfoPtrType) ToClusterConnectivityInfoPtrOutputWithContext(ctx context.Context) ClusterConnectivityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectivityInfoPtrOutput)
}

func (i *clusterConnectivityInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterConnectivityInfo] {
	return pulumix.Output[*ClusterConnectivityInfo]{
		OutputState: i.ToClusterConnectivityInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterConnectivityInfoOutput struct{ *pulumi.OutputState }

func (ClusterConnectivityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConnectivityInfo)(nil)).Elem()
}

func (o ClusterConnectivityInfoOutput) ToClusterConnectivityInfoOutput() ClusterConnectivityInfoOutput {
	return o
}

func (o ClusterConnectivityInfoOutput) ToClusterConnectivityInfoOutputWithContext(ctx context.Context) ClusterConnectivityInfoOutput {
	return o
}

func (o ClusterConnectivityInfoOutput) ToClusterConnectivityInfoPtrOutput() ClusterConnectivityInfoPtrOutput {
	return o.ToClusterConnectivityInfoPtrOutputWithContext(context.Background())
}

func (o ClusterConnectivityInfoOutput) ToClusterConnectivityInfoPtrOutputWithContext(ctx context.Context) ClusterConnectivityInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConnectivityInfo) *ClusterConnectivityInfo {
		return &v
	}).(ClusterConnectivityInfoPtrOutput)
}

func (o ClusterConnectivityInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConnectivityInfo] {
	return pulumix.Output[ClusterConnectivityInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterConnectivityInfoOutput) PublicAccess() ClusterPublicAccessPtrOutput {
	return o.ApplyT(func(v ClusterConnectivityInfo) *ClusterPublicAccess { return v.PublicAccess }).(ClusterPublicAccessPtrOutput)
}

func (o ClusterConnectivityInfoOutput) VpcConnectivity() ClusterVpcConnectivityPtrOutput {
	return o.ApplyT(func(v ClusterConnectivityInfo) *ClusterVpcConnectivity { return v.VpcConnectivity }).(ClusterVpcConnectivityPtrOutput)
}

type ClusterConnectivityInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterConnectivityInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConnectivityInfo)(nil)).Elem()
}

func (o ClusterConnectivityInfoPtrOutput) ToClusterConnectivityInfoPtrOutput() ClusterConnectivityInfoPtrOutput {
	return o
}

func (o ClusterConnectivityInfoPtrOutput) ToClusterConnectivityInfoPtrOutputWithContext(ctx context.Context) ClusterConnectivityInfoPtrOutput {
	return o
}

func (o ClusterConnectivityInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterConnectivityInfo] {
	return pulumix.Output[*ClusterConnectivityInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterConnectivityInfoPtrOutput) Elem() ClusterConnectivityInfoOutput {
	return o.ApplyT(func(v *ClusterConnectivityInfo) ClusterConnectivityInfo {
		if v != nil {
			return *v
		}
		var ret ClusterConnectivityInfo
		return ret
	}).(ClusterConnectivityInfoOutput)
}

func (o ClusterConnectivityInfoPtrOutput) PublicAccess() ClusterPublicAccessPtrOutput {
	return o.ApplyT(func(v *ClusterConnectivityInfo) *ClusterPublicAccess {
		if v == nil {
			return nil
		}
		return v.PublicAccess
	}).(ClusterPublicAccessPtrOutput)
}

func (o ClusterConnectivityInfoPtrOutput) VpcConnectivity() ClusterVpcConnectivityPtrOutput {
	return o.ApplyT(func(v *ClusterConnectivityInfo) *ClusterVpcConnectivity {
		if v == nil {
			return nil
		}
		return v.VpcConnectivity
	}).(ClusterVpcConnectivityPtrOutput)
}

type ClusterEbsStorageInfo struct {
	ProvisionedThroughput *ClusterProvisionedThroughput `pulumi:"provisionedThroughput"`
	VolumeSize            *int                          `pulumi:"volumeSize"`
}

// ClusterEbsStorageInfoInput is an input type that accepts ClusterEbsStorageInfoArgs and ClusterEbsStorageInfoOutput values.
// You can construct a concrete instance of `ClusterEbsStorageInfoInput` via:
//
//	ClusterEbsStorageInfoArgs{...}
type ClusterEbsStorageInfoInput interface {
	pulumi.Input

	ToClusterEbsStorageInfoOutput() ClusterEbsStorageInfoOutput
	ToClusterEbsStorageInfoOutputWithContext(context.Context) ClusterEbsStorageInfoOutput
}

type ClusterEbsStorageInfoArgs struct {
	ProvisionedThroughput ClusterProvisionedThroughputPtrInput `pulumi:"provisionedThroughput"`
	VolumeSize            pulumi.IntPtrInput                   `pulumi:"volumeSize"`
}

func (ClusterEbsStorageInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEbsStorageInfo)(nil)).Elem()
}

func (i ClusterEbsStorageInfoArgs) ToClusterEbsStorageInfoOutput() ClusterEbsStorageInfoOutput {
	return i.ToClusterEbsStorageInfoOutputWithContext(context.Background())
}

func (i ClusterEbsStorageInfoArgs) ToClusterEbsStorageInfoOutputWithContext(ctx context.Context) ClusterEbsStorageInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEbsStorageInfoOutput)
}

func (i ClusterEbsStorageInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterEbsStorageInfo] {
	return pulumix.Output[ClusterEbsStorageInfo]{
		OutputState: i.ToClusterEbsStorageInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterEbsStorageInfoArgs) ToClusterEbsStorageInfoPtrOutput() ClusterEbsStorageInfoPtrOutput {
	return i.ToClusterEbsStorageInfoPtrOutputWithContext(context.Background())
}

func (i ClusterEbsStorageInfoArgs) ToClusterEbsStorageInfoPtrOutputWithContext(ctx context.Context) ClusterEbsStorageInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEbsStorageInfoOutput).ToClusterEbsStorageInfoPtrOutputWithContext(ctx)
}

// ClusterEbsStorageInfoPtrInput is an input type that accepts ClusterEbsStorageInfoArgs, ClusterEbsStorageInfoPtr and ClusterEbsStorageInfoPtrOutput values.
// You can construct a concrete instance of `ClusterEbsStorageInfoPtrInput` via:
//
//	        ClusterEbsStorageInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterEbsStorageInfoPtrInput interface {
	pulumi.Input

	ToClusterEbsStorageInfoPtrOutput() ClusterEbsStorageInfoPtrOutput
	ToClusterEbsStorageInfoPtrOutputWithContext(context.Context) ClusterEbsStorageInfoPtrOutput
}

type clusterEbsStorageInfoPtrType ClusterEbsStorageInfoArgs

func ClusterEbsStorageInfoPtr(v *ClusterEbsStorageInfoArgs) ClusterEbsStorageInfoPtrInput {
	return (*clusterEbsStorageInfoPtrType)(v)
}

func (*clusterEbsStorageInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEbsStorageInfo)(nil)).Elem()
}

func (i *clusterEbsStorageInfoPtrType) ToClusterEbsStorageInfoPtrOutput() ClusterEbsStorageInfoPtrOutput {
	return i.ToClusterEbsStorageInfoPtrOutputWithContext(context.Background())
}

func (i *clusterEbsStorageInfoPtrType) ToClusterEbsStorageInfoPtrOutputWithContext(ctx context.Context) ClusterEbsStorageInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEbsStorageInfoPtrOutput)
}

func (i *clusterEbsStorageInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterEbsStorageInfo] {
	return pulumix.Output[*ClusterEbsStorageInfo]{
		OutputState: i.ToClusterEbsStorageInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterEbsStorageInfoOutput struct{ *pulumi.OutputState }

func (ClusterEbsStorageInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEbsStorageInfo)(nil)).Elem()
}

func (o ClusterEbsStorageInfoOutput) ToClusterEbsStorageInfoOutput() ClusterEbsStorageInfoOutput {
	return o
}

func (o ClusterEbsStorageInfoOutput) ToClusterEbsStorageInfoOutputWithContext(ctx context.Context) ClusterEbsStorageInfoOutput {
	return o
}

func (o ClusterEbsStorageInfoOutput) ToClusterEbsStorageInfoPtrOutput() ClusterEbsStorageInfoPtrOutput {
	return o.ToClusterEbsStorageInfoPtrOutputWithContext(context.Background())
}

func (o ClusterEbsStorageInfoOutput) ToClusterEbsStorageInfoPtrOutputWithContext(ctx context.Context) ClusterEbsStorageInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEbsStorageInfo) *ClusterEbsStorageInfo {
		return &v
	}).(ClusterEbsStorageInfoPtrOutput)
}

func (o ClusterEbsStorageInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEbsStorageInfo] {
	return pulumix.Output[ClusterEbsStorageInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEbsStorageInfoOutput) ProvisionedThroughput() ClusterProvisionedThroughputPtrOutput {
	return o.ApplyT(func(v ClusterEbsStorageInfo) *ClusterProvisionedThroughput { return v.ProvisionedThroughput }).(ClusterProvisionedThroughputPtrOutput)
}

func (o ClusterEbsStorageInfoOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterEbsStorageInfo) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

type ClusterEbsStorageInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterEbsStorageInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEbsStorageInfo)(nil)).Elem()
}

func (o ClusterEbsStorageInfoPtrOutput) ToClusterEbsStorageInfoPtrOutput() ClusterEbsStorageInfoPtrOutput {
	return o
}

func (o ClusterEbsStorageInfoPtrOutput) ToClusterEbsStorageInfoPtrOutputWithContext(ctx context.Context) ClusterEbsStorageInfoPtrOutput {
	return o
}

func (o ClusterEbsStorageInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterEbsStorageInfo] {
	return pulumix.Output[*ClusterEbsStorageInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEbsStorageInfoPtrOutput) Elem() ClusterEbsStorageInfoOutput {
	return o.ApplyT(func(v *ClusterEbsStorageInfo) ClusterEbsStorageInfo {
		if v != nil {
			return *v
		}
		var ret ClusterEbsStorageInfo
		return ret
	}).(ClusterEbsStorageInfoOutput)
}

func (o ClusterEbsStorageInfoPtrOutput) ProvisionedThroughput() ClusterProvisionedThroughputPtrOutput {
	return o.ApplyT(func(v *ClusterEbsStorageInfo) *ClusterProvisionedThroughput {
		if v == nil {
			return nil
		}
		return v.ProvisionedThroughput
	}).(ClusterProvisionedThroughputPtrOutput)
}

func (o ClusterEbsStorageInfoPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterEbsStorageInfo) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

type ClusterEncryptionAtRest struct {
	DataVolumeKmsKeyId string `pulumi:"dataVolumeKmsKeyId"`
}

// ClusterEncryptionAtRestInput is an input type that accepts ClusterEncryptionAtRestArgs and ClusterEncryptionAtRestOutput values.
// You can construct a concrete instance of `ClusterEncryptionAtRestInput` via:
//
//	ClusterEncryptionAtRestArgs{...}
type ClusterEncryptionAtRestInput interface {
	pulumi.Input

	ToClusterEncryptionAtRestOutput() ClusterEncryptionAtRestOutput
	ToClusterEncryptionAtRestOutputWithContext(context.Context) ClusterEncryptionAtRestOutput
}

type ClusterEncryptionAtRestArgs struct {
	DataVolumeKmsKeyId pulumi.StringInput `pulumi:"dataVolumeKmsKeyId"`
}

func (ClusterEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionAtRest)(nil)).Elem()
}

func (i ClusterEncryptionAtRestArgs) ToClusterEncryptionAtRestOutput() ClusterEncryptionAtRestOutput {
	return i.ToClusterEncryptionAtRestOutputWithContext(context.Background())
}

func (i ClusterEncryptionAtRestArgs) ToClusterEncryptionAtRestOutputWithContext(ctx context.Context) ClusterEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionAtRestOutput)
}

func (i ClusterEncryptionAtRestArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionAtRest] {
	return pulumix.Output[ClusterEncryptionAtRest]{
		OutputState: i.ToClusterEncryptionAtRestOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterEncryptionAtRestArgs) ToClusterEncryptionAtRestPtrOutput() ClusterEncryptionAtRestPtrOutput {
	return i.ToClusterEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionAtRestArgs) ToClusterEncryptionAtRestPtrOutputWithContext(ctx context.Context) ClusterEncryptionAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionAtRestOutput).ToClusterEncryptionAtRestPtrOutputWithContext(ctx)
}

// ClusterEncryptionAtRestPtrInput is an input type that accepts ClusterEncryptionAtRestArgs, ClusterEncryptionAtRestPtr and ClusterEncryptionAtRestPtrOutput values.
// You can construct a concrete instance of `ClusterEncryptionAtRestPtrInput` via:
//
//	        ClusterEncryptionAtRestArgs{...}
//
//	or:
//
//	        nil
type ClusterEncryptionAtRestPtrInput interface {
	pulumi.Input

	ToClusterEncryptionAtRestPtrOutput() ClusterEncryptionAtRestPtrOutput
	ToClusterEncryptionAtRestPtrOutputWithContext(context.Context) ClusterEncryptionAtRestPtrOutput
}

type clusterEncryptionAtRestPtrType ClusterEncryptionAtRestArgs

func ClusterEncryptionAtRestPtr(v *ClusterEncryptionAtRestArgs) ClusterEncryptionAtRestPtrInput {
	return (*clusterEncryptionAtRestPtrType)(v)
}

func (*clusterEncryptionAtRestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionAtRest)(nil)).Elem()
}

func (i *clusterEncryptionAtRestPtrType) ToClusterEncryptionAtRestPtrOutput() ClusterEncryptionAtRestPtrOutput {
	return i.ToClusterEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionAtRestPtrType) ToClusterEncryptionAtRestPtrOutputWithContext(ctx context.Context) ClusterEncryptionAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionAtRestPtrOutput)
}

func (i *clusterEncryptionAtRestPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionAtRest] {
	return pulumix.Output[*ClusterEncryptionAtRest]{
		OutputState: i.ToClusterEncryptionAtRestPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionAtRest)(nil)).Elem()
}

func (o ClusterEncryptionAtRestOutput) ToClusterEncryptionAtRestOutput() ClusterEncryptionAtRestOutput {
	return o
}

func (o ClusterEncryptionAtRestOutput) ToClusterEncryptionAtRestOutputWithContext(ctx context.Context) ClusterEncryptionAtRestOutput {
	return o
}

func (o ClusterEncryptionAtRestOutput) ToClusterEncryptionAtRestPtrOutput() ClusterEncryptionAtRestPtrOutput {
	return o.ToClusterEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionAtRestOutput) ToClusterEncryptionAtRestPtrOutputWithContext(ctx context.Context) ClusterEncryptionAtRestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEncryptionAtRest) *ClusterEncryptionAtRest {
		return &v
	}).(ClusterEncryptionAtRestPtrOutput)
}

func (o ClusterEncryptionAtRestOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionAtRest] {
	return pulumix.Output[ClusterEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionAtRestOutput) DataVolumeKmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEncryptionAtRest) string { return v.DataVolumeKmsKeyId }).(pulumi.StringOutput)
}

type ClusterEncryptionAtRestPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionAtRestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionAtRest)(nil)).Elem()
}

func (o ClusterEncryptionAtRestPtrOutput) ToClusterEncryptionAtRestPtrOutput() ClusterEncryptionAtRestPtrOutput {
	return o
}

func (o ClusterEncryptionAtRestPtrOutput) ToClusterEncryptionAtRestPtrOutputWithContext(ctx context.Context) ClusterEncryptionAtRestPtrOutput {
	return o
}

func (o ClusterEncryptionAtRestPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionAtRest] {
	return pulumix.Output[*ClusterEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionAtRestPtrOutput) Elem() ClusterEncryptionAtRestOutput {
	return o.ApplyT(func(v *ClusterEncryptionAtRest) ClusterEncryptionAtRest {
		if v != nil {
			return *v
		}
		var ret ClusterEncryptionAtRest
		return ret
	}).(ClusterEncryptionAtRestOutput)
}

func (o ClusterEncryptionAtRestPtrOutput) DataVolumeKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionAtRest) *string {
		if v == nil {
			return nil
		}
		return &v.DataVolumeKmsKeyId
	}).(pulumi.StringPtrOutput)
}

type ClusterEncryptionInTransit struct {
	ClientBroker *ClusterEncryptionInTransitClientBroker `pulumi:"clientBroker"`
	InCluster    *bool                                   `pulumi:"inCluster"`
}

// ClusterEncryptionInTransitInput is an input type that accepts ClusterEncryptionInTransitArgs and ClusterEncryptionInTransitOutput values.
// You can construct a concrete instance of `ClusterEncryptionInTransitInput` via:
//
//	ClusterEncryptionInTransitArgs{...}
type ClusterEncryptionInTransitInput interface {
	pulumi.Input

	ToClusterEncryptionInTransitOutput() ClusterEncryptionInTransitOutput
	ToClusterEncryptionInTransitOutputWithContext(context.Context) ClusterEncryptionInTransitOutput
}

type ClusterEncryptionInTransitArgs struct {
	ClientBroker ClusterEncryptionInTransitClientBrokerPtrInput `pulumi:"clientBroker"`
	InCluster    pulumi.BoolPtrInput                            `pulumi:"inCluster"`
}

func (ClusterEncryptionInTransitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInTransit)(nil)).Elem()
}

func (i ClusterEncryptionInTransitArgs) ToClusterEncryptionInTransitOutput() ClusterEncryptionInTransitOutput {
	return i.ToClusterEncryptionInTransitOutputWithContext(context.Background())
}

func (i ClusterEncryptionInTransitArgs) ToClusterEncryptionInTransitOutputWithContext(ctx context.Context) ClusterEncryptionInTransitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInTransitOutput)
}

func (i ClusterEncryptionInTransitArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInTransit] {
	return pulumix.Output[ClusterEncryptionInTransit]{
		OutputState: i.ToClusterEncryptionInTransitOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterEncryptionInTransitArgs) ToClusterEncryptionInTransitPtrOutput() ClusterEncryptionInTransitPtrOutput {
	return i.ToClusterEncryptionInTransitPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionInTransitArgs) ToClusterEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInTransitOutput).ToClusterEncryptionInTransitPtrOutputWithContext(ctx)
}

// ClusterEncryptionInTransitPtrInput is an input type that accepts ClusterEncryptionInTransitArgs, ClusterEncryptionInTransitPtr and ClusterEncryptionInTransitPtrOutput values.
// You can construct a concrete instance of `ClusterEncryptionInTransitPtrInput` via:
//
//	        ClusterEncryptionInTransitArgs{...}
//
//	or:
//
//	        nil
type ClusterEncryptionInTransitPtrInput interface {
	pulumi.Input

	ToClusterEncryptionInTransitPtrOutput() ClusterEncryptionInTransitPtrOutput
	ToClusterEncryptionInTransitPtrOutputWithContext(context.Context) ClusterEncryptionInTransitPtrOutput
}

type clusterEncryptionInTransitPtrType ClusterEncryptionInTransitArgs

func ClusterEncryptionInTransitPtr(v *ClusterEncryptionInTransitArgs) ClusterEncryptionInTransitPtrInput {
	return (*clusterEncryptionInTransitPtrType)(v)
}

func (*clusterEncryptionInTransitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInTransit)(nil)).Elem()
}

func (i *clusterEncryptionInTransitPtrType) ToClusterEncryptionInTransitPtrOutput() ClusterEncryptionInTransitPtrOutput {
	return i.ToClusterEncryptionInTransitPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionInTransitPtrType) ToClusterEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInTransitPtrOutput)
}

func (i *clusterEncryptionInTransitPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInTransit] {
	return pulumix.Output[*ClusterEncryptionInTransit]{
		OutputState: i.ToClusterEncryptionInTransitPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterEncryptionInTransitOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInTransitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInTransit)(nil)).Elem()
}

func (o ClusterEncryptionInTransitOutput) ToClusterEncryptionInTransitOutput() ClusterEncryptionInTransitOutput {
	return o
}

func (o ClusterEncryptionInTransitOutput) ToClusterEncryptionInTransitOutputWithContext(ctx context.Context) ClusterEncryptionInTransitOutput {
	return o
}

func (o ClusterEncryptionInTransitOutput) ToClusterEncryptionInTransitPtrOutput() ClusterEncryptionInTransitPtrOutput {
	return o.ToClusterEncryptionInTransitPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInTransitOutput) ToClusterEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEncryptionInTransit) *ClusterEncryptionInTransit {
		return &v
	}).(ClusterEncryptionInTransitPtrOutput)
}

func (o ClusterEncryptionInTransitOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInTransit] {
	return pulumix.Output[ClusterEncryptionInTransit]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionInTransitOutput) ClientBroker() ClusterEncryptionInTransitClientBrokerPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionInTransit) *ClusterEncryptionInTransitClientBroker { return v.ClientBroker }).(ClusterEncryptionInTransitClientBrokerPtrOutput)
}

func (o ClusterEncryptionInTransitOutput) InCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionInTransit) *bool { return v.InCluster }).(pulumi.BoolPtrOutput)
}

type ClusterEncryptionInTransitPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInTransitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInTransit)(nil)).Elem()
}

func (o ClusterEncryptionInTransitPtrOutput) ToClusterEncryptionInTransitPtrOutput() ClusterEncryptionInTransitPtrOutput {
	return o
}

func (o ClusterEncryptionInTransitPtrOutput) ToClusterEncryptionInTransitPtrOutputWithContext(ctx context.Context) ClusterEncryptionInTransitPtrOutput {
	return o
}

func (o ClusterEncryptionInTransitPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInTransit] {
	return pulumix.Output[*ClusterEncryptionInTransit]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionInTransitPtrOutput) Elem() ClusterEncryptionInTransitOutput {
	return o.ApplyT(func(v *ClusterEncryptionInTransit) ClusterEncryptionInTransit {
		if v != nil {
			return *v
		}
		var ret ClusterEncryptionInTransit
		return ret
	}).(ClusterEncryptionInTransitOutput)
}

func (o ClusterEncryptionInTransitPtrOutput) ClientBroker() ClusterEncryptionInTransitClientBrokerPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionInTransit) *ClusterEncryptionInTransitClientBroker {
		if v == nil {
			return nil
		}
		return v.ClientBroker
	}).(ClusterEncryptionInTransitClientBrokerPtrOutput)
}

func (o ClusterEncryptionInTransitPtrOutput) InCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionInTransit) *bool {
		if v == nil {
			return nil
		}
		return v.InCluster
	}).(pulumi.BoolPtrOutput)
}

type ClusterEncryptionInfo struct {
	EncryptionAtRest    *ClusterEncryptionAtRest    `pulumi:"encryptionAtRest"`
	EncryptionInTransit *ClusterEncryptionInTransit `pulumi:"encryptionInTransit"`
}

// ClusterEncryptionInfoInput is an input type that accepts ClusterEncryptionInfoArgs and ClusterEncryptionInfoOutput values.
// You can construct a concrete instance of `ClusterEncryptionInfoInput` via:
//
//	ClusterEncryptionInfoArgs{...}
type ClusterEncryptionInfoInput interface {
	pulumi.Input

	ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput
	ToClusterEncryptionInfoOutputWithContext(context.Context) ClusterEncryptionInfoOutput
}

type ClusterEncryptionInfoArgs struct {
	EncryptionAtRest    ClusterEncryptionAtRestPtrInput    `pulumi:"encryptionAtRest"`
	EncryptionInTransit ClusterEncryptionInTransitPtrInput `pulumi:"encryptionInTransit"`
}

func (ClusterEncryptionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfo)(nil)).Elem()
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput {
	return i.ToClusterEncryptionInfoOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoOutputWithContext(ctx context.Context) ClusterEncryptionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoOutput)
}

func (i ClusterEncryptionInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInfo] {
	return pulumix.Output[ClusterEncryptionInfo]{
		OutputState: i.ToClusterEncryptionInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return i.ToClusterEncryptionInfoPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionInfoArgs) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoOutput).ToClusterEncryptionInfoPtrOutputWithContext(ctx)
}

// ClusterEncryptionInfoPtrInput is an input type that accepts ClusterEncryptionInfoArgs, ClusterEncryptionInfoPtr and ClusterEncryptionInfoPtrOutput values.
// You can construct a concrete instance of `ClusterEncryptionInfoPtrInput` via:
//
//	        ClusterEncryptionInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterEncryptionInfoPtrInput interface {
	pulumi.Input

	ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput
	ToClusterEncryptionInfoPtrOutputWithContext(context.Context) ClusterEncryptionInfoPtrOutput
}

type clusterEncryptionInfoPtrType ClusterEncryptionInfoArgs

func ClusterEncryptionInfoPtr(v *ClusterEncryptionInfoArgs) ClusterEncryptionInfoPtrInput {
	return (*clusterEncryptionInfoPtrType)(v)
}

func (*clusterEncryptionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInfo)(nil)).Elem()
}

func (i *clusterEncryptionInfoPtrType) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return i.ToClusterEncryptionInfoPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionInfoPtrType) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionInfoPtrOutput)
}

func (i *clusterEncryptionInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInfo] {
	return pulumix.Output[*ClusterEncryptionInfo]{
		OutputState: i.ToClusterEncryptionInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterEncryptionInfoOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionInfo)(nil)).Elem()
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoOutput() ClusterEncryptionInfoOutput {
	return o
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoOutputWithContext(ctx context.Context) ClusterEncryptionInfoOutput {
	return o
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return o.ToClusterEncryptionInfoPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionInfoOutput) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEncryptionInfo) *ClusterEncryptionInfo {
		return &v
	}).(ClusterEncryptionInfoPtrOutput)
}

func (o ClusterEncryptionInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterEncryptionInfo] {
	return pulumix.Output[ClusterEncryptionInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionInfoOutput) EncryptionAtRest() ClusterEncryptionAtRestPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionInfo) *ClusterEncryptionAtRest { return v.EncryptionAtRest }).(ClusterEncryptionAtRestPtrOutput)
}

func (o ClusterEncryptionInfoOutput) EncryptionInTransit() ClusterEncryptionInTransitPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionInfo) *ClusterEncryptionInTransit { return v.EncryptionInTransit }).(ClusterEncryptionInTransitPtrOutput)
}

type ClusterEncryptionInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionInfo)(nil)).Elem()
}

func (o ClusterEncryptionInfoPtrOutput) ToClusterEncryptionInfoPtrOutput() ClusterEncryptionInfoPtrOutput {
	return o
}

func (o ClusterEncryptionInfoPtrOutput) ToClusterEncryptionInfoPtrOutputWithContext(ctx context.Context) ClusterEncryptionInfoPtrOutput {
	return o
}

func (o ClusterEncryptionInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterEncryptionInfo] {
	return pulumix.Output[*ClusterEncryptionInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterEncryptionInfoPtrOutput) Elem() ClusterEncryptionInfoOutput {
	return o.ApplyT(func(v *ClusterEncryptionInfo) ClusterEncryptionInfo {
		if v != nil {
			return *v
		}
		var ret ClusterEncryptionInfo
		return ret
	}).(ClusterEncryptionInfoOutput)
}

func (o ClusterEncryptionInfoPtrOutput) EncryptionAtRest() ClusterEncryptionAtRestPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionInfo) *ClusterEncryptionAtRest {
		if v == nil {
			return nil
		}
		return v.EncryptionAtRest
	}).(ClusterEncryptionAtRestPtrOutput)
}

func (o ClusterEncryptionInfoPtrOutput) EncryptionInTransit() ClusterEncryptionInTransitPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionInfo) *ClusterEncryptionInTransit {
		if v == nil {
			return nil
		}
		return v.EncryptionInTransit
	}).(ClusterEncryptionInTransitPtrOutput)
}

type ClusterFirehose struct {
	DeliveryStream *string `pulumi:"deliveryStream"`
	Enabled        bool    `pulumi:"enabled"`
}

// ClusterFirehoseInput is an input type that accepts ClusterFirehoseArgs and ClusterFirehoseOutput values.
// You can construct a concrete instance of `ClusterFirehoseInput` via:
//
//	ClusterFirehoseArgs{...}
type ClusterFirehoseInput interface {
	pulumi.Input

	ToClusterFirehoseOutput() ClusterFirehoseOutput
	ToClusterFirehoseOutputWithContext(context.Context) ClusterFirehoseOutput
}

type ClusterFirehoseArgs struct {
	DeliveryStream pulumi.StringPtrInput `pulumi:"deliveryStream"`
	Enabled        pulumi.BoolInput      `pulumi:"enabled"`
}

func (ClusterFirehoseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterFirehose)(nil)).Elem()
}

func (i ClusterFirehoseArgs) ToClusterFirehoseOutput() ClusterFirehoseOutput {
	return i.ToClusterFirehoseOutputWithContext(context.Background())
}

func (i ClusterFirehoseArgs) ToClusterFirehoseOutputWithContext(ctx context.Context) ClusterFirehoseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFirehoseOutput)
}

func (i ClusterFirehoseArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterFirehose] {
	return pulumix.Output[ClusterFirehose]{
		OutputState: i.ToClusterFirehoseOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterFirehoseArgs) ToClusterFirehosePtrOutput() ClusterFirehosePtrOutput {
	return i.ToClusterFirehosePtrOutputWithContext(context.Background())
}

func (i ClusterFirehoseArgs) ToClusterFirehosePtrOutputWithContext(ctx context.Context) ClusterFirehosePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFirehoseOutput).ToClusterFirehosePtrOutputWithContext(ctx)
}

// ClusterFirehosePtrInput is an input type that accepts ClusterFirehoseArgs, ClusterFirehosePtr and ClusterFirehosePtrOutput values.
// You can construct a concrete instance of `ClusterFirehosePtrInput` via:
//
//	        ClusterFirehoseArgs{...}
//
//	or:
//
//	        nil
type ClusterFirehosePtrInput interface {
	pulumi.Input

	ToClusterFirehosePtrOutput() ClusterFirehosePtrOutput
	ToClusterFirehosePtrOutputWithContext(context.Context) ClusterFirehosePtrOutput
}

type clusterFirehosePtrType ClusterFirehoseArgs

func ClusterFirehosePtr(v *ClusterFirehoseArgs) ClusterFirehosePtrInput {
	return (*clusterFirehosePtrType)(v)
}

func (*clusterFirehosePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterFirehose)(nil)).Elem()
}

func (i *clusterFirehosePtrType) ToClusterFirehosePtrOutput() ClusterFirehosePtrOutput {
	return i.ToClusterFirehosePtrOutputWithContext(context.Background())
}

func (i *clusterFirehosePtrType) ToClusterFirehosePtrOutputWithContext(ctx context.Context) ClusterFirehosePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFirehosePtrOutput)
}

func (i *clusterFirehosePtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterFirehose] {
	return pulumix.Output[*ClusterFirehose]{
		OutputState: i.ToClusterFirehosePtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterFirehoseOutput struct{ *pulumi.OutputState }

func (ClusterFirehoseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterFirehose)(nil)).Elem()
}

func (o ClusterFirehoseOutput) ToClusterFirehoseOutput() ClusterFirehoseOutput {
	return o
}

func (o ClusterFirehoseOutput) ToClusterFirehoseOutputWithContext(ctx context.Context) ClusterFirehoseOutput {
	return o
}

func (o ClusterFirehoseOutput) ToClusterFirehosePtrOutput() ClusterFirehosePtrOutput {
	return o.ToClusterFirehosePtrOutputWithContext(context.Background())
}

func (o ClusterFirehoseOutput) ToClusterFirehosePtrOutputWithContext(ctx context.Context) ClusterFirehosePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterFirehose) *ClusterFirehose {
		return &v
	}).(ClusterFirehosePtrOutput)
}

func (o ClusterFirehoseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterFirehose] {
	return pulumix.Output[ClusterFirehose]{
		OutputState: o.OutputState,
	}
}

func (o ClusterFirehoseOutput) DeliveryStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterFirehose) *string { return v.DeliveryStream }).(pulumi.StringPtrOutput)
}

func (o ClusterFirehoseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterFirehose) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterFirehosePtrOutput struct{ *pulumi.OutputState }

func (ClusterFirehosePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterFirehose)(nil)).Elem()
}

func (o ClusterFirehosePtrOutput) ToClusterFirehosePtrOutput() ClusterFirehosePtrOutput {
	return o
}

func (o ClusterFirehosePtrOutput) ToClusterFirehosePtrOutputWithContext(ctx context.Context) ClusterFirehosePtrOutput {
	return o
}

func (o ClusterFirehosePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterFirehose] {
	return pulumix.Output[*ClusterFirehose]{
		OutputState: o.OutputState,
	}
}

func (o ClusterFirehosePtrOutput) Elem() ClusterFirehoseOutput {
	return o.ApplyT(func(v *ClusterFirehose) ClusterFirehose {
		if v != nil {
			return *v
		}
		var ret ClusterFirehose
		return ret
	}).(ClusterFirehoseOutput)
}

func (o ClusterFirehosePtrOutput) DeliveryStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterFirehose) *string {
		if v == nil {
			return nil
		}
		return v.DeliveryStream
	}).(pulumi.StringPtrOutput)
}

func (o ClusterFirehosePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterFirehose) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterIam struct {
	Enabled bool `pulumi:"enabled"`
}

// ClusterIamInput is an input type that accepts ClusterIamArgs and ClusterIamOutput values.
// You can construct a concrete instance of `ClusterIamInput` via:
//
//	ClusterIamArgs{...}
type ClusterIamInput interface {
	pulumi.Input

	ToClusterIamOutput() ClusterIamOutput
	ToClusterIamOutputWithContext(context.Context) ClusterIamOutput
}

type ClusterIamArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ClusterIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIam)(nil)).Elem()
}

func (i ClusterIamArgs) ToClusterIamOutput() ClusterIamOutput {
	return i.ToClusterIamOutputWithContext(context.Background())
}

func (i ClusterIamArgs) ToClusterIamOutputWithContext(ctx context.Context) ClusterIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamOutput)
}

func (i ClusterIamArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterIam] {
	return pulumix.Output[ClusterIam]{
		OutputState: i.ToClusterIamOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterIamArgs) ToClusterIamPtrOutput() ClusterIamPtrOutput {
	return i.ToClusterIamPtrOutputWithContext(context.Background())
}

func (i ClusterIamArgs) ToClusterIamPtrOutputWithContext(ctx context.Context) ClusterIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamOutput).ToClusterIamPtrOutputWithContext(ctx)
}

// ClusterIamPtrInput is an input type that accepts ClusterIamArgs, ClusterIamPtr and ClusterIamPtrOutput values.
// You can construct a concrete instance of `ClusterIamPtrInput` via:
//
//	        ClusterIamArgs{...}
//
//	or:
//
//	        nil
type ClusterIamPtrInput interface {
	pulumi.Input

	ToClusterIamPtrOutput() ClusterIamPtrOutput
	ToClusterIamPtrOutputWithContext(context.Context) ClusterIamPtrOutput
}

type clusterIamPtrType ClusterIamArgs

func ClusterIamPtr(v *ClusterIamArgs) ClusterIamPtrInput {
	return (*clusterIamPtrType)(v)
}

func (*clusterIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIam)(nil)).Elem()
}

func (i *clusterIamPtrType) ToClusterIamPtrOutput() ClusterIamPtrOutput {
	return i.ToClusterIamPtrOutputWithContext(context.Background())
}

func (i *clusterIamPtrType) ToClusterIamPtrOutputWithContext(ctx context.Context) ClusterIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIamPtrOutput)
}

func (i *clusterIamPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterIam] {
	return pulumix.Output[*ClusterIam]{
		OutputState: i.ToClusterIamPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterIamOutput struct{ *pulumi.OutputState }

func (ClusterIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIam)(nil)).Elem()
}

func (o ClusterIamOutput) ToClusterIamOutput() ClusterIamOutput {
	return o
}

func (o ClusterIamOutput) ToClusterIamOutputWithContext(ctx context.Context) ClusterIamOutput {
	return o
}

func (o ClusterIamOutput) ToClusterIamPtrOutput() ClusterIamPtrOutput {
	return o.ToClusterIamPtrOutputWithContext(context.Background())
}

func (o ClusterIamOutput) ToClusterIamPtrOutputWithContext(ctx context.Context) ClusterIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterIam) *ClusterIam {
		return &v
	}).(ClusterIamPtrOutput)
}

func (o ClusterIamOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterIam] {
	return pulumix.Output[ClusterIam]{
		OutputState: o.OutputState,
	}
}

func (o ClusterIamOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterIam) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterIamPtrOutput struct{ *pulumi.OutputState }

func (ClusterIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIam)(nil)).Elem()
}

func (o ClusterIamPtrOutput) ToClusterIamPtrOutput() ClusterIamPtrOutput {
	return o
}

func (o ClusterIamPtrOutput) ToClusterIamPtrOutputWithContext(ctx context.Context) ClusterIamPtrOutput {
	return o
}

func (o ClusterIamPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterIam] {
	return pulumix.Output[*ClusterIam]{
		OutputState: o.OutputState,
	}
}

func (o ClusterIamPtrOutput) Elem() ClusterIamOutput {
	return o.ApplyT(func(v *ClusterIam) ClusterIam {
		if v != nil {
			return *v
		}
		var ret ClusterIam
		return ret
	}).(ClusterIamOutput)
}

func (o ClusterIamPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterIam) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterJmxExporter struct {
	EnabledInBroker bool `pulumi:"enabledInBroker"`
}

// ClusterJmxExporterInput is an input type that accepts ClusterJmxExporterArgs and ClusterJmxExporterOutput values.
// You can construct a concrete instance of `ClusterJmxExporterInput` via:
//
//	ClusterJmxExporterArgs{...}
type ClusterJmxExporterInput interface {
	pulumi.Input

	ToClusterJmxExporterOutput() ClusterJmxExporterOutput
	ToClusterJmxExporterOutputWithContext(context.Context) ClusterJmxExporterOutput
}

type ClusterJmxExporterArgs struct {
	EnabledInBroker pulumi.BoolInput `pulumi:"enabledInBroker"`
}

func (ClusterJmxExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterJmxExporter)(nil)).Elem()
}

func (i ClusterJmxExporterArgs) ToClusterJmxExporterOutput() ClusterJmxExporterOutput {
	return i.ToClusterJmxExporterOutputWithContext(context.Background())
}

func (i ClusterJmxExporterArgs) ToClusterJmxExporterOutputWithContext(ctx context.Context) ClusterJmxExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterJmxExporterOutput)
}

func (i ClusterJmxExporterArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterJmxExporter] {
	return pulumix.Output[ClusterJmxExporter]{
		OutputState: i.ToClusterJmxExporterOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterJmxExporterArgs) ToClusterJmxExporterPtrOutput() ClusterJmxExporterPtrOutput {
	return i.ToClusterJmxExporterPtrOutputWithContext(context.Background())
}

func (i ClusterJmxExporterArgs) ToClusterJmxExporterPtrOutputWithContext(ctx context.Context) ClusterJmxExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterJmxExporterOutput).ToClusterJmxExporterPtrOutputWithContext(ctx)
}

// ClusterJmxExporterPtrInput is an input type that accepts ClusterJmxExporterArgs, ClusterJmxExporterPtr and ClusterJmxExporterPtrOutput values.
// You can construct a concrete instance of `ClusterJmxExporterPtrInput` via:
//
//	        ClusterJmxExporterArgs{...}
//
//	or:
//
//	        nil
type ClusterJmxExporterPtrInput interface {
	pulumi.Input

	ToClusterJmxExporterPtrOutput() ClusterJmxExporterPtrOutput
	ToClusterJmxExporterPtrOutputWithContext(context.Context) ClusterJmxExporterPtrOutput
}

type clusterJmxExporterPtrType ClusterJmxExporterArgs

func ClusterJmxExporterPtr(v *ClusterJmxExporterArgs) ClusterJmxExporterPtrInput {
	return (*clusterJmxExporterPtrType)(v)
}

func (*clusterJmxExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterJmxExporter)(nil)).Elem()
}

func (i *clusterJmxExporterPtrType) ToClusterJmxExporterPtrOutput() ClusterJmxExporterPtrOutput {
	return i.ToClusterJmxExporterPtrOutputWithContext(context.Background())
}

func (i *clusterJmxExporterPtrType) ToClusterJmxExporterPtrOutputWithContext(ctx context.Context) ClusterJmxExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterJmxExporterPtrOutput)
}

func (i *clusterJmxExporterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterJmxExporter] {
	return pulumix.Output[*ClusterJmxExporter]{
		OutputState: i.ToClusterJmxExporterPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterJmxExporterOutput struct{ *pulumi.OutputState }

func (ClusterJmxExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterJmxExporter)(nil)).Elem()
}

func (o ClusterJmxExporterOutput) ToClusterJmxExporterOutput() ClusterJmxExporterOutput {
	return o
}

func (o ClusterJmxExporterOutput) ToClusterJmxExporterOutputWithContext(ctx context.Context) ClusterJmxExporterOutput {
	return o
}

func (o ClusterJmxExporterOutput) ToClusterJmxExporterPtrOutput() ClusterJmxExporterPtrOutput {
	return o.ToClusterJmxExporterPtrOutputWithContext(context.Background())
}

func (o ClusterJmxExporterOutput) ToClusterJmxExporterPtrOutputWithContext(ctx context.Context) ClusterJmxExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterJmxExporter) *ClusterJmxExporter {
		return &v
	}).(ClusterJmxExporterPtrOutput)
}

func (o ClusterJmxExporterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterJmxExporter] {
	return pulumix.Output[ClusterJmxExporter]{
		OutputState: o.OutputState,
	}
}

func (o ClusterJmxExporterOutput) EnabledInBroker() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterJmxExporter) bool { return v.EnabledInBroker }).(pulumi.BoolOutput)
}

type ClusterJmxExporterPtrOutput struct{ *pulumi.OutputState }

func (ClusterJmxExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterJmxExporter)(nil)).Elem()
}

func (o ClusterJmxExporterPtrOutput) ToClusterJmxExporterPtrOutput() ClusterJmxExporterPtrOutput {
	return o
}

func (o ClusterJmxExporterPtrOutput) ToClusterJmxExporterPtrOutputWithContext(ctx context.Context) ClusterJmxExporterPtrOutput {
	return o
}

func (o ClusterJmxExporterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterJmxExporter] {
	return pulumix.Output[*ClusterJmxExporter]{
		OutputState: o.OutputState,
	}
}

func (o ClusterJmxExporterPtrOutput) Elem() ClusterJmxExporterOutput {
	return o.ApplyT(func(v *ClusterJmxExporter) ClusterJmxExporter {
		if v != nil {
			return *v
		}
		var ret ClusterJmxExporter
		return ret
	}).(ClusterJmxExporterOutput)
}

func (o ClusterJmxExporterPtrOutput) EnabledInBroker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterJmxExporter) *bool {
		if v == nil {
			return nil
		}
		return &v.EnabledInBroker
	}).(pulumi.BoolPtrOutput)
}

type ClusterLoggingInfo struct {
	BrokerLogs ClusterBrokerLogs `pulumi:"brokerLogs"`
}

// ClusterLoggingInfoInput is an input type that accepts ClusterLoggingInfoArgs and ClusterLoggingInfoOutput values.
// You can construct a concrete instance of `ClusterLoggingInfoInput` via:
//
//	ClusterLoggingInfoArgs{...}
type ClusterLoggingInfoInput interface {
	pulumi.Input

	ToClusterLoggingInfoOutput() ClusterLoggingInfoOutput
	ToClusterLoggingInfoOutputWithContext(context.Context) ClusterLoggingInfoOutput
}

type ClusterLoggingInfoArgs struct {
	BrokerLogs ClusterBrokerLogsInput `pulumi:"brokerLogs"`
}

func (ClusterLoggingInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfo)(nil)).Elem()
}

func (i ClusterLoggingInfoArgs) ToClusterLoggingInfoOutput() ClusterLoggingInfoOutput {
	return i.ToClusterLoggingInfoOutputWithContext(context.Background())
}

func (i ClusterLoggingInfoArgs) ToClusterLoggingInfoOutputWithContext(ctx context.Context) ClusterLoggingInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoOutput)
}

func (i ClusterLoggingInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfo] {
	return pulumix.Output[ClusterLoggingInfo]{
		OutputState: i.ToClusterLoggingInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterLoggingInfoArgs) ToClusterLoggingInfoPtrOutput() ClusterLoggingInfoPtrOutput {
	return i.ToClusterLoggingInfoPtrOutputWithContext(context.Background())
}

func (i ClusterLoggingInfoArgs) ToClusterLoggingInfoPtrOutputWithContext(ctx context.Context) ClusterLoggingInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoOutput).ToClusterLoggingInfoPtrOutputWithContext(ctx)
}

// ClusterLoggingInfoPtrInput is an input type that accepts ClusterLoggingInfoArgs, ClusterLoggingInfoPtr and ClusterLoggingInfoPtrOutput values.
// You can construct a concrete instance of `ClusterLoggingInfoPtrInput` via:
//
//	        ClusterLoggingInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterLoggingInfoPtrInput interface {
	pulumi.Input

	ToClusterLoggingInfoPtrOutput() ClusterLoggingInfoPtrOutput
	ToClusterLoggingInfoPtrOutputWithContext(context.Context) ClusterLoggingInfoPtrOutput
}

type clusterLoggingInfoPtrType ClusterLoggingInfoArgs

func ClusterLoggingInfoPtr(v *ClusterLoggingInfoArgs) ClusterLoggingInfoPtrInput {
	return (*clusterLoggingInfoPtrType)(v)
}

func (*clusterLoggingInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLoggingInfo)(nil)).Elem()
}

func (i *clusterLoggingInfoPtrType) ToClusterLoggingInfoPtrOutput() ClusterLoggingInfoPtrOutput {
	return i.ToClusterLoggingInfoPtrOutputWithContext(context.Background())
}

func (i *clusterLoggingInfoPtrType) ToClusterLoggingInfoPtrOutputWithContext(ctx context.Context) ClusterLoggingInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingInfoPtrOutput)
}

func (i *clusterLoggingInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfo] {
	return pulumix.Output[*ClusterLoggingInfo]{
		OutputState: i.ToClusterLoggingInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterLoggingInfoOutput struct{ *pulumi.OutputState }

func (ClusterLoggingInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingInfo)(nil)).Elem()
}

func (o ClusterLoggingInfoOutput) ToClusterLoggingInfoOutput() ClusterLoggingInfoOutput {
	return o
}

func (o ClusterLoggingInfoOutput) ToClusterLoggingInfoOutputWithContext(ctx context.Context) ClusterLoggingInfoOutput {
	return o
}

func (o ClusterLoggingInfoOutput) ToClusterLoggingInfoPtrOutput() ClusterLoggingInfoPtrOutput {
	return o.ToClusterLoggingInfoPtrOutputWithContext(context.Background())
}

func (o ClusterLoggingInfoOutput) ToClusterLoggingInfoPtrOutputWithContext(ctx context.Context) ClusterLoggingInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLoggingInfo) *ClusterLoggingInfo {
		return &v
	}).(ClusterLoggingInfoPtrOutput)
}

func (o ClusterLoggingInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterLoggingInfo] {
	return pulumix.Output[ClusterLoggingInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLoggingInfoOutput) BrokerLogs() ClusterBrokerLogsOutput {
	return o.ApplyT(func(v ClusterLoggingInfo) ClusterBrokerLogs { return v.BrokerLogs }).(ClusterBrokerLogsOutput)
}

type ClusterLoggingInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterLoggingInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLoggingInfo)(nil)).Elem()
}

func (o ClusterLoggingInfoPtrOutput) ToClusterLoggingInfoPtrOutput() ClusterLoggingInfoPtrOutput {
	return o
}

func (o ClusterLoggingInfoPtrOutput) ToClusterLoggingInfoPtrOutputWithContext(ctx context.Context) ClusterLoggingInfoPtrOutput {
	return o
}

func (o ClusterLoggingInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterLoggingInfo] {
	return pulumix.Output[*ClusterLoggingInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterLoggingInfoPtrOutput) Elem() ClusterLoggingInfoOutput {
	return o.ApplyT(func(v *ClusterLoggingInfo) ClusterLoggingInfo {
		if v != nil {
			return *v
		}
		var ret ClusterLoggingInfo
		return ret
	}).(ClusterLoggingInfoOutput)
}

func (o ClusterLoggingInfoPtrOutput) BrokerLogs() ClusterBrokerLogsPtrOutput {
	return o.ApplyT(func(v *ClusterLoggingInfo) *ClusterBrokerLogs {
		if v == nil {
			return nil
		}
		return &v.BrokerLogs
	}).(ClusterBrokerLogsPtrOutput)
}

type ClusterNodeExporter struct {
	EnabledInBroker bool `pulumi:"enabledInBroker"`
}

// ClusterNodeExporterInput is an input type that accepts ClusterNodeExporterArgs and ClusterNodeExporterOutput values.
// You can construct a concrete instance of `ClusterNodeExporterInput` via:
//
//	ClusterNodeExporterArgs{...}
type ClusterNodeExporterInput interface {
	pulumi.Input

	ToClusterNodeExporterOutput() ClusterNodeExporterOutput
	ToClusterNodeExporterOutputWithContext(context.Context) ClusterNodeExporterOutput
}

type ClusterNodeExporterArgs struct {
	EnabledInBroker pulumi.BoolInput `pulumi:"enabledInBroker"`
}

func (ClusterNodeExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeExporter)(nil)).Elem()
}

func (i ClusterNodeExporterArgs) ToClusterNodeExporterOutput() ClusterNodeExporterOutput {
	return i.ToClusterNodeExporterOutputWithContext(context.Background())
}

func (i ClusterNodeExporterArgs) ToClusterNodeExporterOutputWithContext(ctx context.Context) ClusterNodeExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeExporterOutput)
}

func (i ClusterNodeExporterArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterNodeExporter] {
	return pulumix.Output[ClusterNodeExporter]{
		OutputState: i.ToClusterNodeExporterOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterNodeExporterArgs) ToClusterNodeExporterPtrOutput() ClusterNodeExporterPtrOutput {
	return i.ToClusterNodeExporterPtrOutputWithContext(context.Background())
}

func (i ClusterNodeExporterArgs) ToClusterNodeExporterPtrOutputWithContext(ctx context.Context) ClusterNodeExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeExporterOutput).ToClusterNodeExporterPtrOutputWithContext(ctx)
}

// ClusterNodeExporterPtrInput is an input type that accepts ClusterNodeExporterArgs, ClusterNodeExporterPtr and ClusterNodeExporterPtrOutput values.
// You can construct a concrete instance of `ClusterNodeExporterPtrInput` via:
//
//	        ClusterNodeExporterArgs{...}
//
//	or:
//
//	        nil
type ClusterNodeExporterPtrInput interface {
	pulumi.Input

	ToClusterNodeExporterPtrOutput() ClusterNodeExporterPtrOutput
	ToClusterNodeExporterPtrOutputWithContext(context.Context) ClusterNodeExporterPtrOutput
}

type clusterNodeExporterPtrType ClusterNodeExporterArgs

func ClusterNodeExporterPtr(v *ClusterNodeExporterArgs) ClusterNodeExporterPtrInput {
	return (*clusterNodeExporterPtrType)(v)
}

func (*clusterNodeExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeExporter)(nil)).Elem()
}

func (i *clusterNodeExporterPtrType) ToClusterNodeExporterPtrOutput() ClusterNodeExporterPtrOutput {
	return i.ToClusterNodeExporterPtrOutputWithContext(context.Background())
}

func (i *clusterNodeExporterPtrType) ToClusterNodeExporterPtrOutputWithContext(ctx context.Context) ClusterNodeExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeExporterPtrOutput)
}

func (i *clusterNodeExporterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterNodeExporter] {
	return pulumix.Output[*ClusterNodeExporter]{
		OutputState: i.ToClusterNodeExporterPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterNodeExporterOutput struct{ *pulumi.OutputState }

func (ClusterNodeExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeExporter)(nil)).Elem()
}

func (o ClusterNodeExporterOutput) ToClusterNodeExporterOutput() ClusterNodeExporterOutput {
	return o
}

func (o ClusterNodeExporterOutput) ToClusterNodeExporterOutputWithContext(ctx context.Context) ClusterNodeExporterOutput {
	return o
}

func (o ClusterNodeExporterOutput) ToClusterNodeExporterPtrOutput() ClusterNodeExporterPtrOutput {
	return o.ToClusterNodeExporterPtrOutputWithContext(context.Background())
}

func (o ClusterNodeExporterOutput) ToClusterNodeExporterPtrOutputWithContext(ctx context.Context) ClusterNodeExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNodeExporter) *ClusterNodeExporter {
		return &v
	}).(ClusterNodeExporterPtrOutput)
}

func (o ClusterNodeExporterOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterNodeExporter] {
	return pulumix.Output[ClusterNodeExporter]{
		OutputState: o.OutputState,
	}
}

func (o ClusterNodeExporterOutput) EnabledInBroker() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterNodeExporter) bool { return v.EnabledInBroker }).(pulumi.BoolOutput)
}

type ClusterNodeExporterPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeExporter)(nil)).Elem()
}

func (o ClusterNodeExporterPtrOutput) ToClusterNodeExporterPtrOutput() ClusterNodeExporterPtrOutput {
	return o
}

func (o ClusterNodeExporterPtrOutput) ToClusterNodeExporterPtrOutputWithContext(ctx context.Context) ClusterNodeExporterPtrOutput {
	return o
}

func (o ClusterNodeExporterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterNodeExporter] {
	return pulumix.Output[*ClusterNodeExporter]{
		OutputState: o.OutputState,
	}
}

func (o ClusterNodeExporterPtrOutput) Elem() ClusterNodeExporterOutput {
	return o.ApplyT(func(v *ClusterNodeExporter) ClusterNodeExporter {
		if v != nil {
			return *v
		}
		var ret ClusterNodeExporter
		return ret
	}).(ClusterNodeExporterOutput)
}

func (o ClusterNodeExporterPtrOutput) EnabledInBroker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterNodeExporter) *bool {
		if v == nil {
			return nil
		}
		return &v.EnabledInBroker
	}).(pulumi.BoolPtrOutput)
}

type ClusterOpenMonitoring struct {
	Prometheus ClusterPrometheus `pulumi:"prometheus"`
}

// ClusterOpenMonitoringInput is an input type that accepts ClusterOpenMonitoringArgs and ClusterOpenMonitoringOutput values.
// You can construct a concrete instance of `ClusterOpenMonitoringInput` via:
//
//	ClusterOpenMonitoringArgs{...}
type ClusterOpenMonitoringInput interface {
	pulumi.Input

	ToClusterOpenMonitoringOutput() ClusterOpenMonitoringOutput
	ToClusterOpenMonitoringOutputWithContext(context.Context) ClusterOpenMonitoringOutput
}

type ClusterOpenMonitoringArgs struct {
	Prometheus ClusterPrometheusInput `pulumi:"prometheus"`
}

func (ClusterOpenMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoring)(nil)).Elem()
}

func (i ClusterOpenMonitoringArgs) ToClusterOpenMonitoringOutput() ClusterOpenMonitoringOutput {
	return i.ToClusterOpenMonitoringOutputWithContext(context.Background())
}

func (i ClusterOpenMonitoringArgs) ToClusterOpenMonitoringOutputWithContext(ctx context.Context) ClusterOpenMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringOutput)
}

func (i ClusterOpenMonitoringArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterOpenMonitoring] {
	return pulumix.Output[ClusterOpenMonitoring]{
		OutputState: i.ToClusterOpenMonitoringOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterOpenMonitoringArgs) ToClusterOpenMonitoringPtrOutput() ClusterOpenMonitoringPtrOutput {
	return i.ToClusterOpenMonitoringPtrOutputWithContext(context.Background())
}

func (i ClusterOpenMonitoringArgs) ToClusterOpenMonitoringPtrOutputWithContext(ctx context.Context) ClusterOpenMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringOutput).ToClusterOpenMonitoringPtrOutputWithContext(ctx)
}

// ClusterOpenMonitoringPtrInput is an input type that accepts ClusterOpenMonitoringArgs, ClusterOpenMonitoringPtr and ClusterOpenMonitoringPtrOutput values.
// You can construct a concrete instance of `ClusterOpenMonitoringPtrInput` via:
//
//	        ClusterOpenMonitoringArgs{...}
//
//	or:
//
//	        nil
type ClusterOpenMonitoringPtrInput interface {
	pulumi.Input

	ToClusterOpenMonitoringPtrOutput() ClusterOpenMonitoringPtrOutput
	ToClusterOpenMonitoringPtrOutputWithContext(context.Context) ClusterOpenMonitoringPtrOutput
}

type clusterOpenMonitoringPtrType ClusterOpenMonitoringArgs

func ClusterOpenMonitoringPtr(v *ClusterOpenMonitoringArgs) ClusterOpenMonitoringPtrInput {
	return (*clusterOpenMonitoringPtrType)(v)
}

func (*clusterOpenMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterOpenMonitoring)(nil)).Elem()
}

func (i *clusterOpenMonitoringPtrType) ToClusterOpenMonitoringPtrOutput() ClusterOpenMonitoringPtrOutput {
	return i.ToClusterOpenMonitoringPtrOutputWithContext(context.Background())
}

func (i *clusterOpenMonitoringPtrType) ToClusterOpenMonitoringPtrOutputWithContext(ctx context.Context) ClusterOpenMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOpenMonitoringPtrOutput)
}

func (i *clusterOpenMonitoringPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterOpenMonitoring] {
	return pulumix.Output[*ClusterOpenMonitoring]{
		OutputState: i.ToClusterOpenMonitoringPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterOpenMonitoringOutput struct{ *pulumi.OutputState }

func (ClusterOpenMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOpenMonitoring)(nil)).Elem()
}

func (o ClusterOpenMonitoringOutput) ToClusterOpenMonitoringOutput() ClusterOpenMonitoringOutput {
	return o
}

func (o ClusterOpenMonitoringOutput) ToClusterOpenMonitoringOutputWithContext(ctx context.Context) ClusterOpenMonitoringOutput {
	return o
}

func (o ClusterOpenMonitoringOutput) ToClusterOpenMonitoringPtrOutput() ClusterOpenMonitoringPtrOutput {
	return o.ToClusterOpenMonitoringPtrOutputWithContext(context.Background())
}

func (o ClusterOpenMonitoringOutput) ToClusterOpenMonitoringPtrOutputWithContext(ctx context.Context) ClusterOpenMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterOpenMonitoring) *ClusterOpenMonitoring {
		return &v
	}).(ClusterOpenMonitoringPtrOutput)
}

func (o ClusterOpenMonitoringOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterOpenMonitoring] {
	return pulumix.Output[ClusterOpenMonitoring]{
		OutputState: o.OutputState,
	}
}

func (o ClusterOpenMonitoringOutput) Prometheus() ClusterPrometheusOutput {
	return o.ApplyT(func(v ClusterOpenMonitoring) ClusterPrometheus { return v.Prometheus }).(ClusterPrometheusOutput)
}

type ClusterOpenMonitoringPtrOutput struct{ *pulumi.OutputState }

func (ClusterOpenMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterOpenMonitoring)(nil)).Elem()
}

func (o ClusterOpenMonitoringPtrOutput) ToClusterOpenMonitoringPtrOutput() ClusterOpenMonitoringPtrOutput {
	return o
}

func (o ClusterOpenMonitoringPtrOutput) ToClusterOpenMonitoringPtrOutputWithContext(ctx context.Context) ClusterOpenMonitoringPtrOutput {
	return o
}

func (o ClusterOpenMonitoringPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterOpenMonitoring] {
	return pulumix.Output[*ClusterOpenMonitoring]{
		OutputState: o.OutputState,
	}
}

func (o ClusterOpenMonitoringPtrOutput) Elem() ClusterOpenMonitoringOutput {
	return o.ApplyT(func(v *ClusterOpenMonitoring) ClusterOpenMonitoring {
		if v != nil {
			return *v
		}
		var ret ClusterOpenMonitoring
		return ret
	}).(ClusterOpenMonitoringOutput)
}

func (o ClusterOpenMonitoringPtrOutput) Prometheus() ClusterPrometheusPtrOutput {
	return o.ApplyT(func(v *ClusterOpenMonitoring) *ClusterPrometheus {
		if v == nil {
			return nil
		}
		return &v.Prometheus
	}).(ClusterPrometheusPtrOutput)
}

type ClusterPrometheus struct {
	JmxExporter  *ClusterJmxExporter  `pulumi:"jmxExporter"`
	NodeExporter *ClusterNodeExporter `pulumi:"nodeExporter"`
}

// ClusterPrometheusInput is an input type that accepts ClusterPrometheusArgs and ClusterPrometheusOutput values.
// You can construct a concrete instance of `ClusterPrometheusInput` via:
//
//	ClusterPrometheusArgs{...}
type ClusterPrometheusInput interface {
	pulumi.Input

	ToClusterPrometheusOutput() ClusterPrometheusOutput
	ToClusterPrometheusOutputWithContext(context.Context) ClusterPrometheusOutput
}

type ClusterPrometheusArgs struct {
	JmxExporter  ClusterJmxExporterPtrInput  `pulumi:"jmxExporter"`
	NodeExporter ClusterNodeExporterPtrInput `pulumi:"nodeExporter"`
}

func (ClusterPrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheus)(nil)).Elem()
}

func (i ClusterPrometheusArgs) ToClusterPrometheusOutput() ClusterPrometheusOutput {
	return i.ToClusterPrometheusOutputWithContext(context.Background())
}

func (i ClusterPrometheusArgs) ToClusterPrometheusOutputWithContext(ctx context.Context) ClusterPrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusOutput)
}

func (i ClusterPrometheusArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterPrometheus] {
	return pulumix.Output[ClusterPrometheus]{
		OutputState: i.ToClusterPrometheusOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterPrometheusArgs) ToClusterPrometheusPtrOutput() ClusterPrometheusPtrOutput {
	return i.ToClusterPrometheusPtrOutputWithContext(context.Background())
}

func (i ClusterPrometheusArgs) ToClusterPrometheusPtrOutputWithContext(ctx context.Context) ClusterPrometheusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusOutput).ToClusterPrometheusPtrOutputWithContext(ctx)
}

// ClusterPrometheusPtrInput is an input type that accepts ClusterPrometheusArgs, ClusterPrometheusPtr and ClusterPrometheusPtrOutput values.
// You can construct a concrete instance of `ClusterPrometheusPtrInput` via:
//
//	        ClusterPrometheusArgs{...}
//
//	or:
//
//	        nil
type ClusterPrometheusPtrInput interface {
	pulumi.Input

	ToClusterPrometheusPtrOutput() ClusterPrometheusPtrOutput
	ToClusterPrometheusPtrOutputWithContext(context.Context) ClusterPrometheusPtrOutput
}

type clusterPrometheusPtrType ClusterPrometheusArgs

func ClusterPrometheusPtr(v *ClusterPrometheusArgs) ClusterPrometheusPtrInput {
	return (*clusterPrometheusPtrType)(v)
}

func (*clusterPrometheusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheus)(nil)).Elem()
}

func (i *clusterPrometheusPtrType) ToClusterPrometheusPtrOutput() ClusterPrometheusPtrOutput {
	return i.ToClusterPrometheusPtrOutputWithContext(context.Background())
}

func (i *clusterPrometheusPtrType) ToClusterPrometheusPtrOutputWithContext(ctx context.Context) ClusterPrometheusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusPtrOutput)
}

func (i *clusterPrometheusPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterPrometheus] {
	return pulumix.Output[*ClusterPrometheus]{
		OutputState: i.ToClusterPrometheusPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterPrometheusOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheus)(nil)).Elem()
}

func (o ClusterPrometheusOutput) ToClusterPrometheusOutput() ClusterPrometheusOutput {
	return o
}

func (o ClusterPrometheusOutput) ToClusterPrometheusOutputWithContext(ctx context.Context) ClusterPrometheusOutput {
	return o
}

func (o ClusterPrometheusOutput) ToClusterPrometheusPtrOutput() ClusterPrometheusPtrOutput {
	return o.ToClusterPrometheusPtrOutputWithContext(context.Background())
}

func (o ClusterPrometheusOutput) ToClusterPrometheusPtrOutputWithContext(ctx context.Context) ClusterPrometheusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPrometheus) *ClusterPrometheus {
		return &v
	}).(ClusterPrometheusPtrOutput)
}

func (o ClusterPrometheusOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterPrometheus] {
	return pulumix.Output[ClusterPrometheus]{
		OutputState: o.OutputState,
	}
}

func (o ClusterPrometheusOutput) JmxExporter() ClusterJmxExporterPtrOutput {
	return o.ApplyT(func(v ClusterPrometheus) *ClusterJmxExporter { return v.JmxExporter }).(ClusterJmxExporterPtrOutput)
}

func (o ClusterPrometheusOutput) NodeExporter() ClusterNodeExporterPtrOutput {
	return o.ApplyT(func(v ClusterPrometheus) *ClusterNodeExporter { return v.NodeExporter }).(ClusterNodeExporterPtrOutput)
}

type ClusterPrometheusPtrOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheus)(nil)).Elem()
}

func (o ClusterPrometheusPtrOutput) ToClusterPrometheusPtrOutput() ClusterPrometheusPtrOutput {
	return o
}

func (o ClusterPrometheusPtrOutput) ToClusterPrometheusPtrOutputWithContext(ctx context.Context) ClusterPrometheusPtrOutput {
	return o
}

func (o ClusterPrometheusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterPrometheus] {
	return pulumix.Output[*ClusterPrometheus]{
		OutputState: o.OutputState,
	}
}

func (o ClusterPrometheusPtrOutput) Elem() ClusterPrometheusOutput {
	return o.ApplyT(func(v *ClusterPrometheus) ClusterPrometheus {
		if v != nil {
			return *v
		}
		var ret ClusterPrometheus
		return ret
	}).(ClusterPrometheusOutput)
}

func (o ClusterPrometheusPtrOutput) JmxExporter() ClusterJmxExporterPtrOutput {
	return o.ApplyT(func(v *ClusterPrometheus) *ClusterJmxExporter {
		if v == nil {
			return nil
		}
		return v.JmxExporter
	}).(ClusterJmxExporterPtrOutput)
}

func (o ClusterPrometheusPtrOutput) NodeExporter() ClusterNodeExporterPtrOutput {
	return o.ApplyT(func(v *ClusterPrometheus) *ClusterNodeExporter {
		if v == nil {
			return nil
		}
		return v.NodeExporter
	}).(ClusterNodeExporterPtrOutput)
}

type ClusterProvisionedThroughput struct {
	Enabled          *bool `pulumi:"enabled"`
	VolumeThroughput *int  `pulumi:"volumeThroughput"`
}

// ClusterProvisionedThroughputInput is an input type that accepts ClusterProvisionedThroughputArgs and ClusterProvisionedThroughputOutput values.
// You can construct a concrete instance of `ClusterProvisionedThroughputInput` via:
//
//	ClusterProvisionedThroughputArgs{...}
type ClusterProvisionedThroughputInput interface {
	pulumi.Input

	ToClusterProvisionedThroughputOutput() ClusterProvisionedThroughputOutput
	ToClusterProvisionedThroughputOutputWithContext(context.Context) ClusterProvisionedThroughputOutput
}

type ClusterProvisionedThroughputArgs struct {
	Enabled          pulumi.BoolPtrInput `pulumi:"enabled"`
	VolumeThroughput pulumi.IntPtrInput  `pulumi:"volumeThroughput"`
}

func (ClusterProvisionedThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProvisionedThroughput)(nil)).Elem()
}

func (i ClusterProvisionedThroughputArgs) ToClusterProvisionedThroughputOutput() ClusterProvisionedThroughputOutput {
	return i.ToClusterProvisionedThroughputOutputWithContext(context.Background())
}

func (i ClusterProvisionedThroughputArgs) ToClusterProvisionedThroughputOutputWithContext(ctx context.Context) ClusterProvisionedThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProvisionedThroughputOutput)
}

func (i ClusterProvisionedThroughputArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterProvisionedThroughput] {
	return pulumix.Output[ClusterProvisionedThroughput]{
		OutputState: i.ToClusterProvisionedThroughputOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterProvisionedThroughputArgs) ToClusterProvisionedThroughputPtrOutput() ClusterProvisionedThroughputPtrOutput {
	return i.ToClusterProvisionedThroughputPtrOutputWithContext(context.Background())
}

func (i ClusterProvisionedThroughputArgs) ToClusterProvisionedThroughputPtrOutputWithContext(ctx context.Context) ClusterProvisionedThroughputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProvisionedThroughputOutput).ToClusterProvisionedThroughputPtrOutputWithContext(ctx)
}

// ClusterProvisionedThroughputPtrInput is an input type that accepts ClusterProvisionedThroughputArgs, ClusterProvisionedThroughputPtr and ClusterProvisionedThroughputPtrOutput values.
// You can construct a concrete instance of `ClusterProvisionedThroughputPtrInput` via:
//
//	        ClusterProvisionedThroughputArgs{...}
//
//	or:
//
//	        nil
type ClusterProvisionedThroughputPtrInput interface {
	pulumi.Input

	ToClusterProvisionedThroughputPtrOutput() ClusterProvisionedThroughputPtrOutput
	ToClusterProvisionedThroughputPtrOutputWithContext(context.Context) ClusterProvisionedThroughputPtrOutput
}

type clusterProvisionedThroughputPtrType ClusterProvisionedThroughputArgs

func ClusterProvisionedThroughputPtr(v *ClusterProvisionedThroughputArgs) ClusterProvisionedThroughputPtrInput {
	return (*clusterProvisionedThroughputPtrType)(v)
}

func (*clusterProvisionedThroughputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProvisionedThroughput)(nil)).Elem()
}

func (i *clusterProvisionedThroughputPtrType) ToClusterProvisionedThroughputPtrOutput() ClusterProvisionedThroughputPtrOutput {
	return i.ToClusterProvisionedThroughputPtrOutputWithContext(context.Background())
}

func (i *clusterProvisionedThroughputPtrType) ToClusterProvisionedThroughputPtrOutputWithContext(ctx context.Context) ClusterProvisionedThroughputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProvisionedThroughputPtrOutput)
}

func (i *clusterProvisionedThroughputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterProvisionedThroughput] {
	return pulumix.Output[*ClusterProvisionedThroughput]{
		OutputState: i.ToClusterProvisionedThroughputPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterProvisionedThroughputOutput struct{ *pulumi.OutputState }

func (ClusterProvisionedThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProvisionedThroughput)(nil)).Elem()
}

func (o ClusterProvisionedThroughputOutput) ToClusterProvisionedThroughputOutput() ClusterProvisionedThroughputOutput {
	return o
}

func (o ClusterProvisionedThroughputOutput) ToClusterProvisionedThroughputOutputWithContext(ctx context.Context) ClusterProvisionedThroughputOutput {
	return o
}

func (o ClusterProvisionedThroughputOutput) ToClusterProvisionedThroughputPtrOutput() ClusterProvisionedThroughputPtrOutput {
	return o.ToClusterProvisionedThroughputPtrOutputWithContext(context.Background())
}

func (o ClusterProvisionedThroughputOutput) ToClusterProvisionedThroughputPtrOutputWithContext(ctx context.Context) ClusterProvisionedThroughputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterProvisionedThroughput) *ClusterProvisionedThroughput {
		return &v
	}).(ClusterProvisionedThroughputPtrOutput)
}

func (o ClusterProvisionedThroughputOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterProvisionedThroughput] {
	return pulumix.Output[ClusterProvisionedThroughput]{
		OutputState: o.OutputState,
	}
}

func (o ClusterProvisionedThroughputOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterProvisionedThroughput) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ClusterProvisionedThroughputOutput) VolumeThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterProvisionedThroughput) *int { return v.VolumeThroughput }).(pulumi.IntPtrOutput)
}

type ClusterProvisionedThroughputPtrOutput struct{ *pulumi.OutputState }

func (ClusterProvisionedThroughputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProvisionedThroughput)(nil)).Elem()
}

func (o ClusterProvisionedThroughputPtrOutput) ToClusterProvisionedThroughputPtrOutput() ClusterProvisionedThroughputPtrOutput {
	return o
}

func (o ClusterProvisionedThroughputPtrOutput) ToClusterProvisionedThroughputPtrOutputWithContext(ctx context.Context) ClusterProvisionedThroughputPtrOutput {
	return o
}

func (o ClusterProvisionedThroughputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterProvisionedThroughput] {
	return pulumix.Output[*ClusterProvisionedThroughput]{
		OutputState: o.OutputState,
	}
}

func (o ClusterProvisionedThroughputPtrOutput) Elem() ClusterProvisionedThroughputOutput {
	return o.ApplyT(func(v *ClusterProvisionedThroughput) ClusterProvisionedThroughput {
		if v != nil {
			return *v
		}
		var ret ClusterProvisionedThroughput
		return ret
	}).(ClusterProvisionedThroughputOutput)
}

func (o ClusterProvisionedThroughputPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterProvisionedThroughput) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterProvisionedThroughputPtrOutput) VolumeThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterProvisionedThroughput) *int {
		if v == nil {
			return nil
		}
		return v.VolumeThroughput
	}).(pulumi.IntPtrOutput)
}

type ClusterPublicAccess struct {
	Type *string `pulumi:"type"`
}

// ClusterPublicAccessInput is an input type that accepts ClusterPublicAccessArgs and ClusterPublicAccessOutput values.
// You can construct a concrete instance of `ClusterPublicAccessInput` via:
//
//	ClusterPublicAccessArgs{...}
type ClusterPublicAccessInput interface {
	pulumi.Input

	ToClusterPublicAccessOutput() ClusterPublicAccessOutput
	ToClusterPublicAccessOutputWithContext(context.Context) ClusterPublicAccessOutput
}

type ClusterPublicAccessArgs struct {
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClusterPublicAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicAccess)(nil)).Elem()
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessOutput() ClusterPublicAccessOutput {
	return i.ToClusterPublicAccessOutputWithContext(context.Background())
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessOutputWithContext(ctx context.Context) ClusterPublicAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicAccessOutput)
}

func (i ClusterPublicAccessArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterPublicAccess] {
	return pulumix.Output[ClusterPublicAccess]{
		OutputState: i.ToClusterPublicAccessOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return i.ToClusterPublicAccessPtrOutputWithContext(context.Background())
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicAccessOutput).ToClusterPublicAccessPtrOutputWithContext(ctx)
}

// ClusterPublicAccessPtrInput is an input type that accepts ClusterPublicAccessArgs, ClusterPublicAccessPtr and ClusterPublicAccessPtrOutput values.
// You can construct a concrete instance of `ClusterPublicAccessPtrInput` via:
//
//	        ClusterPublicAccessArgs{...}
//
//	or:
//
//	        nil
type ClusterPublicAccessPtrInput interface {
	pulumi.Input

	ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput
	ToClusterPublicAccessPtrOutputWithContext(context.Context) ClusterPublicAccessPtrOutput
}

type clusterPublicAccessPtrType ClusterPublicAccessArgs

func ClusterPublicAccessPtr(v *ClusterPublicAccessArgs) ClusterPublicAccessPtrInput {
	return (*clusterPublicAccessPtrType)(v)
}

func (*clusterPublicAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicAccess)(nil)).Elem()
}

func (i *clusterPublicAccessPtrType) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return i.ToClusterPublicAccessPtrOutputWithContext(context.Background())
}

func (i *clusterPublicAccessPtrType) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicAccessPtrOutput)
}

func (i *clusterPublicAccessPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterPublicAccess] {
	return pulumix.Output[*ClusterPublicAccess]{
		OutputState: i.ToClusterPublicAccessPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterPublicAccessOutput struct{ *pulumi.OutputState }

func (ClusterPublicAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicAccess)(nil)).Elem()
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessOutput() ClusterPublicAccessOutput {
	return o
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessOutputWithContext(ctx context.Context) ClusterPublicAccessOutput {
	return o
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return o.ToClusterPublicAccessPtrOutputWithContext(context.Background())
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPublicAccess) *ClusterPublicAccess {
		return &v
	}).(ClusterPublicAccessPtrOutput)
}

func (o ClusterPublicAccessOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterPublicAccess] {
	return pulumix.Output[ClusterPublicAccess]{
		OutputState: o.OutputState,
	}
}

func (o ClusterPublicAccessOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicAccess) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClusterPublicAccessPtrOutput struct{ *pulumi.OutputState }

func (ClusterPublicAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicAccess)(nil)).Elem()
}

func (o ClusterPublicAccessPtrOutput) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return o
}

func (o ClusterPublicAccessPtrOutput) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return o
}

func (o ClusterPublicAccessPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterPublicAccess] {
	return pulumix.Output[*ClusterPublicAccess]{
		OutputState: o.OutputState,
	}
}

func (o ClusterPublicAccessPtrOutput) Elem() ClusterPublicAccessOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) ClusterPublicAccess {
		if v != nil {
			return *v
		}
		var ret ClusterPublicAccess
		return ret
	}).(ClusterPublicAccessOutput)
}

func (o ClusterPublicAccessPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ClusterS3 struct {
	Bucket  *string `pulumi:"bucket"`
	Enabled bool    `pulumi:"enabled"`
	Prefix  *string `pulumi:"prefix"`
}

// ClusterS3Input is an input type that accepts ClusterS3Args and ClusterS3Output values.
// You can construct a concrete instance of `ClusterS3Input` via:
//
//	ClusterS3Args{...}
type ClusterS3Input interface {
	pulumi.Input

	ToClusterS3Output() ClusterS3Output
	ToClusterS3OutputWithContext(context.Context) ClusterS3Output
}

type ClusterS3Args struct {
	Bucket  pulumi.StringPtrInput `pulumi:"bucket"`
	Enabled pulumi.BoolInput      `pulumi:"enabled"`
	Prefix  pulumi.StringPtrInput `pulumi:"prefix"`
}

func (ClusterS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3)(nil)).Elem()
}

func (i ClusterS3Args) ToClusterS3Output() ClusterS3Output {
	return i.ToClusterS3OutputWithContext(context.Background())
}

func (i ClusterS3Args) ToClusterS3OutputWithContext(ctx context.Context) ClusterS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3Output)
}

func (i ClusterS3Args) ToOutput(ctx context.Context) pulumix.Output[ClusterS3] {
	return pulumix.Output[ClusterS3]{
		OutputState: i.ToClusterS3OutputWithContext(ctx).OutputState,
	}
}

func (i ClusterS3Args) ToClusterS3PtrOutput() ClusterS3PtrOutput {
	return i.ToClusterS3PtrOutputWithContext(context.Background())
}

func (i ClusterS3Args) ToClusterS3PtrOutputWithContext(ctx context.Context) ClusterS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3Output).ToClusterS3PtrOutputWithContext(ctx)
}

// ClusterS3PtrInput is an input type that accepts ClusterS3Args, ClusterS3Ptr and ClusterS3PtrOutput values.
// You can construct a concrete instance of `ClusterS3PtrInput` via:
//
//	        ClusterS3Args{...}
//
//	or:
//
//	        nil
type ClusterS3PtrInput interface {
	pulumi.Input

	ToClusterS3PtrOutput() ClusterS3PtrOutput
	ToClusterS3PtrOutputWithContext(context.Context) ClusterS3PtrOutput
}

type clusterS3PtrType ClusterS3Args

func ClusterS3Ptr(v *ClusterS3Args) ClusterS3PtrInput {
	return (*clusterS3PtrType)(v)
}

func (*clusterS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterS3)(nil)).Elem()
}

func (i *clusterS3PtrType) ToClusterS3PtrOutput() ClusterS3PtrOutput {
	return i.ToClusterS3PtrOutputWithContext(context.Background())
}

func (i *clusterS3PtrType) ToClusterS3PtrOutputWithContext(ctx context.Context) ClusterS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3PtrOutput)
}

func (i *clusterS3PtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterS3] {
	return pulumix.Output[*ClusterS3]{
		OutputState: i.ToClusterS3PtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterS3Output struct{ *pulumi.OutputState }

func (ClusterS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3)(nil)).Elem()
}

func (o ClusterS3Output) ToClusterS3Output() ClusterS3Output {
	return o
}

func (o ClusterS3Output) ToClusterS3OutputWithContext(ctx context.Context) ClusterS3Output {
	return o
}

func (o ClusterS3Output) ToClusterS3PtrOutput() ClusterS3PtrOutput {
	return o.ToClusterS3PtrOutputWithContext(context.Background())
}

func (o ClusterS3Output) ToClusterS3PtrOutputWithContext(ctx context.Context) ClusterS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterS3) *ClusterS3 {
		return &v
	}).(ClusterS3PtrOutput)
}

func (o ClusterS3Output) ToOutput(ctx context.Context) pulumix.Output[ClusterS3] {
	return pulumix.Output[ClusterS3]{
		OutputState: o.OutputState,
	}
}

func (o ClusterS3Output) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterS3) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

func (o ClusterS3Output) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterS3) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ClusterS3Output) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterS3) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type ClusterS3PtrOutput struct{ *pulumi.OutputState }

func (ClusterS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterS3)(nil)).Elem()
}

func (o ClusterS3PtrOutput) ToClusterS3PtrOutput() ClusterS3PtrOutput {
	return o
}

func (o ClusterS3PtrOutput) ToClusterS3PtrOutputWithContext(ctx context.Context) ClusterS3PtrOutput {
	return o
}

func (o ClusterS3PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterS3] {
	return pulumix.Output[*ClusterS3]{
		OutputState: o.OutputState,
	}
}

func (o ClusterS3PtrOutput) Elem() ClusterS3Output {
	return o.ApplyT(func(v *ClusterS3) ClusterS3 {
		if v != nil {
			return *v
		}
		var ret ClusterS3
		return ret
	}).(ClusterS3Output)
}

func (o ClusterS3PtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterS3) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o ClusterS3PtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterS3) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterS3PtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterS3) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

type ClusterSasl struct {
	Iam   *ClusterIam   `pulumi:"iam"`
	Scram *ClusterScram `pulumi:"scram"`
}

// ClusterSaslInput is an input type that accepts ClusterSaslArgs and ClusterSaslOutput values.
// You can construct a concrete instance of `ClusterSaslInput` via:
//
//	ClusterSaslArgs{...}
type ClusterSaslInput interface {
	pulumi.Input

	ToClusterSaslOutput() ClusterSaslOutput
	ToClusterSaslOutputWithContext(context.Context) ClusterSaslOutput
}

type ClusterSaslArgs struct {
	Iam   ClusterIamPtrInput   `pulumi:"iam"`
	Scram ClusterScramPtrInput `pulumi:"scram"`
}

func (ClusterSaslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSasl)(nil)).Elem()
}

func (i ClusterSaslArgs) ToClusterSaslOutput() ClusterSaslOutput {
	return i.ToClusterSaslOutputWithContext(context.Background())
}

func (i ClusterSaslArgs) ToClusterSaslOutputWithContext(ctx context.Context) ClusterSaslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSaslOutput)
}

func (i ClusterSaslArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterSasl] {
	return pulumix.Output[ClusterSasl]{
		OutputState: i.ToClusterSaslOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterSaslArgs) ToClusterSaslPtrOutput() ClusterSaslPtrOutput {
	return i.ToClusterSaslPtrOutputWithContext(context.Background())
}

func (i ClusterSaslArgs) ToClusterSaslPtrOutputWithContext(ctx context.Context) ClusterSaslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSaslOutput).ToClusterSaslPtrOutputWithContext(ctx)
}

// ClusterSaslPtrInput is an input type that accepts ClusterSaslArgs, ClusterSaslPtr and ClusterSaslPtrOutput values.
// You can construct a concrete instance of `ClusterSaslPtrInput` via:
//
//	        ClusterSaslArgs{...}
//
//	or:
//
//	        nil
type ClusterSaslPtrInput interface {
	pulumi.Input

	ToClusterSaslPtrOutput() ClusterSaslPtrOutput
	ToClusterSaslPtrOutputWithContext(context.Context) ClusterSaslPtrOutput
}

type clusterSaslPtrType ClusterSaslArgs

func ClusterSaslPtr(v *ClusterSaslArgs) ClusterSaslPtrInput {
	return (*clusterSaslPtrType)(v)
}

func (*clusterSaslPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSasl)(nil)).Elem()
}

func (i *clusterSaslPtrType) ToClusterSaslPtrOutput() ClusterSaslPtrOutput {
	return i.ToClusterSaslPtrOutputWithContext(context.Background())
}

func (i *clusterSaslPtrType) ToClusterSaslPtrOutputWithContext(ctx context.Context) ClusterSaslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSaslPtrOutput)
}

func (i *clusterSaslPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterSasl] {
	return pulumix.Output[*ClusterSasl]{
		OutputState: i.ToClusterSaslPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterSaslOutput struct{ *pulumi.OutputState }

func (ClusterSaslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSasl)(nil)).Elem()
}

func (o ClusterSaslOutput) ToClusterSaslOutput() ClusterSaslOutput {
	return o
}

func (o ClusterSaslOutput) ToClusterSaslOutputWithContext(ctx context.Context) ClusterSaslOutput {
	return o
}

func (o ClusterSaslOutput) ToClusterSaslPtrOutput() ClusterSaslPtrOutput {
	return o.ToClusterSaslPtrOutputWithContext(context.Background())
}

func (o ClusterSaslOutput) ToClusterSaslPtrOutputWithContext(ctx context.Context) ClusterSaslPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSasl) *ClusterSasl {
		return &v
	}).(ClusterSaslPtrOutput)
}

func (o ClusterSaslOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterSasl] {
	return pulumix.Output[ClusterSasl]{
		OutputState: o.OutputState,
	}
}

func (o ClusterSaslOutput) Iam() ClusterIamPtrOutput {
	return o.ApplyT(func(v ClusterSasl) *ClusterIam { return v.Iam }).(ClusterIamPtrOutput)
}

func (o ClusterSaslOutput) Scram() ClusterScramPtrOutput {
	return o.ApplyT(func(v ClusterSasl) *ClusterScram { return v.Scram }).(ClusterScramPtrOutput)
}

type ClusterSaslPtrOutput struct{ *pulumi.OutputState }

func (ClusterSaslPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSasl)(nil)).Elem()
}

func (o ClusterSaslPtrOutput) ToClusterSaslPtrOutput() ClusterSaslPtrOutput {
	return o
}

func (o ClusterSaslPtrOutput) ToClusterSaslPtrOutputWithContext(ctx context.Context) ClusterSaslPtrOutput {
	return o
}

func (o ClusterSaslPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterSasl] {
	return pulumix.Output[*ClusterSasl]{
		OutputState: o.OutputState,
	}
}

func (o ClusterSaslPtrOutput) Elem() ClusterSaslOutput {
	return o.ApplyT(func(v *ClusterSasl) ClusterSasl {
		if v != nil {
			return *v
		}
		var ret ClusterSasl
		return ret
	}).(ClusterSaslOutput)
}

func (o ClusterSaslPtrOutput) Iam() ClusterIamPtrOutput {
	return o.ApplyT(func(v *ClusterSasl) *ClusterIam {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(ClusterIamPtrOutput)
}

func (o ClusterSaslPtrOutput) Scram() ClusterScramPtrOutput {
	return o.ApplyT(func(v *ClusterSasl) *ClusterScram {
		if v == nil {
			return nil
		}
		return v.Scram
	}).(ClusterScramPtrOutput)
}

type ClusterScram struct {
	Enabled bool `pulumi:"enabled"`
}

// ClusterScramInput is an input type that accepts ClusterScramArgs and ClusterScramOutput values.
// You can construct a concrete instance of `ClusterScramInput` via:
//
//	ClusterScramArgs{...}
type ClusterScramInput interface {
	pulumi.Input

	ToClusterScramOutput() ClusterScramOutput
	ToClusterScramOutputWithContext(context.Context) ClusterScramOutput
}

type ClusterScramArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ClusterScramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterScram)(nil)).Elem()
}

func (i ClusterScramArgs) ToClusterScramOutput() ClusterScramOutput {
	return i.ToClusterScramOutputWithContext(context.Background())
}

func (i ClusterScramArgs) ToClusterScramOutputWithContext(ctx context.Context) ClusterScramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScramOutput)
}

func (i ClusterScramArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterScram] {
	return pulumix.Output[ClusterScram]{
		OutputState: i.ToClusterScramOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterScramArgs) ToClusterScramPtrOutput() ClusterScramPtrOutput {
	return i.ToClusterScramPtrOutputWithContext(context.Background())
}

func (i ClusterScramArgs) ToClusterScramPtrOutputWithContext(ctx context.Context) ClusterScramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScramOutput).ToClusterScramPtrOutputWithContext(ctx)
}

// ClusterScramPtrInput is an input type that accepts ClusterScramArgs, ClusterScramPtr and ClusterScramPtrOutput values.
// You can construct a concrete instance of `ClusterScramPtrInput` via:
//
//	        ClusterScramArgs{...}
//
//	or:
//
//	        nil
type ClusterScramPtrInput interface {
	pulumi.Input

	ToClusterScramPtrOutput() ClusterScramPtrOutput
	ToClusterScramPtrOutputWithContext(context.Context) ClusterScramPtrOutput
}

type clusterScramPtrType ClusterScramArgs

func ClusterScramPtr(v *ClusterScramArgs) ClusterScramPtrInput {
	return (*clusterScramPtrType)(v)
}

func (*clusterScramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterScram)(nil)).Elem()
}

func (i *clusterScramPtrType) ToClusterScramPtrOutput() ClusterScramPtrOutput {
	return i.ToClusterScramPtrOutputWithContext(context.Background())
}

func (i *clusterScramPtrType) ToClusterScramPtrOutputWithContext(ctx context.Context) ClusterScramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterScramPtrOutput)
}

func (i *clusterScramPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterScram] {
	return pulumix.Output[*ClusterScram]{
		OutputState: i.ToClusterScramPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterScramOutput struct{ *pulumi.OutputState }

func (ClusterScramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterScram)(nil)).Elem()
}

func (o ClusterScramOutput) ToClusterScramOutput() ClusterScramOutput {
	return o
}

func (o ClusterScramOutput) ToClusterScramOutputWithContext(ctx context.Context) ClusterScramOutput {
	return o
}

func (o ClusterScramOutput) ToClusterScramPtrOutput() ClusterScramPtrOutput {
	return o.ToClusterScramPtrOutputWithContext(context.Background())
}

func (o ClusterScramOutput) ToClusterScramPtrOutputWithContext(ctx context.Context) ClusterScramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterScram) *ClusterScram {
		return &v
	}).(ClusterScramPtrOutput)
}

func (o ClusterScramOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterScram] {
	return pulumix.Output[ClusterScram]{
		OutputState: o.OutputState,
	}
}

func (o ClusterScramOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterScram) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterScramPtrOutput struct{ *pulumi.OutputState }

func (ClusterScramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterScram)(nil)).Elem()
}

func (o ClusterScramPtrOutput) ToClusterScramPtrOutput() ClusterScramPtrOutput {
	return o
}

func (o ClusterScramPtrOutput) ToClusterScramPtrOutputWithContext(ctx context.Context) ClusterScramPtrOutput {
	return o
}

func (o ClusterScramPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterScram] {
	return pulumix.Output[*ClusterScram]{
		OutputState: o.OutputState,
	}
}

func (o ClusterScramPtrOutput) Elem() ClusterScramOutput {
	return o.ApplyT(func(v *ClusterScram) ClusterScram {
		if v != nil {
			return *v
		}
		var ret ClusterScram
		return ret
	}).(ClusterScramOutput)
}

func (o ClusterScramPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterScram) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterStorageInfo struct {
	EbsStorageInfo *ClusterEbsStorageInfo `pulumi:"ebsStorageInfo"`
}

// ClusterStorageInfoInput is an input type that accepts ClusterStorageInfoArgs and ClusterStorageInfoOutput values.
// You can construct a concrete instance of `ClusterStorageInfoInput` via:
//
//	ClusterStorageInfoArgs{...}
type ClusterStorageInfoInput interface {
	pulumi.Input

	ToClusterStorageInfoOutput() ClusterStorageInfoOutput
	ToClusterStorageInfoOutputWithContext(context.Context) ClusterStorageInfoOutput
}

type ClusterStorageInfoArgs struct {
	EbsStorageInfo ClusterEbsStorageInfoPtrInput `pulumi:"ebsStorageInfo"`
}

func (ClusterStorageInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStorageInfo)(nil)).Elem()
}

func (i ClusterStorageInfoArgs) ToClusterStorageInfoOutput() ClusterStorageInfoOutput {
	return i.ToClusterStorageInfoOutputWithContext(context.Background())
}

func (i ClusterStorageInfoArgs) ToClusterStorageInfoOutputWithContext(ctx context.Context) ClusterStorageInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStorageInfoOutput)
}

func (i ClusterStorageInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterStorageInfo] {
	return pulumix.Output[ClusterStorageInfo]{
		OutputState: i.ToClusterStorageInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterStorageInfoArgs) ToClusterStorageInfoPtrOutput() ClusterStorageInfoPtrOutput {
	return i.ToClusterStorageInfoPtrOutputWithContext(context.Background())
}

func (i ClusterStorageInfoArgs) ToClusterStorageInfoPtrOutputWithContext(ctx context.Context) ClusterStorageInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStorageInfoOutput).ToClusterStorageInfoPtrOutputWithContext(ctx)
}

// ClusterStorageInfoPtrInput is an input type that accepts ClusterStorageInfoArgs, ClusterStorageInfoPtr and ClusterStorageInfoPtrOutput values.
// You can construct a concrete instance of `ClusterStorageInfoPtrInput` via:
//
//	        ClusterStorageInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterStorageInfoPtrInput interface {
	pulumi.Input

	ToClusterStorageInfoPtrOutput() ClusterStorageInfoPtrOutput
	ToClusterStorageInfoPtrOutputWithContext(context.Context) ClusterStorageInfoPtrOutput
}

type clusterStorageInfoPtrType ClusterStorageInfoArgs

func ClusterStorageInfoPtr(v *ClusterStorageInfoArgs) ClusterStorageInfoPtrInput {
	return (*clusterStorageInfoPtrType)(v)
}

func (*clusterStorageInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStorageInfo)(nil)).Elem()
}

func (i *clusterStorageInfoPtrType) ToClusterStorageInfoPtrOutput() ClusterStorageInfoPtrOutput {
	return i.ToClusterStorageInfoPtrOutputWithContext(context.Background())
}

func (i *clusterStorageInfoPtrType) ToClusterStorageInfoPtrOutputWithContext(ctx context.Context) ClusterStorageInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStorageInfoPtrOutput)
}

func (i *clusterStorageInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterStorageInfo] {
	return pulumix.Output[*ClusterStorageInfo]{
		OutputState: i.ToClusterStorageInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterStorageInfoOutput struct{ *pulumi.OutputState }

func (ClusterStorageInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStorageInfo)(nil)).Elem()
}

func (o ClusterStorageInfoOutput) ToClusterStorageInfoOutput() ClusterStorageInfoOutput {
	return o
}

func (o ClusterStorageInfoOutput) ToClusterStorageInfoOutputWithContext(ctx context.Context) ClusterStorageInfoOutput {
	return o
}

func (o ClusterStorageInfoOutput) ToClusterStorageInfoPtrOutput() ClusterStorageInfoPtrOutput {
	return o.ToClusterStorageInfoPtrOutputWithContext(context.Background())
}

func (o ClusterStorageInfoOutput) ToClusterStorageInfoPtrOutputWithContext(ctx context.Context) ClusterStorageInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterStorageInfo) *ClusterStorageInfo {
		return &v
	}).(ClusterStorageInfoPtrOutput)
}

func (o ClusterStorageInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterStorageInfo] {
	return pulumix.Output[ClusterStorageInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterStorageInfoOutput) EbsStorageInfo() ClusterEbsStorageInfoPtrOutput {
	return o.ApplyT(func(v ClusterStorageInfo) *ClusterEbsStorageInfo { return v.EbsStorageInfo }).(ClusterEbsStorageInfoPtrOutput)
}

type ClusterStorageInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterStorageInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStorageInfo)(nil)).Elem()
}

func (o ClusterStorageInfoPtrOutput) ToClusterStorageInfoPtrOutput() ClusterStorageInfoPtrOutput {
	return o
}

func (o ClusterStorageInfoPtrOutput) ToClusterStorageInfoPtrOutputWithContext(ctx context.Context) ClusterStorageInfoPtrOutput {
	return o
}

func (o ClusterStorageInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterStorageInfo] {
	return pulumix.Output[*ClusterStorageInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClusterStorageInfoPtrOutput) Elem() ClusterStorageInfoOutput {
	return o.ApplyT(func(v *ClusterStorageInfo) ClusterStorageInfo {
		if v != nil {
			return *v
		}
		var ret ClusterStorageInfo
		return ret
	}).(ClusterStorageInfoOutput)
}

func (o ClusterStorageInfoPtrOutput) EbsStorageInfo() ClusterEbsStorageInfoPtrOutput {
	return o.ApplyT(func(v *ClusterStorageInfo) *ClusterEbsStorageInfo {
		if v == nil {
			return nil
		}
		return v.EbsStorageInfo
	}).(ClusterEbsStorageInfoPtrOutput)
}

type ClusterTls struct {
	CertificateAuthorityArnList []string `pulumi:"certificateAuthorityArnList"`
	Enabled                     *bool    `pulumi:"enabled"`
}

// ClusterTlsInput is an input type that accepts ClusterTlsArgs and ClusterTlsOutput values.
// You can construct a concrete instance of `ClusterTlsInput` via:
//
//	ClusterTlsArgs{...}
type ClusterTlsInput interface {
	pulumi.Input

	ToClusterTlsOutput() ClusterTlsOutput
	ToClusterTlsOutputWithContext(context.Context) ClusterTlsOutput
}

type ClusterTlsArgs struct {
	CertificateAuthorityArnList pulumi.StringArrayInput `pulumi:"certificateAuthorityArnList"`
	Enabled                     pulumi.BoolPtrInput     `pulumi:"enabled"`
}

func (ClusterTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTls)(nil)).Elem()
}

func (i ClusterTlsArgs) ToClusterTlsOutput() ClusterTlsOutput {
	return i.ToClusterTlsOutputWithContext(context.Background())
}

func (i ClusterTlsArgs) ToClusterTlsOutputWithContext(ctx context.Context) ClusterTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTlsOutput)
}

func (i ClusterTlsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterTls] {
	return pulumix.Output[ClusterTls]{
		OutputState: i.ToClusterTlsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterTlsArgs) ToClusterTlsPtrOutput() ClusterTlsPtrOutput {
	return i.ToClusterTlsPtrOutputWithContext(context.Background())
}

func (i ClusterTlsArgs) ToClusterTlsPtrOutputWithContext(ctx context.Context) ClusterTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTlsOutput).ToClusterTlsPtrOutputWithContext(ctx)
}

// ClusterTlsPtrInput is an input type that accepts ClusterTlsArgs, ClusterTlsPtr and ClusterTlsPtrOutput values.
// You can construct a concrete instance of `ClusterTlsPtrInput` via:
//
//	        ClusterTlsArgs{...}
//
//	or:
//
//	        nil
type ClusterTlsPtrInput interface {
	pulumi.Input

	ToClusterTlsPtrOutput() ClusterTlsPtrOutput
	ToClusterTlsPtrOutputWithContext(context.Context) ClusterTlsPtrOutput
}

type clusterTlsPtrType ClusterTlsArgs

func ClusterTlsPtr(v *ClusterTlsArgs) ClusterTlsPtrInput {
	return (*clusterTlsPtrType)(v)
}

func (*clusterTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTls)(nil)).Elem()
}

func (i *clusterTlsPtrType) ToClusterTlsPtrOutput() ClusterTlsPtrOutput {
	return i.ToClusterTlsPtrOutputWithContext(context.Background())
}

func (i *clusterTlsPtrType) ToClusterTlsPtrOutputWithContext(ctx context.Context) ClusterTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTlsPtrOutput)
}

func (i *clusterTlsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterTls] {
	return pulumix.Output[*ClusterTls]{
		OutputState: i.ToClusterTlsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterTlsOutput struct{ *pulumi.OutputState }

func (ClusterTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTls)(nil)).Elem()
}

func (o ClusterTlsOutput) ToClusterTlsOutput() ClusterTlsOutput {
	return o
}

func (o ClusterTlsOutput) ToClusterTlsOutputWithContext(ctx context.Context) ClusterTlsOutput {
	return o
}

func (o ClusterTlsOutput) ToClusterTlsPtrOutput() ClusterTlsPtrOutput {
	return o.ToClusterTlsPtrOutputWithContext(context.Background())
}

func (o ClusterTlsOutput) ToClusterTlsPtrOutputWithContext(ctx context.Context) ClusterTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterTls) *ClusterTls {
		return &v
	}).(ClusterTlsPtrOutput)
}

func (o ClusterTlsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterTls] {
	return pulumix.Output[ClusterTls]{
		OutputState: o.OutputState,
	}
}

func (o ClusterTlsOutput) CertificateAuthorityArnList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterTls) []string { return v.CertificateAuthorityArnList }).(pulumi.StringArrayOutput)
}

func (o ClusterTlsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterTls) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ClusterTlsPtrOutput struct{ *pulumi.OutputState }

func (ClusterTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTls)(nil)).Elem()
}

func (o ClusterTlsPtrOutput) ToClusterTlsPtrOutput() ClusterTlsPtrOutput {
	return o
}

func (o ClusterTlsPtrOutput) ToClusterTlsPtrOutputWithContext(ctx context.Context) ClusterTlsPtrOutput {
	return o
}

func (o ClusterTlsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterTls] {
	return pulumix.Output[*ClusterTls]{
		OutputState: o.OutputState,
	}
}

func (o ClusterTlsPtrOutput) Elem() ClusterTlsOutput {
	return o.ApplyT(func(v *ClusterTls) ClusterTls {
		if v != nil {
			return *v
		}
		var ret ClusterTls
		return ret
	}).(ClusterTlsOutput)
}

func (o ClusterTlsPtrOutput) CertificateAuthorityArnList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterTls) []string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthorityArnList
	}).(pulumi.StringArrayOutput)
}

func (o ClusterTlsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterTls) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterUnauthenticated struct {
	Enabled bool `pulumi:"enabled"`
}

// ClusterUnauthenticatedInput is an input type that accepts ClusterUnauthenticatedArgs and ClusterUnauthenticatedOutput values.
// You can construct a concrete instance of `ClusterUnauthenticatedInput` via:
//
//	ClusterUnauthenticatedArgs{...}
type ClusterUnauthenticatedInput interface {
	pulumi.Input

	ToClusterUnauthenticatedOutput() ClusterUnauthenticatedOutput
	ToClusterUnauthenticatedOutputWithContext(context.Context) ClusterUnauthenticatedOutput
}

type ClusterUnauthenticatedArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ClusterUnauthenticatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUnauthenticated)(nil)).Elem()
}

func (i ClusterUnauthenticatedArgs) ToClusterUnauthenticatedOutput() ClusterUnauthenticatedOutput {
	return i.ToClusterUnauthenticatedOutputWithContext(context.Background())
}

func (i ClusterUnauthenticatedArgs) ToClusterUnauthenticatedOutputWithContext(ctx context.Context) ClusterUnauthenticatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUnauthenticatedOutput)
}

func (i ClusterUnauthenticatedArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterUnauthenticated] {
	return pulumix.Output[ClusterUnauthenticated]{
		OutputState: i.ToClusterUnauthenticatedOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterUnauthenticatedArgs) ToClusterUnauthenticatedPtrOutput() ClusterUnauthenticatedPtrOutput {
	return i.ToClusterUnauthenticatedPtrOutputWithContext(context.Background())
}

func (i ClusterUnauthenticatedArgs) ToClusterUnauthenticatedPtrOutputWithContext(ctx context.Context) ClusterUnauthenticatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUnauthenticatedOutput).ToClusterUnauthenticatedPtrOutputWithContext(ctx)
}

// ClusterUnauthenticatedPtrInput is an input type that accepts ClusterUnauthenticatedArgs, ClusterUnauthenticatedPtr and ClusterUnauthenticatedPtrOutput values.
// You can construct a concrete instance of `ClusterUnauthenticatedPtrInput` via:
//
//	        ClusterUnauthenticatedArgs{...}
//
//	or:
//
//	        nil
type ClusterUnauthenticatedPtrInput interface {
	pulumi.Input

	ToClusterUnauthenticatedPtrOutput() ClusterUnauthenticatedPtrOutput
	ToClusterUnauthenticatedPtrOutputWithContext(context.Context) ClusterUnauthenticatedPtrOutput
}

type clusterUnauthenticatedPtrType ClusterUnauthenticatedArgs

func ClusterUnauthenticatedPtr(v *ClusterUnauthenticatedArgs) ClusterUnauthenticatedPtrInput {
	return (*clusterUnauthenticatedPtrType)(v)
}

func (*clusterUnauthenticatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUnauthenticated)(nil)).Elem()
}

func (i *clusterUnauthenticatedPtrType) ToClusterUnauthenticatedPtrOutput() ClusterUnauthenticatedPtrOutput {
	return i.ToClusterUnauthenticatedPtrOutputWithContext(context.Background())
}

func (i *clusterUnauthenticatedPtrType) ToClusterUnauthenticatedPtrOutputWithContext(ctx context.Context) ClusterUnauthenticatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUnauthenticatedPtrOutput)
}

func (i *clusterUnauthenticatedPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterUnauthenticated] {
	return pulumix.Output[*ClusterUnauthenticated]{
		OutputState: i.ToClusterUnauthenticatedPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterUnauthenticatedOutput struct{ *pulumi.OutputState }

func (ClusterUnauthenticatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUnauthenticated)(nil)).Elem()
}

func (o ClusterUnauthenticatedOutput) ToClusterUnauthenticatedOutput() ClusterUnauthenticatedOutput {
	return o
}

func (o ClusterUnauthenticatedOutput) ToClusterUnauthenticatedOutputWithContext(ctx context.Context) ClusterUnauthenticatedOutput {
	return o
}

func (o ClusterUnauthenticatedOutput) ToClusterUnauthenticatedPtrOutput() ClusterUnauthenticatedPtrOutput {
	return o.ToClusterUnauthenticatedPtrOutputWithContext(context.Background())
}

func (o ClusterUnauthenticatedOutput) ToClusterUnauthenticatedPtrOutputWithContext(ctx context.Context) ClusterUnauthenticatedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUnauthenticated) *ClusterUnauthenticated {
		return &v
	}).(ClusterUnauthenticatedPtrOutput)
}

func (o ClusterUnauthenticatedOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterUnauthenticated] {
	return pulumix.Output[ClusterUnauthenticated]{
		OutputState: o.OutputState,
	}
}

func (o ClusterUnauthenticatedOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterUnauthenticated) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterUnauthenticatedPtrOutput struct{ *pulumi.OutputState }

func (ClusterUnauthenticatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUnauthenticated)(nil)).Elem()
}

func (o ClusterUnauthenticatedPtrOutput) ToClusterUnauthenticatedPtrOutput() ClusterUnauthenticatedPtrOutput {
	return o
}

func (o ClusterUnauthenticatedPtrOutput) ToClusterUnauthenticatedPtrOutputWithContext(ctx context.Context) ClusterUnauthenticatedPtrOutput {
	return o
}

func (o ClusterUnauthenticatedPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterUnauthenticated] {
	return pulumix.Output[*ClusterUnauthenticated]{
		OutputState: o.OutputState,
	}
}

func (o ClusterUnauthenticatedPtrOutput) Elem() ClusterUnauthenticatedOutput {
	return o.ApplyT(func(v *ClusterUnauthenticated) ClusterUnauthenticated {
		if v != nil {
			return *v
		}
		var ret ClusterUnauthenticated
		return ret
	}).(ClusterUnauthenticatedOutput)
}

func (o ClusterUnauthenticatedPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterUnauthenticated) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterVpcConnectivity struct {
	ClientAuthentication *ClusterVpcConnectivityClientAuthentication `pulumi:"clientAuthentication"`
}

// ClusterVpcConnectivityInput is an input type that accepts ClusterVpcConnectivityArgs and ClusterVpcConnectivityOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityInput` via:
//
//	ClusterVpcConnectivityArgs{...}
type ClusterVpcConnectivityInput interface {
	pulumi.Input

	ToClusterVpcConnectivityOutput() ClusterVpcConnectivityOutput
	ToClusterVpcConnectivityOutputWithContext(context.Context) ClusterVpcConnectivityOutput
}

type ClusterVpcConnectivityArgs struct {
	ClientAuthentication ClusterVpcConnectivityClientAuthenticationPtrInput `pulumi:"clientAuthentication"`
}

func (ClusterVpcConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivity)(nil)).Elem()
}

func (i ClusterVpcConnectivityArgs) ToClusterVpcConnectivityOutput() ClusterVpcConnectivityOutput {
	return i.ToClusterVpcConnectivityOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityArgs) ToClusterVpcConnectivityOutputWithContext(ctx context.Context) ClusterVpcConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityOutput)
}

func (i ClusterVpcConnectivityArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivity] {
	return pulumix.Output[ClusterVpcConnectivity]{
		OutputState: i.ToClusterVpcConnectivityOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterVpcConnectivityArgs) ToClusterVpcConnectivityPtrOutput() ClusterVpcConnectivityPtrOutput {
	return i.ToClusterVpcConnectivityPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityArgs) ToClusterVpcConnectivityPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityOutput).ToClusterVpcConnectivityPtrOutputWithContext(ctx)
}

// ClusterVpcConnectivityPtrInput is an input type that accepts ClusterVpcConnectivityArgs, ClusterVpcConnectivityPtr and ClusterVpcConnectivityPtrOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityPtrInput` via:
//
//	        ClusterVpcConnectivityArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcConnectivityPtrInput interface {
	pulumi.Input

	ToClusterVpcConnectivityPtrOutput() ClusterVpcConnectivityPtrOutput
	ToClusterVpcConnectivityPtrOutputWithContext(context.Context) ClusterVpcConnectivityPtrOutput
}

type clusterVpcConnectivityPtrType ClusterVpcConnectivityArgs

func ClusterVpcConnectivityPtr(v *ClusterVpcConnectivityArgs) ClusterVpcConnectivityPtrInput {
	return (*clusterVpcConnectivityPtrType)(v)
}

func (*clusterVpcConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivity)(nil)).Elem()
}

func (i *clusterVpcConnectivityPtrType) ToClusterVpcConnectivityPtrOutput() ClusterVpcConnectivityPtrOutput {
	return i.ToClusterVpcConnectivityPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConnectivityPtrType) ToClusterVpcConnectivityPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityPtrOutput)
}

func (i *clusterVpcConnectivityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivity] {
	return pulumix.Output[*ClusterVpcConnectivity]{
		OutputState: i.ToClusterVpcConnectivityPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterVpcConnectivityOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivity)(nil)).Elem()
}

func (o ClusterVpcConnectivityOutput) ToClusterVpcConnectivityOutput() ClusterVpcConnectivityOutput {
	return o
}

func (o ClusterVpcConnectivityOutput) ToClusterVpcConnectivityOutputWithContext(ctx context.Context) ClusterVpcConnectivityOutput {
	return o
}

func (o ClusterVpcConnectivityOutput) ToClusterVpcConnectivityPtrOutput() ClusterVpcConnectivityPtrOutput {
	return o.ToClusterVpcConnectivityPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConnectivityOutput) ToClusterVpcConnectivityPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcConnectivity) *ClusterVpcConnectivity {
		return &v
	}).(ClusterVpcConnectivityPtrOutput)
}

func (o ClusterVpcConnectivityOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivity] {
	return pulumix.Output[ClusterVpcConnectivity]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityOutput) ClientAuthentication() ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return o.ApplyT(func(v ClusterVpcConnectivity) *ClusterVpcConnectivityClientAuthentication {
		return v.ClientAuthentication
	}).(ClusterVpcConnectivityClientAuthenticationPtrOutput)
}

type ClusterVpcConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivity)(nil)).Elem()
}

func (o ClusterVpcConnectivityPtrOutput) ToClusterVpcConnectivityPtrOutput() ClusterVpcConnectivityPtrOutput {
	return o
}

func (o ClusterVpcConnectivityPtrOutput) ToClusterVpcConnectivityPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityPtrOutput {
	return o
}

func (o ClusterVpcConnectivityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivity] {
	return pulumix.Output[*ClusterVpcConnectivity]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityPtrOutput) Elem() ClusterVpcConnectivityOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivity) ClusterVpcConnectivity {
		if v != nil {
			return *v
		}
		var ret ClusterVpcConnectivity
		return ret
	}).(ClusterVpcConnectivityOutput)
}

func (o ClusterVpcConnectivityPtrOutput) ClientAuthentication() ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivity) *ClusterVpcConnectivityClientAuthentication {
		if v == nil {
			return nil
		}
		return v.ClientAuthentication
	}).(ClusterVpcConnectivityClientAuthenticationPtrOutput)
}

type ClusterVpcConnectivityClientAuthentication struct {
	Sasl *ClusterVpcConnectivitySasl `pulumi:"sasl"`
	Tls  *ClusterVpcConnectivityTls  `pulumi:"tls"`
}

// ClusterVpcConnectivityClientAuthenticationInput is an input type that accepts ClusterVpcConnectivityClientAuthenticationArgs and ClusterVpcConnectivityClientAuthenticationOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityClientAuthenticationInput` via:
//
//	ClusterVpcConnectivityClientAuthenticationArgs{...}
type ClusterVpcConnectivityClientAuthenticationInput interface {
	pulumi.Input

	ToClusterVpcConnectivityClientAuthenticationOutput() ClusterVpcConnectivityClientAuthenticationOutput
	ToClusterVpcConnectivityClientAuthenticationOutputWithContext(context.Context) ClusterVpcConnectivityClientAuthenticationOutput
}

type ClusterVpcConnectivityClientAuthenticationArgs struct {
	Sasl ClusterVpcConnectivitySaslPtrInput `pulumi:"sasl"`
	Tls  ClusterVpcConnectivityTlsPtrInput  `pulumi:"tls"`
}

func (ClusterVpcConnectivityClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityClientAuthentication)(nil)).Elem()
}

func (i ClusterVpcConnectivityClientAuthenticationArgs) ToClusterVpcConnectivityClientAuthenticationOutput() ClusterVpcConnectivityClientAuthenticationOutput {
	return i.ToClusterVpcConnectivityClientAuthenticationOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityClientAuthenticationArgs) ToClusterVpcConnectivityClientAuthenticationOutputWithContext(ctx context.Context) ClusterVpcConnectivityClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityClientAuthenticationOutput)
}

func (i ClusterVpcConnectivityClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityClientAuthentication] {
	return pulumix.Output[ClusterVpcConnectivityClientAuthentication]{
		OutputState: i.ToClusterVpcConnectivityClientAuthenticationOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterVpcConnectivityClientAuthenticationArgs) ToClusterVpcConnectivityClientAuthenticationPtrOutput() ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return i.ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityClientAuthenticationArgs) ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityClientAuthenticationOutput).ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(ctx)
}

// ClusterVpcConnectivityClientAuthenticationPtrInput is an input type that accepts ClusterVpcConnectivityClientAuthenticationArgs, ClusterVpcConnectivityClientAuthenticationPtr and ClusterVpcConnectivityClientAuthenticationPtrOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityClientAuthenticationPtrInput` via:
//
//	        ClusterVpcConnectivityClientAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcConnectivityClientAuthenticationPtrInput interface {
	pulumi.Input

	ToClusterVpcConnectivityClientAuthenticationPtrOutput() ClusterVpcConnectivityClientAuthenticationPtrOutput
	ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(context.Context) ClusterVpcConnectivityClientAuthenticationPtrOutput
}

type clusterVpcConnectivityClientAuthenticationPtrType ClusterVpcConnectivityClientAuthenticationArgs

func ClusterVpcConnectivityClientAuthenticationPtr(v *ClusterVpcConnectivityClientAuthenticationArgs) ClusterVpcConnectivityClientAuthenticationPtrInput {
	return (*clusterVpcConnectivityClientAuthenticationPtrType)(v)
}

func (*clusterVpcConnectivityClientAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityClientAuthentication)(nil)).Elem()
}

func (i *clusterVpcConnectivityClientAuthenticationPtrType) ToClusterVpcConnectivityClientAuthenticationPtrOutput() ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return i.ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConnectivityClientAuthenticationPtrType) ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityClientAuthenticationPtrOutput)
}

func (i *clusterVpcConnectivityClientAuthenticationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityClientAuthentication] {
	return pulumix.Output[*ClusterVpcConnectivityClientAuthentication]{
		OutputState: i.ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterVpcConnectivityClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityClientAuthentication)(nil)).Elem()
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) ToClusterVpcConnectivityClientAuthenticationOutput() ClusterVpcConnectivityClientAuthenticationOutput {
	return o
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) ToClusterVpcConnectivityClientAuthenticationOutputWithContext(ctx context.Context) ClusterVpcConnectivityClientAuthenticationOutput {
	return o
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) ToClusterVpcConnectivityClientAuthenticationPtrOutput() ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return o.ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcConnectivityClientAuthentication) *ClusterVpcConnectivityClientAuthentication {
		return &v
	}).(ClusterVpcConnectivityClientAuthenticationPtrOutput)
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityClientAuthentication] {
	return pulumix.Output[ClusterVpcConnectivityClientAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) Sasl() ClusterVpcConnectivitySaslPtrOutput {
	return o.ApplyT(func(v ClusterVpcConnectivityClientAuthentication) *ClusterVpcConnectivitySasl { return v.Sasl }).(ClusterVpcConnectivitySaslPtrOutput)
}

func (o ClusterVpcConnectivityClientAuthenticationOutput) Tls() ClusterVpcConnectivityTlsPtrOutput {
	return o.ApplyT(func(v ClusterVpcConnectivityClientAuthentication) *ClusterVpcConnectivityTls { return v.Tls }).(ClusterVpcConnectivityTlsPtrOutput)
}

type ClusterVpcConnectivityClientAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityClientAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityClientAuthentication)(nil)).Elem()
}

func (o ClusterVpcConnectivityClientAuthenticationPtrOutput) ToClusterVpcConnectivityClientAuthenticationPtrOutput() ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return o
}

func (o ClusterVpcConnectivityClientAuthenticationPtrOutput) ToClusterVpcConnectivityClientAuthenticationPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityClientAuthenticationPtrOutput {
	return o
}

func (o ClusterVpcConnectivityClientAuthenticationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityClientAuthentication] {
	return pulumix.Output[*ClusterVpcConnectivityClientAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityClientAuthenticationPtrOutput) Elem() ClusterVpcConnectivityClientAuthenticationOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityClientAuthentication) ClusterVpcConnectivityClientAuthentication {
		if v != nil {
			return *v
		}
		var ret ClusterVpcConnectivityClientAuthentication
		return ret
	}).(ClusterVpcConnectivityClientAuthenticationOutput)
}

func (o ClusterVpcConnectivityClientAuthenticationPtrOutput) Sasl() ClusterVpcConnectivitySaslPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityClientAuthentication) *ClusterVpcConnectivitySasl {
		if v == nil {
			return nil
		}
		return v.Sasl
	}).(ClusterVpcConnectivitySaslPtrOutput)
}

func (o ClusterVpcConnectivityClientAuthenticationPtrOutput) Tls() ClusterVpcConnectivityTlsPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityClientAuthentication) *ClusterVpcConnectivityTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ClusterVpcConnectivityTlsPtrOutput)
}

type ClusterVpcConnectivityIam struct {
	Enabled bool `pulumi:"enabled"`
}

// ClusterVpcConnectivityIamInput is an input type that accepts ClusterVpcConnectivityIamArgs and ClusterVpcConnectivityIamOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityIamInput` via:
//
//	ClusterVpcConnectivityIamArgs{...}
type ClusterVpcConnectivityIamInput interface {
	pulumi.Input

	ToClusterVpcConnectivityIamOutput() ClusterVpcConnectivityIamOutput
	ToClusterVpcConnectivityIamOutputWithContext(context.Context) ClusterVpcConnectivityIamOutput
}

type ClusterVpcConnectivityIamArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ClusterVpcConnectivityIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityIam)(nil)).Elem()
}

func (i ClusterVpcConnectivityIamArgs) ToClusterVpcConnectivityIamOutput() ClusterVpcConnectivityIamOutput {
	return i.ToClusterVpcConnectivityIamOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityIamArgs) ToClusterVpcConnectivityIamOutputWithContext(ctx context.Context) ClusterVpcConnectivityIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityIamOutput)
}

func (i ClusterVpcConnectivityIamArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityIam] {
	return pulumix.Output[ClusterVpcConnectivityIam]{
		OutputState: i.ToClusterVpcConnectivityIamOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterVpcConnectivityIamArgs) ToClusterVpcConnectivityIamPtrOutput() ClusterVpcConnectivityIamPtrOutput {
	return i.ToClusterVpcConnectivityIamPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityIamArgs) ToClusterVpcConnectivityIamPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityIamOutput).ToClusterVpcConnectivityIamPtrOutputWithContext(ctx)
}

// ClusterVpcConnectivityIamPtrInput is an input type that accepts ClusterVpcConnectivityIamArgs, ClusterVpcConnectivityIamPtr and ClusterVpcConnectivityIamPtrOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityIamPtrInput` via:
//
//	        ClusterVpcConnectivityIamArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcConnectivityIamPtrInput interface {
	pulumi.Input

	ToClusterVpcConnectivityIamPtrOutput() ClusterVpcConnectivityIamPtrOutput
	ToClusterVpcConnectivityIamPtrOutputWithContext(context.Context) ClusterVpcConnectivityIamPtrOutput
}

type clusterVpcConnectivityIamPtrType ClusterVpcConnectivityIamArgs

func ClusterVpcConnectivityIamPtr(v *ClusterVpcConnectivityIamArgs) ClusterVpcConnectivityIamPtrInput {
	return (*clusterVpcConnectivityIamPtrType)(v)
}

func (*clusterVpcConnectivityIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityIam)(nil)).Elem()
}

func (i *clusterVpcConnectivityIamPtrType) ToClusterVpcConnectivityIamPtrOutput() ClusterVpcConnectivityIamPtrOutput {
	return i.ToClusterVpcConnectivityIamPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConnectivityIamPtrType) ToClusterVpcConnectivityIamPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityIamPtrOutput)
}

func (i *clusterVpcConnectivityIamPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityIam] {
	return pulumix.Output[*ClusterVpcConnectivityIam]{
		OutputState: i.ToClusterVpcConnectivityIamPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterVpcConnectivityIamOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityIam)(nil)).Elem()
}

func (o ClusterVpcConnectivityIamOutput) ToClusterVpcConnectivityIamOutput() ClusterVpcConnectivityIamOutput {
	return o
}

func (o ClusterVpcConnectivityIamOutput) ToClusterVpcConnectivityIamOutputWithContext(ctx context.Context) ClusterVpcConnectivityIamOutput {
	return o
}

func (o ClusterVpcConnectivityIamOutput) ToClusterVpcConnectivityIamPtrOutput() ClusterVpcConnectivityIamPtrOutput {
	return o.ToClusterVpcConnectivityIamPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConnectivityIamOutput) ToClusterVpcConnectivityIamPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcConnectivityIam) *ClusterVpcConnectivityIam {
		return &v
	}).(ClusterVpcConnectivityIamPtrOutput)
}

func (o ClusterVpcConnectivityIamOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityIam] {
	return pulumix.Output[ClusterVpcConnectivityIam]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityIamOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterVpcConnectivityIam) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterVpcConnectivityIamPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityIam)(nil)).Elem()
}

func (o ClusterVpcConnectivityIamPtrOutput) ToClusterVpcConnectivityIamPtrOutput() ClusterVpcConnectivityIamPtrOutput {
	return o
}

func (o ClusterVpcConnectivityIamPtrOutput) ToClusterVpcConnectivityIamPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityIamPtrOutput {
	return o
}

func (o ClusterVpcConnectivityIamPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityIam] {
	return pulumix.Output[*ClusterVpcConnectivityIam]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityIamPtrOutput) Elem() ClusterVpcConnectivityIamOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityIam) ClusterVpcConnectivityIam {
		if v != nil {
			return *v
		}
		var ret ClusterVpcConnectivityIam
		return ret
	}).(ClusterVpcConnectivityIamOutput)
}

func (o ClusterVpcConnectivityIamPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityIam) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterVpcConnectivitySasl struct {
	Iam   *ClusterVpcConnectivityIam   `pulumi:"iam"`
	Scram *ClusterVpcConnectivityScram `pulumi:"scram"`
}

// ClusterVpcConnectivitySaslInput is an input type that accepts ClusterVpcConnectivitySaslArgs and ClusterVpcConnectivitySaslOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivitySaslInput` via:
//
//	ClusterVpcConnectivitySaslArgs{...}
type ClusterVpcConnectivitySaslInput interface {
	pulumi.Input

	ToClusterVpcConnectivitySaslOutput() ClusterVpcConnectivitySaslOutput
	ToClusterVpcConnectivitySaslOutputWithContext(context.Context) ClusterVpcConnectivitySaslOutput
}

type ClusterVpcConnectivitySaslArgs struct {
	Iam   ClusterVpcConnectivityIamPtrInput   `pulumi:"iam"`
	Scram ClusterVpcConnectivityScramPtrInput `pulumi:"scram"`
}

func (ClusterVpcConnectivitySaslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivitySasl)(nil)).Elem()
}

func (i ClusterVpcConnectivitySaslArgs) ToClusterVpcConnectivitySaslOutput() ClusterVpcConnectivitySaslOutput {
	return i.ToClusterVpcConnectivitySaslOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivitySaslArgs) ToClusterVpcConnectivitySaslOutputWithContext(ctx context.Context) ClusterVpcConnectivitySaslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivitySaslOutput)
}

func (i ClusterVpcConnectivitySaslArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivitySasl] {
	return pulumix.Output[ClusterVpcConnectivitySasl]{
		OutputState: i.ToClusterVpcConnectivitySaslOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterVpcConnectivitySaslArgs) ToClusterVpcConnectivitySaslPtrOutput() ClusterVpcConnectivitySaslPtrOutput {
	return i.ToClusterVpcConnectivitySaslPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivitySaslArgs) ToClusterVpcConnectivitySaslPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivitySaslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivitySaslOutput).ToClusterVpcConnectivitySaslPtrOutputWithContext(ctx)
}

// ClusterVpcConnectivitySaslPtrInput is an input type that accepts ClusterVpcConnectivitySaslArgs, ClusterVpcConnectivitySaslPtr and ClusterVpcConnectivitySaslPtrOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivitySaslPtrInput` via:
//
//	        ClusterVpcConnectivitySaslArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcConnectivitySaslPtrInput interface {
	pulumi.Input

	ToClusterVpcConnectivitySaslPtrOutput() ClusterVpcConnectivitySaslPtrOutput
	ToClusterVpcConnectivitySaslPtrOutputWithContext(context.Context) ClusterVpcConnectivitySaslPtrOutput
}

type clusterVpcConnectivitySaslPtrType ClusterVpcConnectivitySaslArgs

func ClusterVpcConnectivitySaslPtr(v *ClusterVpcConnectivitySaslArgs) ClusterVpcConnectivitySaslPtrInput {
	return (*clusterVpcConnectivitySaslPtrType)(v)
}

func (*clusterVpcConnectivitySaslPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivitySasl)(nil)).Elem()
}

func (i *clusterVpcConnectivitySaslPtrType) ToClusterVpcConnectivitySaslPtrOutput() ClusterVpcConnectivitySaslPtrOutput {
	return i.ToClusterVpcConnectivitySaslPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConnectivitySaslPtrType) ToClusterVpcConnectivitySaslPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivitySaslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivitySaslPtrOutput)
}

func (i *clusterVpcConnectivitySaslPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivitySasl] {
	return pulumix.Output[*ClusterVpcConnectivitySasl]{
		OutputState: i.ToClusterVpcConnectivitySaslPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterVpcConnectivitySaslOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivitySaslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivitySasl)(nil)).Elem()
}

func (o ClusterVpcConnectivitySaslOutput) ToClusterVpcConnectivitySaslOutput() ClusterVpcConnectivitySaslOutput {
	return o
}

func (o ClusterVpcConnectivitySaslOutput) ToClusterVpcConnectivitySaslOutputWithContext(ctx context.Context) ClusterVpcConnectivitySaslOutput {
	return o
}

func (o ClusterVpcConnectivitySaslOutput) ToClusterVpcConnectivitySaslPtrOutput() ClusterVpcConnectivitySaslPtrOutput {
	return o.ToClusterVpcConnectivitySaslPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConnectivitySaslOutput) ToClusterVpcConnectivitySaslPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivitySaslPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcConnectivitySasl) *ClusterVpcConnectivitySasl {
		return &v
	}).(ClusterVpcConnectivitySaslPtrOutput)
}

func (o ClusterVpcConnectivitySaslOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivitySasl] {
	return pulumix.Output[ClusterVpcConnectivitySasl]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivitySaslOutput) Iam() ClusterVpcConnectivityIamPtrOutput {
	return o.ApplyT(func(v ClusterVpcConnectivitySasl) *ClusterVpcConnectivityIam { return v.Iam }).(ClusterVpcConnectivityIamPtrOutput)
}

func (o ClusterVpcConnectivitySaslOutput) Scram() ClusterVpcConnectivityScramPtrOutput {
	return o.ApplyT(func(v ClusterVpcConnectivitySasl) *ClusterVpcConnectivityScram { return v.Scram }).(ClusterVpcConnectivityScramPtrOutput)
}

type ClusterVpcConnectivitySaslPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivitySaslPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivitySasl)(nil)).Elem()
}

func (o ClusterVpcConnectivitySaslPtrOutput) ToClusterVpcConnectivitySaslPtrOutput() ClusterVpcConnectivitySaslPtrOutput {
	return o
}

func (o ClusterVpcConnectivitySaslPtrOutput) ToClusterVpcConnectivitySaslPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivitySaslPtrOutput {
	return o
}

func (o ClusterVpcConnectivitySaslPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivitySasl] {
	return pulumix.Output[*ClusterVpcConnectivitySasl]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivitySaslPtrOutput) Elem() ClusterVpcConnectivitySaslOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivitySasl) ClusterVpcConnectivitySasl {
		if v != nil {
			return *v
		}
		var ret ClusterVpcConnectivitySasl
		return ret
	}).(ClusterVpcConnectivitySaslOutput)
}

func (o ClusterVpcConnectivitySaslPtrOutput) Iam() ClusterVpcConnectivityIamPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivitySasl) *ClusterVpcConnectivityIam {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(ClusterVpcConnectivityIamPtrOutput)
}

func (o ClusterVpcConnectivitySaslPtrOutput) Scram() ClusterVpcConnectivityScramPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivitySasl) *ClusterVpcConnectivityScram {
		if v == nil {
			return nil
		}
		return v.Scram
	}).(ClusterVpcConnectivityScramPtrOutput)
}

type ClusterVpcConnectivityScram struct {
	Enabled bool `pulumi:"enabled"`
}

// ClusterVpcConnectivityScramInput is an input type that accepts ClusterVpcConnectivityScramArgs and ClusterVpcConnectivityScramOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityScramInput` via:
//
//	ClusterVpcConnectivityScramArgs{...}
type ClusterVpcConnectivityScramInput interface {
	pulumi.Input

	ToClusterVpcConnectivityScramOutput() ClusterVpcConnectivityScramOutput
	ToClusterVpcConnectivityScramOutputWithContext(context.Context) ClusterVpcConnectivityScramOutput
}

type ClusterVpcConnectivityScramArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ClusterVpcConnectivityScramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityScram)(nil)).Elem()
}

func (i ClusterVpcConnectivityScramArgs) ToClusterVpcConnectivityScramOutput() ClusterVpcConnectivityScramOutput {
	return i.ToClusterVpcConnectivityScramOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityScramArgs) ToClusterVpcConnectivityScramOutputWithContext(ctx context.Context) ClusterVpcConnectivityScramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityScramOutput)
}

func (i ClusterVpcConnectivityScramArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityScram] {
	return pulumix.Output[ClusterVpcConnectivityScram]{
		OutputState: i.ToClusterVpcConnectivityScramOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterVpcConnectivityScramArgs) ToClusterVpcConnectivityScramPtrOutput() ClusterVpcConnectivityScramPtrOutput {
	return i.ToClusterVpcConnectivityScramPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityScramArgs) ToClusterVpcConnectivityScramPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityScramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityScramOutput).ToClusterVpcConnectivityScramPtrOutputWithContext(ctx)
}

// ClusterVpcConnectivityScramPtrInput is an input type that accepts ClusterVpcConnectivityScramArgs, ClusterVpcConnectivityScramPtr and ClusterVpcConnectivityScramPtrOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityScramPtrInput` via:
//
//	        ClusterVpcConnectivityScramArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcConnectivityScramPtrInput interface {
	pulumi.Input

	ToClusterVpcConnectivityScramPtrOutput() ClusterVpcConnectivityScramPtrOutput
	ToClusterVpcConnectivityScramPtrOutputWithContext(context.Context) ClusterVpcConnectivityScramPtrOutput
}

type clusterVpcConnectivityScramPtrType ClusterVpcConnectivityScramArgs

func ClusterVpcConnectivityScramPtr(v *ClusterVpcConnectivityScramArgs) ClusterVpcConnectivityScramPtrInput {
	return (*clusterVpcConnectivityScramPtrType)(v)
}

func (*clusterVpcConnectivityScramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityScram)(nil)).Elem()
}

func (i *clusterVpcConnectivityScramPtrType) ToClusterVpcConnectivityScramPtrOutput() ClusterVpcConnectivityScramPtrOutput {
	return i.ToClusterVpcConnectivityScramPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConnectivityScramPtrType) ToClusterVpcConnectivityScramPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityScramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityScramPtrOutput)
}

func (i *clusterVpcConnectivityScramPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityScram] {
	return pulumix.Output[*ClusterVpcConnectivityScram]{
		OutputState: i.ToClusterVpcConnectivityScramPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterVpcConnectivityScramOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityScramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityScram)(nil)).Elem()
}

func (o ClusterVpcConnectivityScramOutput) ToClusterVpcConnectivityScramOutput() ClusterVpcConnectivityScramOutput {
	return o
}

func (o ClusterVpcConnectivityScramOutput) ToClusterVpcConnectivityScramOutputWithContext(ctx context.Context) ClusterVpcConnectivityScramOutput {
	return o
}

func (o ClusterVpcConnectivityScramOutput) ToClusterVpcConnectivityScramPtrOutput() ClusterVpcConnectivityScramPtrOutput {
	return o.ToClusterVpcConnectivityScramPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConnectivityScramOutput) ToClusterVpcConnectivityScramPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityScramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcConnectivityScram) *ClusterVpcConnectivityScram {
		return &v
	}).(ClusterVpcConnectivityScramPtrOutput)
}

func (o ClusterVpcConnectivityScramOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityScram] {
	return pulumix.Output[ClusterVpcConnectivityScram]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityScramOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterVpcConnectivityScram) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterVpcConnectivityScramPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityScramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityScram)(nil)).Elem()
}

func (o ClusterVpcConnectivityScramPtrOutput) ToClusterVpcConnectivityScramPtrOutput() ClusterVpcConnectivityScramPtrOutput {
	return o
}

func (o ClusterVpcConnectivityScramPtrOutput) ToClusterVpcConnectivityScramPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityScramPtrOutput {
	return o
}

func (o ClusterVpcConnectivityScramPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityScram] {
	return pulumix.Output[*ClusterVpcConnectivityScram]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityScramPtrOutput) Elem() ClusterVpcConnectivityScramOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityScram) ClusterVpcConnectivityScram {
		if v != nil {
			return *v
		}
		var ret ClusterVpcConnectivityScram
		return ret
	}).(ClusterVpcConnectivityScramOutput)
}

func (o ClusterVpcConnectivityScramPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityScram) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterVpcConnectivityTls struct {
	Enabled bool `pulumi:"enabled"`
}

// ClusterVpcConnectivityTlsInput is an input type that accepts ClusterVpcConnectivityTlsArgs and ClusterVpcConnectivityTlsOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityTlsInput` via:
//
//	ClusterVpcConnectivityTlsArgs{...}
type ClusterVpcConnectivityTlsInput interface {
	pulumi.Input

	ToClusterVpcConnectivityTlsOutput() ClusterVpcConnectivityTlsOutput
	ToClusterVpcConnectivityTlsOutputWithContext(context.Context) ClusterVpcConnectivityTlsOutput
}

type ClusterVpcConnectivityTlsArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ClusterVpcConnectivityTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityTls)(nil)).Elem()
}

func (i ClusterVpcConnectivityTlsArgs) ToClusterVpcConnectivityTlsOutput() ClusterVpcConnectivityTlsOutput {
	return i.ToClusterVpcConnectivityTlsOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityTlsArgs) ToClusterVpcConnectivityTlsOutputWithContext(ctx context.Context) ClusterVpcConnectivityTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityTlsOutput)
}

func (i ClusterVpcConnectivityTlsArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityTls] {
	return pulumix.Output[ClusterVpcConnectivityTls]{
		OutputState: i.ToClusterVpcConnectivityTlsOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterVpcConnectivityTlsArgs) ToClusterVpcConnectivityTlsPtrOutput() ClusterVpcConnectivityTlsPtrOutput {
	return i.ToClusterVpcConnectivityTlsPtrOutputWithContext(context.Background())
}

func (i ClusterVpcConnectivityTlsArgs) ToClusterVpcConnectivityTlsPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityTlsOutput).ToClusterVpcConnectivityTlsPtrOutputWithContext(ctx)
}

// ClusterVpcConnectivityTlsPtrInput is an input type that accepts ClusterVpcConnectivityTlsArgs, ClusterVpcConnectivityTlsPtr and ClusterVpcConnectivityTlsPtrOutput values.
// You can construct a concrete instance of `ClusterVpcConnectivityTlsPtrInput` via:
//
//	        ClusterVpcConnectivityTlsArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcConnectivityTlsPtrInput interface {
	pulumi.Input

	ToClusterVpcConnectivityTlsPtrOutput() ClusterVpcConnectivityTlsPtrOutput
	ToClusterVpcConnectivityTlsPtrOutputWithContext(context.Context) ClusterVpcConnectivityTlsPtrOutput
}

type clusterVpcConnectivityTlsPtrType ClusterVpcConnectivityTlsArgs

func ClusterVpcConnectivityTlsPtr(v *ClusterVpcConnectivityTlsArgs) ClusterVpcConnectivityTlsPtrInput {
	return (*clusterVpcConnectivityTlsPtrType)(v)
}

func (*clusterVpcConnectivityTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityTls)(nil)).Elem()
}

func (i *clusterVpcConnectivityTlsPtrType) ToClusterVpcConnectivityTlsPtrOutput() ClusterVpcConnectivityTlsPtrOutput {
	return i.ToClusterVpcConnectivityTlsPtrOutputWithContext(context.Background())
}

func (i *clusterVpcConnectivityTlsPtrType) ToClusterVpcConnectivityTlsPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcConnectivityTlsPtrOutput)
}

func (i *clusterVpcConnectivityTlsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityTls] {
	return pulumix.Output[*ClusterVpcConnectivityTls]{
		OutputState: i.ToClusterVpcConnectivityTlsPtrOutputWithContext(ctx).OutputState,
	}
}

type ClusterVpcConnectivityTlsOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcConnectivityTls)(nil)).Elem()
}

func (o ClusterVpcConnectivityTlsOutput) ToClusterVpcConnectivityTlsOutput() ClusterVpcConnectivityTlsOutput {
	return o
}

func (o ClusterVpcConnectivityTlsOutput) ToClusterVpcConnectivityTlsOutputWithContext(ctx context.Context) ClusterVpcConnectivityTlsOutput {
	return o
}

func (o ClusterVpcConnectivityTlsOutput) ToClusterVpcConnectivityTlsPtrOutput() ClusterVpcConnectivityTlsPtrOutput {
	return o.ToClusterVpcConnectivityTlsPtrOutputWithContext(context.Background())
}

func (o ClusterVpcConnectivityTlsOutput) ToClusterVpcConnectivityTlsPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcConnectivityTls) *ClusterVpcConnectivityTls {
		return &v
	}).(ClusterVpcConnectivityTlsPtrOutput)
}

func (o ClusterVpcConnectivityTlsOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterVpcConnectivityTls] {
	return pulumix.Output[ClusterVpcConnectivityTls]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityTlsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterVpcConnectivityTls) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterVpcConnectivityTlsPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcConnectivityTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcConnectivityTls)(nil)).Elem()
}

func (o ClusterVpcConnectivityTlsPtrOutput) ToClusterVpcConnectivityTlsPtrOutput() ClusterVpcConnectivityTlsPtrOutput {
	return o
}

func (o ClusterVpcConnectivityTlsPtrOutput) ToClusterVpcConnectivityTlsPtrOutputWithContext(ctx context.Context) ClusterVpcConnectivityTlsPtrOutput {
	return o
}

func (o ClusterVpcConnectivityTlsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterVpcConnectivityTls] {
	return pulumix.Output[*ClusterVpcConnectivityTls]{
		OutputState: o.OutputState,
	}
}

func (o ClusterVpcConnectivityTlsPtrOutput) Elem() ClusterVpcConnectivityTlsOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityTls) ClusterVpcConnectivityTls {
		if v != nil {
			return *v
		}
		var ret ClusterVpcConnectivityTls
		return ret
	}).(ClusterVpcConnectivityTlsOutput)
}

func (o ClusterVpcConnectivityTlsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterVpcConnectivityTls) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ConfigurationLatestRevision struct {
	CreationTime *string `pulumi:"creationTime"`
	Description  *string `pulumi:"description"`
	Revision     *int    `pulumi:"revision"`
}

// ConfigurationLatestRevisionInput is an input type that accepts ConfigurationLatestRevisionArgs and ConfigurationLatestRevisionOutput values.
// You can construct a concrete instance of `ConfigurationLatestRevisionInput` via:
//
//	ConfigurationLatestRevisionArgs{...}
type ConfigurationLatestRevisionInput interface {
	pulumi.Input

	ToConfigurationLatestRevisionOutput() ConfigurationLatestRevisionOutput
	ToConfigurationLatestRevisionOutputWithContext(context.Context) ConfigurationLatestRevisionOutput
}

type ConfigurationLatestRevisionArgs struct {
	CreationTime pulumi.StringPtrInput `pulumi:"creationTime"`
	Description  pulumi.StringPtrInput `pulumi:"description"`
	Revision     pulumi.IntPtrInput    `pulumi:"revision"`
}

func (ConfigurationLatestRevisionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationLatestRevision)(nil)).Elem()
}

func (i ConfigurationLatestRevisionArgs) ToConfigurationLatestRevisionOutput() ConfigurationLatestRevisionOutput {
	return i.ToConfigurationLatestRevisionOutputWithContext(context.Background())
}

func (i ConfigurationLatestRevisionArgs) ToConfigurationLatestRevisionOutputWithContext(ctx context.Context) ConfigurationLatestRevisionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationLatestRevisionOutput)
}

func (i ConfigurationLatestRevisionArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigurationLatestRevision] {
	return pulumix.Output[ConfigurationLatestRevision]{
		OutputState: i.ToConfigurationLatestRevisionOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigurationLatestRevisionArgs) ToConfigurationLatestRevisionPtrOutput() ConfigurationLatestRevisionPtrOutput {
	return i.ToConfigurationLatestRevisionPtrOutputWithContext(context.Background())
}

func (i ConfigurationLatestRevisionArgs) ToConfigurationLatestRevisionPtrOutputWithContext(ctx context.Context) ConfigurationLatestRevisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationLatestRevisionOutput).ToConfigurationLatestRevisionPtrOutputWithContext(ctx)
}

// ConfigurationLatestRevisionPtrInput is an input type that accepts ConfigurationLatestRevisionArgs, ConfigurationLatestRevisionPtr and ConfigurationLatestRevisionPtrOutput values.
// You can construct a concrete instance of `ConfigurationLatestRevisionPtrInput` via:
//
//	        ConfigurationLatestRevisionArgs{...}
//
//	or:
//
//	        nil
type ConfigurationLatestRevisionPtrInput interface {
	pulumi.Input

	ToConfigurationLatestRevisionPtrOutput() ConfigurationLatestRevisionPtrOutput
	ToConfigurationLatestRevisionPtrOutputWithContext(context.Context) ConfigurationLatestRevisionPtrOutput
}

type configurationLatestRevisionPtrType ConfigurationLatestRevisionArgs

func ConfigurationLatestRevisionPtr(v *ConfigurationLatestRevisionArgs) ConfigurationLatestRevisionPtrInput {
	return (*configurationLatestRevisionPtrType)(v)
}

func (*configurationLatestRevisionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationLatestRevision)(nil)).Elem()
}

func (i *configurationLatestRevisionPtrType) ToConfigurationLatestRevisionPtrOutput() ConfigurationLatestRevisionPtrOutput {
	return i.ToConfigurationLatestRevisionPtrOutputWithContext(context.Background())
}

func (i *configurationLatestRevisionPtrType) ToConfigurationLatestRevisionPtrOutputWithContext(ctx context.Context) ConfigurationLatestRevisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationLatestRevisionPtrOutput)
}

func (i *configurationLatestRevisionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationLatestRevision] {
	return pulumix.Output[*ConfigurationLatestRevision]{
		OutputState: i.ToConfigurationLatestRevisionPtrOutputWithContext(ctx).OutputState,
	}
}

type ConfigurationLatestRevisionOutput struct{ *pulumi.OutputState }

func (ConfigurationLatestRevisionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationLatestRevision)(nil)).Elem()
}

func (o ConfigurationLatestRevisionOutput) ToConfigurationLatestRevisionOutput() ConfigurationLatestRevisionOutput {
	return o
}

func (o ConfigurationLatestRevisionOutput) ToConfigurationLatestRevisionOutputWithContext(ctx context.Context) ConfigurationLatestRevisionOutput {
	return o
}

func (o ConfigurationLatestRevisionOutput) ToConfigurationLatestRevisionPtrOutput() ConfigurationLatestRevisionPtrOutput {
	return o.ToConfigurationLatestRevisionPtrOutputWithContext(context.Background())
}

func (o ConfigurationLatestRevisionOutput) ToConfigurationLatestRevisionPtrOutputWithContext(ctx context.Context) ConfigurationLatestRevisionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationLatestRevision) *ConfigurationLatestRevision {
		return &v
	}).(ConfigurationLatestRevisionPtrOutput)
}

func (o ConfigurationLatestRevisionOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationLatestRevision] {
	return pulumix.Output[ConfigurationLatestRevision]{
		OutputState: o.OutputState,
	}
}

func (o ConfigurationLatestRevisionOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationLatestRevision) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

func (o ConfigurationLatestRevisionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationLatestRevision) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConfigurationLatestRevisionOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigurationLatestRevision) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

type ConfigurationLatestRevisionPtrOutput struct{ *pulumi.OutputState }

func (ConfigurationLatestRevisionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationLatestRevision)(nil)).Elem()
}

func (o ConfigurationLatestRevisionPtrOutput) ToConfigurationLatestRevisionPtrOutput() ConfigurationLatestRevisionPtrOutput {
	return o
}

func (o ConfigurationLatestRevisionPtrOutput) ToConfigurationLatestRevisionPtrOutputWithContext(ctx context.Context) ConfigurationLatestRevisionPtrOutput {
	return o
}

func (o ConfigurationLatestRevisionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationLatestRevision] {
	return pulumix.Output[*ConfigurationLatestRevision]{
		OutputState: o.OutputState,
	}
}

func (o ConfigurationLatestRevisionPtrOutput) Elem() ConfigurationLatestRevisionOutput {
	return o.ApplyT(func(v *ConfigurationLatestRevision) ConfigurationLatestRevision {
		if v != nil {
			return *v
		}
		var ret ConfigurationLatestRevision
		return ret
	}).(ConfigurationLatestRevisionOutput)
}

func (o ConfigurationLatestRevisionPtrOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationLatestRevision) *string {
		if v == nil {
			return nil
		}
		return v.CreationTime
	}).(pulumi.StringPtrOutput)
}

func (o ConfigurationLatestRevisionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationLatestRevision) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConfigurationLatestRevisionPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigurationLatestRevision) *int {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.IntPtrOutput)
}

// Details of an Amazon MSK cluster.
type ReplicatorAmazonMskCluster struct {
	// The ARN of an Amazon MSK cluster.
	MskClusterArn string `pulumi:"mskClusterArn"`
}

// ReplicatorAmazonMskClusterInput is an input type that accepts ReplicatorAmazonMskClusterArgs and ReplicatorAmazonMskClusterOutput values.
// You can construct a concrete instance of `ReplicatorAmazonMskClusterInput` via:
//
//	ReplicatorAmazonMskClusterArgs{...}
type ReplicatorAmazonMskClusterInput interface {
	pulumi.Input

	ToReplicatorAmazonMskClusterOutput() ReplicatorAmazonMskClusterOutput
	ToReplicatorAmazonMskClusterOutputWithContext(context.Context) ReplicatorAmazonMskClusterOutput
}

// Details of an Amazon MSK cluster.
type ReplicatorAmazonMskClusterArgs struct {
	// The ARN of an Amazon MSK cluster.
	MskClusterArn pulumi.StringInput `pulumi:"mskClusterArn"`
}

func (ReplicatorAmazonMskClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorAmazonMskCluster)(nil)).Elem()
}

func (i ReplicatorAmazonMskClusterArgs) ToReplicatorAmazonMskClusterOutput() ReplicatorAmazonMskClusterOutput {
	return i.ToReplicatorAmazonMskClusterOutputWithContext(context.Background())
}

func (i ReplicatorAmazonMskClusterArgs) ToReplicatorAmazonMskClusterOutputWithContext(ctx context.Context) ReplicatorAmazonMskClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorAmazonMskClusterOutput)
}

func (i ReplicatorAmazonMskClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorAmazonMskCluster] {
	return pulumix.Output[ReplicatorAmazonMskCluster]{
		OutputState: i.ToReplicatorAmazonMskClusterOutputWithContext(ctx).OutputState,
	}
}

// Details of an Amazon MSK cluster.
type ReplicatorAmazonMskClusterOutput struct{ *pulumi.OutputState }

func (ReplicatorAmazonMskClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorAmazonMskCluster)(nil)).Elem()
}

func (o ReplicatorAmazonMskClusterOutput) ToReplicatorAmazonMskClusterOutput() ReplicatorAmazonMskClusterOutput {
	return o
}

func (o ReplicatorAmazonMskClusterOutput) ToReplicatorAmazonMskClusterOutputWithContext(ctx context.Context) ReplicatorAmazonMskClusterOutput {
	return o
}

func (o ReplicatorAmazonMskClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorAmazonMskCluster] {
	return pulumix.Output[ReplicatorAmazonMskCluster]{
		OutputState: o.OutputState,
	}
}

// The ARN of an Amazon MSK cluster.
func (o ReplicatorAmazonMskClusterOutput) MskClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatorAmazonMskCluster) string { return v.MskClusterArn }).(pulumi.StringOutput)
}

// Configuration relating to consumer group replication.
type ReplicatorConsumerGroupReplication struct {
	// List of regular expression patterns indicating the consumer groups that should not be replicated.
	ConsumerGroupsToExclude []string `pulumi:"consumerGroupsToExclude"`
	// List of regular expression patterns indicating the consumer groups to copy.
	ConsumerGroupsToReplicate []string `pulumi:"consumerGroupsToReplicate"`
	// Whether to periodically check for new consumer groups.
	DetectAndCopyNewConsumerGroups *bool `pulumi:"detectAndCopyNewConsumerGroups"`
	// Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
	SynchroniseConsumerGroupOffsets *bool `pulumi:"synchroniseConsumerGroupOffsets"`
}

// ReplicatorConsumerGroupReplicationInput is an input type that accepts ReplicatorConsumerGroupReplicationArgs and ReplicatorConsumerGroupReplicationOutput values.
// You can construct a concrete instance of `ReplicatorConsumerGroupReplicationInput` via:
//
//	ReplicatorConsumerGroupReplicationArgs{...}
type ReplicatorConsumerGroupReplicationInput interface {
	pulumi.Input

	ToReplicatorConsumerGroupReplicationOutput() ReplicatorConsumerGroupReplicationOutput
	ToReplicatorConsumerGroupReplicationOutputWithContext(context.Context) ReplicatorConsumerGroupReplicationOutput
}

// Configuration relating to consumer group replication.
type ReplicatorConsumerGroupReplicationArgs struct {
	// List of regular expression patterns indicating the consumer groups that should not be replicated.
	ConsumerGroupsToExclude pulumi.StringArrayInput `pulumi:"consumerGroupsToExclude"`
	// List of regular expression patterns indicating the consumer groups to copy.
	ConsumerGroupsToReplicate pulumi.StringArrayInput `pulumi:"consumerGroupsToReplicate"`
	// Whether to periodically check for new consumer groups.
	DetectAndCopyNewConsumerGroups pulumi.BoolPtrInput `pulumi:"detectAndCopyNewConsumerGroups"`
	// Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
	SynchroniseConsumerGroupOffsets pulumi.BoolPtrInput `pulumi:"synchroniseConsumerGroupOffsets"`
}

func (ReplicatorConsumerGroupReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorConsumerGroupReplication)(nil)).Elem()
}

func (i ReplicatorConsumerGroupReplicationArgs) ToReplicatorConsumerGroupReplicationOutput() ReplicatorConsumerGroupReplicationOutput {
	return i.ToReplicatorConsumerGroupReplicationOutputWithContext(context.Background())
}

func (i ReplicatorConsumerGroupReplicationArgs) ToReplicatorConsumerGroupReplicationOutputWithContext(ctx context.Context) ReplicatorConsumerGroupReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorConsumerGroupReplicationOutput)
}

func (i ReplicatorConsumerGroupReplicationArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorConsumerGroupReplication] {
	return pulumix.Output[ReplicatorConsumerGroupReplication]{
		OutputState: i.ToReplicatorConsumerGroupReplicationOutputWithContext(ctx).OutputState,
	}
}

// Configuration relating to consumer group replication.
type ReplicatorConsumerGroupReplicationOutput struct{ *pulumi.OutputState }

func (ReplicatorConsumerGroupReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorConsumerGroupReplication)(nil)).Elem()
}

func (o ReplicatorConsumerGroupReplicationOutput) ToReplicatorConsumerGroupReplicationOutput() ReplicatorConsumerGroupReplicationOutput {
	return o
}

func (o ReplicatorConsumerGroupReplicationOutput) ToReplicatorConsumerGroupReplicationOutputWithContext(ctx context.Context) ReplicatorConsumerGroupReplicationOutput {
	return o
}

func (o ReplicatorConsumerGroupReplicationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorConsumerGroupReplication] {
	return pulumix.Output[ReplicatorConsumerGroupReplication]{
		OutputState: o.OutputState,
	}
}

// List of regular expression patterns indicating the consumer groups that should not be replicated.
func (o ReplicatorConsumerGroupReplicationOutput) ConsumerGroupsToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicatorConsumerGroupReplication) []string { return v.ConsumerGroupsToExclude }).(pulumi.StringArrayOutput)
}

// List of regular expression patterns indicating the consumer groups to copy.
func (o ReplicatorConsumerGroupReplicationOutput) ConsumerGroupsToReplicate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicatorConsumerGroupReplication) []string { return v.ConsumerGroupsToReplicate }).(pulumi.StringArrayOutput)
}

// Whether to periodically check for new consumer groups.
func (o ReplicatorConsumerGroupReplicationOutput) DetectAndCopyNewConsumerGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicatorConsumerGroupReplication) *bool { return v.DetectAndCopyNewConsumerGroups }).(pulumi.BoolPtrOutput)
}

// Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
func (o ReplicatorConsumerGroupReplicationOutput) SynchroniseConsumerGroupOffsets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicatorConsumerGroupReplication) *bool { return v.SynchroniseConsumerGroupOffsets }).(pulumi.BoolPtrOutput)
}

// Details of a Kafka cluster for replication.
type ReplicatorKafkaCluster struct {
	// Details of an Amazon MSK cluster. Exactly one of AmazonMskCluster is required.
	AmazonMskCluster ReplicatorAmazonMskCluster `pulumi:"amazonMskCluster"`
	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	VpcConfig ReplicatorKafkaClusterClientVpcConfig `pulumi:"vpcConfig"`
}

// ReplicatorKafkaClusterInput is an input type that accepts ReplicatorKafkaClusterArgs and ReplicatorKafkaClusterOutput values.
// You can construct a concrete instance of `ReplicatorKafkaClusterInput` via:
//
//	ReplicatorKafkaClusterArgs{...}
type ReplicatorKafkaClusterInput interface {
	pulumi.Input

	ToReplicatorKafkaClusterOutput() ReplicatorKafkaClusterOutput
	ToReplicatorKafkaClusterOutputWithContext(context.Context) ReplicatorKafkaClusterOutput
}

// Details of a Kafka cluster for replication.
type ReplicatorKafkaClusterArgs struct {
	// Details of an Amazon MSK cluster. Exactly one of AmazonMskCluster is required.
	AmazonMskCluster ReplicatorAmazonMskClusterInput `pulumi:"amazonMskCluster"`
	// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
	VpcConfig ReplicatorKafkaClusterClientVpcConfigInput `pulumi:"vpcConfig"`
}

func (ReplicatorKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorKafkaCluster)(nil)).Elem()
}

func (i ReplicatorKafkaClusterArgs) ToReplicatorKafkaClusterOutput() ReplicatorKafkaClusterOutput {
	return i.ToReplicatorKafkaClusterOutputWithContext(context.Background())
}

func (i ReplicatorKafkaClusterArgs) ToReplicatorKafkaClusterOutputWithContext(ctx context.Context) ReplicatorKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorKafkaClusterOutput)
}

func (i ReplicatorKafkaClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorKafkaCluster] {
	return pulumix.Output[ReplicatorKafkaCluster]{
		OutputState: i.ToReplicatorKafkaClusterOutputWithContext(ctx).OutputState,
	}
}

// ReplicatorKafkaClusterArrayInput is an input type that accepts ReplicatorKafkaClusterArray and ReplicatorKafkaClusterArrayOutput values.
// You can construct a concrete instance of `ReplicatorKafkaClusterArrayInput` via:
//
//	ReplicatorKafkaClusterArray{ ReplicatorKafkaClusterArgs{...} }
type ReplicatorKafkaClusterArrayInput interface {
	pulumi.Input

	ToReplicatorKafkaClusterArrayOutput() ReplicatorKafkaClusterArrayOutput
	ToReplicatorKafkaClusterArrayOutputWithContext(context.Context) ReplicatorKafkaClusterArrayOutput
}

type ReplicatorKafkaClusterArray []ReplicatorKafkaClusterInput

func (ReplicatorKafkaClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatorKafkaCluster)(nil)).Elem()
}

func (i ReplicatorKafkaClusterArray) ToReplicatorKafkaClusterArrayOutput() ReplicatorKafkaClusterArrayOutput {
	return i.ToReplicatorKafkaClusterArrayOutputWithContext(context.Background())
}

func (i ReplicatorKafkaClusterArray) ToReplicatorKafkaClusterArrayOutputWithContext(ctx context.Context) ReplicatorKafkaClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorKafkaClusterArrayOutput)
}

func (i ReplicatorKafkaClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]ReplicatorKafkaCluster] {
	return pulumix.Output[[]ReplicatorKafkaCluster]{
		OutputState: i.ToReplicatorKafkaClusterArrayOutputWithContext(ctx).OutputState,
	}
}

// Details of a Kafka cluster for replication.
type ReplicatorKafkaClusterOutput struct{ *pulumi.OutputState }

func (ReplicatorKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorKafkaCluster)(nil)).Elem()
}

func (o ReplicatorKafkaClusterOutput) ToReplicatorKafkaClusterOutput() ReplicatorKafkaClusterOutput {
	return o
}

func (o ReplicatorKafkaClusterOutput) ToReplicatorKafkaClusterOutputWithContext(ctx context.Context) ReplicatorKafkaClusterOutput {
	return o
}

func (o ReplicatorKafkaClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorKafkaCluster] {
	return pulumix.Output[ReplicatorKafkaCluster]{
		OutputState: o.OutputState,
	}
}

// Details of an Amazon MSK cluster. Exactly one of AmazonMskCluster is required.
func (o ReplicatorKafkaClusterOutput) AmazonMskCluster() ReplicatorAmazonMskClusterOutput {
	return o.ApplyT(func(v ReplicatorKafkaCluster) ReplicatorAmazonMskCluster { return v.AmazonMskCluster }).(ReplicatorAmazonMskClusterOutput)
}

// Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
func (o ReplicatorKafkaClusterOutput) VpcConfig() ReplicatorKafkaClusterClientVpcConfigOutput {
	return o.ApplyT(func(v ReplicatorKafkaCluster) ReplicatorKafkaClusterClientVpcConfig { return v.VpcConfig }).(ReplicatorKafkaClusterClientVpcConfigOutput)
}

type ReplicatorKafkaClusterArrayOutput struct{ *pulumi.OutputState }

func (ReplicatorKafkaClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatorKafkaCluster)(nil)).Elem()
}

func (o ReplicatorKafkaClusterArrayOutput) ToReplicatorKafkaClusterArrayOutput() ReplicatorKafkaClusterArrayOutput {
	return o
}

func (o ReplicatorKafkaClusterArrayOutput) ToReplicatorKafkaClusterArrayOutputWithContext(ctx context.Context) ReplicatorKafkaClusterArrayOutput {
	return o
}

func (o ReplicatorKafkaClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ReplicatorKafkaCluster] {
	return pulumix.Output[[]ReplicatorKafkaCluster]{
		OutputState: o.OutputState,
	}
}

func (o ReplicatorKafkaClusterArrayOutput) Index(i pulumi.IntInput) ReplicatorKafkaClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicatorKafkaCluster {
		return vs[0].([]ReplicatorKafkaCluster)[vs[1].(int)]
	}).(ReplicatorKafkaClusterOutput)
}

// Details of an Amazon VPC which has network connectivity to the Kafka cluster.
type ReplicatorKafkaClusterClientVpcConfig struct {
	// The AWS security groups to associate with the elastic network interfaces in order to specify what the replicator has access to. If a security group is not specified, the default security group associated with the VPC is used.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
	SubnetIds []string `pulumi:"subnetIds"`
}

// ReplicatorKafkaClusterClientVpcConfigInput is an input type that accepts ReplicatorKafkaClusterClientVpcConfigArgs and ReplicatorKafkaClusterClientVpcConfigOutput values.
// You can construct a concrete instance of `ReplicatorKafkaClusterClientVpcConfigInput` via:
//
//	ReplicatorKafkaClusterClientVpcConfigArgs{...}
type ReplicatorKafkaClusterClientVpcConfigInput interface {
	pulumi.Input

	ToReplicatorKafkaClusterClientVpcConfigOutput() ReplicatorKafkaClusterClientVpcConfigOutput
	ToReplicatorKafkaClusterClientVpcConfigOutputWithContext(context.Context) ReplicatorKafkaClusterClientVpcConfigOutput
}

// Details of an Amazon VPC which has network connectivity to the Kafka cluster.
type ReplicatorKafkaClusterClientVpcConfigArgs struct {
	// The AWS security groups to associate with the elastic network interfaces in order to specify what the replicator has access to. If a security group is not specified, the default security group associated with the VPC is used.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
}

func (ReplicatorKafkaClusterClientVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorKafkaClusterClientVpcConfig)(nil)).Elem()
}

func (i ReplicatorKafkaClusterClientVpcConfigArgs) ToReplicatorKafkaClusterClientVpcConfigOutput() ReplicatorKafkaClusterClientVpcConfigOutput {
	return i.ToReplicatorKafkaClusterClientVpcConfigOutputWithContext(context.Background())
}

func (i ReplicatorKafkaClusterClientVpcConfigArgs) ToReplicatorKafkaClusterClientVpcConfigOutputWithContext(ctx context.Context) ReplicatorKafkaClusterClientVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorKafkaClusterClientVpcConfigOutput)
}

func (i ReplicatorKafkaClusterClientVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorKafkaClusterClientVpcConfig] {
	return pulumix.Output[ReplicatorKafkaClusterClientVpcConfig]{
		OutputState: i.ToReplicatorKafkaClusterClientVpcConfigOutputWithContext(ctx).OutputState,
	}
}

// Details of an Amazon VPC which has network connectivity to the Kafka cluster.
type ReplicatorKafkaClusterClientVpcConfigOutput struct{ *pulumi.OutputState }

func (ReplicatorKafkaClusterClientVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorKafkaClusterClientVpcConfig)(nil)).Elem()
}

func (o ReplicatorKafkaClusterClientVpcConfigOutput) ToReplicatorKafkaClusterClientVpcConfigOutput() ReplicatorKafkaClusterClientVpcConfigOutput {
	return o
}

func (o ReplicatorKafkaClusterClientVpcConfigOutput) ToReplicatorKafkaClusterClientVpcConfigOutputWithContext(ctx context.Context) ReplicatorKafkaClusterClientVpcConfigOutput {
	return o
}

func (o ReplicatorKafkaClusterClientVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorKafkaClusterClientVpcConfig] {
	return pulumix.Output[ReplicatorKafkaClusterClientVpcConfig]{
		OutputState: o.OutputState,
	}
}

// The AWS security groups to associate with the elastic network interfaces in order to specify what the replicator has access to. If a security group is not specified, the default security group associated with the VPC is used.
func (o ReplicatorKafkaClusterClientVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicatorKafkaClusterClientVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
func (o ReplicatorKafkaClusterClientVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicatorKafkaClusterClientVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Specifies configuration for replication between a source and target Kafka cluster.
type ReplicatorReplicationInfo struct {
	// Configuration relating to consumer group replication.
	ConsumerGroupReplication ReplicatorConsumerGroupReplication `pulumi:"consumerGroupReplication"`
	// Amazon Resource Name of the source Kafka cluster.
	SourceKafkaClusterArn string `pulumi:"sourceKafkaClusterArn"`
	// The type of compression to use writing records to target Kafka cluster.
	TargetCompressionType ReplicatorReplicationInfoTargetCompressionType `pulumi:"targetCompressionType"`
	// Amazon Resource Name of the target Kafka cluster.
	TargetKafkaClusterArn string `pulumi:"targetKafkaClusterArn"`
	// Configuration relating to topic replication.
	TopicReplication ReplicatorTopicReplication `pulumi:"topicReplication"`
}

// ReplicatorReplicationInfoInput is an input type that accepts ReplicatorReplicationInfoArgs and ReplicatorReplicationInfoOutput values.
// You can construct a concrete instance of `ReplicatorReplicationInfoInput` via:
//
//	ReplicatorReplicationInfoArgs{...}
type ReplicatorReplicationInfoInput interface {
	pulumi.Input

	ToReplicatorReplicationInfoOutput() ReplicatorReplicationInfoOutput
	ToReplicatorReplicationInfoOutputWithContext(context.Context) ReplicatorReplicationInfoOutput
}

// Specifies configuration for replication between a source and target Kafka cluster.
type ReplicatorReplicationInfoArgs struct {
	// Configuration relating to consumer group replication.
	ConsumerGroupReplication ReplicatorConsumerGroupReplicationInput `pulumi:"consumerGroupReplication"`
	// Amazon Resource Name of the source Kafka cluster.
	SourceKafkaClusterArn pulumi.StringInput `pulumi:"sourceKafkaClusterArn"`
	// The type of compression to use writing records to target Kafka cluster.
	TargetCompressionType ReplicatorReplicationInfoTargetCompressionTypeInput `pulumi:"targetCompressionType"`
	// Amazon Resource Name of the target Kafka cluster.
	TargetKafkaClusterArn pulumi.StringInput `pulumi:"targetKafkaClusterArn"`
	// Configuration relating to topic replication.
	TopicReplication ReplicatorTopicReplicationInput `pulumi:"topicReplication"`
}

func (ReplicatorReplicationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorReplicationInfo)(nil)).Elem()
}

func (i ReplicatorReplicationInfoArgs) ToReplicatorReplicationInfoOutput() ReplicatorReplicationInfoOutput {
	return i.ToReplicatorReplicationInfoOutputWithContext(context.Background())
}

func (i ReplicatorReplicationInfoArgs) ToReplicatorReplicationInfoOutputWithContext(ctx context.Context) ReplicatorReplicationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorReplicationInfoOutput)
}

func (i ReplicatorReplicationInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorReplicationInfo] {
	return pulumix.Output[ReplicatorReplicationInfo]{
		OutputState: i.ToReplicatorReplicationInfoOutputWithContext(ctx).OutputState,
	}
}

// ReplicatorReplicationInfoArrayInput is an input type that accepts ReplicatorReplicationInfoArray and ReplicatorReplicationInfoArrayOutput values.
// You can construct a concrete instance of `ReplicatorReplicationInfoArrayInput` via:
//
//	ReplicatorReplicationInfoArray{ ReplicatorReplicationInfoArgs{...} }
type ReplicatorReplicationInfoArrayInput interface {
	pulumi.Input

	ToReplicatorReplicationInfoArrayOutput() ReplicatorReplicationInfoArrayOutput
	ToReplicatorReplicationInfoArrayOutputWithContext(context.Context) ReplicatorReplicationInfoArrayOutput
}

type ReplicatorReplicationInfoArray []ReplicatorReplicationInfoInput

func (ReplicatorReplicationInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatorReplicationInfo)(nil)).Elem()
}

func (i ReplicatorReplicationInfoArray) ToReplicatorReplicationInfoArrayOutput() ReplicatorReplicationInfoArrayOutput {
	return i.ToReplicatorReplicationInfoArrayOutputWithContext(context.Background())
}

func (i ReplicatorReplicationInfoArray) ToReplicatorReplicationInfoArrayOutputWithContext(ctx context.Context) ReplicatorReplicationInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorReplicationInfoArrayOutput)
}

func (i ReplicatorReplicationInfoArray) ToOutput(ctx context.Context) pulumix.Output[[]ReplicatorReplicationInfo] {
	return pulumix.Output[[]ReplicatorReplicationInfo]{
		OutputState: i.ToReplicatorReplicationInfoArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies configuration for replication between a source and target Kafka cluster.
type ReplicatorReplicationInfoOutput struct{ *pulumi.OutputState }

func (ReplicatorReplicationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorReplicationInfo)(nil)).Elem()
}

func (o ReplicatorReplicationInfoOutput) ToReplicatorReplicationInfoOutput() ReplicatorReplicationInfoOutput {
	return o
}

func (o ReplicatorReplicationInfoOutput) ToReplicatorReplicationInfoOutputWithContext(ctx context.Context) ReplicatorReplicationInfoOutput {
	return o
}

func (o ReplicatorReplicationInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorReplicationInfo] {
	return pulumix.Output[ReplicatorReplicationInfo]{
		OutputState: o.OutputState,
	}
}

// Configuration relating to consumer group replication.
func (o ReplicatorReplicationInfoOutput) ConsumerGroupReplication() ReplicatorConsumerGroupReplicationOutput {
	return o.ApplyT(func(v ReplicatorReplicationInfo) ReplicatorConsumerGroupReplication {
		return v.ConsumerGroupReplication
	}).(ReplicatorConsumerGroupReplicationOutput)
}

// Amazon Resource Name of the source Kafka cluster.
func (o ReplicatorReplicationInfoOutput) SourceKafkaClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatorReplicationInfo) string { return v.SourceKafkaClusterArn }).(pulumi.StringOutput)
}

// The type of compression to use writing records to target Kafka cluster.
func (o ReplicatorReplicationInfoOutput) TargetCompressionType() ReplicatorReplicationInfoTargetCompressionTypeOutput {
	return o.ApplyT(func(v ReplicatorReplicationInfo) ReplicatorReplicationInfoTargetCompressionType {
		return v.TargetCompressionType
	}).(ReplicatorReplicationInfoTargetCompressionTypeOutput)
}

// Amazon Resource Name of the target Kafka cluster.
func (o ReplicatorReplicationInfoOutput) TargetKafkaClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatorReplicationInfo) string { return v.TargetKafkaClusterArn }).(pulumi.StringOutput)
}

// Configuration relating to topic replication.
func (o ReplicatorReplicationInfoOutput) TopicReplication() ReplicatorTopicReplicationOutput {
	return o.ApplyT(func(v ReplicatorReplicationInfo) ReplicatorTopicReplication { return v.TopicReplication }).(ReplicatorTopicReplicationOutput)
}

type ReplicatorReplicationInfoArrayOutput struct{ *pulumi.OutputState }

func (ReplicatorReplicationInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatorReplicationInfo)(nil)).Elem()
}

func (o ReplicatorReplicationInfoArrayOutput) ToReplicatorReplicationInfoArrayOutput() ReplicatorReplicationInfoArrayOutput {
	return o
}

func (o ReplicatorReplicationInfoArrayOutput) ToReplicatorReplicationInfoArrayOutputWithContext(ctx context.Context) ReplicatorReplicationInfoArrayOutput {
	return o
}

func (o ReplicatorReplicationInfoArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ReplicatorReplicationInfo] {
	return pulumix.Output[[]ReplicatorReplicationInfo]{
		OutputState: o.OutputState,
	}
}

func (o ReplicatorReplicationInfoArrayOutput) Index(i pulumi.IntInput) ReplicatorReplicationInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicatorReplicationInfo {
		return vs[0].([]ReplicatorReplicationInfo)[vs[1].(int)]
	}).(ReplicatorReplicationInfoOutput)
}

type ReplicatorTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ReplicatorTagInput is an input type that accepts ReplicatorTagArgs and ReplicatorTagOutput values.
// You can construct a concrete instance of `ReplicatorTagInput` via:
//
//	ReplicatorTagArgs{...}
type ReplicatorTagInput interface {
	pulumi.Input

	ToReplicatorTagOutput() ReplicatorTagOutput
	ToReplicatorTagOutputWithContext(context.Context) ReplicatorTagOutput
}

type ReplicatorTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ReplicatorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorTag)(nil)).Elem()
}

func (i ReplicatorTagArgs) ToReplicatorTagOutput() ReplicatorTagOutput {
	return i.ToReplicatorTagOutputWithContext(context.Background())
}

func (i ReplicatorTagArgs) ToReplicatorTagOutputWithContext(ctx context.Context) ReplicatorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorTagOutput)
}

func (i ReplicatorTagArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorTag] {
	return pulumix.Output[ReplicatorTag]{
		OutputState: i.ToReplicatorTagOutputWithContext(ctx).OutputState,
	}
}

// ReplicatorTagArrayInput is an input type that accepts ReplicatorTagArray and ReplicatorTagArrayOutput values.
// You can construct a concrete instance of `ReplicatorTagArrayInput` via:
//
//	ReplicatorTagArray{ ReplicatorTagArgs{...} }
type ReplicatorTagArrayInput interface {
	pulumi.Input

	ToReplicatorTagArrayOutput() ReplicatorTagArrayOutput
	ToReplicatorTagArrayOutputWithContext(context.Context) ReplicatorTagArrayOutput
}

type ReplicatorTagArray []ReplicatorTagInput

func (ReplicatorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatorTag)(nil)).Elem()
}

func (i ReplicatorTagArray) ToReplicatorTagArrayOutput() ReplicatorTagArrayOutput {
	return i.ToReplicatorTagArrayOutputWithContext(context.Background())
}

func (i ReplicatorTagArray) ToReplicatorTagArrayOutputWithContext(ctx context.Context) ReplicatorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorTagArrayOutput)
}

func (i ReplicatorTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ReplicatorTag] {
	return pulumix.Output[[]ReplicatorTag]{
		OutputState: i.ToReplicatorTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ReplicatorTagOutput struct{ *pulumi.OutputState }

func (ReplicatorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorTag)(nil)).Elem()
}

func (o ReplicatorTagOutput) ToReplicatorTagOutput() ReplicatorTagOutput {
	return o
}

func (o ReplicatorTagOutput) ToReplicatorTagOutputWithContext(ctx context.Context) ReplicatorTagOutput {
	return o
}

func (o ReplicatorTagOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorTag] {
	return pulumix.Output[ReplicatorTag]{
		OutputState: o.OutputState,
	}
}

func (o ReplicatorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatorTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ReplicatorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicatorTag) string { return v.Value }).(pulumi.StringOutput)
}

type ReplicatorTagArrayOutput struct{ *pulumi.OutputState }

func (ReplicatorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicatorTag)(nil)).Elem()
}

func (o ReplicatorTagArrayOutput) ToReplicatorTagArrayOutput() ReplicatorTagArrayOutput {
	return o
}

func (o ReplicatorTagArrayOutput) ToReplicatorTagArrayOutputWithContext(ctx context.Context) ReplicatorTagArrayOutput {
	return o
}

func (o ReplicatorTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ReplicatorTag] {
	return pulumix.Output[[]ReplicatorTag]{
		OutputState: o.OutputState,
	}
}

func (o ReplicatorTagArrayOutput) Index(i pulumi.IntInput) ReplicatorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicatorTag {
		return vs[0].([]ReplicatorTag)[vs[1].(int)]
	}).(ReplicatorTagOutput)
}

type ReplicatorTopicReplication struct {
	// Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
	CopyAccessControlListsForTopics *bool `pulumi:"copyAccessControlListsForTopics"`
	// Whether to periodically configure remote topics to match their corresponding upstream topics.
	CopyTopicConfigurations *bool `pulumi:"copyTopicConfigurations"`
	// Whether to periodically check for new topics and partitions.
	DetectAndCopyNewTopics *bool `pulumi:"detectAndCopyNewTopics"`
	// List of regular expression patterns indicating the topics that should not be replicated.
	TopicsToExclude []string `pulumi:"topicsToExclude"`
	// List of regular expression patterns indicating the topics to copy.
	TopicsToReplicate []string `pulumi:"topicsToReplicate"`
}

// ReplicatorTopicReplicationInput is an input type that accepts ReplicatorTopicReplicationArgs and ReplicatorTopicReplicationOutput values.
// You can construct a concrete instance of `ReplicatorTopicReplicationInput` via:
//
//	ReplicatorTopicReplicationArgs{...}
type ReplicatorTopicReplicationInput interface {
	pulumi.Input

	ToReplicatorTopicReplicationOutput() ReplicatorTopicReplicationOutput
	ToReplicatorTopicReplicationOutputWithContext(context.Context) ReplicatorTopicReplicationOutput
}

type ReplicatorTopicReplicationArgs struct {
	// Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
	CopyAccessControlListsForTopics pulumi.BoolPtrInput `pulumi:"copyAccessControlListsForTopics"`
	// Whether to periodically configure remote topics to match their corresponding upstream topics.
	CopyTopicConfigurations pulumi.BoolPtrInput `pulumi:"copyTopicConfigurations"`
	// Whether to periodically check for new topics and partitions.
	DetectAndCopyNewTopics pulumi.BoolPtrInput `pulumi:"detectAndCopyNewTopics"`
	// List of regular expression patterns indicating the topics that should not be replicated.
	TopicsToExclude pulumi.StringArrayInput `pulumi:"topicsToExclude"`
	// List of regular expression patterns indicating the topics to copy.
	TopicsToReplicate pulumi.StringArrayInput `pulumi:"topicsToReplicate"`
}

func (ReplicatorTopicReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorTopicReplication)(nil)).Elem()
}

func (i ReplicatorTopicReplicationArgs) ToReplicatorTopicReplicationOutput() ReplicatorTopicReplicationOutput {
	return i.ToReplicatorTopicReplicationOutputWithContext(context.Background())
}

func (i ReplicatorTopicReplicationArgs) ToReplicatorTopicReplicationOutputWithContext(ctx context.Context) ReplicatorTopicReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorTopicReplicationOutput)
}

func (i ReplicatorTopicReplicationArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicatorTopicReplication] {
	return pulumix.Output[ReplicatorTopicReplication]{
		OutputState: i.ToReplicatorTopicReplicationOutputWithContext(ctx).OutputState,
	}
}

type ReplicatorTopicReplicationOutput struct{ *pulumi.OutputState }

func (ReplicatorTopicReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicatorTopicReplication)(nil)).Elem()
}

func (o ReplicatorTopicReplicationOutput) ToReplicatorTopicReplicationOutput() ReplicatorTopicReplicationOutput {
	return o
}

func (o ReplicatorTopicReplicationOutput) ToReplicatorTopicReplicationOutputWithContext(ctx context.Context) ReplicatorTopicReplicationOutput {
	return o
}

func (o ReplicatorTopicReplicationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicatorTopicReplication] {
	return pulumix.Output[ReplicatorTopicReplication]{
		OutputState: o.OutputState,
	}
}

// Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
func (o ReplicatorTopicReplicationOutput) CopyAccessControlListsForTopics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicatorTopicReplication) *bool { return v.CopyAccessControlListsForTopics }).(pulumi.BoolPtrOutput)
}

// Whether to periodically configure remote topics to match their corresponding upstream topics.
func (o ReplicatorTopicReplicationOutput) CopyTopicConfigurations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicatorTopicReplication) *bool { return v.CopyTopicConfigurations }).(pulumi.BoolPtrOutput)
}

// Whether to periodically check for new topics and partitions.
func (o ReplicatorTopicReplicationOutput) DetectAndCopyNewTopics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicatorTopicReplication) *bool { return v.DetectAndCopyNewTopics }).(pulumi.BoolPtrOutput)
}

// List of regular expression patterns indicating the topics that should not be replicated.
func (o ReplicatorTopicReplicationOutput) TopicsToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicatorTopicReplication) []string { return v.TopicsToExclude }).(pulumi.StringArrayOutput)
}

// List of regular expression patterns indicating the topics to copy.
func (o ReplicatorTopicReplicationOutput) TopicsToReplicate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicatorTopicReplication) []string { return v.TopicsToReplicate }).(pulumi.StringArrayOutput)
}

type ServerlessClusterClientAuthentication struct {
	Sasl ServerlessClusterSasl `pulumi:"sasl"`
}

// ServerlessClusterClientAuthenticationInput is an input type that accepts ServerlessClusterClientAuthenticationArgs and ServerlessClusterClientAuthenticationOutput values.
// You can construct a concrete instance of `ServerlessClusterClientAuthenticationInput` via:
//
//	ServerlessClusterClientAuthenticationArgs{...}
type ServerlessClusterClientAuthenticationInput interface {
	pulumi.Input

	ToServerlessClusterClientAuthenticationOutput() ServerlessClusterClientAuthenticationOutput
	ToServerlessClusterClientAuthenticationOutputWithContext(context.Context) ServerlessClusterClientAuthenticationOutput
}

type ServerlessClusterClientAuthenticationArgs struct {
	Sasl ServerlessClusterSaslInput `pulumi:"sasl"`
}

func (ServerlessClusterClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthentication)(nil)).Elem()
}

func (i ServerlessClusterClientAuthenticationArgs) ToServerlessClusterClientAuthenticationOutput() ServerlessClusterClientAuthenticationOutput {
	return i.ToServerlessClusterClientAuthenticationOutputWithContext(context.Background())
}

func (i ServerlessClusterClientAuthenticationArgs) ToServerlessClusterClientAuthenticationOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterClientAuthenticationOutput)
}

func (i ServerlessClusterClientAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterClientAuthentication] {
	return pulumix.Output[ServerlessClusterClientAuthentication]{
		OutputState: i.ToServerlessClusterClientAuthenticationOutputWithContext(ctx).OutputState,
	}
}

type ServerlessClusterClientAuthenticationOutput struct{ *pulumi.OutputState }

func (ServerlessClusterClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterClientAuthentication)(nil)).Elem()
}

func (o ServerlessClusterClientAuthenticationOutput) ToServerlessClusterClientAuthenticationOutput() ServerlessClusterClientAuthenticationOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationOutput) ToServerlessClusterClientAuthenticationOutputWithContext(ctx context.Context) ServerlessClusterClientAuthenticationOutput {
	return o
}

func (o ServerlessClusterClientAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterClientAuthentication] {
	return pulumix.Output[ServerlessClusterClientAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterClientAuthenticationOutput) Sasl() ServerlessClusterSaslOutput {
	return o.ApplyT(func(v ServerlessClusterClientAuthentication) ServerlessClusterSasl { return v.Sasl }).(ServerlessClusterSaslOutput)
}

type ServerlessClusterIam struct {
	Enabled bool `pulumi:"enabled"`
}

// ServerlessClusterIamInput is an input type that accepts ServerlessClusterIamArgs and ServerlessClusterIamOutput values.
// You can construct a concrete instance of `ServerlessClusterIamInput` via:
//
//	ServerlessClusterIamArgs{...}
type ServerlessClusterIamInput interface {
	pulumi.Input

	ToServerlessClusterIamOutput() ServerlessClusterIamOutput
	ToServerlessClusterIamOutputWithContext(context.Context) ServerlessClusterIamOutput
}

type ServerlessClusterIamArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ServerlessClusterIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterIam)(nil)).Elem()
}

func (i ServerlessClusterIamArgs) ToServerlessClusterIamOutput() ServerlessClusterIamOutput {
	return i.ToServerlessClusterIamOutputWithContext(context.Background())
}

func (i ServerlessClusterIamArgs) ToServerlessClusterIamOutputWithContext(ctx context.Context) ServerlessClusterIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterIamOutput)
}

func (i ServerlessClusterIamArgs) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterIam] {
	return pulumix.Output[ServerlessClusterIam]{
		OutputState: i.ToServerlessClusterIamOutputWithContext(ctx).OutputState,
	}
}

type ServerlessClusterIamOutput struct{ *pulumi.OutputState }

func (ServerlessClusterIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterIam)(nil)).Elem()
}

func (o ServerlessClusterIamOutput) ToServerlessClusterIamOutput() ServerlessClusterIamOutput {
	return o
}

func (o ServerlessClusterIamOutput) ToServerlessClusterIamOutputWithContext(ctx context.Context) ServerlessClusterIamOutput {
	return o
}

func (o ServerlessClusterIamOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterIam] {
	return pulumix.Output[ServerlessClusterIam]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterIamOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ServerlessClusterIam) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ServerlessClusterSasl struct {
	Iam ServerlessClusterIam `pulumi:"iam"`
}

// ServerlessClusterSaslInput is an input type that accepts ServerlessClusterSaslArgs and ServerlessClusterSaslOutput values.
// You can construct a concrete instance of `ServerlessClusterSaslInput` via:
//
//	ServerlessClusterSaslArgs{...}
type ServerlessClusterSaslInput interface {
	pulumi.Input

	ToServerlessClusterSaslOutput() ServerlessClusterSaslOutput
	ToServerlessClusterSaslOutputWithContext(context.Context) ServerlessClusterSaslOutput
}

type ServerlessClusterSaslArgs struct {
	Iam ServerlessClusterIamInput `pulumi:"iam"`
}

func (ServerlessClusterSaslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterSasl)(nil)).Elem()
}

func (i ServerlessClusterSaslArgs) ToServerlessClusterSaslOutput() ServerlessClusterSaslOutput {
	return i.ToServerlessClusterSaslOutputWithContext(context.Background())
}

func (i ServerlessClusterSaslArgs) ToServerlessClusterSaslOutputWithContext(ctx context.Context) ServerlessClusterSaslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterSaslOutput)
}

func (i ServerlessClusterSaslArgs) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterSasl] {
	return pulumix.Output[ServerlessClusterSasl]{
		OutputState: i.ToServerlessClusterSaslOutputWithContext(ctx).OutputState,
	}
}

type ServerlessClusterSaslOutput struct{ *pulumi.OutputState }

func (ServerlessClusterSaslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterSasl)(nil)).Elem()
}

func (o ServerlessClusterSaslOutput) ToServerlessClusterSaslOutput() ServerlessClusterSaslOutput {
	return o
}

func (o ServerlessClusterSaslOutput) ToServerlessClusterSaslOutputWithContext(ctx context.Context) ServerlessClusterSaslOutput {
	return o
}

func (o ServerlessClusterSaslOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterSasl] {
	return pulumix.Output[ServerlessClusterSasl]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterSaslOutput) Iam() ServerlessClusterIamOutput {
	return o.ApplyT(func(v ServerlessClusterSasl) ServerlessClusterIam { return v.Iam }).(ServerlessClusterIamOutput)
}

type ServerlessClusterVpcConfig struct {
	SecurityGroups []string `pulumi:"securityGroups"`
	SubnetIds      []string `pulumi:"subnetIds"`
}

// ServerlessClusterVpcConfigInput is an input type that accepts ServerlessClusterVpcConfigArgs and ServerlessClusterVpcConfigOutput values.
// You can construct a concrete instance of `ServerlessClusterVpcConfigInput` via:
//
//	ServerlessClusterVpcConfigArgs{...}
type ServerlessClusterVpcConfigInput interface {
	pulumi.Input

	ToServerlessClusterVpcConfigOutput() ServerlessClusterVpcConfigOutput
	ToServerlessClusterVpcConfigOutputWithContext(context.Context) ServerlessClusterVpcConfigOutput
}

type ServerlessClusterVpcConfigArgs struct {
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	SubnetIds      pulumi.StringArrayInput `pulumi:"subnetIds"`
}

func (ServerlessClusterVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterVpcConfig)(nil)).Elem()
}

func (i ServerlessClusterVpcConfigArgs) ToServerlessClusterVpcConfigOutput() ServerlessClusterVpcConfigOutput {
	return i.ToServerlessClusterVpcConfigOutputWithContext(context.Background())
}

func (i ServerlessClusterVpcConfigArgs) ToServerlessClusterVpcConfigOutputWithContext(ctx context.Context) ServerlessClusterVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterVpcConfigOutput)
}

func (i ServerlessClusterVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterVpcConfig] {
	return pulumix.Output[ServerlessClusterVpcConfig]{
		OutputState: i.ToServerlessClusterVpcConfigOutputWithContext(ctx).OutputState,
	}
}

// ServerlessClusterVpcConfigArrayInput is an input type that accepts ServerlessClusterVpcConfigArray and ServerlessClusterVpcConfigArrayOutput values.
// You can construct a concrete instance of `ServerlessClusterVpcConfigArrayInput` via:
//
//	ServerlessClusterVpcConfigArray{ ServerlessClusterVpcConfigArgs{...} }
type ServerlessClusterVpcConfigArrayInput interface {
	pulumi.Input

	ToServerlessClusterVpcConfigArrayOutput() ServerlessClusterVpcConfigArrayOutput
	ToServerlessClusterVpcConfigArrayOutputWithContext(context.Context) ServerlessClusterVpcConfigArrayOutput
}

type ServerlessClusterVpcConfigArray []ServerlessClusterVpcConfigInput

func (ServerlessClusterVpcConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerlessClusterVpcConfig)(nil)).Elem()
}

func (i ServerlessClusterVpcConfigArray) ToServerlessClusterVpcConfigArrayOutput() ServerlessClusterVpcConfigArrayOutput {
	return i.ToServerlessClusterVpcConfigArrayOutputWithContext(context.Background())
}

func (i ServerlessClusterVpcConfigArray) ToServerlessClusterVpcConfigArrayOutputWithContext(ctx context.Context) ServerlessClusterVpcConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterVpcConfigArrayOutput)
}

func (i ServerlessClusterVpcConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ServerlessClusterVpcConfig] {
	return pulumix.Output[[]ServerlessClusterVpcConfig]{
		OutputState: i.ToServerlessClusterVpcConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type ServerlessClusterVpcConfigOutput struct{ *pulumi.OutputState }

func (ServerlessClusterVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessClusterVpcConfig)(nil)).Elem()
}

func (o ServerlessClusterVpcConfigOutput) ToServerlessClusterVpcConfigOutput() ServerlessClusterVpcConfigOutput {
	return o
}

func (o ServerlessClusterVpcConfigOutput) ToServerlessClusterVpcConfigOutputWithContext(ctx context.Context) ServerlessClusterVpcConfigOutput {
	return o
}

func (o ServerlessClusterVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServerlessClusterVpcConfig] {
	return pulumix.Output[ServerlessClusterVpcConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterVpcConfigOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerlessClusterVpcConfig) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o ServerlessClusterVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerlessClusterVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

type ServerlessClusterVpcConfigArrayOutput struct{ *pulumi.OutputState }

func (ServerlessClusterVpcConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerlessClusterVpcConfig)(nil)).Elem()
}

func (o ServerlessClusterVpcConfigArrayOutput) ToServerlessClusterVpcConfigArrayOutput() ServerlessClusterVpcConfigArrayOutput {
	return o
}

func (o ServerlessClusterVpcConfigArrayOutput) ToServerlessClusterVpcConfigArrayOutputWithContext(ctx context.Context) ServerlessClusterVpcConfigArrayOutput {
	return o
}

func (o ServerlessClusterVpcConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServerlessClusterVpcConfig] {
	return pulumix.Output[[]ServerlessClusterVpcConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServerlessClusterVpcConfigArrayOutput) Index(i pulumi.IntInput) ServerlessClusterVpcConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerlessClusterVpcConfig {
		return vs[0].([]ServerlessClusterVpcConfig)[vs[1].(int)]
	}).(ServerlessClusterVpcConfigOutput)
}

// A key-value pair to associate with a resource.
type VpcConnectionTags struct {
}

// VpcConnectionTagsInput is an input type that accepts VpcConnectionTagsArgs and VpcConnectionTagsOutput values.
// You can construct a concrete instance of `VpcConnectionTagsInput` via:
//
//	VpcConnectionTagsArgs{...}
type VpcConnectionTagsInput interface {
	pulumi.Input

	ToVpcConnectionTagsOutput() VpcConnectionTagsOutput
	ToVpcConnectionTagsOutputWithContext(context.Context) VpcConnectionTagsOutput
}

// A key-value pair to associate with a resource.
type VpcConnectionTagsArgs struct {
}

func (VpcConnectionTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTags)(nil)).Elem()
}

func (i VpcConnectionTagsArgs) ToVpcConnectionTagsOutput() VpcConnectionTagsOutput {
	return i.ToVpcConnectionTagsOutputWithContext(context.Background())
}

func (i VpcConnectionTagsArgs) ToVpcConnectionTagsOutputWithContext(ctx context.Context) VpcConnectionTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagsOutput)
}

func (i VpcConnectionTagsArgs) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTags] {
	return pulumix.Output[VpcConnectionTags]{
		OutputState: i.ToVpcConnectionTagsOutputWithContext(ctx).OutputState,
	}
}

func (i VpcConnectionTagsArgs) ToVpcConnectionTagsPtrOutput() VpcConnectionTagsPtrOutput {
	return i.ToVpcConnectionTagsPtrOutputWithContext(context.Background())
}

func (i VpcConnectionTagsArgs) ToVpcConnectionTagsPtrOutputWithContext(ctx context.Context) VpcConnectionTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagsOutput).ToVpcConnectionTagsPtrOutputWithContext(ctx)
}

// VpcConnectionTagsPtrInput is an input type that accepts VpcConnectionTagsArgs, VpcConnectionTagsPtr and VpcConnectionTagsPtrOutput values.
// You can construct a concrete instance of `VpcConnectionTagsPtrInput` via:
//
//	        VpcConnectionTagsArgs{...}
//
//	or:
//
//	        nil
type VpcConnectionTagsPtrInput interface {
	pulumi.Input

	ToVpcConnectionTagsPtrOutput() VpcConnectionTagsPtrOutput
	ToVpcConnectionTagsPtrOutputWithContext(context.Context) VpcConnectionTagsPtrOutput
}

type vpcConnectionTagsPtrType VpcConnectionTagsArgs

func VpcConnectionTagsPtr(v *VpcConnectionTagsArgs) VpcConnectionTagsPtrInput {
	return (*vpcConnectionTagsPtrType)(v)
}

func (*vpcConnectionTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionTags)(nil)).Elem()
}

func (i *vpcConnectionTagsPtrType) ToVpcConnectionTagsPtrOutput() VpcConnectionTagsPtrOutput {
	return i.ToVpcConnectionTagsPtrOutputWithContext(context.Background())
}

func (i *vpcConnectionTagsPtrType) ToVpcConnectionTagsPtrOutputWithContext(ctx context.Context) VpcConnectionTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagsPtrOutput)
}

func (i *vpcConnectionTagsPtrType) ToOutput(ctx context.Context) pulumix.Output[*VpcConnectionTags] {
	return pulumix.Output[*VpcConnectionTags]{
		OutputState: i.ToVpcConnectionTagsPtrOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type VpcConnectionTagsOutput struct{ *pulumi.OutputState }

func (VpcConnectionTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTags)(nil)).Elem()
}

func (o VpcConnectionTagsOutput) ToVpcConnectionTagsOutput() VpcConnectionTagsOutput {
	return o
}

func (o VpcConnectionTagsOutput) ToVpcConnectionTagsOutputWithContext(ctx context.Context) VpcConnectionTagsOutput {
	return o
}

func (o VpcConnectionTagsOutput) ToVpcConnectionTagsPtrOutput() VpcConnectionTagsPtrOutput {
	return o.ToVpcConnectionTagsPtrOutputWithContext(context.Background())
}

func (o VpcConnectionTagsOutput) ToVpcConnectionTagsPtrOutputWithContext(ctx context.Context) VpcConnectionTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcConnectionTags) *VpcConnectionTags {
		return &v
	}).(VpcConnectionTagsPtrOutput)
}

func (o VpcConnectionTagsOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTags] {
	return pulumix.Output[VpcConnectionTags]{
		OutputState: o.OutputState,
	}
}

type VpcConnectionTagsPtrOutput struct{ *pulumi.OutputState }

func (VpcConnectionTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcConnectionTags)(nil)).Elem()
}

func (o VpcConnectionTagsPtrOutput) ToVpcConnectionTagsPtrOutput() VpcConnectionTagsPtrOutput {
	return o
}

func (o VpcConnectionTagsPtrOutput) ToVpcConnectionTagsPtrOutputWithContext(ctx context.Context) VpcConnectionTagsPtrOutput {
	return o
}

func (o VpcConnectionTagsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcConnectionTags] {
	return pulumix.Output[*VpcConnectionTags]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionTagsPtrOutput) Elem() VpcConnectionTagsOutput {
	return o.ApplyT(func(v *VpcConnectionTags) VpcConnectionTags {
		if v != nil {
			return *v
		}
		var ret VpcConnectionTags
		return ret
	}).(VpcConnectionTagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBrokerLogsInput)(nil)).Elem(), ClusterBrokerLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBrokerLogsPtrInput)(nil)).Elem(), ClusterBrokerLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBrokerNodeGroupInfoInput)(nil)).Elem(), ClusterBrokerNodeGroupInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClientAuthenticationInput)(nil)).Elem(), ClusterClientAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClientAuthenticationPtrInput)(nil)).Elem(), ClusterClientAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCloudWatchLogsInput)(nil)).Elem(), ClusterCloudWatchLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCloudWatchLogsPtrInput)(nil)).Elem(), ClusterCloudWatchLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationInfoInput)(nil)).Elem(), ClusterConfigurationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationInfoPtrInput)(nil)).Elem(), ClusterConfigurationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConnectivityInfoInput)(nil)).Elem(), ClusterConnectivityInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConnectivityInfoPtrInput)(nil)).Elem(), ClusterConnectivityInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEbsStorageInfoInput)(nil)).Elem(), ClusterEbsStorageInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEbsStorageInfoPtrInput)(nil)).Elem(), ClusterEbsStorageInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionAtRestInput)(nil)).Elem(), ClusterEncryptionAtRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionAtRestPtrInput)(nil)).Elem(), ClusterEncryptionAtRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionInTransitInput)(nil)).Elem(), ClusterEncryptionInTransitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionInTransitPtrInput)(nil)).Elem(), ClusterEncryptionInTransitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionInfoInput)(nil)).Elem(), ClusterEncryptionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionInfoPtrInput)(nil)).Elem(), ClusterEncryptionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterFirehoseInput)(nil)).Elem(), ClusterFirehoseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterFirehosePtrInput)(nil)).Elem(), ClusterFirehoseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamInput)(nil)).Elem(), ClusterIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterIamPtrInput)(nil)).Elem(), ClusterIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterJmxExporterInput)(nil)).Elem(), ClusterJmxExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterJmxExporterPtrInput)(nil)).Elem(), ClusterJmxExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLoggingInfoInput)(nil)).Elem(), ClusterLoggingInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLoggingInfoPtrInput)(nil)).Elem(), ClusterLoggingInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeExporterInput)(nil)).Elem(), ClusterNodeExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeExporterPtrInput)(nil)).Elem(), ClusterNodeExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterOpenMonitoringInput)(nil)).Elem(), ClusterOpenMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterOpenMonitoringPtrInput)(nil)).Elem(), ClusterOpenMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPrometheusInput)(nil)).Elem(), ClusterPrometheusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPrometheusPtrInput)(nil)).Elem(), ClusterPrometheusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterProvisionedThroughputInput)(nil)).Elem(), ClusterProvisionedThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterProvisionedThroughputPtrInput)(nil)).Elem(), ClusterProvisionedThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicAccessInput)(nil)).Elem(), ClusterPublicAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicAccessPtrInput)(nil)).Elem(), ClusterPublicAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterS3Input)(nil)).Elem(), ClusterS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterS3PtrInput)(nil)).Elem(), ClusterS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSaslInput)(nil)).Elem(), ClusterSaslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSaslPtrInput)(nil)).Elem(), ClusterSaslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterScramInput)(nil)).Elem(), ClusterScramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterScramPtrInput)(nil)).Elem(), ClusterScramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStorageInfoInput)(nil)).Elem(), ClusterStorageInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStorageInfoPtrInput)(nil)).Elem(), ClusterStorageInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTlsInput)(nil)).Elem(), ClusterTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTlsPtrInput)(nil)).Elem(), ClusterTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUnauthenticatedInput)(nil)).Elem(), ClusterUnauthenticatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUnauthenticatedPtrInput)(nil)).Elem(), ClusterUnauthenticatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityInput)(nil)).Elem(), ClusterVpcConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityPtrInput)(nil)).Elem(), ClusterVpcConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityClientAuthenticationInput)(nil)).Elem(), ClusterVpcConnectivityClientAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityClientAuthenticationPtrInput)(nil)).Elem(), ClusterVpcConnectivityClientAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityIamInput)(nil)).Elem(), ClusterVpcConnectivityIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityIamPtrInput)(nil)).Elem(), ClusterVpcConnectivityIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivitySaslInput)(nil)).Elem(), ClusterVpcConnectivitySaslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivitySaslPtrInput)(nil)).Elem(), ClusterVpcConnectivitySaslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityScramInput)(nil)).Elem(), ClusterVpcConnectivityScramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityScramPtrInput)(nil)).Elem(), ClusterVpcConnectivityScramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityTlsInput)(nil)).Elem(), ClusterVpcConnectivityTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcConnectivityTlsPtrInput)(nil)).Elem(), ClusterVpcConnectivityTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationLatestRevisionInput)(nil)).Elem(), ConfigurationLatestRevisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationLatestRevisionPtrInput)(nil)).Elem(), ConfigurationLatestRevisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorAmazonMskClusterInput)(nil)).Elem(), ReplicatorAmazonMskClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorConsumerGroupReplicationInput)(nil)).Elem(), ReplicatorConsumerGroupReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorKafkaClusterInput)(nil)).Elem(), ReplicatorKafkaClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorKafkaClusterArrayInput)(nil)).Elem(), ReplicatorKafkaClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorKafkaClusterClientVpcConfigInput)(nil)).Elem(), ReplicatorKafkaClusterClientVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorReplicationInfoInput)(nil)).Elem(), ReplicatorReplicationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorReplicationInfoArrayInput)(nil)).Elem(), ReplicatorReplicationInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorTagInput)(nil)).Elem(), ReplicatorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorTagArrayInput)(nil)).Elem(), ReplicatorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorTopicReplicationInput)(nil)).Elem(), ReplicatorTopicReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterClientAuthenticationInput)(nil)).Elem(), ServerlessClusterClientAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterIamInput)(nil)).Elem(), ServerlessClusterIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterSaslInput)(nil)).Elem(), ServerlessClusterSaslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterVpcConfigInput)(nil)).Elem(), ServerlessClusterVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterVpcConfigArrayInput)(nil)).Elem(), ServerlessClusterVpcConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTagsInput)(nil)).Elem(), VpcConnectionTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTagsPtrInput)(nil)).Elem(), VpcConnectionTagsArgs{})
	pulumi.RegisterOutputType(ClusterBrokerLogsOutput{})
	pulumi.RegisterOutputType(ClusterBrokerLogsPtrOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoOutput{})
	pulumi.RegisterOutputType(ClusterBrokerNodeGroupInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ClusterClientAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ClusterCloudWatchLogsOutput{})
	pulumi.RegisterOutputType(ClusterCloudWatchLogsPtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationInfoOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterConnectivityInfoOutput{})
	pulumi.RegisterOutputType(ClusterConnectivityInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterEbsStorageInfoOutput{})
	pulumi.RegisterOutputType(ClusterEbsStorageInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionAtRestPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInTransitOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInTransitPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterFirehoseOutput{})
	pulumi.RegisterOutputType(ClusterFirehosePtrOutput{})
	pulumi.RegisterOutputType(ClusterIamOutput{})
	pulumi.RegisterOutputType(ClusterIamPtrOutput{})
	pulumi.RegisterOutputType(ClusterJmxExporterOutput{})
	pulumi.RegisterOutputType(ClusterJmxExporterPtrOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoOutput{})
	pulumi.RegisterOutputType(ClusterLoggingInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeExporterOutput{})
	pulumi.RegisterOutputType(ClusterNodeExporterPtrOutput{})
	pulumi.RegisterOutputType(ClusterOpenMonitoringOutput{})
	pulumi.RegisterOutputType(ClusterOpenMonitoringPtrOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusPtrOutput{})
	pulumi.RegisterOutputType(ClusterProvisionedThroughputOutput{})
	pulumi.RegisterOutputType(ClusterProvisionedThroughputPtrOutput{})
	pulumi.RegisterOutputType(ClusterPublicAccessOutput{})
	pulumi.RegisterOutputType(ClusterPublicAccessPtrOutput{})
	pulumi.RegisterOutputType(ClusterS3Output{})
	pulumi.RegisterOutputType(ClusterS3PtrOutput{})
	pulumi.RegisterOutputType(ClusterSaslOutput{})
	pulumi.RegisterOutputType(ClusterSaslPtrOutput{})
	pulumi.RegisterOutputType(ClusterScramOutput{})
	pulumi.RegisterOutputType(ClusterScramPtrOutput{})
	pulumi.RegisterOutputType(ClusterStorageInfoOutput{})
	pulumi.RegisterOutputType(ClusterStorageInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterTlsOutput{})
	pulumi.RegisterOutputType(ClusterTlsPtrOutput{})
	pulumi.RegisterOutputType(ClusterUnauthenticatedOutput{})
	pulumi.RegisterOutputType(ClusterUnauthenticatedPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityClientAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityIamOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityIamPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivitySaslOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivitySaslPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityScramOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityScramPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityTlsOutput{})
	pulumi.RegisterOutputType(ClusterVpcConnectivityTlsPtrOutput{})
	pulumi.RegisterOutputType(ConfigurationLatestRevisionOutput{})
	pulumi.RegisterOutputType(ConfigurationLatestRevisionPtrOutput{})
	pulumi.RegisterOutputType(ReplicatorAmazonMskClusterOutput{})
	pulumi.RegisterOutputType(ReplicatorConsumerGroupReplicationOutput{})
	pulumi.RegisterOutputType(ReplicatorKafkaClusterOutput{})
	pulumi.RegisterOutputType(ReplicatorKafkaClusterArrayOutput{})
	pulumi.RegisterOutputType(ReplicatorKafkaClusterClientVpcConfigOutput{})
	pulumi.RegisterOutputType(ReplicatorReplicationInfoOutput{})
	pulumi.RegisterOutputType(ReplicatorReplicationInfoArrayOutput{})
	pulumi.RegisterOutputType(ReplicatorTagOutput{})
	pulumi.RegisterOutputType(ReplicatorTagArrayOutput{})
	pulumi.RegisterOutputType(ReplicatorTopicReplicationOutput{})
	pulumi.RegisterOutputType(ServerlessClusterClientAuthenticationOutput{})
	pulumi.RegisterOutputType(ServerlessClusterIamOutput{})
	pulumi.RegisterOutputType(ServerlessClusterSaslOutput{})
	pulumi.RegisterOutputType(ServerlessClusterVpcConfigOutput{})
	pulumi.RegisterOutputType(ServerlessClusterVpcConfigArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectionTagsOutput{})
	pulumi.RegisterOutputType(VpcConnectionTagsPtrOutput{})
}
