// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MSK::Cluster
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws-native:msk:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupClusterResult struct {
	Arn *string `pulumi:"arn"`
	// Information about the broker nodes in the cluster.
	BrokerNodeGroupInfo *ClusterBrokerNodeGroupInfo `pulumi:"brokerNodeGroupInfo"`
	// Includes all client authentication related information.
	ClientAuthentication *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	// Represents the configuration that you want MSK to use for the cluster.
	ConfigurationInfo *ClusterConfigurationInfo `pulumi:"configurationInfo"`
	// The current version of the MSK cluster
	CurrentVersion *string `pulumi:"currentVersion"`
	// Includes all encryption-related information.
	EncryptionInfo *ClusterEncryptionInfo `pulumi:"encryptionInfo"`
	// Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
	EnhancedMonitoring *ClusterEnhancedMonitoring `pulumi:"enhancedMonitoring"`
	// The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.
	KafkaVersion *string `pulumi:"kafkaVersion"`
	// Logging Info details.
	LoggingInfo *ClusterLoggingInfo `pulumi:"loggingInfo"`
	// The number of broker nodes in the cluster.
	NumberOfBrokerNodes *int `pulumi:"numberOfBrokerNodes"`
	// The settings for open monitoring.
	OpenMonitoring *ClusterOpenMonitoring `pulumi:"openMonitoring"`
	// This controls storage mode for supported storage tiers.
	StorageMode *ClusterStorageMode `pulumi:"storageMode"`
	// A key-value pair to associate with a resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Information about the broker nodes in the cluster.
func (o LookupClusterResultOutput) BrokerNodeGroupInfo() ClusterBrokerNodeGroupInfoPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterBrokerNodeGroupInfo { return v.BrokerNodeGroupInfo }).(ClusterBrokerNodeGroupInfoPtrOutput)
}

// Includes all client authentication related information.
func (o LookupClusterResultOutput) ClientAuthentication() ClusterClientAuthenticationPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterClientAuthentication { return v.ClientAuthentication }).(ClusterClientAuthenticationPtrOutput)
}

// Represents the configuration that you want MSK to use for the cluster.
func (o LookupClusterResultOutput) ConfigurationInfo() ClusterConfigurationInfoPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterConfigurationInfo { return v.ConfigurationInfo }).(ClusterConfigurationInfoPtrOutput)
}

// The current version of the MSK cluster
func (o LookupClusterResultOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

// Includes all encryption-related information.
func (o LookupClusterResultOutput) EncryptionInfo() ClusterEncryptionInfoPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterEncryptionInfo { return v.EncryptionInfo }).(ClusterEncryptionInfoPtrOutput)
}

// Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
func (o LookupClusterResultOutput) EnhancedMonitoring() ClusterEnhancedMonitoringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterEnhancedMonitoring { return v.EnhancedMonitoring }).(ClusterEnhancedMonitoringPtrOutput)
}

// The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.
func (o LookupClusterResultOutput) KafkaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.KafkaVersion }).(pulumi.StringPtrOutput)
}

// Logging Info details.
func (o LookupClusterResultOutput) LoggingInfo() ClusterLoggingInfoPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterLoggingInfo { return v.LoggingInfo }).(ClusterLoggingInfoPtrOutput)
}

// The number of broker nodes in the cluster.
func (o LookupClusterResultOutput) NumberOfBrokerNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *int { return v.NumberOfBrokerNodes }).(pulumi.IntPtrOutput)
}

// The settings for open monitoring.
func (o LookupClusterResultOutput) OpenMonitoring() ClusterOpenMonitoringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterOpenMonitoring { return v.OpenMonitoring }).(ClusterOpenMonitoringPtrOutput)
}

// This controls storage mode for supported storage tiers.
func (o LookupClusterResultOutput) StorageMode() ClusterStorageModePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterStorageMode { return v.StorageMode }).(ClusterStorageModePtrOutput)
}

// A key-value pair to associate with a resource.
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
