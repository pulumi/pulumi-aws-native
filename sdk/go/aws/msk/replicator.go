// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MSK::Replicator
type Replicator struct {
	pulumi.CustomResourceState

	// The current version of the MSK replicator.
	CurrentVersion pulumi.StringPtrOutput `pulumi:"currentVersion"`
	// A summary description of the replicator.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies a list of Kafka clusters which are targets of the replicator.
	KafkaClusters ReplicatorKafkaClusterArrayOutput `pulumi:"kafkaClusters"`
	// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
	ReplicationInfoList ReplicatorReplicationInfoArrayOutput `pulumi:"replicationInfoList"`
	// Amazon Resource Name for the created replicator.
	ReplicatorArn pulumi.StringOutput `pulumi:"replicatorArn"`
	// The name of the replicator.
	ReplicatorName pulumi.StringOutput `pulumi:"replicatorName"`
	// The Amazon Resource Name (ARN) of the IAM role used by the replicator to access external resources.
	ServiceExecutionRoleArn pulumi.StringOutput `pulumi:"serviceExecutionRoleArn"`
	// A collection of tags associated with a resource
	Tags ReplicatorTagArrayOutput `pulumi:"tags"`
}

// NewReplicator registers a new resource with the given unique name, arguments, and options.
func NewReplicator(ctx *pulumi.Context,
	name string, args *ReplicatorArgs, opts ...pulumi.ResourceOption) (*Replicator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KafkaClusters == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusters'")
	}
	if args.ReplicationInfoList == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationInfoList'")
	}
	if args.ServiceExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ServiceExecutionRoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"description",
		"kafkaClusters[*]",
		"replicatorName",
		"serviceExecutionRoleArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Replicator
	err := ctx.RegisterResource("aws-native:msk:Replicator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicator gets an existing Replicator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicatorState, opts ...pulumi.ResourceOption) (*Replicator, error) {
	var resource Replicator
	err := ctx.ReadResource("aws-native:msk:Replicator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Replicator resources.
type replicatorState struct {
}

type ReplicatorState struct {
}

func (ReplicatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicatorState)(nil)).Elem()
}

type replicatorArgs struct {
	// The current version of the MSK replicator.
	CurrentVersion *string `pulumi:"currentVersion"`
	// A summary description of the replicator.
	Description *string `pulumi:"description"`
	// Specifies a list of Kafka clusters which are targets of the replicator.
	KafkaClusters []ReplicatorKafkaCluster `pulumi:"kafkaClusters"`
	// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
	ReplicationInfoList []ReplicatorReplicationInfo `pulumi:"replicationInfoList"`
	// The name of the replicator.
	ReplicatorName *string `pulumi:"replicatorName"`
	// The Amazon Resource Name (ARN) of the IAM role used by the replicator to access external resources.
	ServiceExecutionRoleArn string `pulumi:"serviceExecutionRoleArn"`
	// A collection of tags associated with a resource
	Tags []ReplicatorTag `pulumi:"tags"`
}

// The set of arguments for constructing a Replicator resource.
type ReplicatorArgs struct {
	// The current version of the MSK replicator.
	CurrentVersion pulumi.StringPtrInput
	// A summary description of the replicator.
	Description pulumi.StringPtrInput
	// Specifies a list of Kafka clusters which are targets of the replicator.
	KafkaClusters ReplicatorKafkaClusterArrayInput
	// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
	ReplicationInfoList ReplicatorReplicationInfoArrayInput
	// The name of the replicator.
	ReplicatorName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the IAM role used by the replicator to access external resources.
	ServiceExecutionRoleArn pulumi.StringInput
	// A collection of tags associated with a resource
	Tags ReplicatorTagArrayInput
}

func (ReplicatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicatorArgs)(nil)).Elem()
}

type ReplicatorInput interface {
	pulumi.Input

	ToReplicatorOutput() ReplicatorOutput
	ToReplicatorOutputWithContext(ctx context.Context) ReplicatorOutput
}

func (*Replicator) ElementType() reflect.Type {
	return reflect.TypeOf((**Replicator)(nil)).Elem()
}

func (i *Replicator) ToReplicatorOutput() ReplicatorOutput {
	return i.ToReplicatorOutputWithContext(context.Background())
}

func (i *Replicator) ToReplicatorOutputWithContext(ctx context.Context) ReplicatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicatorOutput)
}

type ReplicatorOutput struct{ *pulumi.OutputState }

func (ReplicatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Replicator)(nil)).Elem()
}

func (o ReplicatorOutput) ToReplicatorOutput() ReplicatorOutput {
	return o
}

func (o ReplicatorOutput) ToReplicatorOutputWithContext(ctx context.Context) ReplicatorOutput {
	return o
}

// The current version of the MSK replicator.
func (o ReplicatorOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Replicator) pulumi.StringPtrOutput { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

// A summary description of the replicator.
func (o ReplicatorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Replicator) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies a list of Kafka clusters which are targets of the replicator.
func (o ReplicatorOutput) KafkaClusters() ReplicatorKafkaClusterArrayOutput {
	return o.ApplyT(func(v *Replicator) ReplicatorKafkaClusterArrayOutput { return v.KafkaClusters }).(ReplicatorKafkaClusterArrayOutput)
}

// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
func (o ReplicatorOutput) ReplicationInfoList() ReplicatorReplicationInfoArrayOutput {
	return o.ApplyT(func(v *Replicator) ReplicatorReplicationInfoArrayOutput { return v.ReplicationInfoList }).(ReplicatorReplicationInfoArrayOutput)
}

// Amazon Resource Name for the created replicator.
func (o ReplicatorOutput) ReplicatorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Replicator) pulumi.StringOutput { return v.ReplicatorArn }).(pulumi.StringOutput)
}

// The name of the replicator.
func (o ReplicatorOutput) ReplicatorName() pulumi.StringOutput {
	return o.ApplyT(func(v *Replicator) pulumi.StringOutput { return v.ReplicatorName }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the IAM role used by the replicator to access external resources.
func (o ReplicatorOutput) ServiceExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Replicator) pulumi.StringOutput { return v.ServiceExecutionRoleArn }).(pulumi.StringOutput)
}

// A collection of tags associated with a resource
func (o ReplicatorOutput) Tags() ReplicatorTagArrayOutput {
	return o.ApplyT(func(v *Replicator) ReplicatorTagArrayOutput { return v.Tags }).(ReplicatorTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicatorInput)(nil)).Elem(), &Replicator{})
	pulumi.RegisterOutputType(ReplicatorOutput{})
}
