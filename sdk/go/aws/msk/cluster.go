// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MSK::Cluster
//
// Deprecated: Cluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Cluster struct {
	pulumi.CustomResourceState

	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfoOutput     `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication ClusterClientAuthenticationPtrOutput `pulumi:"clientAuthentication"`
	ClusterName          pulumi.StringOutput                  `pulumi:"clusterName"`
	ConfigurationInfo    ClusterConfigurationInfoPtrOutput    `pulumi:"configurationInfo"`
	EncryptionInfo       ClusterEncryptionInfoPtrOutput       `pulumi:"encryptionInfo"`
	EnhancedMonitoring   pulumi.StringPtrOutput               `pulumi:"enhancedMonitoring"`
	KafkaVersion         pulumi.StringOutput                  `pulumi:"kafkaVersion"`
	LoggingInfo          ClusterLoggingInfoPtrOutput          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes  pulumi.IntOutput                     `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring       ClusterOpenMonitoringPtrOutput       `pulumi:"openMonitoring"`
	Tags                 pulumi.AnyOutput                     `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BrokerNodeGroupInfo == nil {
		return nil, errors.New("invalid value for required argument 'BrokerNodeGroupInfo'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.KafkaVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaVersion'")
	}
	if args.NumberOfBrokerNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfBrokerNodes'")
	}
	var resource Cluster
	err := ctx.RegisterResource("aws-native:msk:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:msk:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfo   `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	ClusterName          string                       `pulumi:"clusterName"`
	ConfigurationInfo    *ClusterConfigurationInfo    `pulumi:"configurationInfo"`
	EncryptionInfo       *ClusterEncryptionInfo       `pulumi:"encryptionInfo"`
	EnhancedMonitoring   *string                      `pulumi:"enhancedMonitoring"`
	KafkaVersion         string                       `pulumi:"kafkaVersion"`
	LoggingInfo          *ClusterLoggingInfo          `pulumi:"loggingInfo"`
	NumberOfBrokerNodes  int                          `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring       *ClusterOpenMonitoring       `pulumi:"openMonitoring"`
	Tags                 interface{}                  `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfoInput
	ClientAuthentication ClusterClientAuthenticationPtrInput
	ClusterName          pulumi.StringInput
	ConfigurationInfo    ClusterConfigurationInfoPtrInput
	EncryptionInfo       ClusterEncryptionInfoPtrInput
	EnhancedMonitoring   pulumi.StringPtrInput
	KafkaVersion         pulumi.StringInput
	LoggingInfo          ClusterLoggingInfoPtrInput
	NumberOfBrokerNodes  pulumi.IntInput
	OpenMonitoring       ClusterOpenMonitoringPtrInput
	Tags                 pulumi.Input
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
