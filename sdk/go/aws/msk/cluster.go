// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MSK::Cluster
type Cluster struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput                  `pulumi:"arn"`
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfoOutput     `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication ClusterClientAuthenticationPtrOutput `pulumi:"clientAuthentication"`
	ClusterName          pulumi.StringOutput                  `pulumi:"clusterName"`
	ConfigurationInfo    ClusterConfigurationInfoPtrOutput    `pulumi:"configurationInfo"`
	// The current version of the MSK cluster
	CurrentVersion      pulumi.StringPtrOutput             `pulumi:"currentVersion"`
	EncryptionInfo      ClusterEncryptionInfoPtrOutput     `pulumi:"encryptionInfo"`
	EnhancedMonitoring  ClusterEnhancedMonitoringPtrOutput `pulumi:"enhancedMonitoring"`
	KafkaVersion        pulumi.StringOutput                `pulumi:"kafkaVersion"`
	LoggingInfo         ClusterLoggingInfoPtrOutput        `pulumi:"loggingInfo"`
	NumberOfBrokerNodes pulumi.IntOutput                   `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring      ClusterOpenMonitoringPtrOutput     `pulumi:"openMonitoring"`
	// A key-value pair to associate with a resource.
	Tags pulumi.AnyOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BrokerNodeGroupInfo == nil {
		return nil, errors.New("invalid value for required argument 'BrokerNodeGroupInfo'")
	}
	if args.KafkaVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaVersion'")
	}
	if args.NumberOfBrokerNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfBrokerNodes'")
	}
	var resource Cluster
	err := ctx.RegisterResource("aws-native:msk:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:msk:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfo   `pulumi:"brokerNodeGroupInfo"`
	ClientAuthentication *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	ClusterName          *string                      `pulumi:"clusterName"`
	ConfigurationInfo    *ClusterConfigurationInfo    `pulumi:"configurationInfo"`
	// The current version of the MSK cluster
	CurrentVersion      *string                    `pulumi:"currentVersion"`
	EncryptionInfo      *ClusterEncryptionInfo     `pulumi:"encryptionInfo"`
	EnhancedMonitoring  *ClusterEnhancedMonitoring `pulumi:"enhancedMonitoring"`
	KafkaVersion        string                     `pulumi:"kafkaVersion"`
	LoggingInfo         *ClusterLoggingInfo        `pulumi:"loggingInfo"`
	NumberOfBrokerNodes int                        `pulumi:"numberOfBrokerNodes"`
	OpenMonitoring      *ClusterOpenMonitoring     `pulumi:"openMonitoring"`
	// A key-value pair to associate with a resource.
	Tags interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	BrokerNodeGroupInfo  ClusterBrokerNodeGroupInfoInput
	ClientAuthentication ClusterClientAuthenticationPtrInput
	ClusterName          pulumi.StringPtrInput
	ConfigurationInfo    ClusterConfigurationInfoPtrInput
	// The current version of the MSK cluster
	CurrentVersion      pulumi.StringPtrInput
	EncryptionInfo      ClusterEncryptionInfoPtrInput
	EnhancedMonitoring  ClusterEnhancedMonitoringPtrInput
	KafkaVersion        pulumi.StringInput
	LoggingInfo         ClusterLoggingInfoPtrInput
	NumberOfBrokerNodes pulumi.IntInput
	OpenMonitoring      ClusterOpenMonitoringPtrInput
	// A key-value pair to associate with a resource.
	Tags pulumi.Input
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ClusterOutput) BrokerNodeGroupInfo() ClusterBrokerNodeGroupInfoOutput {
	return o.ApplyT(func(v *Cluster) ClusterBrokerNodeGroupInfoOutput { return v.BrokerNodeGroupInfo }).(ClusterBrokerNodeGroupInfoOutput)
}

func (o ClusterOutput) ClientAuthentication() ClusterClientAuthenticationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClientAuthenticationPtrOutput { return v.ClientAuthentication }).(ClusterClientAuthenticationPtrOutput)
}

func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ClusterOutput) ConfigurationInfo() ClusterConfigurationInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterConfigurationInfoPtrOutput { return v.ConfigurationInfo }).(ClusterConfigurationInfoPtrOutput)
}

// The current version of the MSK cluster
func (o ClusterOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) EncryptionInfo() ClusterEncryptionInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEncryptionInfoPtrOutput { return v.EncryptionInfo }).(ClusterEncryptionInfoPtrOutput)
}

func (o ClusterOutput) EnhancedMonitoring() ClusterEnhancedMonitoringPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEnhancedMonitoringPtrOutput { return v.EnhancedMonitoring }).(ClusterEnhancedMonitoringPtrOutput)
}

func (o ClusterOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KafkaVersion }).(pulumi.StringOutput)
}

func (o ClusterOutput) LoggingInfo() ClusterLoggingInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterLoggingInfoPtrOutput { return v.LoggingInfo }).(ClusterLoggingInfoPtrOutput)
}

func (o ClusterOutput) NumberOfBrokerNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NumberOfBrokerNodes }).(pulumi.IntOutput)
}

func (o ClusterOutput) OpenMonitoring() ClusterOpenMonitoringPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterOpenMonitoringPtrOutput { return v.OpenMonitoring }).(ClusterOpenMonitoringPtrOutput)
}

// A key-value pair to associate with a resource.
func (o ClusterOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Cluster) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
