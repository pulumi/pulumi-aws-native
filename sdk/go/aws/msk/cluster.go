// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MSK::Cluster
type Cluster struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Describes the setup to be used for the broker nodes in the cluster.
	BrokerNodeGroupInfo ClusterBrokerNodeGroupInfoOutput `pulumi:"brokerNodeGroupInfo"`
	// Includes all client authentication information.
	ClientAuthentication ClusterClientAuthenticationPtrOutput `pulumi:"clientAuthentication"`
	// The name of the cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Specifies the configuration to use for the brokers.
	ConfigurationInfo ClusterConfigurationInfoPtrOutput `pulumi:"configurationInfo"`
	// The current version of the MSK cluster
	CurrentVersion pulumi.StringPtrOutput `pulumi:"currentVersion"`
	// Includes encryption-related information, such as the Amazon KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.
	EncryptionInfo ClusterEncryptionInfoPtrOutput `pulumi:"encryptionInfo"`
	// Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
	EnhancedMonitoring ClusterEnhancedMonitoringPtrOutput `pulumi:"enhancedMonitoring"`
	// The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.
	KafkaVersion pulumi.StringOutput `pulumi:"kafkaVersion"`
	// You can configure your MSK cluster to send broker logs to different destination types. This is a container for the configuration details related to broker logs.
	LoggingInfo ClusterLoggingInfoPtrOutput `pulumi:"loggingInfo"`
	// The number of broker nodes in the cluster.
	NumberOfBrokerNodes pulumi.IntOutput `pulumi:"numberOfBrokerNodes"`
	// JMX and Node monitoring for the MSK cluster.
	OpenMonitoring ClusterOpenMonitoringPtrOutput `pulumi:"openMonitoring"`
	// This controls storage mode for supported storage tiers.
	StorageMode ClusterStorageModePtrOutput `pulumi:"storageMode"`
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BrokerNodeGroupInfo == nil {
		return nil, errors.New("invalid value for required argument 'BrokerNodeGroupInfo'")
	}
	if args.KafkaVersion == nil {
		return nil, errors.New("invalid value for required argument 'KafkaVersion'")
	}
	if args.NumberOfBrokerNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfBrokerNodes'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws-native:msk:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:msk:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Describes the setup to be used for the broker nodes in the cluster.
	BrokerNodeGroupInfo ClusterBrokerNodeGroupInfo `pulumi:"brokerNodeGroupInfo"`
	// Includes all client authentication information.
	ClientAuthentication *ClusterClientAuthentication `pulumi:"clientAuthentication"`
	// The name of the cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Specifies the configuration to use for the brokers.
	ConfigurationInfo *ClusterConfigurationInfo `pulumi:"configurationInfo"`
	// The current version of the MSK cluster
	CurrentVersion *string `pulumi:"currentVersion"`
	// Includes encryption-related information, such as the Amazon KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.
	EncryptionInfo *ClusterEncryptionInfo `pulumi:"encryptionInfo"`
	// Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
	EnhancedMonitoring *ClusterEnhancedMonitoring `pulumi:"enhancedMonitoring"`
	// The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.
	KafkaVersion string `pulumi:"kafkaVersion"`
	// You can configure your MSK cluster to send broker logs to different destination types. This is a container for the configuration details related to broker logs.
	LoggingInfo *ClusterLoggingInfo `pulumi:"loggingInfo"`
	// The number of broker nodes in the cluster.
	NumberOfBrokerNodes int `pulumi:"numberOfBrokerNodes"`
	// JMX and Node monitoring for the MSK cluster.
	OpenMonitoring *ClusterOpenMonitoring `pulumi:"openMonitoring"`
	// This controls storage mode for supported storage tiers.
	StorageMode *ClusterStorageMode `pulumi:"storageMode"`
	// A key-value pair to associate with a resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Describes the setup to be used for the broker nodes in the cluster.
	BrokerNodeGroupInfo ClusterBrokerNodeGroupInfoInput
	// Includes all client authentication information.
	ClientAuthentication ClusterClientAuthenticationPtrInput
	// The name of the cluster.
	ClusterName pulumi.StringPtrInput
	// Specifies the configuration to use for the brokers.
	ConfigurationInfo ClusterConfigurationInfoPtrInput
	// The current version of the MSK cluster
	CurrentVersion pulumi.StringPtrInput
	// Includes encryption-related information, such as the Amazon KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.
	EncryptionInfo ClusterEncryptionInfoPtrInput
	// Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
	EnhancedMonitoring ClusterEnhancedMonitoringPtrInput
	// The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.
	KafkaVersion pulumi.StringInput
	// You can configure your MSK cluster to send broker logs to different destination types. This is a container for the configuration details related to broker logs.
	LoggingInfo ClusterLoggingInfoPtrInput
	// The number of broker nodes in the cluster.
	NumberOfBrokerNodes pulumi.IntInput
	// JMX and Node monitoring for the MSK cluster.
	OpenMonitoring ClusterOpenMonitoringPtrInput
	// This controls storage mode for supported storage tiers.
	StorageMode ClusterStorageModePtrInput
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Describes the setup to be used for the broker nodes in the cluster.
func (o ClusterOutput) BrokerNodeGroupInfo() ClusterBrokerNodeGroupInfoOutput {
	return o.ApplyT(func(v *Cluster) ClusterBrokerNodeGroupInfoOutput { return v.BrokerNodeGroupInfo }).(ClusterBrokerNodeGroupInfoOutput)
}

// Includes all client authentication information.
func (o ClusterOutput) ClientAuthentication() ClusterClientAuthenticationPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClientAuthenticationPtrOutput { return v.ClientAuthentication }).(ClusterClientAuthenticationPtrOutput)
}

// The name of the cluster.
func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Specifies the configuration to use for the brokers.
func (o ClusterOutput) ConfigurationInfo() ClusterConfigurationInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterConfigurationInfoPtrOutput { return v.ConfigurationInfo }).(ClusterConfigurationInfoPtrOutput)
}

// The current version of the MSK cluster
func (o ClusterOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

// Includes encryption-related information, such as the Amazon KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.
func (o ClusterOutput) EncryptionInfo() ClusterEncryptionInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEncryptionInfoPtrOutput { return v.EncryptionInfo }).(ClusterEncryptionInfoPtrOutput)
}

// Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
func (o ClusterOutput) EnhancedMonitoring() ClusterEnhancedMonitoringPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEnhancedMonitoringPtrOutput { return v.EnhancedMonitoring }).(ClusterEnhancedMonitoringPtrOutput)
}

// The version of Apache Kafka. You can use Amazon MSK to create clusters that use Apache Kafka versions 1.1.1 and 2.2.1.
func (o ClusterOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KafkaVersion }).(pulumi.StringOutput)
}

// You can configure your MSK cluster to send broker logs to different destination types. This is a container for the configuration details related to broker logs.
func (o ClusterOutput) LoggingInfo() ClusterLoggingInfoPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterLoggingInfoPtrOutput { return v.LoggingInfo }).(ClusterLoggingInfoPtrOutput)
}

// The number of broker nodes in the cluster.
func (o ClusterOutput) NumberOfBrokerNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NumberOfBrokerNodes }).(pulumi.IntOutput)
}

// JMX and Node monitoring for the MSK cluster.
func (o ClusterOutput) OpenMonitoring() ClusterOpenMonitoringPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterOpenMonitoringPtrOutput { return v.OpenMonitoring }).(ClusterOpenMonitoringPtrOutput)
}

// This controls storage mode for supported storage tiers.
func (o ClusterOutput) StorageMode() ClusterStorageModePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterStorageModePtrOutput { return v.StorageMode }).(ClusterStorageModePtrOutput)
}

// A key-value pair to associate with a resource.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
