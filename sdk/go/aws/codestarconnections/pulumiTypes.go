// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codestarconnections

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// A key-value pair to associate with a resource.
type ConnectionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ConnectionTagInput is an input type that accepts ConnectionTagArgs and ConnectionTagOutput values.
// You can construct a concrete instance of `ConnectionTagInput` via:
//
//	ConnectionTagArgs{...}
type ConnectionTagInput interface {
	pulumi.Input

	ToConnectionTagOutput() ConnectionTagOutput
	ToConnectionTagOutputWithContext(context.Context) ConnectionTagOutput
}

// A key-value pair to associate with a resource.
type ConnectionTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConnectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionTag)(nil)).Elem()
}

func (i ConnectionTagArgs) ToConnectionTagOutput() ConnectionTagOutput {
	return i.ToConnectionTagOutputWithContext(context.Background())
}

func (i ConnectionTagArgs) ToConnectionTagOutputWithContext(ctx context.Context) ConnectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionTagOutput)
}

func (i ConnectionTagArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectionTag] {
	return pulumix.Output[ConnectionTag]{
		OutputState: i.ToConnectionTagOutputWithContext(ctx).OutputState,
	}
}

// ConnectionTagArrayInput is an input type that accepts ConnectionTagArray and ConnectionTagArrayOutput values.
// You can construct a concrete instance of `ConnectionTagArrayInput` via:
//
//	ConnectionTagArray{ ConnectionTagArgs{...} }
type ConnectionTagArrayInput interface {
	pulumi.Input

	ToConnectionTagArrayOutput() ConnectionTagArrayOutput
	ToConnectionTagArrayOutputWithContext(context.Context) ConnectionTagArrayOutput
}

type ConnectionTagArray []ConnectionTagInput

func (ConnectionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionTag)(nil)).Elem()
}

func (i ConnectionTagArray) ToConnectionTagArrayOutput() ConnectionTagArrayOutput {
	return i.ToConnectionTagArrayOutputWithContext(context.Background())
}

func (i ConnectionTagArray) ToConnectionTagArrayOutputWithContext(ctx context.Context) ConnectionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionTagArrayOutput)
}

func (i ConnectionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ConnectionTag] {
	return pulumix.Output[[]ConnectionTag]{
		OutputState: i.ToConnectionTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type ConnectionTagOutput struct{ *pulumi.OutputState }

func (ConnectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionTag)(nil)).Elem()
}

func (o ConnectionTagOutput) ToConnectionTagOutput() ConnectionTagOutput {
	return o
}

func (o ConnectionTagOutput) ToConnectionTagOutputWithContext(ctx context.Context) ConnectionTagOutput {
	return o
}

func (o ConnectionTagOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionTag] {
	return pulumix.Output[ConnectionTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ConnectionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ConnectionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionTag) string { return v.Value }).(pulumi.StringOutput)
}

type ConnectionTagArrayOutput struct{ *pulumi.OutputState }

func (ConnectionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionTag)(nil)).Elem()
}

func (o ConnectionTagArrayOutput) ToConnectionTagArrayOutput() ConnectionTagArrayOutput {
	return o
}

func (o ConnectionTagArrayOutput) ToConnectionTagArrayOutputWithContext(ctx context.Context) ConnectionTagArrayOutput {
	return o
}

func (o ConnectionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectionTag] {
	return pulumix.Output[[]ConnectionTag]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionTagArrayOutput) Index(i pulumi.IntInput) ConnectionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionTag {
		return vs[0].([]ConnectionTag)[vs[1].(int)]
	}).(ConnectionTagOutput)
}

// A key-value pair to associate with a resource.
type RepositoryLinkTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// RepositoryLinkTagInput is an input type that accepts RepositoryLinkTagArgs and RepositoryLinkTagOutput values.
// You can construct a concrete instance of `RepositoryLinkTagInput` via:
//
//	RepositoryLinkTagArgs{...}
type RepositoryLinkTagInput interface {
	pulumi.Input

	ToRepositoryLinkTagOutput() RepositoryLinkTagOutput
	ToRepositoryLinkTagOutputWithContext(context.Context) RepositoryLinkTagOutput
}

// A key-value pair to associate with a resource.
type RepositoryLinkTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RepositoryLinkTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLinkTag)(nil)).Elem()
}

func (i RepositoryLinkTagArgs) ToRepositoryLinkTagOutput() RepositoryLinkTagOutput {
	return i.ToRepositoryLinkTagOutputWithContext(context.Background())
}

func (i RepositoryLinkTagArgs) ToRepositoryLinkTagOutputWithContext(ctx context.Context) RepositoryLinkTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkTagOutput)
}

func (i RepositoryLinkTagArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryLinkTag] {
	return pulumix.Output[RepositoryLinkTag]{
		OutputState: i.ToRepositoryLinkTagOutputWithContext(ctx).OutputState,
	}
}

// RepositoryLinkTagArrayInput is an input type that accepts RepositoryLinkTagArray and RepositoryLinkTagArrayOutput values.
// You can construct a concrete instance of `RepositoryLinkTagArrayInput` via:
//
//	RepositoryLinkTagArray{ RepositoryLinkTagArgs{...} }
type RepositoryLinkTagArrayInput interface {
	pulumi.Input

	ToRepositoryLinkTagArrayOutput() RepositoryLinkTagArrayOutput
	ToRepositoryLinkTagArrayOutputWithContext(context.Context) RepositoryLinkTagArrayOutput
}

type RepositoryLinkTagArray []RepositoryLinkTagInput

func (RepositoryLinkTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryLinkTag)(nil)).Elem()
}

func (i RepositoryLinkTagArray) ToRepositoryLinkTagArrayOutput() RepositoryLinkTagArrayOutput {
	return i.ToRepositoryLinkTagArrayOutputWithContext(context.Background())
}

func (i RepositoryLinkTagArray) ToRepositoryLinkTagArrayOutputWithContext(ctx context.Context) RepositoryLinkTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkTagArrayOutput)
}

func (i RepositoryLinkTagArray) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryLinkTag] {
	return pulumix.Output[[]RepositoryLinkTag]{
		OutputState: i.ToRepositoryLinkTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type RepositoryLinkTagOutput struct{ *pulumi.OutputState }

func (RepositoryLinkTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLinkTag)(nil)).Elem()
}

func (o RepositoryLinkTagOutput) ToRepositoryLinkTagOutput() RepositoryLinkTagOutput {
	return o
}

func (o RepositoryLinkTagOutput) ToRepositoryLinkTagOutputWithContext(ctx context.Context) RepositoryLinkTagOutput {
	return o
}

func (o RepositoryLinkTagOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryLinkTag] {
	return pulumix.Output[RepositoryLinkTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -.
func (o RepositoryLinkTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryLinkTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -.
func (o RepositoryLinkTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryLinkTag) string { return v.Value }).(pulumi.StringOutput)
}

type RepositoryLinkTagArrayOutput struct{ *pulumi.OutputState }

func (RepositoryLinkTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryLinkTag)(nil)).Elem()
}

func (o RepositoryLinkTagArrayOutput) ToRepositoryLinkTagArrayOutput() RepositoryLinkTagArrayOutput {
	return o
}

func (o RepositoryLinkTagArrayOutput) ToRepositoryLinkTagArrayOutputWithContext(ctx context.Context) RepositoryLinkTagArrayOutput {
	return o
}

func (o RepositoryLinkTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepositoryLinkTag] {
	return pulumix.Output[[]RepositoryLinkTag]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryLinkTagArrayOutput) Index(i pulumi.IntInput) RepositoryLinkTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryLinkTag {
		return vs[0].([]RepositoryLinkTag)[vs[1].(int)]
	}).(RepositoryLinkTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionTagInput)(nil)).Elem(), ConnectionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionTagArrayInput)(nil)).Elem(), ConnectionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLinkTagInput)(nil)).Elem(), RepositoryLinkTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLinkTagArrayInput)(nil)).Elem(), RepositoryLinkTagArray{})
	pulumi.RegisterOutputType(ConnectionTagOutput{})
	pulumi.RegisterOutputType(ConnectionTagArrayOutput{})
	pulumi.RegisterOutputType(RepositoryLinkTagOutput{})
	pulumi.RegisterOutputType(RepositoryLinkTagArrayOutput{})
}
