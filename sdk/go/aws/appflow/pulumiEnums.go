// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appflow

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake, Trendmicro and Singular
type ConnectorProfileConnectionMode string

const (
	ConnectorProfileConnectionModePublic  = ConnectorProfileConnectionMode("Public")
	ConnectorProfileConnectionModePrivate = ConnectorProfileConnectionMode("Private")
)

func (ConnectorProfileConnectionMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectionMode)(nil)).Elem()
}

func (e ConnectorProfileConnectionMode) ToConnectorProfileConnectionModeOutput() ConnectorProfileConnectionModeOutput {
	return pulumi.ToOutput(e).(ConnectorProfileConnectionModeOutput)
}

func (e ConnectorProfileConnectionMode) ToConnectorProfileConnectionModeOutputWithContext(ctx context.Context) ConnectorProfileConnectionModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectorProfileConnectionModeOutput)
}

func (e ConnectorProfileConnectionMode) ToConnectorProfileConnectionModePtrOutput() ConnectorProfileConnectionModePtrOutput {
	return e.ToConnectorProfileConnectionModePtrOutputWithContext(context.Background())
}

func (e ConnectorProfileConnectionMode) ToConnectorProfileConnectionModePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectionModePtrOutput {
	return ConnectorProfileConnectionMode(e).ToConnectorProfileConnectionModeOutputWithContext(ctx).ToConnectorProfileConnectionModePtrOutputWithContext(ctx)
}

func (e ConnectorProfileConnectionMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorProfileConnectionMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorProfileConnectionMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectorProfileConnectionMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectorProfileConnectionModeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectionModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectionMode)(nil)).Elem()
}

func (o ConnectorProfileConnectionModeOutput) ToConnectorProfileConnectionModeOutput() ConnectorProfileConnectionModeOutput {
	return o
}

func (o ConnectorProfileConnectionModeOutput) ToConnectorProfileConnectionModeOutputWithContext(ctx context.Context) ConnectorProfileConnectionModeOutput {
	return o
}

func (o ConnectorProfileConnectionModeOutput) ToConnectorProfileConnectionModePtrOutput() ConnectorProfileConnectionModePtrOutput {
	return o.ToConnectorProfileConnectionModePtrOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectionModeOutput) ToConnectorProfileConnectionModePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectionModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorProfileConnectionMode) *ConnectorProfileConnectionMode {
		return &v
	}).(ConnectorProfileConnectionModePtrOutput)
}

func (o ConnectorProfileConnectionModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectionModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorProfileConnectionMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectorProfileConnectionModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectionModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorProfileConnectionMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectorProfileConnectionModePtrOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectionModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorProfileConnectionMode)(nil)).Elem()
}

func (o ConnectorProfileConnectionModePtrOutput) ToConnectorProfileConnectionModePtrOutput() ConnectorProfileConnectionModePtrOutput {
	return o
}

func (o ConnectorProfileConnectionModePtrOutput) ToConnectorProfileConnectionModePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectionModePtrOutput {
	return o
}

func (o ConnectorProfileConnectionModePtrOutput) Elem() ConnectorProfileConnectionModeOutput {
	return o.ApplyT(func(v *ConnectorProfileConnectionMode) ConnectorProfileConnectionMode {
		if v != nil {
			return *v
		}
		var ret ConnectorProfileConnectionMode
		return ret
	}).(ConnectorProfileConnectionModeOutput)
}

func (o ConnectorProfileConnectionModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectionModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectorProfileConnectionMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectorProfileConnectionModeInput is an input type that accepts ConnectorProfileConnectionModeArgs and ConnectorProfileConnectionModeOutput values.
// You can construct a concrete instance of `ConnectorProfileConnectionModeInput` via:
//
//          ConnectorProfileConnectionModeArgs{...}
type ConnectorProfileConnectionModeInput interface {
	pulumi.Input

	ToConnectorProfileConnectionModeOutput() ConnectorProfileConnectionModeOutput
	ToConnectorProfileConnectionModeOutputWithContext(context.Context) ConnectorProfileConnectionModeOutput
}

var connectorProfileConnectionModePtrType = reflect.TypeOf((**ConnectorProfileConnectionMode)(nil)).Elem()

type ConnectorProfileConnectionModePtrInput interface {
	pulumi.Input

	ToConnectorProfileConnectionModePtrOutput() ConnectorProfileConnectionModePtrOutput
	ToConnectorProfileConnectionModePtrOutputWithContext(context.Context) ConnectorProfileConnectionModePtrOutput
}

type connectorProfileConnectionModePtr string

func ConnectorProfileConnectionModePtr(v string) ConnectorProfileConnectionModePtrInput {
	return (*connectorProfileConnectionModePtr)(&v)
}

func (*connectorProfileConnectionModePtr) ElementType() reflect.Type {
	return connectorProfileConnectionModePtrType
}

func (in *connectorProfileConnectionModePtr) ToConnectorProfileConnectionModePtrOutput() ConnectorProfileConnectionModePtrOutput {
	return pulumi.ToOutput(in).(ConnectorProfileConnectionModePtrOutput)
}

func (in *connectorProfileConnectionModePtr) ToConnectorProfileConnectionModePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectionModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectorProfileConnectionModePtrOutput)
}

type ConnectorProfileConnectorType string

const (
	ConnectorProfileConnectorTypeSalesforce      = ConnectorProfileConnectorType("Salesforce")
	ConnectorProfileConnectorTypeSingular        = ConnectorProfileConnectorType("Singular")
	ConnectorProfileConnectorTypeSlack           = ConnectorProfileConnectorType("Slack")
	ConnectorProfileConnectorTypeRedshift        = ConnectorProfileConnectorType("Redshift")
	ConnectorProfileConnectorTypeMarketo         = ConnectorProfileConnectorType("Marketo")
	ConnectorProfileConnectorTypeGoogleanalytics = ConnectorProfileConnectorType("Googleanalytics")
	ConnectorProfileConnectorTypeZendesk         = ConnectorProfileConnectorType("Zendesk")
	ConnectorProfileConnectorTypeServicenow      = ConnectorProfileConnectorType("Servicenow")
	ConnectorProfileConnectorTypeSAPOData        = ConnectorProfileConnectorType("SAPOData")
	ConnectorProfileConnectorTypeDatadog         = ConnectorProfileConnectorType("Datadog")
	ConnectorProfileConnectorTypeTrendmicro      = ConnectorProfileConnectorType("Trendmicro")
	ConnectorProfileConnectorTypeSnowflake       = ConnectorProfileConnectorType("Snowflake")
	ConnectorProfileConnectorTypeDynatrace       = ConnectorProfileConnectorType("Dynatrace")
	ConnectorProfileConnectorTypeInfornexus      = ConnectorProfileConnectorType("Infornexus")
	ConnectorProfileConnectorTypeAmplitude       = ConnectorProfileConnectorType("Amplitude")
	ConnectorProfileConnectorTypeVeeva           = ConnectorProfileConnectorType("Veeva")
)

func (ConnectorProfileConnectorType) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorType)(nil)).Elem()
}

func (e ConnectorProfileConnectorType) ToConnectorProfileConnectorTypeOutput() ConnectorProfileConnectorTypeOutput {
	return pulumi.ToOutput(e).(ConnectorProfileConnectorTypeOutput)
}

func (e ConnectorProfileConnectorType) ToConnectorProfileConnectorTypeOutputWithContext(ctx context.Context) ConnectorProfileConnectorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectorProfileConnectorTypeOutput)
}

func (e ConnectorProfileConnectorType) ToConnectorProfileConnectorTypePtrOutput() ConnectorProfileConnectorTypePtrOutput {
	return e.ToConnectorProfileConnectorTypePtrOutputWithContext(context.Background())
}

func (e ConnectorProfileConnectorType) ToConnectorProfileConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectorTypePtrOutput {
	return ConnectorProfileConnectorType(e).ToConnectorProfileConnectorTypeOutputWithContext(ctx).ToConnectorProfileConnectorTypePtrOutputWithContext(ctx)
}

func (e ConnectorProfileConnectorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorProfileConnectorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorProfileConnectorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectorProfileConnectorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectorProfileConnectorTypeOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorProfileConnectorType)(nil)).Elem()
}

func (o ConnectorProfileConnectorTypeOutput) ToConnectorProfileConnectorTypeOutput() ConnectorProfileConnectorTypeOutput {
	return o
}

func (o ConnectorProfileConnectorTypeOutput) ToConnectorProfileConnectorTypeOutputWithContext(ctx context.Context) ConnectorProfileConnectorTypeOutput {
	return o
}

func (o ConnectorProfileConnectorTypeOutput) ToConnectorProfileConnectorTypePtrOutput() ConnectorProfileConnectorTypePtrOutput {
	return o.ToConnectorProfileConnectorTypePtrOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectorTypeOutput) ToConnectorProfileConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorProfileConnectorType) *ConnectorProfileConnectorType {
		return &v
	}).(ConnectorProfileConnectorTypePtrOutput)
}

func (o ConnectorProfileConnectorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorProfileConnectorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectorProfileConnectorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorProfileConnectorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectorProfileConnectorTypePtrOutput struct{ *pulumi.OutputState }

func (ConnectorProfileConnectorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorProfileConnectorType)(nil)).Elem()
}

func (o ConnectorProfileConnectorTypePtrOutput) ToConnectorProfileConnectorTypePtrOutput() ConnectorProfileConnectorTypePtrOutput {
	return o
}

func (o ConnectorProfileConnectorTypePtrOutput) ToConnectorProfileConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectorTypePtrOutput {
	return o
}

func (o ConnectorProfileConnectorTypePtrOutput) Elem() ConnectorProfileConnectorTypeOutput {
	return o.ApplyT(func(v *ConnectorProfileConnectorType) ConnectorProfileConnectorType {
		if v != nil {
			return *v
		}
		var ret ConnectorProfileConnectorType
		return ret
	}).(ConnectorProfileConnectorTypeOutput)
}

func (o ConnectorProfileConnectorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorProfileConnectorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectorProfileConnectorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectorProfileConnectorTypeInput is an input type that accepts ConnectorProfileConnectorTypeArgs and ConnectorProfileConnectorTypeOutput values.
// You can construct a concrete instance of `ConnectorProfileConnectorTypeInput` via:
//
//          ConnectorProfileConnectorTypeArgs{...}
type ConnectorProfileConnectorTypeInput interface {
	pulumi.Input

	ToConnectorProfileConnectorTypeOutput() ConnectorProfileConnectorTypeOutput
	ToConnectorProfileConnectorTypeOutputWithContext(context.Context) ConnectorProfileConnectorTypeOutput
}

var connectorProfileConnectorTypePtrType = reflect.TypeOf((**ConnectorProfileConnectorType)(nil)).Elem()

type ConnectorProfileConnectorTypePtrInput interface {
	pulumi.Input

	ToConnectorProfileConnectorTypePtrOutput() ConnectorProfileConnectorTypePtrOutput
	ToConnectorProfileConnectorTypePtrOutputWithContext(context.Context) ConnectorProfileConnectorTypePtrOutput
}

type connectorProfileConnectorTypePtr string

func ConnectorProfileConnectorTypePtr(v string) ConnectorProfileConnectorTypePtrInput {
	return (*connectorProfileConnectorTypePtr)(&v)
}

func (*connectorProfileConnectorTypePtr) ElementType() reflect.Type {
	return connectorProfileConnectorTypePtrType
}

func (in *connectorProfileConnectorTypePtr) ToConnectorProfileConnectorTypePtrOutput() ConnectorProfileConnectorTypePtrOutput {
	return pulumi.ToOutput(in).(ConnectorProfileConnectorTypePtrOutput)
}

func (in *connectorProfileConnectorTypePtr) ToConnectorProfileConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorProfileConnectorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectorProfileConnectorTypePtrOutput)
}

type FlowAggregationType string

const (
	FlowAggregationTypeNone       = FlowAggregationType("None")
	FlowAggregationTypeSingleFile = FlowAggregationType("SingleFile")
)

func (FlowAggregationType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowAggregationType)(nil)).Elem()
}

func (e FlowAggregationType) ToFlowAggregationTypeOutput() FlowAggregationTypeOutput {
	return pulumi.ToOutput(e).(FlowAggregationTypeOutput)
}

func (e FlowAggregationType) ToFlowAggregationTypeOutputWithContext(ctx context.Context) FlowAggregationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowAggregationTypeOutput)
}

func (e FlowAggregationType) ToFlowAggregationTypePtrOutput() FlowAggregationTypePtrOutput {
	return e.ToFlowAggregationTypePtrOutputWithContext(context.Background())
}

func (e FlowAggregationType) ToFlowAggregationTypePtrOutputWithContext(ctx context.Context) FlowAggregationTypePtrOutput {
	return FlowAggregationType(e).ToFlowAggregationTypeOutputWithContext(ctx).ToFlowAggregationTypePtrOutputWithContext(ctx)
}

func (e FlowAggregationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowAggregationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowAggregationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowAggregationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowAggregationTypeOutput struct{ *pulumi.OutputState }

func (FlowAggregationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowAggregationType)(nil)).Elem()
}

func (o FlowAggregationTypeOutput) ToFlowAggregationTypeOutput() FlowAggregationTypeOutput {
	return o
}

func (o FlowAggregationTypeOutput) ToFlowAggregationTypeOutputWithContext(ctx context.Context) FlowAggregationTypeOutput {
	return o
}

func (o FlowAggregationTypeOutput) ToFlowAggregationTypePtrOutput() FlowAggregationTypePtrOutput {
	return o.ToFlowAggregationTypePtrOutputWithContext(context.Background())
}

func (o FlowAggregationTypeOutput) ToFlowAggregationTypePtrOutputWithContext(ctx context.Context) FlowAggregationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowAggregationType) *FlowAggregationType {
		return &v
	}).(FlowAggregationTypePtrOutput)
}

func (o FlowAggregationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowAggregationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowAggregationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowAggregationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowAggregationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowAggregationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowAggregationTypePtrOutput struct{ *pulumi.OutputState }

func (FlowAggregationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowAggregationType)(nil)).Elem()
}

func (o FlowAggregationTypePtrOutput) ToFlowAggregationTypePtrOutput() FlowAggregationTypePtrOutput {
	return o
}

func (o FlowAggregationTypePtrOutput) ToFlowAggregationTypePtrOutputWithContext(ctx context.Context) FlowAggregationTypePtrOutput {
	return o
}

func (o FlowAggregationTypePtrOutput) Elem() FlowAggregationTypeOutput {
	return o.ApplyT(func(v *FlowAggregationType) FlowAggregationType {
		if v != nil {
			return *v
		}
		var ret FlowAggregationType
		return ret
	}).(FlowAggregationTypeOutput)
}

func (o FlowAggregationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowAggregationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowAggregationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowAggregationTypeInput is an input type that accepts FlowAggregationTypeArgs and FlowAggregationTypeOutput values.
// You can construct a concrete instance of `FlowAggregationTypeInput` via:
//
//          FlowAggregationTypeArgs{...}
type FlowAggregationTypeInput interface {
	pulumi.Input

	ToFlowAggregationTypeOutput() FlowAggregationTypeOutput
	ToFlowAggregationTypeOutputWithContext(context.Context) FlowAggregationTypeOutput
}

var flowAggregationTypePtrType = reflect.TypeOf((**FlowAggregationType)(nil)).Elem()

type FlowAggregationTypePtrInput interface {
	pulumi.Input

	ToFlowAggregationTypePtrOutput() FlowAggregationTypePtrOutput
	ToFlowAggregationTypePtrOutputWithContext(context.Context) FlowAggregationTypePtrOutput
}

type flowAggregationTypePtr string

func FlowAggregationTypePtr(v string) FlowAggregationTypePtrInput {
	return (*flowAggregationTypePtr)(&v)
}

func (*flowAggregationTypePtr) ElementType() reflect.Type {
	return flowAggregationTypePtrType
}

func (in *flowAggregationTypePtr) ToFlowAggregationTypePtrOutput() FlowAggregationTypePtrOutput {
	return pulumi.ToOutput(in).(FlowAggregationTypePtrOutput)
}

func (in *flowAggregationTypePtr) ToFlowAggregationTypePtrOutputWithContext(ctx context.Context) FlowAggregationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowAggregationTypePtrOutput)
}

type FlowAmplitudeConnectorOperator string

const (
	FlowAmplitudeConnectorOperatorBetween = FlowAmplitudeConnectorOperator("BETWEEN")
)

func (FlowAmplitudeConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowAmplitudeConnectorOperator)(nil)).Elem()
}

func (e FlowAmplitudeConnectorOperator) ToFlowAmplitudeConnectorOperatorOutput() FlowAmplitudeConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowAmplitudeConnectorOperatorOutput)
}

func (e FlowAmplitudeConnectorOperator) ToFlowAmplitudeConnectorOperatorOutputWithContext(ctx context.Context) FlowAmplitudeConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowAmplitudeConnectorOperatorOutput)
}

func (e FlowAmplitudeConnectorOperator) ToFlowAmplitudeConnectorOperatorPtrOutput() FlowAmplitudeConnectorOperatorPtrOutput {
	return e.ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowAmplitudeConnectorOperator) ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowAmplitudeConnectorOperatorPtrOutput {
	return FlowAmplitudeConnectorOperator(e).ToFlowAmplitudeConnectorOperatorOutputWithContext(ctx).ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowAmplitudeConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowAmplitudeConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowAmplitudeConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowAmplitudeConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowAmplitudeConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowAmplitudeConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowAmplitudeConnectorOperator)(nil)).Elem()
}

func (o FlowAmplitudeConnectorOperatorOutput) ToFlowAmplitudeConnectorOperatorOutput() FlowAmplitudeConnectorOperatorOutput {
	return o
}

func (o FlowAmplitudeConnectorOperatorOutput) ToFlowAmplitudeConnectorOperatorOutputWithContext(ctx context.Context) FlowAmplitudeConnectorOperatorOutput {
	return o
}

func (o FlowAmplitudeConnectorOperatorOutput) ToFlowAmplitudeConnectorOperatorPtrOutput() FlowAmplitudeConnectorOperatorPtrOutput {
	return o.ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowAmplitudeConnectorOperatorOutput) ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowAmplitudeConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowAmplitudeConnectorOperator) *FlowAmplitudeConnectorOperator {
		return &v
	}).(FlowAmplitudeConnectorOperatorPtrOutput)
}

func (o FlowAmplitudeConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowAmplitudeConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowAmplitudeConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowAmplitudeConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowAmplitudeConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowAmplitudeConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowAmplitudeConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowAmplitudeConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowAmplitudeConnectorOperator)(nil)).Elem()
}

func (o FlowAmplitudeConnectorOperatorPtrOutput) ToFlowAmplitudeConnectorOperatorPtrOutput() FlowAmplitudeConnectorOperatorPtrOutput {
	return o
}

func (o FlowAmplitudeConnectorOperatorPtrOutput) ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowAmplitudeConnectorOperatorPtrOutput {
	return o
}

func (o FlowAmplitudeConnectorOperatorPtrOutput) Elem() FlowAmplitudeConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowAmplitudeConnectorOperator) FlowAmplitudeConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowAmplitudeConnectorOperator
		return ret
	}).(FlowAmplitudeConnectorOperatorOutput)
}

func (o FlowAmplitudeConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowAmplitudeConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowAmplitudeConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowAmplitudeConnectorOperatorInput is an input type that accepts FlowAmplitudeConnectorOperatorArgs and FlowAmplitudeConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowAmplitudeConnectorOperatorInput` via:
//
//          FlowAmplitudeConnectorOperatorArgs{...}
type FlowAmplitudeConnectorOperatorInput interface {
	pulumi.Input

	ToFlowAmplitudeConnectorOperatorOutput() FlowAmplitudeConnectorOperatorOutput
	ToFlowAmplitudeConnectorOperatorOutputWithContext(context.Context) FlowAmplitudeConnectorOperatorOutput
}

var flowAmplitudeConnectorOperatorPtrType = reflect.TypeOf((**FlowAmplitudeConnectorOperator)(nil)).Elem()

type FlowAmplitudeConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowAmplitudeConnectorOperatorPtrOutput() FlowAmplitudeConnectorOperatorPtrOutput
	ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(context.Context) FlowAmplitudeConnectorOperatorPtrOutput
}

type flowAmplitudeConnectorOperatorPtr string

func FlowAmplitudeConnectorOperatorPtr(v string) FlowAmplitudeConnectorOperatorPtrInput {
	return (*flowAmplitudeConnectorOperatorPtr)(&v)
}

func (*flowAmplitudeConnectorOperatorPtr) ElementType() reflect.Type {
	return flowAmplitudeConnectorOperatorPtrType
}

func (in *flowAmplitudeConnectorOperatorPtr) ToFlowAmplitudeConnectorOperatorPtrOutput() FlowAmplitudeConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowAmplitudeConnectorOperatorPtrOutput)
}

func (in *flowAmplitudeConnectorOperatorPtr) ToFlowAmplitudeConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowAmplitudeConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowAmplitudeConnectorOperatorPtrOutput)
}

type FlowConnectorType string

const (
	FlowConnectorTypeSAPOData        = FlowConnectorType("SAPOData")
	FlowConnectorTypeSalesforce      = FlowConnectorType("Salesforce")
	FlowConnectorTypeSingular        = FlowConnectorType("Singular")
	FlowConnectorTypeSlack           = FlowConnectorType("Slack")
	FlowConnectorTypeRedshift        = FlowConnectorType("Redshift")
	FlowConnectorTypeS3              = FlowConnectorType("S3")
	FlowConnectorTypeMarketo         = FlowConnectorType("Marketo")
	FlowConnectorTypeGoogleanalytics = FlowConnectorType("Googleanalytics")
	FlowConnectorTypeZendesk         = FlowConnectorType("Zendesk")
	FlowConnectorTypeServicenow      = FlowConnectorType("Servicenow")
	FlowConnectorTypeDatadog         = FlowConnectorType("Datadog")
	FlowConnectorTypeTrendmicro      = FlowConnectorType("Trendmicro")
	FlowConnectorTypeSnowflake       = FlowConnectorType("Snowflake")
	FlowConnectorTypeDynatrace       = FlowConnectorType("Dynatrace")
	FlowConnectorTypeInfornexus      = FlowConnectorType("Infornexus")
	FlowConnectorTypeAmplitude       = FlowConnectorType("Amplitude")
	FlowConnectorTypeVeeva           = FlowConnectorType("Veeva")
	FlowConnectorTypeEventBridge     = FlowConnectorType("EventBridge")
	FlowConnectorTypeUpsolver        = FlowConnectorType("Upsolver")
	FlowConnectorTypeLookoutMetrics  = FlowConnectorType("LookoutMetrics")
)

func (FlowConnectorType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowConnectorType)(nil)).Elem()
}

func (e FlowConnectorType) ToFlowConnectorTypeOutput() FlowConnectorTypeOutput {
	return pulumi.ToOutput(e).(FlowConnectorTypeOutput)
}

func (e FlowConnectorType) ToFlowConnectorTypeOutputWithContext(ctx context.Context) FlowConnectorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowConnectorTypeOutput)
}

func (e FlowConnectorType) ToFlowConnectorTypePtrOutput() FlowConnectorTypePtrOutput {
	return e.ToFlowConnectorTypePtrOutputWithContext(context.Background())
}

func (e FlowConnectorType) ToFlowConnectorTypePtrOutputWithContext(ctx context.Context) FlowConnectorTypePtrOutput {
	return FlowConnectorType(e).ToFlowConnectorTypeOutputWithContext(ctx).ToFlowConnectorTypePtrOutputWithContext(ctx)
}

func (e FlowConnectorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowConnectorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowConnectorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowConnectorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowConnectorTypeOutput struct{ *pulumi.OutputState }

func (FlowConnectorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowConnectorType)(nil)).Elem()
}

func (o FlowConnectorTypeOutput) ToFlowConnectorTypeOutput() FlowConnectorTypeOutput {
	return o
}

func (o FlowConnectorTypeOutput) ToFlowConnectorTypeOutputWithContext(ctx context.Context) FlowConnectorTypeOutput {
	return o
}

func (o FlowConnectorTypeOutput) ToFlowConnectorTypePtrOutput() FlowConnectorTypePtrOutput {
	return o.ToFlowConnectorTypePtrOutputWithContext(context.Background())
}

func (o FlowConnectorTypeOutput) ToFlowConnectorTypePtrOutputWithContext(ctx context.Context) FlowConnectorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowConnectorType) *FlowConnectorType {
		return &v
	}).(FlowConnectorTypePtrOutput)
}

func (o FlowConnectorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowConnectorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowConnectorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowConnectorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowConnectorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowConnectorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowConnectorTypePtrOutput struct{ *pulumi.OutputState }

func (FlowConnectorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowConnectorType)(nil)).Elem()
}

func (o FlowConnectorTypePtrOutput) ToFlowConnectorTypePtrOutput() FlowConnectorTypePtrOutput {
	return o
}

func (o FlowConnectorTypePtrOutput) ToFlowConnectorTypePtrOutputWithContext(ctx context.Context) FlowConnectorTypePtrOutput {
	return o
}

func (o FlowConnectorTypePtrOutput) Elem() FlowConnectorTypeOutput {
	return o.ApplyT(func(v *FlowConnectorType) FlowConnectorType {
		if v != nil {
			return *v
		}
		var ret FlowConnectorType
		return ret
	}).(FlowConnectorTypeOutput)
}

func (o FlowConnectorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowConnectorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowConnectorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowConnectorTypeInput is an input type that accepts FlowConnectorTypeArgs and FlowConnectorTypeOutput values.
// You can construct a concrete instance of `FlowConnectorTypeInput` via:
//
//          FlowConnectorTypeArgs{...}
type FlowConnectorTypeInput interface {
	pulumi.Input

	ToFlowConnectorTypeOutput() FlowConnectorTypeOutput
	ToFlowConnectorTypeOutputWithContext(context.Context) FlowConnectorTypeOutput
}

var flowConnectorTypePtrType = reflect.TypeOf((**FlowConnectorType)(nil)).Elem()

type FlowConnectorTypePtrInput interface {
	pulumi.Input

	ToFlowConnectorTypePtrOutput() FlowConnectorTypePtrOutput
	ToFlowConnectorTypePtrOutputWithContext(context.Context) FlowConnectorTypePtrOutput
}

type flowConnectorTypePtr string

func FlowConnectorTypePtr(v string) FlowConnectorTypePtrInput {
	return (*flowConnectorTypePtr)(&v)
}

func (*flowConnectorTypePtr) ElementType() reflect.Type {
	return flowConnectorTypePtrType
}

func (in *flowConnectorTypePtr) ToFlowConnectorTypePtrOutput() FlowConnectorTypePtrOutput {
	return pulumi.ToOutput(in).(FlowConnectorTypePtrOutput)
}

func (in *flowConnectorTypePtr) ToFlowConnectorTypePtrOutputWithContext(ctx context.Context) FlowConnectorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowConnectorTypePtrOutput)
}

type FlowDatadogConnectorOperator string

const (
	FlowDatadogConnectorOperatorProjection          = FlowDatadogConnectorOperator("PROJECTION")
	FlowDatadogConnectorOperatorBetween             = FlowDatadogConnectorOperator("BETWEEN")
	FlowDatadogConnectorOperatorEqualTo             = FlowDatadogConnectorOperator("EQUAL_TO")
	FlowDatadogConnectorOperatorAddition            = FlowDatadogConnectorOperator("ADDITION")
	FlowDatadogConnectorOperatorMultiplication      = FlowDatadogConnectorOperator("MULTIPLICATION")
	FlowDatadogConnectorOperatorDivision            = FlowDatadogConnectorOperator("DIVISION")
	FlowDatadogConnectorOperatorSubtraction         = FlowDatadogConnectorOperator("SUBTRACTION")
	FlowDatadogConnectorOperatorMaskAll             = FlowDatadogConnectorOperator("MASK_ALL")
	FlowDatadogConnectorOperatorMaskFirstN          = FlowDatadogConnectorOperator("MASK_FIRST_N")
	FlowDatadogConnectorOperatorMaskLastN           = FlowDatadogConnectorOperator("MASK_LAST_N")
	FlowDatadogConnectorOperatorValidateNonNull     = FlowDatadogConnectorOperator("VALIDATE_NON_NULL")
	FlowDatadogConnectorOperatorValidateNonZero     = FlowDatadogConnectorOperator("VALIDATE_NON_ZERO")
	FlowDatadogConnectorOperatorValidateNonNegative = FlowDatadogConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowDatadogConnectorOperatorValidateNumeric     = FlowDatadogConnectorOperator("VALIDATE_NUMERIC")
	FlowDatadogConnectorOperatorNoOp                = FlowDatadogConnectorOperator("NO_OP")
)

func (FlowDatadogConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDatadogConnectorOperator)(nil)).Elem()
}

func (e FlowDatadogConnectorOperator) ToFlowDatadogConnectorOperatorOutput() FlowDatadogConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowDatadogConnectorOperatorOutput)
}

func (e FlowDatadogConnectorOperator) ToFlowDatadogConnectorOperatorOutputWithContext(ctx context.Context) FlowDatadogConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowDatadogConnectorOperatorOutput)
}

func (e FlowDatadogConnectorOperator) ToFlowDatadogConnectorOperatorPtrOutput() FlowDatadogConnectorOperatorPtrOutput {
	return e.ToFlowDatadogConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowDatadogConnectorOperator) ToFlowDatadogConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDatadogConnectorOperatorPtrOutput {
	return FlowDatadogConnectorOperator(e).ToFlowDatadogConnectorOperatorOutputWithContext(ctx).ToFlowDatadogConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowDatadogConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowDatadogConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowDatadogConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowDatadogConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowDatadogConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowDatadogConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDatadogConnectorOperator)(nil)).Elem()
}

func (o FlowDatadogConnectorOperatorOutput) ToFlowDatadogConnectorOperatorOutput() FlowDatadogConnectorOperatorOutput {
	return o
}

func (o FlowDatadogConnectorOperatorOutput) ToFlowDatadogConnectorOperatorOutputWithContext(ctx context.Context) FlowDatadogConnectorOperatorOutput {
	return o
}

func (o FlowDatadogConnectorOperatorOutput) ToFlowDatadogConnectorOperatorPtrOutput() FlowDatadogConnectorOperatorPtrOutput {
	return o.ToFlowDatadogConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowDatadogConnectorOperatorOutput) ToFlowDatadogConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDatadogConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowDatadogConnectorOperator) *FlowDatadogConnectorOperator {
		return &v
	}).(FlowDatadogConnectorOperatorPtrOutput)
}

func (o FlowDatadogConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowDatadogConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowDatadogConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowDatadogConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowDatadogConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowDatadogConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowDatadogConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowDatadogConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowDatadogConnectorOperator)(nil)).Elem()
}

func (o FlowDatadogConnectorOperatorPtrOutput) ToFlowDatadogConnectorOperatorPtrOutput() FlowDatadogConnectorOperatorPtrOutput {
	return o
}

func (o FlowDatadogConnectorOperatorPtrOutput) ToFlowDatadogConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDatadogConnectorOperatorPtrOutput {
	return o
}

func (o FlowDatadogConnectorOperatorPtrOutput) Elem() FlowDatadogConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowDatadogConnectorOperator) FlowDatadogConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowDatadogConnectorOperator
		return ret
	}).(FlowDatadogConnectorOperatorOutput)
}

func (o FlowDatadogConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowDatadogConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowDatadogConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowDatadogConnectorOperatorInput is an input type that accepts FlowDatadogConnectorOperatorArgs and FlowDatadogConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowDatadogConnectorOperatorInput` via:
//
//          FlowDatadogConnectorOperatorArgs{...}
type FlowDatadogConnectorOperatorInput interface {
	pulumi.Input

	ToFlowDatadogConnectorOperatorOutput() FlowDatadogConnectorOperatorOutput
	ToFlowDatadogConnectorOperatorOutputWithContext(context.Context) FlowDatadogConnectorOperatorOutput
}

var flowDatadogConnectorOperatorPtrType = reflect.TypeOf((**FlowDatadogConnectorOperator)(nil)).Elem()

type FlowDatadogConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowDatadogConnectorOperatorPtrOutput() FlowDatadogConnectorOperatorPtrOutput
	ToFlowDatadogConnectorOperatorPtrOutputWithContext(context.Context) FlowDatadogConnectorOperatorPtrOutput
}

type flowDatadogConnectorOperatorPtr string

func FlowDatadogConnectorOperatorPtr(v string) FlowDatadogConnectorOperatorPtrInput {
	return (*flowDatadogConnectorOperatorPtr)(&v)
}

func (*flowDatadogConnectorOperatorPtr) ElementType() reflect.Type {
	return flowDatadogConnectorOperatorPtrType
}

func (in *flowDatadogConnectorOperatorPtr) ToFlowDatadogConnectorOperatorPtrOutput() FlowDatadogConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowDatadogConnectorOperatorPtrOutput)
}

func (in *flowDatadogConnectorOperatorPtr) ToFlowDatadogConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDatadogConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowDatadogConnectorOperatorPtrOutput)
}

type FlowDynatraceConnectorOperator string

const (
	FlowDynatraceConnectorOperatorProjection          = FlowDynatraceConnectorOperator("PROJECTION")
	FlowDynatraceConnectorOperatorBetween             = FlowDynatraceConnectorOperator("BETWEEN")
	FlowDynatraceConnectorOperatorEqualTo             = FlowDynatraceConnectorOperator("EQUAL_TO")
	FlowDynatraceConnectorOperatorAddition            = FlowDynatraceConnectorOperator("ADDITION")
	FlowDynatraceConnectorOperatorMultiplication      = FlowDynatraceConnectorOperator("MULTIPLICATION")
	FlowDynatraceConnectorOperatorDivision            = FlowDynatraceConnectorOperator("DIVISION")
	FlowDynatraceConnectorOperatorSubtraction         = FlowDynatraceConnectorOperator("SUBTRACTION")
	FlowDynatraceConnectorOperatorMaskAll             = FlowDynatraceConnectorOperator("MASK_ALL")
	FlowDynatraceConnectorOperatorMaskFirstN          = FlowDynatraceConnectorOperator("MASK_FIRST_N")
	FlowDynatraceConnectorOperatorMaskLastN           = FlowDynatraceConnectorOperator("MASK_LAST_N")
	FlowDynatraceConnectorOperatorValidateNonNull     = FlowDynatraceConnectorOperator("VALIDATE_NON_NULL")
	FlowDynatraceConnectorOperatorValidateNonZero     = FlowDynatraceConnectorOperator("VALIDATE_NON_ZERO")
	FlowDynatraceConnectorOperatorValidateNonNegative = FlowDynatraceConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowDynatraceConnectorOperatorValidateNumeric     = FlowDynatraceConnectorOperator("VALIDATE_NUMERIC")
	FlowDynatraceConnectorOperatorNoOp                = FlowDynatraceConnectorOperator("NO_OP")
)

func (FlowDynatraceConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDynatraceConnectorOperator)(nil)).Elem()
}

func (e FlowDynatraceConnectorOperator) ToFlowDynatraceConnectorOperatorOutput() FlowDynatraceConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowDynatraceConnectorOperatorOutput)
}

func (e FlowDynatraceConnectorOperator) ToFlowDynatraceConnectorOperatorOutputWithContext(ctx context.Context) FlowDynatraceConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowDynatraceConnectorOperatorOutput)
}

func (e FlowDynatraceConnectorOperator) ToFlowDynatraceConnectorOperatorPtrOutput() FlowDynatraceConnectorOperatorPtrOutput {
	return e.ToFlowDynatraceConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowDynatraceConnectorOperator) ToFlowDynatraceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDynatraceConnectorOperatorPtrOutput {
	return FlowDynatraceConnectorOperator(e).ToFlowDynatraceConnectorOperatorOutputWithContext(ctx).ToFlowDynatraceConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowDynatraceConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowDynatraceConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowDynatraceConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowDynatraceConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowDynatraceConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowDynatraceConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowDynatraceConnectorOperator)(nil)).Elem()
}

func (o FlowDynatraceConnectorOperatorOutput) ToFlowDynatraceConnectorOperatorOutput() FlowDynatraceConnectorOperatorOutput {
	return o
}

func (o FlowDynatraceConnectorOperatorOutput) ToFlowDynatraceConnectorOperatorOutputWithContext(ctx context.Context) FlowDynatraceConnectorOperatorOutput {
	return o
}

func (o FlowDynatraceConnectorOperatorOutput) ToFlowDynatraceConnectorOperatorPtrOutput() FlowDynatraceConnectorOperatorPtrOutput {
	return o.ToFlowDynatraceConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowDynatraceConnectorOperatorOutput) ToFlowDynatraceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDynatraceConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowDynatraceConnectorOperator) *FlowDynatraceConnectorOperator {
		return &v
	}).(FlowDynatraceConnectorOperatorPtrOutput)
}

func (o FlowDynatraceConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowDynatraceConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowDynatraceConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowDynatraceConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowDynatraceConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowDynatraceConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowDynatraceConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowDynatraceConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowDynatraceConnectorOperator)(nil)).Elem()
}

func (o FlowDynatraceConnectorOperatorPtrOutput) ToFlowDynatraceConnectorOperatorPtrOutput() FlowDynatraceConnectorOperatorPtrOutput {
	return o
}

func (o FlowDynatraceConnectorOperatorPtrOutput) ToFlowDynatraceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDynatraceConnectorOperatorPtrOutput {
	return o
}

func (o FlowDynatraceConnectorOperatorPtrOutput) Elem() FlowDynatraceConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowDynatraceConnectorOperator) FlowDynatraceConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowDynatraceConnectorOperator
		return ret
	}).(FlowDynatraceConnectorOperatorOutput)
}

func (o FlowDynatraceConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowDynatraceConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowDynatraceConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowDynatraceConnectorOperatorInput is an input type that accepts FlowDynatraceConnectorOperatorArgs and FlowDynatraceConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowDynatraceConnectorOperatorInput` via:
//
//          FlowDynatraceConnectorOperatorArgs{...}
type FlowDynatraceConnectorOperatorInput interface {
	pulumi.Input

	ToFlowDynatraceConnectorOperatorOutput() FlowDynatraceConnectorOperatorOutput
	ToFlowDynatraceConnectorOperatorOutputWithContext(context.Context) FlowDynatraceConnectorOperatorOutput
}

var flowDynatraceConnectorOperatorPtrType = reflect.TypeOf((**FlowDynatraceConnectorOperator)(nil)).Elem()

type FlowDynatraceConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowDynatraceConnectorOperatorPtrOutput() FlowDynatraceConnectorOperatorPtrOutput
	ToFlowDynatraceConnectorOperatorPtrOutputWithContext(context.Context) FlowDynatraceConnectorOperatorPtrOutput
}

type flowDynatraceConnectorOperatorPtr string

func FlowDynatraceConnectorOperatorPtr(v string) FlowDynatraceConnectorOperatorPtrInput {
	return (*flowDynatraceConnectorOperatorPtr)(&v)
}

func (*flowDynatraceConnectorOperatorPtr) ElementType() reflect.Type {
	return flowDynatraceConnectorOperatorPtrType
}

func (in *flowDynatraceConnectorOperatorPtr) ToFlowDynatraceConnectorOperatorPtrOutput() FlowDynatraceConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowDynatraceConnectorOperatorPtrOutput)
}

func (in *flowDynatraceConnectorOperatorPtr) ToFlowDynatraceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowDynatraceConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowDynatraceConnectorOperatorPtrOutput)
}

type FlowFileType string

const (
	FlowFileTypeCsv     = FlowFileType("CSV")
	FlowFileTypeJson    = FlowFileType("JSON")
	FlowFileTypeParquet = FlowFileType("PARQUET")
)

func (FlowFileType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFileType)(nil)).Elem()
}

func (e FlowFileType) ToFlowFileTypeOutput() FlowFileTypeOutput {
	return pulumi.ToOutput(e).(FlowFileTypeOutput)
}

func (e FlowFileType) ToFlowFileTypeOutputWithContext(ctx context.Context) FlowFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowFileTypeOutput)
}

func (e FlowFileType) ToFlowFileTypePtrOutput() FlowFileTypePtrOutput {
	return e.ToFlowFileTypePtrOutputWithContext(context.Background())
}

func (e FlowFileType) ToFlowFileTypePtrOutputWithContext(ctx context.Context) FlowFileTypePtrOutput {
	return FlowFileType(e).ToFlowFileTypeOutputWithContext(ctx).ToFlowFileTypePtrOutputWithContext(ctx)
}

func (e FlowFileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowFileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowFileTypeOutput struct{ *pulumi.OutputState }

func (FlowFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFileType)(nil)).Elem()
}

func (o FlowFileTypeOutput) ToFlowFileTypeOutput() FlowFileTypeOutput {
	return o
}

func (o FlowFileTypeOutput) ToFlowFileTypeOutputWithContext(ctx context.Context) FlowFileTypeOutput {
	return o
}

func (o FlowFileTypeOutput) ToFlowFileTypePtrOutput() FlowFileTypePtrOutput {
	return o.ToFlowFileTypePtrOutputWithContext(context.Background())
}

func (o FlowFileTypeOutput) ToFlowFileTypePtrOutputWithContext(ctx context.Context) FlowFileTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFileType) *FlowFileType {
		return &v
	}).(FlowFileTypePtrOutput)
}

func (o FlowFileTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowFileTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFileType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowFileTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFileTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFileType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowFileTypePtrOutput struct{ *pulumi.OutputState }

func (FlowFileTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFileType)(nil)).Elem()
}

func (o FlowFileTypePtrOutput) ToFlowFileTypePtrOutput() FlowFileTypePtrOutput {
	return o
}

func (o FlowFileTypePtrOutput) ToFlowFileTypePtrOutputWithContext(ctx context.Context) FlowFileTypePtrOutput {
	return o
}

func (o FlowFileTypePtrOutput) Elem() FlowFileTypeOutput {
	return o.ApplyT(func(v *FlowFileType) FlowFileType {
		if v != nil {
			return *v
		}
		var ret FlowFileType
		return ret
	}).(FlowFileTypeOutput)
}

func (o FlowFileTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFileTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowFileType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowFileTypeInput is an input type that accepts FlowFileTypeArgs and FlowFileTypeOutput values.
// You can construct a concrete instance of `FlowFileTypeInput` via:
//
//          FlowFileTypeArgs{...}
type FlowFileTypeInput interface {
	pulumi.Input

	ToFlowFileTypeOutput() FlowFileTypeOutput
	ToFlowFileTypeOutputWithContext(context.Context) FlowFileTypeOutput
}

var flowFileTypePtrType = reflect.TypeOf((**FlowFileType)(nil)).Elem()

type FlowFileTypePtrInput interface {
	pulumi.Input

	ToFlowFileTypePtrOutput() FlowFileTypePtrOutput
	ToFlowFileTypePtrOutputWithContext(context.Context) FlowFileTypePtrOutput
}

type flowFileTypePtr string

func FlowFileTypePtr(v string) FlowFileTypePtrInput {
	return (*flowFileTypePtr)(&v)
}

func (*flowFileTypePtr) ElementType() reflect.Type {
	return flowFileTypePtrType
}

func (in *flowFileTypePtr) ToFlowFileTypePtrOutput() FlowFileTypePtrOutput {
	return pulumi.ToOutput(in).(FlowFileTypePtrOutput)
}

func (in *flowFileTypePtr) ToFlowFileTypePtrOutputWithContext(ctx context.Context) FlowFileTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowFileTypePtrOutput)
}

type FlowGoogleAnalyticsConnectorOperator string

const (
	FlowGoogleAnalyticsConnectorOperatorProjection = FlowGoogleAnalyticsConnectorOperator("PROJECTION")
	FlowGoogleAnalyticsConnectorOperatorBetween    = FlowGoogleAnalyticsConnectorOperator("BETWEEN")
)

func (FlowGoogleAnalyticsConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowGoogleAnalyticsConnectorOperator)(nil)).Elem()
}

func (e FlowGoogleAnalyticsConnectorOperator) ToFlowGoogleAnalyticsConnectorOperatorOutput() FlowGoogleAnalyticsConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowGoogleAnalyticsConnectorOperatorOutput)
}

func (e FlowGoogleAnalyticsConnectorOperator) ToFlowGoogleAnalyticsConnectorOperatorOutputWithContext(ctx context.Context) FlowGoogleAnalyticsConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowGoogleAnalyticsConnectorOperatorOutput)
}

func (e FlowGoogleAnalyticsConnectorOperator) ToFlowGoogleAnalyticsConnectorOperatorPtrOutput() FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return e.ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowGoogleAnalyticsConnectorOperator) ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return FlowGoogleAnalyticsConnectorOperator(e).ToFlowGoogleAnalyticsConnectorOperatorOutputWithContext(ctx).ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowGoogleAnalyticsConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowGoogleAnalyticsConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowGoogleAnalyticsConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowGoogleAnalyticsConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowGoogleAnalyticsConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowGoogleAnalyticsConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowGoogleAnalyticsConnectorOperator)(nil)).Elem()
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToFlowGoogleAnalyticsConnectorOperatorOutput() FlowGoogleAnalyticsConnectorOperatorOutput {
	return o
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToFlowGoogleAnalyticsConnectorOperatorOutputWithContext(ctx context.Context) FlowGoogleAnalyticsConnectorOperatorOutput {
	return o
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToFlowGoogleAnalyticsConnectorOperatorPtrOutput() FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return o.ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowGoogleAnalyticsConnectorOperator) *FlowGoogleAnalyticsConnectorOperator {
		return &v
	}).(FlowGoogleAnalyticsConnectorOperatorPtrOutput)
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowGoogleAnalyticsConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowGoogleAnalyticsConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowGoogleAnalyticsConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowGoogleAnalyticsConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowGoogleAnalyticsConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowGoogleAnalyticsConnectorOperator)(nil)).Elem()
}

func (o FlowGoogleAnalyticsConnectorOperatorPtrOutput) ToFlowGoogleAnalyticsConnectorOperatorPtrOutput() FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return o
}

func (o FlowGoogleAnalyticsConnectorOperatorPtrOutput) ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return o
}

func (o FlowGoogleAnalyticsConnectorOperatorPtrOutput) Elem() FlowGoogleAnalyticsConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowGoogleAnalyticsConnectorOperator) FlowGoogleAnalyticsConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowGoogleAnalyticsConnectorOperator
		return ret
	}).(FlowGoogleAnalyticsConnectorOperatorOutput)
}

func (o FlowGoogleAnalyticsConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowGoogleAnalyticsConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowGoogleAnalyticsConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowGoogleAnalyticsConnectorOperatorInput is an input type that accepts FlowGoogleAnalyticsConnectorOperatorArgs and FlowGoogleAnalyticsConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowGoogleAnalyticsConnectorOperatorInput` via:
//
//          FlowGoogleAnalyticsConnectorOperatorArgs{...}
type FlowGoogleAnalyticsConnectorOperatorInput interface {
	pulumi.Input

	ToFlowGoogleAnalyticsConnectorOperatorOutput() FlowGoogleAnalyticsConnectorOperatorOutput
	ToFlowGoogleAnalyticsConnectorOperatorOutputWithContext(context.Context) FlowGoogleAnalyticsConnectorOperatorOutput
}

var flowGoogleAnalyticsConnectorOperatorPtrType = reflect.TypeOf((**FlowGoogleAnalyticsConnectorOperator)(nil)).Elem()

type FlowGoogleAnalyticsConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowGoogleAnalyticsConnectorOperatorPtrOutput() FlowGoogleAnalyticsConnectorOperatorPtrOutput
	ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(context.Context) FlowGoogleAnalyticsConnectorOperatorPtrOutput
}

type flowGoogleAnalyticsConnectorOperatorPtr string

func FlowGoogleAnalyticsConnectorOperatorPtr(v string) FlowGoogleAnalyticsConnectorOperatorPtrInput {
	return (*flowGoogleAnalyticsConnectorOperatorPtr)(&v)
}

func (*flowGoogleAnalyticsConnectorOperatorPtr) ElementType() reflect.Type {
	return flowGoogleAnalyticsConnectorOperatorPtrType
}

func (in *flowGoogleAnalyticsConnectorOperatorPtr) ToFlowGoogleAnalyticsConnectorOperatorPtrOutput() FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowGoogleAnalyticsConnectorOperatorPtrOutput)
}

func (in *flowGoogleAnalyticsConnectorOperatorPtr) ToFlowGoogleAnalyticsConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowGoogleAnalyticsConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowGoogleAnalyticsConnectorOperatorPtrOutput)
}

type FlowInforNexusConnectorOperator string

const (
	FlowInforNexusConnectorOperatorProjection          = FlowInforNexusConnectorOperator("PROJECTION")
	FlowInforNexusConnectorOperatorBetween             = FlowInforNexusConnectorOperator("BETWEEN")
	FlowInforNexusConnectorOperatorEqualTo             = FlowInforNexusConnectorOperator("EQUAL_TO")
	FlowInforNexusConnectorOperatorAddition            = FlowInforNexusConnectorOperator("ADDITION")
	FlowInforNexusConnectorOperatorMultiplication      = FlowInforNexusConnectorOperator("MULTIPLICATION")
	FlowInforNexusConnectorOperatorDivision            = FlowInforNexusConnectorOperator("DIVISION")
	FlowInforNexusConnectorOperatorSubtraction         = FlowInforNexusConnectorOperator("SUBTRACTION")
	FlowInforNexusConnectorOperatorMaskAll             = FlowInforNexusConnectorOperator("MASK_ALL")
	FlowInforNexusConnectorOperatorMaskFirstN          = FlowInforNexusConnectorOperator("MASK_FIRST_N")
	FlowInforNexusConnectorOperatorMaskLastN           = FlowInforNexusConnectorOperator("MASK_LAST_N")
	FlowInforNexusConnectorOperatorValidateNonNull     = FlowInforNexusConnectorOperator("VALIDATE_NON_NULL")
	FlowInforNexusConnectorOperatorValidateNonZero     = FlowInforNexusConnectorOperator("VALIDATE_NON_ZERO")
	FlowInforNexusConnectorOperatorValidateNonNegative = FlowInforNexusConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowInforNexusConnectorOperatorValidateNumeric     = FlowInforNexusConnectorOperator("VALIDATE_NUMERIC")
	FlowInforNexusConnectorOperatorNoOp                = FlowInforNexusConnectorOperator("NO_OP")
)

func (FlowInforNexusConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowInforNexusConnectorOperator)(nil)).Elem()
}

func (e FlowInforNexusConnectorOperator) ToFlowInforNexusConnectorOperatorOutput() FlowInforNexusConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowInforNexusConnectorOperatorOutput)
}

func (e FlowInforNexusConnectorOperator) ToFlowInforNexusConnectorOperatorOutputWithContext(ctx context.Context) FlowInforNexusConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowInforNexusConnectorOperatorOutput)
}

func (e FlowInforNexusConnectorOperator) ToFlowInforNexusConnectorOperatorPtrOutput() FlowInforNexusConnectorOperatorPtrOutput {
	return e.ToFlowInforNexusConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowInforNexusConnectorOperator) ToFlowInforNexusConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowInforNexusConnectorOperatorPtrOutput {
	return FlowInforNexusConnectorOperator(e).ToFlowInforNexusConnectorOperatorOutputWithContext(ctx).ToFlowInforNexusConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowInforNexusConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowInforNexusConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowInforNexusConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowInforNexusConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowInforNexusConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowInforNexusConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowInforNexusConnectorOperator)(nil)).Elem()
}

func (o FlowInforNexusConnectorOperatorOutput) ToFlowInforNexusConnectorOperatorOutput() FlowInforNexusConnectorOperatorOutput {
	return o
}

func (o FlowInforNexusConnectorOperatorOutput) ToFlowInforNexusConnectorOperatorOutputWithContext(ctx context.Context) FlowInforNexusConnectorOperatorOutput {
	return o
}

func (o FlowInforNexusConnectorOperatorOutput) ToFlowInforNexusConnectorOperatorPtrOutput() FlowInforNexusConnectorOperatorPtrOutput {
	return o.ToFlowInforNexusConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowInforNexusConnectorOperatorOutput) ToFlowInforNexusConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowInforNexusConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowInforNexusConnectorOperator) *FlowInforNexusConnectorOperator {
		return &v
	}).(FlowInforNexusConnectorOperatorPtrOutput)
}

func (o FlowInforNexusConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowInforNexusConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowInforNexusConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowInforNexusConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowInforNexusConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowInforNexusConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowInforNexusConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowInforNexusConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowInforNexusConnectorOperator)(nil)).Elem()
}

func (o FlowInforNexusConnectorOperatorPtrOutput) ToFlowInforNexusConnectorOperatorPtrOutput() FlowInforNexusConnectorOperatorPtrOutput {
	return o
}

func (o FlowInforNexusConnectorOperatorPtrOutput) ToFlowInforNexusConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowInforNexusConnectorOperatorPtrOutput {
	return o
}

func (o FlowInforNexusConnectorOperatorPtrOutput) Elem() FlowInforNexusConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowInforNexusConnectorOperator) FlowInforNexusConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowInforNexusConnectorOperator
		return ret
	}).(FlowInforNexusConnectorOperatorOutput)
}

func (o FlowInforNexusConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowInforNexusConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowInforNexusConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowInforNexusConnectorOperatorInput is an input type that accepts FlowInforNexusConnectorOperatorArgs and FlowInforNexusConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowInforNexusConnectorOperatorInput` via:
//
//          FlowInforNexusConnectorOperatorArgs{...}
type FlowInforNexusConnectorOperatorInput interface {
	pulumi.Input

	ToFlowInforNexusConnectorOperatorOutput() FlowInforNexusConnectorOperatorOutput
	ToFlowInforNexusConnectorOperatorOutputWithContext(context.Context) FlowInforNexusConnectorOperatorOutput
}

var flowInforNexusConnectorOperatorPtrType = reflect.TypeOf((**FlowInforNexusConnectorOperator)(nil)).Elem()

type FlowInforNexusConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowInforNexusConnectorOperatorPtrOutput() FlowInforNexusConnectorOperatorPtrOutput
	ToFlowInforNexusConnectorOperatorPtrOutputWithContext(context.Context) FlowInforNexusConnectorOperatorPtrOutput
}

type flowInforNexusConnectorOperatorPtr string

func FlowInforNexusConnectorOperatorPtr(v string) FlowInforNexusConnectorOperatorPtrInput {
	return (*flowInforNexusConnectorOperatorPtr)(&v)
}

func (*flowInforNexusConnectorOperatorPtr) ElementType() reflect.Type {
	return flowInforNexusConnectorOperatorPtrType
}

func (in *flowInforNexusConnectorOperatorPtr) ToFlowInforNexusConnectorOperatorPtrOutput() FlowInforNexusConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowInforNexusConnectorOperatorPtrOutput)
}

func (in *flowInforNexusConnectorOperatorPtr) ToFlowInforNexusConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowInforNexusConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowInforNexusConnectorOperatorPtrOutput)
}

type FlowMarketoConnectorOperator string

const (
	FlowMarketoConnectorOperatorProjection          = FlowMarketoConnectorOperator("PROJECTION")
	FlowMarketoConnectorOperatorLessThan            = FlowMarketoConnectorOperator("LESS_THAN")
	FlowMarketoConnectorOperatorGreaterThan         = FlowMarketoConnectorOperator("GREATER_THAN")
	FlowMarketoConnectorOperatorBetween             = FlowMarketoConnectorOperator("BETWEEN")
	FlowMarketoConnectorOperatorAddition            = FlowMarketoConnectorOperator("ADDITION")
	FlowMarketoConnectorOperatorMultiplication      = FlowMarketoConnectorOperator("MULTIPLICATION")
	FlowMarketoConnectorOperatorDivision            = FlowMarketoConnectorOperator("DIVISION")
	FlowMarketoConnectorOperatorSubtraction         = FlowMarketoConnectorOperator("SUBTRACTION")
	FlowMarketoConnectorOperatorMaskAll             = FlowMarketoConnectorOperator("MASK_ALL")
	FlowMarketoConnectorOperatorMaskFirstN          = FlowMarketoConnectorOperator("MASK_FIRST_N")
	FlowMarketoConnectorOperatorMaskLastN           = FlowMarketoConnectorOperator("MASK_LAST_N")
	FlowMarketoConnectorOperatorValidateNonNull     = FlowMarketoConnectorOperator("VALIDATE_NON_NULL")
	FlowMarketoConnectorOperatorValidateNonZero     = FlowMarketoConnectorOperator("VALIDATE_NON_ZERO")
	FlowMarketoConnectorOperatorValidateNonNegative = FlowMarketoConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowMarketoConnectorOperatorValidateNumeric     = FlowMarketoConnectorOperator("VALIDATE_NUMERIC")
	FlowMarketoConnectorOperatorNoOp                = FlowMarketoConnectorOperator("NO_OP")
)

func (FlowMarketoConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMarketoConnectorOperator)(nil)).Elem()
}

func (e FlowMarketoConnectorOperator) ToFlowMarketoConnectorOperatorOutput() FlowMarketoConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowMarketoConnectorOperatorOutput)
}

func (e FlowMarketoConnectorOperator) ToFlowMarketoConnectorOperatorOutputWithContext(ctx context.Context) FlowMarketoConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowMarketoConnectorOperatorOutput)
}

func (e FlowMarketoConnectorOperator) ToFlowMarketoConnectorOperatorPtrOutput() FlowMarketoConnectorOperatorPtrOutput {
	return e.ToFlowMarketoConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowMarketoConnectorOperator) ToFlowMarketoConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowMarketoConnectorOperatorPtrOutput {
	return FlowMarketoConnectorOperator(e).ToFlowMarketoConnectorOperatorOutputWithContext(ctx).ToFlowMarketoConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowMarketoConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowMarketoConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowMarketoConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowMarketoConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowMarketoConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowMarketoConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMarketoConnectorOperator)(nil)).Elem()
}

func (o FlowMarketoConnectorOperatorOutput) ToFlowMarketoConnectorOperatorOutput() FlowMarketoConnectorOperatorOutput {
	return o
}

func (o FlowMarketoConnectorOperatorOutput) ToFlowMarketoConnectorOperatorOutputWithContext(ctx context.Context) FlowMarketoConnectorOperatorOutput {
	return o
}

func (o FlowMarketoConnectorOperatorOutput) ToFlowMarketoConnectorOperatorPtrOutput() FlowMarketoConnectorOperatorPtrOutput {
	return o.ToFlowMarketoConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowMarketoConnectorOperatorOutput) ToFlowMarketoConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowMarketoConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowMarketoConnectorOperator) *FlowMarketoConnectorOperator {
		return &v
	}).(FlowMarketoConnectorOperatorPtrOutput)
}

func (o FlowMarketoConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowMarketoConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowMarketoConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowMarketoConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowMarketoConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowMarketoConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowMarketoConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowMarketoConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowMarketoConnectorOperator)(nil)).Elem()
}

func (o FlowMarketoConnectorOperatorPtrOutput) ToFlowMarketoConnectorOperatorPtrOutput() FlowMarketoConnectorOperatorPtrOutput {
	return o
}

func (o FlowMarketoConnectorOperatorPtrOutput) ToFlowMarketoConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowMarketoConnectorOperatorPtrOutput {
	return o
}

func (o FlowMarketoConnectorOperatorPtrOutput) Elem() FlowMarketoConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowMarketoConnectorOperator) FlowMarketoConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowMarketoConnectorOperator
		return ret
	}).(FlowMarketoConnectorOperatorOutput)
}

func (o FlowMarketoConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowMarketoConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowMarketoConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowMarketoConnectorOperatorInput is an input type that accepts FlowMarketoConnectorOperatorArgs and FlowMarketoConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowMarketoConnectorOperatorInput` via:
//
//          FlowMarketoConnectorOperatorArgs{...}
type FlowMarketoConnectorOperatorInput interface {
	pulumi.Input

	ToFlowMarketoConnectorOperatorOutput() FlowMarketoConnectorOperatorOutput
	ToFlowMarketoConnectorOperatorOutputWithContext(context.Context) FlowMarketoConnectorOperatorOutput
}

var flowMarketoConnectorOperatorPtrType = reflect.TypeOf((**FlowMarketoConnectorOperator)(nil)).Elem()

type FlowMarketoConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowMarketoConnectorOperatorPtrOutput() FlowMarketoConnectorOperatorPtrOutput
	ToFlowMarketoConnectorOperatorPtrOutputWithContext(context.Context) FlowMarketoConnectorOperatorPtrOutput
}

type flowMarketoConnectorOperatorPtr string

func FlowMarketoConnectorOperatorPtr(v string) FlowMarketoConnectorOperatorPtrInput {
	return (*flowMarketoConnectorOperatorPtr)(&v)
}

func (*flowMarketoConnectorOperatorPtr) ElementType() reflect.Type {
	return flowMarketoConnectorOperatorPtrType
}

func (in *flowMarketoConnectorOperatorPtr) ToFlowMarketoConnectorOperatorPtrOutput() FlowMarketoConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowMarketoConnectorOperatorPtrOutput)
}

func (in *flowMarketoConnectorOperatorPtr) ToFlowMarketoConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowMarketoConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowMarketoConnectorOperatorPtrOutput)
}

type FlowOperatorPropertiesKeys string

const (
	FlowOperatorPropertiesKeysValue                    = FlowOperatorPropertiesKeys("VALUE")
	FlowOperatorPropertiesKeysValues                   = FlowOperatorPropertiesKeys("VALUES")
	FlowOperatorPropertiesKeysDataType                 = FlowOperatorPropertiesKeys("DATA_TYPE")
	FlowOperatorPropertiesKeysUpperBound               = FlowOperatorPropertiesKeys("UPPER_BOUND")
	FlowOperatorPropertiesKeysLowerBound               = FlowOperatorPropertiesKeys("LOWER_BOUND")
	FlowOperatorPropertiesKeysSourceDataType           = FlowOperatorPropertiesKeys("SOURCE_DATA_TYPE")
	FlowOperatorPropertiesKeysDestinationDataType      = FlowOperatorPropertiesKeys("DESTINATION_DATA_TYPE")
	FlowOperatorPropertiesKeysValidationAction         = FlowOperatorPropertiesKeys("VALIDATION_ACTION")
	FlowOperatorPropertiesKeysMaskValue                = FlowOperatorPropertiesKeys("MASK_VALUE")
	FlowOperatorPropertiesKeysMaskLength               = FlowOperatorPropertiesKeys("MASK_LENGTH")
	FlowOperatorPropertiesKeysTruncateLength           = FlowOperatorPropertiesKeys("TRUNCATE_LENGTH")
	FlowOperatorPropertiesKeysMathOperationFieldsOrder = FlowOperatorPropertiesKeys("MATH_OPERATION_FIELDS_ORDER")
	FlowOperatorPropertiesKeysConcatFormat             = FlowOperatorPropertiesKeys("CONCAT_FORMAT")
	FlowOperatorPropertiesKeysSubfieldCategoryMap      = FlowOperatorPropertiesKeys("SUBFIELD_CATEGORY_MAP")
	FlowOperatorPropertiesKeysExcludeSourceFieldsList  = FlowOperatorPropertiesKeys("EXCLUDE_SOURCE_FIELDS_LIST")
)

func (FlowOperatorPropertiesKeys) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOperatorPropertiesKeys)(nil)).Elem()
}

func (e FlowOperatorPropertiesKeys) ToFlowOperatorPropertiesKeysOutput() FlowOperatorPropertiesKeysOutput {
	return pulumi.ToOutput(e).(FlowOperatorPropertiesKeysOutput)
}

func (e FlowOperatorPropertiesKeys) ToFlowOperatorPropertiesKeysOutputWithContext(ctx context.Context) FlowOperatorPropertiesKeysOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOperatorPropertiesKeysOutput)
}

func (e FlowOperatorPropertiesKeys) ToFlowOperatorPropertiesKeysPtrOutput() FlowOperatorPropertiesKeysPtrOutput {
	return e.ToFlowOperatorPropertiesKeysPtrOutputWithContext(context.Background())
}

func (e FlowOperatorPropertiesKeys) ToFlowOperatorPropertiesKeysPtrOutputWithContext(ctx context.Context) FlowOperatorPropertiesKeysPtrOutput {
	return FlowOperatorPropertiesKeys(e).ToFlowOperatorPropertiesKeysOutputWithContext(ctx).ToFlowOperatorPropertiesKeysPtrOutputWithContext(ctx)
}

func (e FlowOperatorPropertiesKeys) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOperatorPropertiesKeys) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOperatorPropertiesKeys) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOperatorPropertiesKeys) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOperatorPropertiesKeysOutput struct{ *pulumi.OutputState }

func (FlowOperatorPropertiesKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOperatorPropertiesKeys)(nil)).Elem()
}

func (o FlowOperatorPropertiesKeysOutput) ToFlowOperatorPropertiesKeysOutput() FlowOperatorPropertiesKeysOutput {
	return o
}

func (o FlowOperatorPropertiesKeysOutput) ToFlowOperatorPropertiesKeysOutputWithContext(ctx context.Context) FlowOperatorPropertiesKeysOutput {
	return o
}

func (o FlowOperatorPropertiesKeysOutput) ToFlowOperatorPropertiesKeysPtrOutput() FlowOperatorPropertiesKeysPtrOutput {
	return o.ToFlowOperatorPropertiesKeysPtrOutputWithContext(context.Background())
}

func (o FlowOperatorPropertiesKeysOutput) ToFlowOperatorPropertiesKeysPtrOutputWithContext(ctx context.Context) FlowOperatorPropertiesKeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOperatorPropertiesKeys) *FlowOperatorPropertiesKeys {
		return &v
	}).(FlowOperatorPropertiesKeysPtrOutput)
}

func (o FlowOperatorPropertiesKeysOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOperatorPropertiesKeysOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOperatorPropertiesKeys) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOperatorPropertiesKeysOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOperatorPropertiesKeysOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOperatorPropertiesKeys) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOperatorPropertiesKeysPtrOutput struct{ *pulumi.OutputState }

func (FlowOperatorPropertiesKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOperatorPropertiesKeys)(nil)).Elem()
}

func (o FlowOperatorPropertiesKeysPtrOutput) ToFlowOperatorPropertiesKeysPtrOutput() FlowOperatorPropertiesKeysPtrOutput {
	return o
}

func (o FlowOperatorPropertiesKeysPtrOutput) ToFlowOperatorPropertiesKeysPtrOutputWithContext(ctx context.Context) FlowOperatorPropertiesKeysPtrOutput {
	return o
}

func (o FlowOperatorPropertiesKeysPtrOutput) Elem() FlowOperatorPropertiesKeysOutput {
	return o.ApplyT(func(v *FlowOperatorPropertiesKeys) FlowOperatorPropertiesKeys {
		if v != nil {
			return *v
		}
		var ret FlowOperatorPropertiesKeys
		return ret
	}).(FlowOperatorPropertiesKeysOutput)
}

func (o FlowOperatorPropertiesKeysPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOperatorPropertiesKeysPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOperatorPropertiesKeys) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOperatorPropertiesKeysInput is an input type that accepts FlowOperatorPropertiesKeysArgs and FlowOperatorPropertiesKeysOutput values.
// You can construct a concrete instance of `FlowOperatorPropertiesKeysInput` via:
//
//          FlowOperatorPropertiesKeysArgs{...}
type FlowOperatorPropertiesKeysInput interface {
	pulumi.Input

	ToFlowOperatorPropertiesKeysOutput() FlowOperatorPropertiesKeysOutput
	ToFlowOperatorPropertiesKeysOutputWithContext(context.Context) FlowOperatorPropertiesKeysOutput
}

var flowOperatorPropertiesKeysPtrType = reflect.TypeOf((**FlowOperatorPropertiesKeys)(nil)).Elem()

type FlowOperatorPropertiesKeysPtrInput interface {
	pulumi.Input

	ToFlowOperatorPropertiesKeysPtrOutput() FlowOperatorPropertiesKeysPtrOutput
	ToFlowOperatorPropertiesKeysPtrOutputWithContext(context.Context) FlowOperatorPropertiesKeysPtrOutput
}

type flowOperatorPropertiesKeysPtr string

func FlowOperatorPropertiesKeysPtr(v string) FlowOperatorPropertiesKeysPtrInput {
	return (*flowOperatorPropertiesKeysPtr)(&v)
}

func (*flowOperatorPropertiesKeysPtr) ElementType() reflect.Type {
	return flowOperatorPropertiesKeysPtrType
}

func (in *flowOperatorPropertiesKeysPtr) ToFlowOperatorPropertiesKeysPtrOutput() FlowOperatorPropertiesKeysPtrOutput {
	return pulumi.ToOutput(in).(FlowOperatorPropertiesKeysPtrOutput)
}

func (in *flowOperatorPropertiesKeysPtr) ToFlowOperatorPropertiesKeysPtrOutputWithContext(ctx context.Context) FlowOperatorPropertiesKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOperatorPropertiesKeysPtrOutput)
}

type FlowPrefixFormat string

const (
	FlowPrefixFormatYear   = FlowPrefixFormat("YEAR")
	FlowPrefixFormatMonth  = FlowPrefixFormat("MONTH")
	FlowPrefixFormatDay    = FlowPrefixFormat("DAY")
	FlowPrefixFormatHour   = FlowPrefixFormat("HOUR")
	FlowPrefixFormatMinute = FlowPrefixFormat("MINUTE")
)

func (FlowPrefixFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowPrefixFormat)(nil)).Elem()
}

func (e FlowPrefixFormat) ToFlowPrefixFormatOutput() FlowPrefixFormatOutput {
	return pulumi.ToOutput(e).(FlowPrefixFormatOutput)
}

func (e FlowPrefixFormat) ToFlowPrefixFormatOutputWithContext(ctx context.Context) FlowPrefixFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowPrefixFormatOutput)
}

func (e FlowPrefixFormat) ToFlowPrefixFormatPtrOutput() FlowPrefixFormatPtrOutput {
	return e.ToFlowPrefixFormatPtrOutputWithContext(context.Background())
}

func (e FlowPrefixFormat) ToFlowPrefixFormatPtrOutputWithContext(ctx context.Context) FlowPrefixFormatPtrOutput {
	return FlowPrefixFormat(e).ToFlowPrefixFormatOutputWithContext(ctx).ToFlowPrefixFormatPtrOutputWithContext(ctx)
}

func (e FlowPrefixFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowPrefixFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowPrefixFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowPrefixFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowPrefixFormatOutput struct{ *pulumi.OutputState }

func (FlowPrefixFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowPrefixFormat)(nil)).Elem()
}

func (o FlowPrefixFormatOutput) ToFlowPrefixFormatOutput() FlowPrefixFormatOutput {
	return o
}

func (o FlowPrefixFormatOutput) ToFlowPrefixFormatOutputWithContext(ctx context.Context) FlowPrefixFormatOutput {
	return o
}

func (o FlowPrefixFormatOutput) ToFlowPrefixFormatPtrOutput() FlowPrefixFormatPtrOutput {
	return o.ToFlowPrefixFormatPtrOutputWithContext(context.Background())
}

func (o FlowPrefixFormatOutput) ToFlowPrefixFormatPtrOutputWithContext(ctx context.Context) FlowPrefixFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowPrefixFormat) *FlowPrefixFormat {
		return &v
	}).(FlowPrefixFormatPtrOutput)
}

func (o FlowPrefixFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowPrefixFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowPrefixFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowPrefixFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowPrefixFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowPrefixFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowPrefixFormatPtrOutput struct{ *pulumi.OutputState }

func (FlowPrefixFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowPrefixFormat)(nil)).Elem()
}

func (o FlowPrefixFormatPtrOutput) ToFlowPrefixFormatPtrOutput() FlowPrefixFormatPtrOutput {
	return o
}

func (o FlowPrefixFormatPtrOutput) ToFlowPrefixFormatPtrOutputWithContext(ctx context.Context) FlowPrefixFormatPtrOutput {
	return o
}

func (o FlowPrefixFormatPtrOutput) Elem() FlowPrefixFormatOutput {
	return o.ApplyT(func(v *FlowPrefixFormat) FlowPrefixFormat {
		if v != nil {
			return *v
		}
		var ret FlowPrefixFormat
		return ret
	}).(FlowPrefixFormatOutput)
}

func (o FlowPrefixFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowPrefixFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowPrefixFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowPrefixFormatInput is an input type that accepts FlowPrefixFormatArgs and FlowPrefixFormatOutput values.
// You can construct a concrete instance of `FlowPrefixFormatInput` via:
//
//          FlowPrefixFormatArgs{...}
type FlowPrefixFormatInput interface {
	pulumi.Input

	ToFlowPrefixFormatOutput() FlowPrefixFormatOutput
	ToFlowPrefixFormatOutputWithContext(context.Context) FlowPrefixFormatOutput
}

var flowPrefixFormatPtrType = reflect.TypeOf((**FlowPrefixFormat)(nil)).Elem()

type FlowPrefixFormatPtrInput interface {
	pulumi.Input

	ToFlowPrefixFormatPtrOutput() FlowPrefixFormatPtrOutput
	ToFlowPrefixFormatPtrOutputWithContext(context.Context) FlowPrefixFormatPtrOutput
}

type flowPrefixFormatPtr string

func FlowPrefixFormatPtr(v string) FlowPrefixFormatPtrInput {
	return (*flowPrefixFormatPtr)(&v)
}

func (*flowPrefixFormatPtr) ElementType() reflect.Type {
	return flowPrefixFormatPtrType
}

func (in *flowPrefixFormatPtr) ToFlowPrefixFormatPtrOutput() FlowPrefixFormatPtrOutput {
	return pulumi.ToOutput(in).(FlowPrefixFormatPtrOutput)
}

func (in *flowPrefixFormatPtr) ToFlowPrefixFormatPtrOutputWithContext(ctx context.Context) FlowPrefixFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowPrefixFormatPtrOutput)
}

type FlowPrefixType string

const (
	FlowPrefixTypeFilename        = FlowPrefixType("FILENAME")
	FlowPrefixTypePath            = FlowPrefixType("PATH")
	FlowPrefixTypePathAndFilename = FlowPrefixType("PATH_AND_FILENAME")
)

func (FlowPrefixType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowPrefixType)(nil)).Elem()
}

func (e FlowPrefixType) ToFlowPrefixTypeOutput() FlowPrefixTypeOutput {
	return pulumi.ToOutput(e).(FlowPrefixTypeOutput)
}

func (e FlowPrefixType) ToFlowPrefixTypeOutputWithContext(ctx context.Context) FlowPrefixTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowPrefixTypeOutput)
}

func (e FlowPrefixType) ToFlowPrefixTypePtrOutput() FlowPrefixTypePtrOutput {
	return e.ToFlowPrefixTypePtrOutputWithContext(context.Background())
}

func (e FlowPrefixType) ToFlowPrefixTypePtrOutputWithContext(ctx context.Context) FlowPrefixTypePtrOutput {
	return FlowPrefixType(e).ToFlowPrefixTypeOutputWithContext(ctx).ToFlowPrefixTypePtrOutputWithContext(ctx)
}

func (e FlowPrefixType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowPrefixType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowPrefixType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowPrefixType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowPrefixTypeOutput struct{ *pulumi.OutputState }

func (FlowPrefixTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowPrefixType)(nil)).Elem()
}

func (o FlowPrefixTypeOutput) ToFlowPrefixTypeOutput() FlowPrefixTypeOutput {
	return o
}

func (o FlowPrefixTypeOutput) ToFlowPrefixTypeOutputWithContext(ctx context.Context) FlowPrefixTypeOutput {
	return o
}

func (o FlowPrefixTypeOutput) ToFlowPrefixTypePtrOutput() FlowPrefixTypePtrOutput {
	return o.ToFlowPrefixTypePtrOutputWithContext(context.Background())
}

func (o FlowPrefixTypeOutput) ToFlowPrefixTypePtrOutputWithContext(ctx context.Context) FlowPrefixTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowPrefixType) *FlowPrefixType {
		return &v
	}).(FlowPrefixTypePtrOutput)
}

func (o FlowPrefixTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowPrefixTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowPrefixType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowPrefixTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowPrefixTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowPrefixType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowPrefixTypePtrOutput struct{ *pulumi.OutputState }

func (FlowPrefixTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowPrefixType)(nil)).Elem()
}

func (o FlowPrefixTypePtrOutput) ToFlowPrefixTypePtrOutput() FlowPrefixTypePtrOutput {
	return o
}

func (o FlowPrefixTypePtrOutput) ToFlowPrefixTypePtrOutputWithContext(ctx context.Context) FlowPrefixTypePtrOutput {
	return o
}

func (o FlowPrefixTypePtrOutput) Elem() FlowPrefixTypeOutput {
	return o.ApplyT(func(v *FlowPrefixType) FlowPrefixType {
		if v != nil {
			return *v
		}
		var ret FlowPrefixType
		return ret
	}).(FlowPrefixTypeOutput)
}

func (o FlowPrefixTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowPrefixTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowPrefixType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowPrefixTypeInput is an input type that accepts FlowPrefixTypeArgs and FlowPrefixTypeOutput values.
// You can construct a concrete instance of `FlowPrefixTypeInput` via:
//
//          FlowPrefixTypeArgs{...}
type FlowPrefixTypeInput interface {
	pulumi.Input

	ToFlowPrefixTypeOutput() FlowPrefixTypeOutput
	ToFlowPrefixTypeOutputWithContext(context.Context) FlowPrefixTypeOutput
}

var flowPrefixTypePtrType = reflect.TypeOf((**FlowPrefixType)(nil)).Elem()

type FlowPrefixTypePtrInput interface {
	pulumi.Input

	ToFlowPrefixTypePtrOutput() FlowPrefixTypePtrOutput
	ToFlowPrefixTypePtrOutputWithContext(context.Context) FlowPrefixTypePtrOutput
}

type flowPrefixTypePtr string

func FlowPrefixTypePtr(v string) FlowPrefixTypePtrInput {
	return (*flowPrefixTypePtr)(&v)
}

func (*flowPrefixTypePtr) ElementType() reflect.Type {
	return flowPrefixTypePtrType
}

func (in *flowPrefixTypePtr) ToFlowPrefixTypePtrOutput() FlowPrefixTypePtrOutput {
	return pulumi.ToOutput(in).(FlowPrefixTypePtrOutput)
}

func (in *flowPrefixTypePtr) ToFlowPrefixTypePtrOutputWithContext(ctx context.Context) FlowPrefixTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowPrefixTypePtrOutput)
}

type FlowS3ConnectorOperator string

const (
	FlowS3ConnectorOperatorProjection           = FlowS3ConnectorOperator("PROJECTION")
	FlowS3ConnectorOperatorLessThan             = FlowS3ConnectorOperator("LESS_THAN")
	FlowS3ConnectorOperatorGreaterThan          = FlowS3ConnectorOperator("GREATER_THAN")
	FlowS3ConnectorOperatorBetween              = FlowS3ConnectorOperator("BETWEEN")
	FlowS3ConnectorOperatorLessThanOrEqualTo    = FlowS3ConnectorOperator("LESS_THAN_OR_EQUAL_TO")
	FlowS3ConnectorOperatorGreaterThanOrEqualTo = FlowS3ConnectorOperator("GREATER_THAN_OR_EQUAL_TO")
	FlowS3ConnectorOperatorEqualTo              = FlowS3ConnectorOperator("EQUAL_TO")
	FlowS3ConnectorOperatorNotEqualTo           = FlowS3ConnectorOperator("NOT_EQUAL_TO")
	FlowS3ConnectorOperatorAddition             = FlowS3ConnectorOperator("ADDITION")
	FlowS3ConnectorOperatorMultiplication       = FlowS3ConnectorOperator("MULTIPLICATION")
	FlowS3ConnectorOperatorDivision             = FlowS3ConnectorOperator("DIVISION")
	FlowS3ConnectorOperatorSubtraction          = FlowS3ConnectorOperator("SUBTRACTION")
	FlowS3ConnectorOperatorMaskAll              = FlowS3ConnectorOperator("MASK_ALL")
	FlowS3ConnectorOperatorMaskFirstN           = FlowS3ConnectorOperator("MASK_FIRST_N")
	FlowS3ConnectorOperatorMaskLastN            = FlowS3ConnectorOperator("MASK_LAST_N")
	FlowS3ConnectorOperatorValidateNonNull      = FlowS3ConnectorOperator("VALIDATE_NON_NULL")
	FlowS3ConnectorOperatorValidateNonZero      = FlowS3ConnectorOperator("VALIDATE_NON_ZERO")
	FlowS3ConnectorOperatorValidateNonNegative  = FlowS3ConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowS3ConnectorOperatorValidateNumeric      = FlowS3ConnectorOperator("VALIDATE_NUMERIC")
	FlowS3ConnectorOperatorNoOp                 = FlowS3ConnectorOperator("NO_OP")
)

func (FlowS3ConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowS3ConnectorOperator)(nil)).Elem()
}

func (e FlowS3ConnectorOperator) ToFlowS3ConnectorOperatorOutput() FlowS3ConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowS3ConnectorOperatorOutput)
}

func (e FlowS3ConnectorOperator) ToFlowS3ConnectorOperatorOutputWithContext(ctx context.Context) FlowS3ConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowS3ConnectorOperatorOutput)
}

func (e FlowS3ConnectorOperator) ToFlowS3ConnectorOperatorPtrOutput() FlowS3ConnectorOperatorPtrOutput {
	return e.ToFlowS3ConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowS3ConnectorOperator) ToFlowS3ConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowS3ConnectorOperatorPtrOutput {
	return FlowS3ConnectorOperator(e).ToFlowS3ConnectorOperatorOutputWithContext(ctx).ToFlowS3ConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowS3ConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowS3ConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowS3ConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowS3ConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowS3ConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowS3ConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowS3ConnectorOperator)(nil)).Elem()
}

func (o FlowS3ConnectorOperatorOutput) ToFlowS3ConnectorOperatorOutput() FlowS3ConnectorOperatorOutput {
	return o
}

func (o FlowS3ConnectorOperatorOutput) ToFlowS3ConnectorOperatorOutputWithContext(ctx context.Context) FlowS3ConnectorOperatorOutput {
	return o
}

func (o FlowS3ConnectorOperatorOutput) ToFlowS3ConnectorOperatorPtrOutput() FlowS3ConnectorOperatorPtrOutput {
	return o.ToFlowS3ConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowS3ConnectorOperatorOutput) ToFlowS3ConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowS3ConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowS3ConnectorOperator) *FlowS3ConnectorOperator {
		return &v
	}).(FlowS3ConnectorOperatorPtrOutput)
}

func (o FlowS3ConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowS3ConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowS3ConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowS3ConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowS3ConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowS3ConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowS3ConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowS3ConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowS3ConnectorOperator)(nil)).Elem()
}

func (o FlowS3ConnectorOperatorPtrOutput) ToFlowS3ConnectorOperatorPtrOutput() FlowS3ConnectorOperatorPtrOutput {
	return o
}

func (o FlowS3ConnectorOperatorPtrOutput) ToFlowS3ConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowS3ConnectorOperatorPtrOutput {
	return o
}

func (o FlowS3ConnectorOperatorPtrOutput) Elem() FlowS3ConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowS3ConnectorOperator) FlowS3ConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowS3ConnectorOperator
		return ret
	}).(FlowS3ConnectorOperatorOutput)
}

func (o FlowS3ConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowS3ConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowS3ConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowS3ConnectorOperatorInput is an input type that accepts FlowS3ConnectorOperatorArgs and FlowS3ConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowS3ConnectorOperatorInput` via:
//
//          FlowS3ConnectorOperatorArgs{...}
type FlowS3ConnectorOperatorInput interface {
	pulumi.Input

	ToFlowS3ConnectorOperatorOutput() FlowS3ConnectorOperatorOutput
	ToFlowS3ConnectorOperatorOutputWithContext(context.Context) FlowS3ConnectorOperatorOutput
}

var flowS3ConnectorOperatorPtrType = reflect.TypeOf((**FlowS3ConnectorOperator)(nil)).Elem()

type FlowS3ConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowS3ConnectorOperatorPtrOutput() FlowS3ConnectorOperatorPtrOutput
	ToFlowS3ConnectorOperatorPtrOutputWithContext(context.Context) FlowS3ConnectorOperatorPtrOutput
}

type flowS3ConnectorOperatorPtr string

func FlowS3ConnectorOperatorPtr(v string) FlowS3ConnectorOperatorPtrInput {
	return (*flowS3ConnectorOperatorPtr)(&v)
}

func (*flowS3ConnectorOperatorPtr) ElementType() reflect.Type {
	return flowS3ConnectorOperatorPtrType
}

func (in *flowS3ConnectorOperatorPtr) ToFlowS3ConnectorOperatorPtrOutput() FlowS3ConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowS3ConnectorOperatorPtrOutput)
}

func (in *flowS3ConnectorOperatorPtr) ToFlowS3ConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowS3ConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowS3ConnectorOperatorPtrOutput)
}

type FlowS3InputFormatConfigS3InputFileType string

const (
	FlowS3InputFormatConfigS3InputFileTypeCsv  = FlowS3InputFormatConfigS3InputFileType("CSV")
	FlowS3InputFormatConfigS3InputFileTypeJson = FlowS3InputFormatConfigS3InputFileType("JSON")
)

func (FlowS3InputFormatConfigS3InputFileType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowS3InputFormatConfigS3InputFileType)(nil)).Elem()
}

func (e FlowS3InputFormatConfigS3InputFileType) ToFlowS3InputFormatConfigS3InputFileTypeOutput() FlowS3InputFormatConfigS3InputFileTypeOutput {
	return pulumi.ToOutput(e).(FlowS3InputFormatConfigS3InputFileTypeOutput)
}

func (e FlowS3InputFormatConfigS3InputFileType) ToFlowS3InputFormatConfigS3InputFileTypeOutputWithContext(ctx context.Context) FlowS3InputFormatConfigS3InputFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowS3InputFormatConfigS3InputFileTypeOutput)
}

func (e FlowS3InputFormatConfigS3InputFileType) ToFlowS3InputFormatConfigS3InputFileTypePtrOutput() FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return e.ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(context.Background())
}

func (e FlowS3InputFormatConfigS3InputFileType) ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(ctx context.Context) FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return FlowS3InputFormatConfigS3InputFileType(e).ToFlowS3InputFormatConfigS3InputFileTypeOutputWithContext(ctx).ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(ctx)
}

func (e FlowS3InputFormatConfigS3InputFileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowS3InputFormatConfigS3InputFileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowS3InputFormatConfigS3InputFileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowS3InputFormatConfigS3InputFileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowS3InputFormatConfigS3InputFileTypeOutput struct{ *pulumi.OutputState }

func (FlowS3InputFormatConfigS3InputFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowS3InputFormatConfigS3InputFileType)(nil)).Elem()
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToFlowS3InputFormatConfigS3InputFileTypeOutput() FlowS3InputFormatConfigS3InputFileTypeOutput {
	return o
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToFlowS3InputFormatConfigS3InputFileTypeOutputWithContext(ctx context.Context) FlowS3InputFormatConfigS3InputFileTypeOutput {
	return o
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToFlowS3InputFormatConfigS3InputFileTypePtrOutput() FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return o.ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(context.Background())
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(ctx context.Context) FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowS3InputFormatConfigS3InputFileType) *FlowS3InputFormatConfigS3InputFileType {
		return &v
	}).(FlowS3InputFormatConfigS3InputFileTypePtrOutput)
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowS3InputFormatConfigS3InputFileType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowS3InputFormatConfigS3InputFileTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowS3InputFormatConfigS3InputFileType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowS3InputFormatConfigS3InputFileTypePtrOutput struct{ *pulumi.OutputState }

func (FlowS3InputFormatConfigS3InputFileTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowS3InputFormatConfigS3InputFileType)(nil)).Elem()
}

func (o FlowS3InputFormatConfigS3InputFileTypePtrOutput) ToFlowS3InputFormatConfigS3InputFileTypePtrOutput() FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return o
}

func (o FlowS3InputFormatConfigS3InputFileTypePtrOutput) ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(ctx context.Context) FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return o
}

func (o FlowS3InputFormatConfigS3InputFileTypePtrOutput) Elem() FlowS3InputFormatConfigS3InputFileTypeOutput {
	return o.ApplyT(func(v *FlowS3InputFormatConfigS3InputFileType) FlowS3InputFormatConfigS3InputFileType {
		if v != nil {
			return *v
		}
		var ret FlowS3InputFormatConfigS3InputFileType
		return ret
	}).(FlowS3InputFormatConfigS3InputFileTypeOutput)
}

func (o FlowS3InputFormatConfigS3InputFileTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowS3InputFormatConfigS3InputFileTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowS3InputFormatConfigS3InputFileType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowS3InputFormatConfigS3InputFileTypeInput is an input type that accepts FlowS3InputFormatConfigS3InputFileTypeArgs and FlowS3InputFormatConfigS3InputFileTypeOutput values.
// You can construct a concrete instance of `FlowS3InputFormatConfigS3InputFileTypeInput` via:
//
//          FlowS3InputFormatConfigS3InputFileTypeArgs{...}
type FlowS3InputFormatConfigS3InputFileTypeInput interface {
	pulumi.Input

	ToFlowS3InputFormatConfigS3InputFileTypeOutput() FlowS3InputFormatConfigS3InputFileTypeOutput
	ToFlowS3InputFormatConfigS3InputFileTypeOutputWithContext(context.Context) FlowS3InputFormatConfigS3InputFileTypeOutput
}

var flowS3InputFormatConfigS3InputFileTypePtrType = reflect.TypeOf((**FlowS3InputFormatConfigS3InputFileType)(nil)).Elem()

type FlowS3InputFormatConfigS3InputFileTypePtrInput interface {
	pulumi.Input

	ToFlowS3InputFormatConfigS3InputFileTypePtrOutput() FlowS3InputFormatConfigS3InputFileTypePtrOutput
	ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(context.Context) FlowS3InputFormatConfigS3InputFileTypePtrOutput
}

type flowS3InputFormatConfigS3InputFileTypePtr string

func FlowS3InputFormatConfigS3InputFileTypePtr(v string) FlowS3InputFormatConfigS3InputFileTypePtrInput {
	return (*flowS3InputFormatConfigS3InputFileTypePtr)(&v)
}

func (*flowS3InputFormatConfigS3InputFileTypePtr) ElementType() reflect.Type {
	return flowS3InputFormatConfigS3InputFileTypePtrType
}

func (in *flowS3InputFormatConfigS3InputFileTypePtr) ToFlowS3InputFormatConfigS3InputFileTypePtrOutput() FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return pulumi.ToOutput(in).(FlowS3InputFormatConfigS3InputFileTypePtrOutput)
}

func (in *flowS3InputFormatConfigS3InputFileTypePtr) ToFlowS3InputFormatConfigS3InputFileTypePtrOutputWithContext(ctx context.Context) FlowS3InputFormatConfigS3InputFileTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowS3InputFormatConfigS3InputFileTypePtrOutput)
}

type FlowSAPODataConnectorOperator string

const (
	FlowSAPODataConnectorOperatorProjection           = FlowSAPODataConnectorOperator("PROJECTION")
	FlowSAPODataConnectorOperatorLessThan             = FlowSAPODataConnectorOperator("LESS_THAN")
	FlowSAPODataConnectorOperatorContains             = FlowSAPODataConnectorOperator("CONTAINS")
	FlowSAPODataConnectorOperatorGreaterThan          = FlowSAPODataConnectorOperator("GREATER_THAN")
	FlowSAPODataConnectorOperatorBetween              = FlowSAPODataConnectorOperator("BETWEEN")
	FlowSAPODataConnectorOperatorLessThanOrEqualTo    = FlowSAPODataConnectorOperator("LESS_THAN_OR_EQUAL_TO")
	FlowSAPODataConnectorOperatorGreaterThanOrEqualTo = FlowSAPODataConnectorOperator("GREATER_THAN_OR_EQUAL_TO")
	FlowSAPODataConnectorOperatorEqualTo              = FlowSAPODataConnectorOperator("EQUAL_TO")
	FlowSAPODataConnectorOperatorNotEqualTo           = FlowSAPODataConnectorOperator("NOT_EQUAL_TO")
	FlowSAPODataConnectorOperatorAddition             = FlowSAPODataConnectorOperator("ADDITION")
	FlowSAPODataConnectorOperatorMultiplication       = FlowSAPODataConnectorOperator("MULTIPLICATION")
	FlowSAPODataConnectorOperatorDivision             = FlowSAPODataConnectorOperator("DIVISION")
	FlowSAPODataConnectorOperatorSubtraction          = FlowSAPODataConnectorOperator("SUBTRACTION")
	FlowSAPODataConnectorOperatorMaskAll              = FlowSAPODataConnectorOperator("MASK_ALL")
	FlowSAPODataConnectorOperatorMaskFirstN           = FlowSAPODataConnectorOperator("MASK_FIRST_N")
	FlowSAPODataConnectorOperatorMaskLastN            = FlowSAPODataConnectorOperator("MASK_LAST_N")
	FlowSAPODataConnectorOperatorValidateNonNull      = FlowSAPODataConnectorOperator("VALIDATE_NON_NULL")
	FlowSAPODataConnectorOperatorValidateNonZero      = FlowSAPODataConnectorOperator("VALIDATE_NON_ZERO")
	FlowSAPODataConnectorOperatorValidateNonNegative  = FlowSAPODataConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowSAPODataConnectorOperatorValidateNumeric      = FlowSAPODataConnectorOperator("VALIDATE_NUMERIC")
	FlowSAPODataConnectorOperatorNoOp                 = FlowSAPODataConnectorOperator("NO_OP")
)

func (FlowSAPODataConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSAPODataConnectorOperator)(nil)).Elem()
}

func (e FlowSAPODataConnectorOperator) ToFlowSAPODataConnectorOperatorOutput() FlowSAPODataConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowSAPODataConnectorOperatorOutput)
}

func (e FlowSAPODataConnectorOperator) ToFlowSAPODataConnectorOperatorOutputWithContext(ctx context.Context) FlowSAPODataConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSAPODataConnectorOperatorOutput)
}

func (e FlowSAPODataConnectorOperator) ToFlowSAPODataConnectorOperatorPtrOutput() FlowSAPODataConnectorOperatorPtrOutput {
	return e.ToFlowSAPODataConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowSAPODataConnectorOperator) ToFlowSAPODataConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSAPODataConnectorOperatorPtrOutput {
	return FlowSAPODataConnectorOperator(e).ToFlowSAPODataConnectorOperatorOutputWithContext(ctx).ToFlowSAPODataConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowSAPODataConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSAPODataConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSAPODataConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSAPODataConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSAPODataConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowSAPODataConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSAPODataConnectorOperator)(nil)).Elem()
}

func (o FlowSAPODataConnectorOperatorOutput) ToFlowSAPODataConnectorOperatorOutput() FlowSAPODataConnectorOperatorOutput {
	return o
}

func (o FlowSAPODataConnectorOperatorOutput) ToFlowSAPODataConnectorOperatorOutputWithContext(ctx context.Context) FlowSAPODataConnectorOperatorOutput {
	return o
}

func (o FlowSAPODataConnectorOperatorOutput) ToFlowSAPODataConnectorOperatorPtrOutput() FlowSAPODataConnectorOperatorPtrOutput {
	return o.ToFlowSAPODataConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowSAPODataConnectorOperatorOutput) ToFlowSAPODataConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSAPODataConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSAPODataConnectorOperator) *FlowSAPODataConnectorOperator {
		return &v
	}).(FlowSAPODataConnectorOperatorPtrOutput)
}

func (o FlowSAPODataConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSAPODataConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSAPODataConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSAPODataConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSAPODataConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSAPODataConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSAPODataConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowSAPODataConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSAPODataConnectorOperator)(nil)).Elem()
}

func (o FlowSAPODataConnectorOperatorPtrOutput) ToFlowSAPODataConnectorOperatorPtrOutput() FlowSAPODataConnectorOperatorPtrOutput {
	return o
}

func (o FlowSAPODataConnectorOperatorPtrOutput) ToFlowSAPODataConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSAPODataConnectorOperatorPtrOutput {
	return o
}

func (o FlowSAPODataConnectorOperatorPtrOutput) Elem() FlowSAPODataConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowSAPODataConnectorOperator) FlowSAPODataConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowSAPODataConnectorOperator
		return ret
	}).(FlowSAPODataConnectorOperatorOutput)
}

func (o FlowSAPODataConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSAPODataConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSAPODataConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSAPODataConnectorOperatorInput is an input type that accepts FlowSAPODataConnectorOperatorArgs and FlowSAPODataConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowSAPODataConnectorOperatorInput` via:
//
//          FlowSAPODataConnectorOperatorArgs{...}
type FlowSAPODataConnectorOperatorInput interface {
	pulumi.Input

	ToFlowSAPODataConnectorOperatorOutput() FlowSAPODataConnectorOperatorOutput
	ToFlowSAPODataConnectorOperatorOutputWithContext(context.Context) FlowSAPODataConnectorOperatorOutput
}

var flowSAPODataConnectorOperatorPtrType = reflect.TypeOf((**FlowSAPODataConnectorOperator)(nil)).Elem()

type FlowSAPODataConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowSAPODataConnectorOperatorPtrOutput() FlowSAPODataConnectorOperatorPtrOutput
	ToFlowSAPODataConnectorOperatorPtrOutputWithContext(context.Context) FlowSAPODataConnectorOperatorPtrOutput
}

type flowSAPODataConnectorOperatorPtr string

func FlowSAPODataConnectorOperatorPtr(v string) FlowSAPODataConnectorOperatorPtrInput {
	return (*flowSAPODataConnectorOperatorPtr)(&v)
}

func (*flowSAPODataConnectorOperatorPtr) ElementType() reflect.Type {
	return flowSAPODataConnectorOperatorPtrType
}

func (in *flowSAPODataConnectorOperatorPtr) ToFlowSAPODataConnectorOperatorPtrOutput() FlowSAPODataConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowSAPODataConnectorOperatorPtrOutput)
}

func (in *flowSAPODataConnectorOperatorPtr) ToFlowSAPODataConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSAPODataConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSAPODataConnectorOperatorPtrOutput)
}

type FlowSalesforceConnectorOperator string

const (
	FlowSalesforceConnectorOperatorProjection           = FlowSalesforceConnectorOperator("PROJECTION")
	FlowSalesforceConnectorOperatorLessThan             = FlowSalesforceConnectorOperator("LESS_THAN")
	FlowSalesforceConnectorOperatorContains             = FlowSalesforceConnectorOperator("CONTAINS")
	FlowSalesforceConnectorOperatorGreaterThan          = FlowSalesforceConnectorOperator("GREATER_THAN")
	FlowSalesforceConnectorOperatorBetween              = FlowSalesforceConnectorOperator("BETWEEN")
	FlowSalesforceConnectorOperatorLessThanOrEqualTo    = FlowSalesforceConnectorOperator("LESS_THAN_OR_EQUAL_TO")
	FlowSalesforceConnectorOperatorGreaterThanOrEqualTo = FlowSalesforceConnectorOperator("GREATER_THAN_OR_EQUAL_TO")
	FlowSalesforceConnectorOperatorEqualTo              = FlowSalesforceConnectorOperator("EQUAL_TO")
	FlowSalesforceConnectorOperatorNotEqualTo           = FlowSalesforceConnectorOperator("NOT_EQUAL_TO")
	FlowSalesforceConnectorOperatorAddition             = FlowSalesforceConnectorOperator("ADDITION")
	FlowSalesforceConnectorOperatorMultiplication       = FlowSalesforceConnectorOperator("MULTIPLICATION")
	FlowSalesforceConnectorOperatorDivision             = FlowSalesforceConnectorOperator("DIVISION")
	FlowSalesforceConnectorOperatorSubtraction          = FlowSalesforceConnectorOperator("SUBTRACTION")
	FlowSalesforceConnectorOperatorMaskAll              = FlowSalesforceConnectorOperator("MASK_ALL")
	FlowSalesforceConnectorOperatorMaskFirstN           = FlowSalesforceConnectorOperator("MASK_FIRST_N")
	FlowSalesforceConnectorOperatorMaskLastN            = FlowSalesforceConnectorOperator("MASK_LAST_N")
	FlowSalesforceConnectorOperatorValidateNonNull      = FlowSalesforceConnectorOperator("VALIDATE_NON_NULL")
	FlowSalesforceConnectorOperatorValidateNonZero      = FlowSalesforceConnectorOperator("VALIDATE_NON_ZERO")
	FlowSalesforceConnectorOperatorValidateNonNegative  = FlowSalesforceConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowSalesforceConnectorOperatorValidateNumeric      = FlowSalesforceConnectorOperator("VALIDATE_NUMERIC")
	FlowSalesforceConnectorOperatorNoOp                 = FlowSalesforceConnectorOperator("NO_OP")
)

func (FlowSalesforceConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSalesforceConnectorOperator)(nil)).Elem()
}

func (e FlowSalesforceConnectorOperator) ToFlowSalesforceConnectorOperatorOutput() FlowSalesforceConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowSalesforceConnectorOperatorOutput)
}

func (e FlowSalesforceConnectorOperator) ToFlowSalesforceConnectorOperatorOutputWithContext(ctx context.Context) FlowSalesforceConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSalesforceConnectorOperatorOutput)
}

func (e FlowSalesforceConnectorOperator) ToFlowSalesforceConnectorOperatorPtrOutput() FlowSalesforceConnectorOperatorPtrOutput {
	return e.ToFlowSalesforceConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowSalesforceConnectorOperator) ToFlowSalesforceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSalesforceConnectorOperatorPtrOutput {
	return FlowSalesforceConnectorOperator(e).ToFlowSalesforceConnectorOperatorOutputWithContext(ctx).ToFlowSalesforceConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowSalesforceConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSalesforceConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSalesforceConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSalesforceConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSalesforceConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowSalesforceConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSalesforceConnectorOperator)(nil)).Elem()
}

func (o FlowSalesforceConnectorOperatorOutput) ToFlowSalesforceConnectorOperatorOutput() FlowSalesforceConnectorOperatorOutput {
	return o
}

func (o FlowSalesforceConnectorOperatorOutput) ToFlowSalesforceConnectorOperatorOutputWithContext(ctx context.Context) FlowSalesforceConnectorOperatorOutput {
	return o
}

func (o FlowSalesforceConnectorOperatorOutput) ToFlowSalesforceConnectorOperatorPtrOutput() FlowSalesforceConnectorOperatorPtrOutput {
	return o.ToFlowSalesforceConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowSalesforceConnectorOperatorOutput) ToFlowSalesforceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSalesforceConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSalesforceConnectorOperator) *FlowSalesforceConnectorOperator {
		return &v
	}).(FlowSalesforceConnectorOperatorPtrOutput)
}

func (o FlowSalesforceConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSalesforceConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSalesforceConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSalesforceConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSalesforceConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSalesforceConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSalesforceConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowSalesforceConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSalesforceConnectorOperator)(nil)).Elem()
}

func (o FlowSalesforceConnectorOperatorPtrOutput) ToFlowSalesforceConnectorOperatorPtrOutput() FlowSalesforceConnectorOperatorPtrOutput {
	return o
}

func (o FlowSalesforceConnectorOperatorPtrOutput) ToFlowSalesforceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSalesforceConnectorOperatorPtrOutput {
	return o
}

func (o FlowSalesforceConnectorOperatorPtrOutput) Elem() FlowSalesforceConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowSalesforceConnectorOperator) FlowSalesforceConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowSalesforceConnectorOperator
		return ret
	}).(FlowSalesforceConnectorOperatorOutput)
}

func (o FlowSalesforceConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSalesforceConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSalesforceConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSalesforceConnectorOperatorInput is an input type that accepts FlowSalesforceConnectorOperatorArgs and FlowSalesforceConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowSalesforceConnectorOperatorInput` via:
//
//          FlowSalesforceConnectorOperatorArgs{...}
type FlowSalesforceConnectorOperatorInput interface {
	pulumi.Input

	ToFlowSalesforceConnectorOperatorOutput() FlowSalesforceConnectorOperatorOutput
	ToFlowSalesforceConnectorOperatorOutputWithContext(context.Context) FlowSalesforceConnectorOperatorOutput
}

var flowSalesforceConnectorOperatorPtrType = reflect.TypeOf((**FlowSalesforceConnectorOperator)(nil)).Elem()

type FlowSalesforceConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowSalesforceConnectorOperatorPtrOutput() FlowSalesforceConnectorOperatorPtrOutput
	ToFlowSalesforceConnectorOperatorPtrOutputWithContext(context.Context) FlowSalesforceConnectorOperatorPtrOutput
}

type flowSalesforceConnectorOperatorPtr string

func FlowSalesforceConnectorOperatorPtr(v string) FlowSalesforceConnectorOperatorPtrInput {
	return (*flowSalesforceConnectorOperatorPtr)(&v)
}

func (*flowSalesforceConnectorOperatorPtr) ElementType() reflect.Type {
	return flowSalesforceConnectorOperatorPtrType
}

func (in *flowSalesforceConnectorOperatorPtr) ToFlowSalesforceConnectorOperatorPtrOutput() FlowSalesforceConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowSalesforceConnectorOperatorPtrOutput)
}

func (in *flowSalesforceConnectorOperatorPtr) ToFlowSalesforceConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSalesforceConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSalesforceConnectorOperatorPtrOutput)
}

type FlowScheduledTriggerPropertiesDataPullMode string

const (
	FlowScheduledTriggerPropertiesDataPullModeIncremental = FlowScheduledTriggerPropertiesDataPullMode("Incremental")
	FlowScheduledTriggerPropertiesDataPullModeComplete    = FlowScheduledTriggerPropertiesDataPullMode("Complete")
)

func (FlowScheduledTriggerPropertiesDataPullMode) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowScheduledTriggerPropertiesDataPullMode)(nil)).Elem()
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToFlowScheduledTriggerPropertiesDataPullModeOutput() FlowScheduledTriggerPropertiesDataPullModeOutput {
	return pulumi.ToOutput(e).(FlowScheduledTriggerPropertiesDataPullModeOutput)
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToFlowScheduledTriggerPropertiesDataPullModeOutputWithContext(ctx context.Context) FlowScheduledTriggerPropertiesDataPullModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowScheduledTriggerPropertiesDataPullModeOutput)
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToFlowScheduledTriggerPropertiesDataPullModePtrOutput() FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return e.ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(context.Background())
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(ctx context.Context) FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return FlowScheduledTriggerPropertiesDataPullMode(e).ToFlowScheduledTriggerPropertiesDataPullModeOutputWithContext(ctx).ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(ctx)
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowScheduledTriggerPropertiesDataPullMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowScheduledTriggerPropertiesDataPullModeOutput struct{ *pulumi.OutputState }

func (FlowScheduledTriggerPropertiesDataPullModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowScheduledTriggerPropertiesDataPullMode)(nil)).Elem()
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToFlowScheduledTriggerPropertiesDataPullModeOutput() FlowScheduledTriggerPropertiesDataPullModeOutput {
	return o
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToFlowScheduledTriggerPropertiesDataPullModeOutputWithContext(ctx context.Context) FlowScheduledTriggerPropertiesDataPullModeOutput {
	return o
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToFlowScheduledTriggerPropertiesDataPullModePtrOutput() FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return o.ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(context.Background())
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(ctx context.Context) FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowScheduledTriggerPropertiesDataPullMode) *FlowScheduledTriggerPropertiesDataPullMode {
		return &v
	}).(FlowScheduledTriggerPropertiesDataPullModePtrOutput)
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowScheduledTriggerPropertiesDataPullMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowScheduledTriggerPropertiesDataPullModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowScheduledTriggerPropertiesDataPullMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowScheduledTriggerPropertiesDataPullModePtrOutput struct{ *pulumi.OutputState }

func (FlowScheduledTriggerPropertiesDataPullModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowScheduledTriggerPropertiesDataPullMode)(nil)).Elem()
}

func (o FlowScheduledTriggerPropertiesDataPullModePtrOutput) ToFlowScheduledTriggerPropertiesDataPullModePtrOutput() FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return o
}

func (o FlowScheduledTriggerPropertiesDataPullModePtrOutput) ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(ctx context.Context) FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return o
}

func (o FlowScheduledTriggerPropertiesDataPullModePtrOutput) Elem() FlowScheduledTriggerPropertiesDataPullModeOutput {
	return o.ApplyT(func(v *FlowScheduledTriggerPropertiesDataPullMode) FlowScheduledTriggerPropertiesDataPullMode {
		if v != nil {
			return *v
		}
		var ret FlowScheduledTriggerPropertiesDataPullMode
		return ret
	}).(FlowScheduledTriggerPropertiesDataPullModeOutput)
}

func (o FlowScheduledTriggerPropertiesDataPullModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowScheduledTriggerPropertiesDataPullModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowScheduledTriggerPropertiesDataPullMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowScheduledTriggerPropertiesDataPullModeInput is an input type that accepts FlowScheduledTriggerPropertiesDataPullModeArgs and FlowScheduledTriggerPropertiesDataPullModeOutput values.
// You can construct a concrete instance of `FlowScheduledTriggerPropertiesDataPullModeInput` via:
//
//          FlowScheduledTriggerPropertiesDataPullModeArgs{...}
type FlowScheduledTriggerPropertiesDataPullModeInput interface {
	pulumi.Input

	ToFlowScheduledTriggerPropertiesDataPullModeOutput() FlowScheduledTriggerPropertiesDataPullModeOutput
	ToFlowScheduledTriggerPropertiesDataPullModeOutputWithContext(context.Context) FlowScheduledTriggerPropertiesDataPullModeOutput
}

var flowScheduledTriggerPropertiesDataPullModePtrType = reflect.TypeOf((**FlowScheduledTriggerPropertiesDataPullMode)(nil)).Elem()

type FlowScheduledTriggerPropertiesDataPullModePtrInput interface {
	pulumi.Input

	ToFlowScheduledTriggerPropertiesDataPullModePtrOutput() FlowScheduledTriggerPropertiesDataPullModePtrOutput
	ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(context.Context) FlowScheduledTriggerPropertiesDataPullModePtrOutput
}

type flowScheduledTriggerPropertiesDataPullModePtr string

func FlowScheduledTriggerPropertiesDataPullModePtr(v string) FlowScheduledTriggerPropertiesDataPullModePtrInput {
	return (*flowScheduledTriggerPropertiesDataPullModePtr)(&v)
}

func (*flowScheduledTriggerPropertiesDataPullModePtr) ElementType() reflect.Type {
	return flowScheduledTriggerPropertiesDataPullModePtrType
}

func (in *flowScheduledTriggerPropertiesDataPullModePtr) ToFlowScheduledTriggerPropertiesDataPullModePtrOutput() FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return pulumi.ToOutput(in).(FlowScheduledTriggerPropertiesDataPullModePtrOutput)
}

func (in *flowScheduledTriggerPropertiesDataPullModePtr) ToFlowScheduledTriggerPropertiesDataPullModePtrOutputWithContext(ctx context.Context) FlowScheduledTriggerPropertiesDataPullModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowScheduledTriggerPropertiesDataPullModePtrOutput)
}

type FlowServiceNowConnectorOperator string

const (
	FlowServiceNowConnectorOperatorProjection           = FlowServiceNowConnectorOperator("PROJECTION")
	FlowServiceNowConnectorOperatorLessThan             = FlowServiceNowConnectorOperator("LESS_THAN")
	FlowServiceNowConnectorOperatorContains             = FlowServiceNowConnectorOperator("CONTAINS")
	FlowServiceNowConnectorOperatorGreaterThan          = FlowServiceNowConnectorOperator("GREATER_THAN")
	FlowServiceNowConnectorOperatorBetween              = FlowServiceNowConnectorOperator("BETWEEN")
	FlowServiceNowConnectorOperatorLessThanOrEqualTo    = FlowServiceNowConnectorOperator("LESS_THAN_OR_EQUAL_TO")
	FlowServiceNowConnectorOperatorGreaterThanOrEqualTo = FlowServiceNowConnectorOperator("GREATER_THAN_OR_EQUAL_TO")
	FlowServiceNowConnectorOperatorEqualTo              = FlowServiceNowConnectorOperator("EQUAL_TO")
	FlowServiceNowConnectorOperatorNotEqualTo           = FlowServiceNowConnectorOperator("NOT_EQUAL_TO")
	FlowServiceNowConnectorOperatorAddition             = FlowServiceNowConnectorOperator("ADDITION")
	FlowServiceNowConnectorOperatorMultiplication       = FlowServiceNowConnectorOperator("MULTIPLICATION")
	FlowServiceNowConnectorOperatorDivision             = FlowServiceNowConnectorOperator("DIVISION")
	FlowServiceNowConnectorOperatorSubtraction          = FlowServiceNowConnectorOperator("SUBTRACTION")
	FlowServiceNowConnectorOperatorMaskAll              = FlowServiceNowConnectorOperator("MASK_ALL")
	FlowServiceNowConnectorOperatorMaskFirstN           = FlowServiceNowConnectorOperator("MASK_FIRST_N")
	FlowServiceNowConnectorOperatorMaskLastN            = FlowServiceNowConnectorOperator("MASK_LAST_N")
	FlowServiceNowConnectorOperatorValidateNonNull      = FlowServiceNowConnectorOperator("VALIDATE_NON_NULL")
	FlowServiceNowConnectorOperatorValidateNonZero      = FlowServiceNowConnectorOperator("VALIDATE_NON_ZERO")
	FlowServiceNowConnectorOperatorValidateNonNegative  = FlowServiceNowConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowServiceNowConnectorOperatorValidateNumeric      = FlowServiceNowConnectorOperator("VALIDATE_NUMERIC")
	FlowServiceNowConnectorOperatorNoOp                 = FlowServiceNowConnectorOperator("NO_OP")
)

func (FlowServiceNowConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowServiceNowConnectorOperator)(nil)).Elem()
}

func (e FlowServiceNowConnectorOperator) ToFlowServiceNowConnectorOperatorOutput() FlowServiceNowConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowServiceNowConnectorOperatorOutput)
}

func (e FlowServiceNowConnectorOperator) ToFlowServiceNowConnectorOperatorOutputWithContext(ctx context.Context) FlowServiceNowConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowServiceNowConnectorOperatorOutput)
}

func (e FlowServiceNowConnectorOperator) ToFlowServiceNowConnectorOperatorPtrOutput() FlowServiceNowConnectorOperatorPtrOutput {
	return e.ToFlowServiceNowConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowServiceNowConnectorOperator) ToFlowServiceNowConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowServiceNowConnectorOperatorPtrOutput {
	return FlowServiceNowConnectorOperator(e).ToFlowServiceNowConnectorOperatorOutputWithContext(ctx).ToFlowServiceNowConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowServiceNowConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowServiceNowConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowServiceNowConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowServiceNowConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowServiceNowConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowServiceNowConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowServiceNowConnectorOperator)(nil)).Elem()
}

func (o FlowServiceNowConnectorOperatorOutput) ToFlowServiceNowConnectorOperatorOutput() FlowServiceNowConnectorOperatorOutput {
	return o
}

func (o FlowServiceNowConnectorOperatorOutput) ToFlowServiceNowConnectorOperatorOutputWithContext(ctx context.Context) FlowServiceNowConnectorOperatorOutput {
	return o
}

func (o FlowServiceNowConnectorOperatorOutput) ToFlowServiceNowConnectorOperatorPtrOutput() FlowServiceNowConnectorOperatorPtrOutput {
	return o.ToFlowServiceNowConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowServiceNowConnectorOperatorOutput) ToFlowServiceNowConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowServiceNowConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowServiceNowConnectorOperator) *FlowServiceNowConnectorOperator {
		return &v
	}).(FlowServiceNowConnectorOperatorPtrOutput)
}

func (o FlowServiceNowConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowServiceNowConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowServiceNowConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowServiceNowConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowServiceNowConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowServiceNowConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowServiceNowConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowServiceNowConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowServiceNowConnectorOperator)(nil)).Elem()
}

func (o FlowServiceNowConnectorOperatorPtrOutput) ToFlowServiceNowConnectorOperatorPtrOutput() FlowServiceNowConnectorOperatorPtrOutput {
	return o
}

func (o FlowServiceNowConnectorOperatorPtrOutput) ToFlowServiceNowConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowServiceNowConnectorOperatorPtrOutput {
	return o
}

func (o FlowServiceNowConnectorOperatorPtrOutput) Elem() FlowServiceNowConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowServiceNowConnectorOperator) FlowServiceNowConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowServiceNowConnectorOperator
		return ret
	}).(FlowServiceNowConnectorOperatorOutput)
}

func (o FlowServiceNowConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowServiceNowConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowServiceNowConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowServiceNowConnectorOperatorInput is an input type that accepts FlowServiceNowConnectorOperatorArgs and FlowServiceNowConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowServiceNowConnectorOperatorInput` via:
//
//          FlowServiceNowConnectorOperatorArgs{...}
type FlowServiceNowConnectorOperatorInput interface {
	pulumi.Input

	ToFlowServiceNowConnectorOperatorOutput() FlowServiceNowConnectorOperatorOutput
	ToFlowServiceNowConnectorOperatorOutputWithContext(context.Context) FlowServiceNowConnectorOperatorOutput
}

var flowServiceNowConnectorOperatorPtrType = reflect.TypeOf((**FlowServiceNowConnectorOperator)(nil)).Elem()

type FlowServiceNowConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowServiceNowConnectorOperatorPtrOutput() FlowServiceNowConnectorOperatorPtrOutput
	ToFlowServiceNowConnectorOperatorPtrOutputWithContext(context.Context) FlowServiceNowConnectorOperatorPtrOutput
}

type flowServiceNowConnectorOperatorPtr string

func FlowServiceNowConnectorOperatorPtr(v string) FlowServiceNowConnectorOperatorPtrInput {
	return (*flowServiceNowConnectorOperatorPtr)(&v)
}

func (*flowServiceNowConnectorOperatorPtr) ElementType() reflect.Type {
	return flowServiceNowConnectorOperatorPtrType
}

func (in *flowServiceNowConnectorOperatorPtr) ToFlowServiceNowConnectorOperatorPtrOutput() FlowServiceNowConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowServiceNowConnectorOperatorPtrOutput)
}

func (in *flowServiceNowConnectorOperatorPtr) ToFlowServiceNowConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowServiceNowConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowServiceNowConnectorOperatorPtrOutput)
}

type FlowSingularConnectorOperator string

const (
	FlowSingularConnectorOperatorProjection          = FlowSingularConnectorOperator("PROJECTION")
	FlowSingularConnectorOperatorEqualTo             = FlowSingularConnectorOperator("EQUAL_TO")
	FlowSingularConnectorOperatorAddition            = FlowSingularConnectorOperator("ADDITION")
	FlowSingularConnectorOperatorMultiplication      = FlowSingularConnectorOperator("MULTIPLICATION")
	FlowSingularConnectorOperatorDivision            = FlowSingularConnectorOperator("DIVISION")
	FlowSingularConnectorOperatorSubtraction         = FlowSingularConnectorOperator("SUBTRACTION")
	FlowSingularConnectorOperatorMaskAll             = FlowSingularConnectorOperator("MASK_ALL")
	FlowSingularConnectorOperatorMaskFirstN          = FlowSingularConnectorOperator("MASK_FIRST_N")
	FlowSingularConnectorOperatorMaskLastN           = FlowSingularConnectorOperator("MASK_LAST_N")
	FlowSingularConnectorOperatorValidateNonNull     = FlowSingularConnectorOperator("VALIDATE_NON_NULL")
	FlowSingularConnectorOperatorValidateNonZero     = FlowSingularConnectorOperator("VALIDATE_NON_ZERO")
	FlowSingularConnectorOperatorValidateNonNegative = FlowSingularConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowSingularConnectorOperatorValidateNumeric     = FlowSingularConnectorOperator("VALIDATE_NUMERIC")
	FlowSingularConnectorOperatorNoOp                = FlowSingularConnectorOperator("NO_OP")
)

func (FlowSingularConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSingularConnectorOperator)(nil)).Elem()
}

func (e FlowSingularConnectorOperator) ToFlowSingularConnectorOperatorOutput() FlowSingularConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowSingularConnectorOperatorOutput)
}

func (e FlowSingularConnectorOperator) ToFlowSingularConnectorOperatorOutputWithContext(ctx context.Context) FlowSingularConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSingularConnectorOperatorOutput)
}

func (e FlowSingularConnectorOperator) ToFlowSingularConnectorOperatorPtrOutput() FlowSingularConnectorOperatorPtrOutput {
	return e.ToFlowSingularConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowSingularConnectorOperator) ToFlowSingularConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSingularConnectorOperatorPtrOutput {
	return FlowSingularConnectorOperator(e).ToFlowSingularConnectorOperatorOutputWithContext(ctx).ToFlowSingularConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowSingularConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSingularConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSingularConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSingularConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSingularConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowSingularConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSingularConnectorOperator)(nil)).Elem()
}

func (o FlowSingularConnectorOperatorOutput) ToFlowSingularConnectorOperatorOutput() FlowSingularConnectorOperatorOutput {
	return o
}

func (o FlowSingularConnectorOperatorOutput) ToFlowSingularConnectorOperatorOutputWithContext(ctx context.Context) FlowSingularConnectorOperatorOutput {
	return o
}

func (o FlowSingularConnectorOperatorOutput) ToFlowSingularConnectorOperatorPtrOutput() FlowSingularConnectorOperatorPtrOutput {
	return o.ToFlowSingularConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowSingularConnectorOperatorOutput) ToFlowSingularConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSingularConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSingularConnectorOperator) *FlowSingularConnectorOperator {
		return &v
	}).(FlowSingularConnectorOperatorPtrOutput)
}

func (o FlowSingularConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSingularConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSingularConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSingularConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSingularConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSingularConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSingularConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowSingularConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSingularConnectorOperator)(nil)).Elem()
}

func (o FlowSingularConnectorOperatorPtrOutput) ToFlowSingularConnectorOperatorPtrOutput() FlowSingularConnectorOperatorPtrOutput {
	return o
}

func (o FlowSingularConnectorOperatorPtrOutput) ToFlowSingularConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSingularConnectorOperatorPtrOutput {
	return o
}

func (o FlowSingularConnectorOperatorPtrOutput) Elem() FlowSingularConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowSingularConnectorOperator) FlowSingularConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowSingularConnectorOperator
		return ret
	}).(FlowSingularConnectorOperatorOutput)
}

func (o FlowSingularConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSingularConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSingularConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSingularConnectorOperatorInput is an input type that accepts FlowSingularConnectorOperatorArgs and FlowSingularConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowSingularConnectorOperatorInput` via:
//
//          FlowSingularConnectorOperatorArgs{...}
type FlowSingularConnectorOperatorInput interface {
	pulumi.Input

	ToFlowSingularConnectorOperatorOutput() FlowSingularConnectorOperatorOutput
	ToFlowSingularConnectorOperatorOutputWithContext(context.Context) FlowSingularConnectorOperatorOutput
}

var flowSingularConnectorOperatorPtrType = reflect.TypeOf((**FlowSingularConnectorOperator)(nil)).Elem()

type FlowSingularConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowSingularConnectorOperatorPtrOutput() FlowSingularConnectorOperatorPtrOutput
	ToFlowSingularConnectorOperatorPtrOutputWithContext(context.Context) FlowSingularConnectorOperatorPtrOutput
}

type flowSingularConnectorOperatorPtr string

func FlowSingularConnectorOperatorPtr(v string) FlowSingularConnectorOperatorPtrInput {
	return (*flowSingularConnectorOperatorPtr)(&v)
}

func (*flowSingularConnectorOperatorPtr) ElementType() reflect.Type {
	return flowSingularConnectorOperatorPtrType
}

func (in *flowSingularConnectorOperatorPtr) ToFlowSingularConnectorOperatorPtrOutput() FlowSingularConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowSingularConnectorOperatorPtrOutput)
}

func (in *flowSingularConnectorOperatorPtr) ToFlowSingularConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSingularConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSingularConnectorOperatorPtrOutput)
}

type FlowSlackConnectorOperator string

const (
	FlowSlackConnectorOperatorProjection          = FlowSlackConnectorOperator("PROJECTION")
	FlowSlackConnectorOperatorBetween             = FlowSlackConnectorOperator("BETWEEN")
	FlowSlackConnectorOperatorEqualTo             = FlowSlackConnectorOperator("EQUAL_TO")
	FlowSlackConnectorOperatorAddition            = FlowSlackConnectorOperator("ADDITION")
	FlowSlackConnectorOperatorMultiplication      = FlowSlackConnectorOperator("MULTIPLICATION")
	FlowSlackConnectorOperatorDivision            = FlowSlackConnectorOperator("DIVISION")
	FlowSlackConnectorOperatorSubtraction         = FlowSlackConnectorOperator("SUBTRACTION")
	FlowSlackConnectorOperatorMaskAll             = FlowSlackConnectorOperator("MASK_ALL")
	FlowSlackConnectorOperatorMaskFirstN          = FlowSlackConnectorOperator("MASK_FIRST_N")
	FlowSlackConnectorOperatorMaskLastN           = FlowSlackConnectorOperator("MASK_LAST_N")
	FlowSlackConnectorOperatorValidateNonNull     = FlowSlackConnectorOperator("VALIDATE_NON_NULL")
	FlowSlackConnectorOperatorValidateNonZero     = FlowSlackConnectorOperator("VALIDATE_NON_ZERO")
	FlowSlackConnectorOperatorValidateNonNegative = FlowSlackConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowSlackConnectorOperatorValidateNumeric     = FlowSlackConnectorOperator("VALIDATE_NUMERIC")
	FlowSlackConnectorOperatorNoOp                = FlowSlackConnectorOperator("NO_OP")
)

func (FlowSlackConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSlackConnectorOperator)(nil)).Elem()
}

func (e FlowSlackConnectorOperator) ToFlowSlackConnectorOperatorOutput() FlowSlackConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowSlackConnectorOperatorOutput)
}

func (e FlowSlackConnectorOperator) ToFlowSlackConnectorOperatorOutputWithContext(ctx context.Context) FlowSlackConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSlackConnectorOperatorOutput)
}

func (e FlowSlackConnectorOperator) ToFlowSlackConnectorOperatorPtrOutput() FlowSlackConnectorOperatorPtrOutput {
	return e.ToFlowSlackConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowSlackConnectorOperator) ToFlowSlackConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSlackConnectorOperatorPtrOutput {
	return FlowSlackConnectorOperator(e).ToFlowSlackConnectorOperatorOutputWithContext(ctx).ToFlowSlackConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowSlackConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSlackConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSlackConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSlackConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSlackConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowSlackConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSlackConnectorOperator)(nil)).Elem()
}

func (o FlowSlackConnectorOperatorOutput) ToFlowSlackConnectorOperatorOutput() FlowSlackConnectorOperatorOutput {
	return o
}

func (o FlowSlackConnectorOperatorOutput) ToFlowSlackConnectorOperatorOutputWithContext(ctx context.Context) FlowSlackConnectorOperatorOutput {
	return o
}

func (o FlowSlackConnectorOperatorOutput) ToFlowSlackConnectorOperatorPtrOutput() FlowSlackConnectorOperatorPtrOutput {
	return o.ToFlowSlackConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowSlackConnectorOperatorOutput) ToFlowSlackConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSlackConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSlackConnectorOperator) *FlowSlackConnectorOperator {
		return &v
	}).(FlowSlackConnectorOperatorPtrOutput)
}

func (o FlowSlackConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSlackConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSlackConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSlackConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSlackConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSlackConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSlackConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowSlackConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSlackConnectorOperator)(nil)).Elem()
}

func (o FlowSlackConnectorOperatorPtrOutput) ToFlowSlackConnectorOperatorPtrOutput() FlowSlackConnectorOperatorPtrOutput {
	return o
}

func (o FlowSlackConnectorOperatorPtrOutput) ToFlowSlackConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSlackConnectorOperatorPtrOutput {
	return o
}

func (o FlowSlackConnectorOperatorPtrOutput) Elem() FlowSlackConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowSlackConnectorOperator) FlowSlackConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowSlackConnectorOperator
		return ret
	}).(FlowSlackConnectorOperatorOutput)
}

func (o FlowSlackConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSlackConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSlackConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSlackConnectorOperatorInput is an input type that accepts FlowSlackConnectorOperatorArgs and FlowSlackConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowSlackConnectorOperatorInput` via:
//
//          FlowSlackConnectorOperatorArgs{...}
type FlowSlackConnectorOperatorInput interface {
	pulumi.Input

	ToFlowSlackConnectorOperatorOutput() FlowSlackConnectorOperatorOutput
	ToFlowSlackConnectorOperatorOutputWithContext(context.Context) FlowSlackConnectorOperatorOutput
}

var flowSlackConnectorOperatorPtrType = reflect.TypeOf((**FlowSlackConnectorOperator)(nil)).Elem()

type FlowSlackConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowSlackConnectorOperatorPtrOutput() FlowSlackConnectorOperatorPtrOutput
	ToFlowSlackConnectorOperatorPtrOutputWithContext(context.Context) FlowSlackConnectorOperatorPtrOutput
}

type flowSlackConnectorOperatorPtr string

func FlowSlackConnectorOperatorPtr(v string) FlowSlackConnectorOperatorPtrInput {
	return (*flowSlackConnectorOperatorPtr)(&v)
}

func (*flowSlackConnectorOperatorPtr) ElementType() reflect.Type {
	return flowSlackConnectorOperatorPtrType
}

func (in *flowSlackConnectorOperatorPtr) ToFlowSlackConnectorOperatorPtrOutput() FlowSlackConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowSlackConnectorOperatorPtrOutput)
}

func (in *flowSlackConnectorOperatorPtr) ToFlowSlackConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowSlackConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSlackConnectorOperatorPtrOutput)
}

type FlowTaskType string

const (
	FlowTaskTypeArithmetic = FlowTaskType("Arithmetic")
	FlowTaskTypeFilter     = FlowTaskType("Filter")
	FlowTaskTypeMap        = FlowTaskType("Map")
	FlowTaskTypeMapAll     = FlowTaskType("Map_all")
	FlowTaskTypeMask       = FlowTaskType("Mask")
	FlowTaskTypeMerge      = FlowTaskType("Merge")
	FlowTaskTypeTruncate   = FlowTaskType("Truncate")
	FlowTaskTypeValidate   = FlowTaskType("Validate")
)

func (FlowTaskType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTaskType)(nil)).Elem()
}

func (e FlowTaskType) ToFlowTaskTypeOutput() FlowTaskTypeOutput {
	return pulumi.ToOutput(e).(FlowTaskTypeOutput)
}

func (e FlowTaskType) ToFlowTaskTypeOutputWithContext(ctx context.Context) FlowTaskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowTaskTypeOutput)
}

func (e FlowTaskType) ToFlowTaskTypePtrOutput() FlowTaskTypePtrOutput {
	return e.ToFlowTaskTypePtrOutputWithContext(context.Background())
}

func (e FlowTaskType) ToFlowTaskTypePtrOutputWithContext(ctx context.Context) FlowTaskTypePtrOutput {
	return FlowTaskType(e).ToFlowTaskTypeOutputWithContext(ctx).ToFlowTaskTypePtrOutputWithContext(ctx)
}

func (e FlowTaskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowTaskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowTaskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowTaskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowTaskTypeOutput struct{ *pulumi.OutputState }

func (FlowTaskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTaskType)(nil)).Elem()
}

func (o FlowTaskTypeOutput) ToFlowTaskTypeOutput() FlowTaskTypeOutput {
	return o
}

func (o FlowTaskTypeOutput) ToFlowTaskTypeOutputWithContext(ctx context.Context) FlowTaskTypeOutput {
	return o
}

func (o FlowTaskTypeOutput) ToFlowTaskTypePtrOutput() FlowTaskTypePtrOutput {
	return o.ToFlowTaskTypePtrOutputWithContext(context.Background())
}

func (o FlowTaskTypeOutput) ToFlowTaskTypePtrOutputWithContext(ctx context.Context) FlowTaskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowTaskType) *FlowTaskType {
		return &v
	}).(FlowTaskTypePtrOutput)
}

func (o FlowTaskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowTaskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowTaskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowTaskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTaskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowTaskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowTaskTypePtrOutput struct{ *pulumi.OutputState }

func (FlowTaskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowTaskType)(nil)).Elem()
}

func (o FlowTaskTypePtrOutput) ToFlowTaskTypePtrOutput() FlowTaskTypePtrOutput {
	return o
}

func (o FlowTaskTypePtrOutput) ToFlowTaskTypePtrOutputWithContext(ctx context.Context) FlowTaskTypePtrOutput {
	return o
}

func (o FlowTaskTypePtrOutput) Elem() FlowTaskTypeOutput {
	return o.ApplyT(func(v *FlowTaskType) FlowTaskType {
		if v != nil {
			return *v
		}
		var ret FlowTaskType
		return ret
	}).(FlowTaskTypeOutput)
}

func (o FlowTaskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTaskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowTaskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowTaskTypeInput is an input type that accepts FlowTaskTypeArgs and FlowTaskTypeOutput values.
// You can construct a concrete instance of `FlowTaskTypeInput` via:
//
//          FlowTaskTypeArgs{...}
type FlowTaskTypeInput interface {
	pulumi.Input

	ToFlowTaskTypeOutput() FlowTaskTypeOutput
	ToFlowTaskTypeOutputWithContext(context.Context) FlowTaskTypeOutput
}

var flowTaskTypePtrType = reflect.TypeOf((**FlowTaskType)(nil)).Elem()

type FlowTaskTypePtrInput interface {
	pulumi.Input

	ToFlowTaskTypePtrOutput() FlowTaskTypePtrOutput
	ToFlowTaskTypePtrOutputWithContext(context.Context) FlowTaskTypePtrOutput
}

type flowTaskTypePtr string

func FlowTaskTypePtr(v string) FlowTaskTypePtrInput {
	return (*flowTaskTypePtr)(&v)
}

func (*flowTaskTypePtr) ElementType() reflect.Type {
	return flowTaskTypePtrType
}

func (in *flowTaskTypePtr) ToFlowTaskTypePtrOutput() FlowTaskTypePtrOutput {
	return pulumi.ToOutput(in).(FlowTaskTypePtrOutput)
}

func (in *flowTaskTypePtr) ToFlowTaskTypePtrOutputWithContext(ctx context.Context) FlowTaskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowTaskTypePtrOutput)
}

type FlowTrendmicroConnectorOperator string

const (
	FlowTrendmicroConnectorOperatorProjection          = FlowTrendmicroConnectorOperator("PROJECTION")
	FlowTrendmicroConnectorOperatorEqualTo             = FlowTrendmicroConnectorOperator("EQUAL_TO")
	FlowTrendmicroConnectorOperatorAddition            = FlowTrendmicroConnectorOperator("ADDITION")
	FlowTrendmicroConnectorOperatorMultiplication      = FlowTrendmicroConnectorOperator("MULTIPLICATION")
	FlowTrendmicroConnectorOperatorDivision            = FlowTrendmicroConnectorOperator("DIVISION")
	FlowTrendmicroConnectorOperatorSubtraction         = FlowTrendmicroConnectorOperator("SUBTRACTION")
	FlowTrendmicroConnectorOperatorMaskAll             = FlowTrendmicroConnectorOperator("MASK_ALL")
	FlowTrendmicroConnectorOperatorMaskFirstN          = FlowTrendmicroConnectorOperator("MASK_FIRST_N")
	FlowTrendmicroConnectorOperatorMaskLastN           = FlowTrendmicroConnectorOperator("MASK_LAST_N")
	FlowTrendmicroConnectorOperatorValidateNonNull     = FlowTrendmicroConnectorOperator("VALIDATE_NON_NULL")
	FlowTrendmicroConnectorOperatorValidateNonZero     = FlowTrendmicroConnectorOperator("VALIDATE_NON_ZERO")
	FlowTrendmicroConnectorOperatorValidateNonNegative = FlowTrendmicroConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowTrendmicroConnectorOperatorValidateNumeric     = FlowTrendmicroConnectorOperator("VALIDATE_NUMERIC")
	FlowTrendmicroConnectorOperatorNoOp                = FlowTrendmicroConnectorOperator("NO_OP")
)

func (FlowTrendmicroConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTrendmicroConnectorOperator)(nil)).Elem()
}

func (e FlowTrendmicroConnectorOperator) ToFlowTrendmicroConnectorOperatorOutput() FlowTrendmicroConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowTrendmicroConnectorOperatorOutput)
}

func (e FlowTrendmicroConnectorOperator) ToFlowTrendmicroConnectorOperatorOutputWithContext(ctx context.Context) FlowTrendmicroConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowTrendmicroConnectorOperatorOutput)
}

func (e FlowTrendmicroConnectorOperator) ToFlowTrendmicroConnectorOperatorPtrOutput() FlowTrendmicroConnectorOperatorPtrOutput {
	return e.ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowTrendmicroConnectorOperator) ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowTrendmicroConnectorOperatorPtrOutput {
	return FlowTrendmicroConnectorOperator(e).ToFlowTrendmicroConnectorOperatorOutputWithContext(ctx).ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowTrendmicroConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowTrendmicroConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowTrendmicroConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowTrendmicroConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowTrendmicroConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowTrendmicroConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTrendmicroConnectorOperator)(nil)).Elem()
}

func (o FlowTrendmicroConnectorOperatorOutput) ToFlowTrendmicroConnectorOperatorOutput() FlowTrendmicroConnectorOperatorOutput {
	return o
}

func (o FlowTrendmicroConnectorOperatorOutput) ToFlowTrendmicroConnectorOperatorOutputWithContext(ctx context.Context) FlowTrendmicroConnectorOperatorOutput {
	return o
}

func (o FlowTrendmicroConnectorOperatorOutput) ToFlowTrendmicroConnectorOperatorPtrOutput() FlowTrendmicroConnectorOperatorPtrOutput {
	return o.ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowTrendmicroConnectorOperatorOutput) ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowTrendmicroConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowTrendmicroConnectorOperator) *FlowTrendmicroConnectorOperator {
		return &v
	}).(FlowTrendmicroConnectorOperatorPtrOutput)
}

func (o FlowTrendmicroConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowTrendmicroConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowTrendmicroConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowTrendmicroConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTrendmicroConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowTrendmicroConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowTrendmicroConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowTrendmicroConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowTrendmicroConnectorOperator)(nil)).Elem()
}

func (o FlowTrendmicroConnectorOperatorPtrOutput) ToFlowTrendmicroConnectorOperatorPtrOutput() FlowTrendmicroConnectorOperatorPtrOutput {
	return o
}

func (o FlowTrendmicroConnectorOperatorPtrOutput) ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowTrendmicroConnectorOperatorPtrOutput {
	return o
}

func (o FlowTrendmicroConnectorOperatorPtrOutput) Elem() FlowTrendmicroConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowTrendmicroConnectorOperator) FlowTrendmicroConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowTrendmicroConnectorOperator
		return ret
	}).(FlowTrendmicroConnectorOperatorOutput)
}

func (o FlowTrendmicroConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTrendmicroConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowTrendmicroConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowTrendmicroConnectorOperatorInput is an input type that accepts FlowTrendmicroConnectorOperatorArgs and FlowTrendmicroConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowTrendmicroConnectorOperatorInput` via:
//
//          FlowTrendmicroConnectorOperatorArgs{...}
type FlowTrendmicroConnectorOperatorInput interface {
	pulumi.Input

	ToFlowTrendmicroConnectorOperatorOutput() FlowTrendmicroConnectorOperatorOutput
	ToFlowTrendmicroConnectorOperatorOutputWithContext(context.Context) FlowTrendmicroConnectorOperatorOutput
}

var flowTrendmicroConnectorOperatorPtrType = reflect.TypeOf((**FlowTrendmicroConnectorOperator)(nil)).Elem()

type FlowTrendmicroConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowTrendmicroConnectorOperatorPtrOutput() FlowTrendmicroConnectorOperatorPtrOutput
	ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(context.Context) FlowTrendmicroConnectorOperatorPtrOutput
}

type flowTrendmicroConnectorOperatorPtr string

func FlowTrendmicroConnectorOperatorPtr(v string) FlowTrendmicroConnectorOperatorPtrInput {
	return (*flowTrendmicroConnectorOperatorPtr)(&v)
}

func (*flowTrendmicroConnectorOperatorPtr) ElementType() reflect.Type {
	return flowTrendmicroConnectorOperatorPtrType
}

func (in *flowTrendmicroConnectorOperatorPtr) ToFlowTrendmicroConnectorOperatorPtrOutput() FlowTrendmicroConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowTrendmicroConnectorOperatorPtrOutput)
}

func (in *flowTrendmicroConnectorOperatorPtr) ToFlowTrendmicroConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowTrendmicroConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowTrendmicroConnectorOperatorPtrOutput)
}

type FlowTriggerType string

const (
	FlowTriggerTypeScheduled = FlowTriggerType("Scheduled")
	FlowTriggerTypeEvent     = FlowTriggerType("Event")
	FlowTriggerTypeOnDemand  = FlowTriggerType("OnDemand")
)

func (FlowTriggerType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerType)(nil)).Elem()
}

func (e FlowTriggerType) ToFlowTriggerTypeOutput() FlowTriggerTypeOutput {
	return pulumi.ToOutput(e).(FlowTriggerTypeOutput)
}

func (e FlowTriggerType) ToFlowTriggerTypeOutputWithContext(ctx context.Context) FlowTriggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowTriggerTypeOutput)
}

func (e FlowTriggerType) ToFlowTriggerTypePtrOutput() FlowTriggerTypePtrOutput {
	return e.ToFlowTriggerTypePtrOutputWithContext(context.Background())
}

func (e FlowTriggerType) ToFlowTriggerTypePtrOutputWithContext(ctx context.Context) FlowTriggerTypePtrOutput {
	return FlowTriggerType(e).ToFlowTriggerTypeOutputWithContext(ctx).ToFlowTriggerTypePtrOutputWithContext(ctx)
}

func (e FlowTriggerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowTriggerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowTriggerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowTriggerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowTriggerTypeOutput struct{ *pulumi.OutputState }

func (FlowTriggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTriggerType)(nil)).Elem()
}

func (o FlowTriggerTypeOutput) ToFlowTriggerTypeOutput() FlowTriggerTypeOutput {
	return o
}

func (o FlowTriggerTypeOutput) ToFlowTriggerTypeOutputWithContext(ctx context.Context) FlowTriggerTypeOutput {
	return o
}

func (o FlowTriggerTypeOutput) ToFlowTriggerTypePtrOutput() FlowTriggerTypePtrOutput {
	return o.ToFlowTriggerTypePtrOutputWithContext(context.Background())
}

func (o FlowTriggerTypeOutput) ToFlowTriggerTypePtrOutputWithContext(ctx context.Context) FlowTriggerTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowTriggerType) *FlowTriggerType {
		return &v
	}).(FlowTriggerTypePtrOutput)
}

func (o FlowTriggerTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowTriggerTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowTriggerType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowTriggerTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTriggerTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowTriggerType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowTriggerTypePtrOutput struct{ *pulumi.OutputState }

func (FlowTriggerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowTriggerType)(nil)).Elem()
}

func (o FlowTriggerTypePtrOutput) ToFlowTriggerTypePtrOutput() FlowTriggerTypePtrOutput {
	return o
}

func (o FlowTriggerTypePtrOutput) ToFlowTriggerTypePtrOutputWithContext(ctx context.Context) FlowTriggerTypePtrOutput {
	return o
}

func (o FlowTriggerTypePtrOutput) Elem() FlowTriggerTypeOutput {
	return o.ApplyT(func(v *FlowTriggerType) FlowTriggerType {
		if v != nil {
			return *v
		}
		var ret FlowTriggerType
		return ret
	}).(FlowTriggerTypeOutput)
}

func (o FlowTriggerTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTriggerTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowTriggerType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowTriggerTypeInput is an input type that accepts FlowTriggerTypeArgs and FlowTriggerTypeOutput values.
// You can construct a concrete instance of `FlowTriggerTypeInput` via:
//
//          FlowTriggerTypeArgs{...}
type FlowTriggerTypeInput interface {
	pulumi.Input

	ToFlowTriggerTypeOutput() FlowTriggerTypeOutput
	ToFlowTriggerTypeOutputWithContext(context.Context) FlowTriggerTypeOutput
}

var flowTriggerTypePtrType = reflect.TypeOf((**FlowTriggerType)(nil)).Elem()

type FlowTriggerTypePtrInput interface {
	pulumi.Input

	ToFlowTriggerTypePtrOutput() FlowTriggerTypePtrOutput
	ToFlowTriggerTypePtrOutputWithContext(context.Context) FlowTriggerTypePtrOutput
}

type flowTriggerTypePtr string

func FlowTriggerTypePtr(v string) FlowTriggerTypePtrInput {
	return (*flowTriggerTypePtr)(&v)
}

func (*flowTriggerTypePtr) ElementType() reflect.Type {
	return flowTriggerTypePtrType
}

func (in *flowTriggerTypePtr) ToFlowTriggerTypePtrOutput() FlowTriggerTypePtrOutput {
	return pulumi.ToOutput(in).(FlowTriggerTypePtrOutput)
}

func (in *flowTriggerTypePtr) ToFlowTriggerTypePtrOutputWithContext(ctx context.Context) FlowTriggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowTriggerTypePtrOutput)
}

type FlowVeevaConnectorOperator string

const (
	FlowVeevaConnectorOperatorProjection           = FlowVeevaConnectorOperator("PROJECTION")
	FlowVeevaConnectorOperatorLessThan             = FlowVeevaConnectorOperator("LESS_THAN")
	FlowVeevaConnectorOperatorGreaterThan          = FlowVeevaConnectorOperator("GREATER_THAN")
	FlowVeevaConnectorOperatorBetween              = FlowVeevaConnectorOperator("BETWEEN")
	FlowVeevaConnectorOperatorLessThanOrEqualTo    = FlowVeevaConnectorOperator("LESS_THAN_OR_EQUAL_TO")
	FlowVeevaConnectorOperatorGreaterThanOrEqualTo = FlowVeevaConnectorOperator("GREATER_THAN_OR_EQUAL_TO")
	FlowVeevaConnectorOperatorEqualTo              = FlowVeevaConnectorOperator("EQUAL_TO")
	FlowVeevaConnectorOperatorNotEqualTo           = FlowVeevaConnectorOperator("NOT_EQUAL_TO")
	FlowVeevaConnectorOperatorAddition             = FlowVeevaConnectorOperator("ADDITION")
	FlowVeevaConnectorOperatorMultiplication       = FlowVeevaConnectorOperator("MULTIPLICATION")
	FlowVeevaConnectorOperatorDivision             = FlowVeevaConnectorOperator("DIVISION")
	FlowVeevaConnectorOperatorSubtraction          = FlowVeevaConnectorOperator("SUBTRACTION")
	FlowVeevaConnectorOperatorMaskAll              = FlowVeevaConnectorOperator("MASK_ALL")
	FlowVeevaConnectorOperatorMaskFirstN           = FlowVeevaConnectorOperator("MASK_FIRST_N")
	FlowVeevaConnectorOperatorMaskLastN            = FlowVeevaConnectorOperator("MASK_LAST_N")
	FlowVeevaConnectorOperatorValidateNonNull      = FlowVeevaConnectorOperator("VALIDATE_NON_NULL")
	FlowVeevaConnectorOperatorValidateNonZero      = FlowVeevaConnectorOperator("VALIDATE_NON_ZERO")
	FlowVeevaConnectorOperatorValidateNonNegative  = FlowVeevaConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowVeevaConnectorOperatorValidateNumeric      = FlowVeevaConnectorOperator("VALIDATE_NUMERIC")
	FlowVeevaConnectorOperatorNoOp                 = FlowVeevaConnectorOperator("NO_OP")
)

func (FlowVeevaConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowVeevaConnectorOperator)(nil)).Elem()
}

func (e FlowVeevaConnectorOperator) ToFlowVeevaConnectorOperatorOutput() FlowVeevaConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowVeevaConnectorOperatorOutput)
}

func (e FlowVeevaConnectorOperator) ToFlowVeevaConnectorOperatorOutputWithContext(ctx context.Context) FlowVeevaConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowVeevaConnectorOperatorOutput)
}

func (e FlowVeevaConnectorOperator) ToFlowVeevaConnectorOperatorPtrOutput() FlowVeevaConnectorOperatorPtrOutput {
	return e.ToFlowVeevaConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowVeevaConnectorOperator) ToFlowVeevaConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowVeevaConnectorOperatorPtrOutput {
	return FlowVeevaConnectorOperator(e).ToFlowVeevaConnectorOperatorOutputWithContext(ctx).ToFlowVeevaConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowVeevaConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowVeevaConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowVeevaConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowVeevaConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowVeevaConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowVeevaConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowVeevaConnectorOperator)(nil)).Elem()
}

func (o FlowVeevaConnectorOperatorOutput) ToFlowVeevaConnectorOperatorOutput() FlowVeevaConnectorOperatorOutput {
	return o
}

func (o FlowVeevaConnectorOperatorOutput) ToFlowVeevaConnectorOperatorOutputWithContext(ctx context.Context) FlowVeevaConnectorOperatorOutput {
	return o
}

func (o FlowVeevaConnectorOperatorOutput) ToFlowVeevaConnectorOperatorPtrOutput() FlowVeevaConnectorOperatorPtrOutput {
	return o.ToFlowVeevaConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowVeevaConnectorOperatorOutput) ToFlowVeevaConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowVeevaConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowVeevaConnectorOperator) *FlowVeevaConnectorOperator {
		return &v
	}).(FlowVeevaConnectorOperatorPtrOutput)
}

func (o FlowVeevaConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowVeevaConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowVeevaConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowVeevaConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowVeevaConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowVeevaConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowVeevaConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowVeevaConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowVeevaConnectorOperator)(nil)).Elem()
}

func (o FlowVeevaConnectorOperatorPtrOutput) ToFlowVeevaConnectorOperatorPtrOutput() FlowVeevaConnectorOperatorPtrOutput {
	return o
}

func (o FlowVeevaConnectorOperatorPtrOutput) ToFlowVeevaConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowVeevaConnectorOperatorPtrOutput {
	return o
}

func (o FlowVeevaConnectorOperatorPtrOutput) Elem() FlowVeevaConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowVeevaConnectorOperator) FlowVeevaConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowVeevaConnectorOperator
		return ret
	}).(FlowVeevaConnectorOperatorOutput)
}

func (o FlowVeevaConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowVeevaConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowVeevaConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowVeevaConnectorOperatorInput is an input type that accepts FlowVeevaConnectorOperatorArgs and FlowVeevaConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowVeevaConnectorOperatorInput` via:
//
//          FlowVeevaConnectorOperatorArgs{...}
type FlowVeevaConnectorOperatorInput interface {
	pulumi.Input

	ToFlowVeevaConnectorOperatorOutput() FlowVeevaConnectorOperatorOutput
	ToFlowVeevaConnectorOperatorOutputWithContext(context.Context) FlowVeevaConnectorOperatorOutput
}

var flowVeevaConnectorOperatorPtrType = reflect.TypeOf((**FlowVeevaConnectorOperator)(nil)).Elem()

type FlowVeevaConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowVeevaConnectorOperatorPtrOutput() FlowVeevaConnectorOperatorPtrOutput
	ToFlowVeevaConnectorOperatorPtrOutputWithContext(context.Context) FlowVeevaConnectorOperatorPtrOutput
}

type flowVeevaConnectorOperatorPtr string

func FlowVeevaConnectorOperatorPtr(v string) FlowVeevaConnectorOperatorPtrInput {
	return (*flowVeevaConnectorOperatorPtr)(&v)
}

func (*flowVeevaConnectorOperatorPtr) ElementType() reflect.Type {
	return flowVeevaConnectorOperatorPtrType
}

func (in *flowVeevaConnectorOperatorPtr) ToFlowVeevaConnectorOperatorPtrOutput() FlowVeevaConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowVeevaConnectorOperatorPtrOutput)
}

func (in *flowVeevaConnectorOperatorPtr) ToFlowVeevaConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowVeevaConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowVeevaConnectorOperatorPtrOutput)
}

type FlowWriteOperationType string

const (
	FlowWriteOperationTypeInsert = FlowWriteOperationType("INSERT")
	FlowWriteOperationTypeUpsert = FlowWriteOperationType("UPSERT")
	FlowWriteOperationTypeUpdate = FlowWriteOperationType("UPDATE")
)

func (FlowWriteOperationType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowWriteOperationType)(nil)).Elem()
}

func (e FlowWriteOperationType) ToFlowWriteOperationTypeOutput() FlowWriteOperationTypeOutput {
	return pulumi.ToOutput(e).(FlowWriteOperationTypeOutput)
}

func (e FlowWriteOperationType) ToFlowWriteOperationTypeOutputWithContext(ctx context.Context) FlowWriteOperationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowWriteOperationTypeOutput)
}

func (e FlowWriteOperationType) ToFlowWriteOperationTypePtrOutput() FlowWriteOperationTypePtrOutput {
	return e.ToFlowWriteOperationTypePtrOutputWithContext(context.Background())
}

func (e FlowWriteOperationType) ToFlowWriteOperationTypePtrOutputWithContext(ctx context.Context) FlowWriteOperationTypePtrOutput {
	return FlowWriteOperationType(e).ToFlowWriteOperationTypeOutputWithContext(ctx).ToFlowWriteOperationTypePtrOutputWithContext(ctx)
}

func (e FlowWriteOperationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowWriteOperationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowWriteOperationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowWriteOperationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowWriteOperationTypeOutput struct{ *pulumi.OutputState }

func (FlowWriteOperationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowWriteOperationType)(nil)).Elem()
}

func (o FlowWriteOperationTypeOutput) ToFlowWriteOperationTypeOutput() FlowWriteOperationTypeOutput {
	return o
}

func (o FlowWriteOperationTypeOutput) ToFlowWriteOperationTypeOutputWithContext(ctx context.Context) FlowWriteOperationTypeOutput {
	return o
}

func (o FlowWriteOperationTypeOutput) ToFlowWriteOperationTypePtrOutput() FlowWriteOperationTypePtrOutput {
	return o.ToFlowWriteOperationTypePtrOutputWithContext(context.Background())
}

func (o FlowWriteOperationTypeOutput) ToFlowWriteOperationTypePtrOutputWithContext(ctx context.Context) FlowWriteOperationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowWriteOperationType) *FlowWriteOperationType {
		return &v
	}).(FlowWriteOperationTypePtrOutput)
}

func (o FlowWriteOperationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowWriteOperationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowWriteOperationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowWriteOperationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowWriteOperationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowWriteOperationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowWriteOperationTypePtrOutput struct{ *pulumi.OutputState }

func (FlowWriteOperationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowWriteOperationType)(nil)).Elem()
}

func (o FlowWriteOperationTypePtrOutput) ToFlowWriteOperationTypePtrOutput() FlowWriteOperationTypePtrOutput {
	return o
}

func (o FlowWriteOperationTypePtrOutput) ToFlowWriteOperationTypePtrOutputWithContext(ctx context.Context) FlowWriteOperationTypePtrOutput {
	return o
}

func (o FlowWriteOperationTypePtrOutput) Elem() FlowWriteOperationTypeOutput {
	return o.ApplyT(func(v *FlowWriteOperationType) FlowWriteOperationType {
		if v != nil {
			return *v
		}
		var ret FlowWriteOperationType
		return ret
	}).(FlowWriteOperationTypeOutput)
}

func (o FlowWriteOperationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowWriteOperationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowWriteOperationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowWriteOperationTypeInput is an input type that accepts FlowWriteOperationTypeArgs and FlowWriteOperationTypeOutput values.
// You can construct a concrete instance of `FlowWriteOperationTypeInput` via:
//
//          FlowWriteOperationTypeArgs{...}
type FlowWriteOperationTypeInput interface {
	pulumi.Input

	ToFlowWriteOperationTypeOutput() FlowWriteOperationTypeOutput
	ToFlowWriteOperationTypeOutputWithContext(context.Context) FlowWriteOperationTypeOutput
}

var flowWriteOperationTypePtrType = reflect.TypeOf((**FlowWriteOperationType)(nil)).Elem()

type FlowWriteOperationTypePtrInput interface {
	pulumi.Input

	ToFlowWriteOperationTypePtrOutput() FlowWriteOperationTypePtrOutput
	ToFlowWriteOperationTypePtrOutputWithContext(context.Context) FlowWriteOperationTypePtrOutput
}

type flowWriteOperationTypePtr string

func FlowWriteOperationTypePtr(v string) FlowWriteOperationTypePtrInput {
	return (*flowWriteOperationTypePtr)(&v)
}

func (*flowWriteOperationTypePtr) ElementType() reflect.Type {
	return flowWriteOperationTypePtrType
}

func (in *flowWriteOperationTypePtr) ToFlowWriteOperationTypePtrOutput() FlowWriteOperationTypePtrOutput {
	return pulumi.ToOutput(in).(FlowWriteOperationTypePtrOutput)
}

func (in *flowWriteOperationTypePtr) ToFlowWriteOperationTypePtrOutputWithContext(ctx context.Context) FlowWriteOperationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowWriteOperationTypePtrOutput)
}

type FlowZendeskConnectorOperator string

const (
	FlowZendeskConnectorOperatorProjection          = FlowZendeskConnectorOperator("PROJECTION")
	FlowZendeskConnectorOperatorGreaterThan         = FlowZendeskConnectorOperator("GREATER_THAN")
	FlowZendeskConnectorOperatorAddition            = FlowZendeskConnectorOperator("ADDITION")
	FlowZendeskConnectorOperatorMultiplication      = FlowZendeskConnectorOperator("MULTIPLICATION")
	FlowZendeskConnectorOperatorDivision            = FlowZendeskConnectorOperator("DIVISION")
	FlowZendeskConnectorOperatorSubtraction         = FlowZendeskConnectorOperator("SUBTRACTION")
	FlowZendeskConnectorOperatorMaskAll             = FlowZendeskConnectorOperator("MASK_ALL")
	FlowZendeskConnectorOperatorMaskFirstN          = FlowZendeskConnectorOperator("MASK_FIRST_N")
	FlowZendeskConnectorOperatorMaskLastN           = FlowZendeskConnectorOperator("MASK_LAST_N")
	FlowZendeskConnectorOperatorValidateNonNull     = FlowZendeskConnectorOperator("VALIDATE_NON_NULL")
	FlowZendeskConnectorOperatorValidateNonZero     = FlowZendeskConnectorOperator("VALIDATE_NON_ZERO")
	FlowZendeskConnectorOperatorValidateNonNegative = FlowZendeskConnectorOperator("VALIDATE_NON_NEGATIVE")
	FlowZendeskConnectorOperatorValidateNumeric     = FlowZendeskConnectorOperator("VALIDATE_NUMERIC")
	FlowZendeskConnectorOperatorNoOp                = FlowZendeskConnectorOperator("NO_OP")
)

func (FlowZendeskConnectorOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowZendeskConnectorOperator)(nil)).Elem()
}

func (e FlowZendeskConnectorOperator) ToFlowZendeskConnectorOperatorOutput() FlowZendeskConnectorOperatorOutput {
	return pulumi.ToOutput(e).(FlowZendeskConnectorOperatorOutput)
}

func (e FlowZendeskConnectorOperator) ToFlowZendeskConnectorOperatorOutputWithContext(ctx context.Context) FlowZendeskConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowZendeskConnectorOperatorOutput)
}

func (e FlowZendeskConnectorOperator) ToFlowZendeskConnectorOperatorPtrOutput() FlowZendeskConnectorOperatorPtrOutput {
	return e.ToFlowZendeskConnectorOperatorPtrOutputWithContext(context.Background())
}

func (e FlowZendeskConnectorOperator) ToFlowZendeskConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowZendeskConnectorOperatorPtrOutput {
	return FlowZendeskConnectorOperator(e).ToFlowZendeskConnectorOperatorOutputWithContext(ctx).ToFlowZendeskConnectorOperatorPtrOutputWithContext(ctx)
}

func (e FlowZendeskConnectorOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowZendeskConnectorOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowZendeskConnectorOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowZendeskConnectorOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowZendeskConnectorOperatorOutput struct{ *pulumi.OutputState }

func (FlowZendeskConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowZendeskConnectorOperator)(nil)).Elem()
}

func (o FlowZendeskConnectorOperatorOutput) ToFlowZendeskConnectorOperatorOutput() FlowZendeskConnectorOperatorOutput {
	return o
}

func (o FlowZendeskConnectorOperatorOutput) ToFlowZendeskConnectorOperatorOutputWithContext(ctx context.Context) FlowZendeskConnectorOperatorOutput {
	return o
}

func (o FlowZendeskConnectorOperatorOutput) ToFlowZendeskConnectorOperatorPtrOutput() FlowZendeskConnectorOperatorPtrOutput {
	return o.ToFlowZendeskConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o FlowZendeskConnectorOperatorOutput) ToFlowZendeskConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowZendeskConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowZendeskConnectorOperator) *FlowZendeskConnectorOperator {
		return &v
	}).(FlowZendeskConnectorOperatorPtrOutput)
}

func (o FlowZendeskConnectorOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowZendeskConnectorOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowZendeskConnectorOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowZendeskConnectorOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowZendeskConnectorOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowZendeskConnectorOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowZendeskConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (FlowZendeskConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowZendeskConnectorOperator)(nil)).Elem()
}

func (o FlowZendeskConnectorOperatorPtrOutput) ToFlowZendeskConnectorOperatorPtrOutput() FlowZendeskConnectorOperatorPtrOutput {
	return o
}

func (o FlowZendeskConnectorOperatorPtrOutput) ToFlowZendeskConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowZendeskConnectorOperatorPtrOutput {
	return o
}

func (o FlowZendeskConnectorOperatorPtrOutput) Elem() FlowZendeskConnectorOperatorOutput {
	return o.ApplyT(func(v *FlowZendeskConnectorOperator) FlowZendeskConnectorOperator {
		if v != nil {
			return *v
		}
		var ret FlowZendeskConnectorOperator
		return ret
	}).(FlowZendeskConnectorOperatorOutput)
}

func (o FlowZendeskConnectorOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowZendeskConnectorOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowZendeskConnectorOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowZendeskConnectorOperatorInput is an input type that accepts FlowZendeskConnectorOperatorArgs and FlowZendeskConnectorOperatorOutput values.
// You can construct a concrete instance of `FlowZendeskConnectorOperatorInput` via:
//
//          FlowZendeskConnectorOperatorArgs{...}
type FlowZendeskConnectorOperatorInput interface {
	pulumi.Input

	ToFlowZendeskConnectorOperatorOutput() FlowZendeskConnectorOperatorOutput
	ToFlowZendeskConnectorOperatorOutputWithContext(context.Context) FlowZendeskConnectorOperatorOutput
}

var flowZendeskConnectorOperatorPtrType = reflect.TypeOf((**FlowZendeskConnectorOperator)(nil)).Elem()

type FlowZendeskConnectorOperatorPtrInput interface {
	pulumi.Input

	ToFlowZendeskConnectorOperatorPtrOutput() FlowZendeskConnectorOperatorPtrOutput
	ToFlowZendeskConnectorOperatorPtrOutputWithContext(context.Context) FlowZendeskConnectorOperatorPtrOutput
}

type flowZendeskConnectorOperatorPtr string

func FlowZendeskConnectorOperatorPtr(v string) FlowZendeskConnectorOperatorPtrInput {
	return (*flowZendeskConnectorOperatorPtr)(&v)
}

func (*flowZendeskConnectorOperatorPtr) ElementType() reflect.Type {
	return flowZendeskConnectorOperatorPtrType
}

func (in *flowZendeskConnectorOperatorPtr) ToFlowZendeskConnectorOperatorPtrOutput() FlowZendeskConnectorOperatorPtrOutput {
	return pulumi.ToOutput(in).(FlowZendeskConnectorOperatorPtrOutput)
}

func (in *flowZendeskConnectorOperatorPtr) ToFlowZendeskConnectorOperatorPtrOutputWithContext(ctx context.Context) FlowZendeskConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowZendeskConnectorOperatorPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConnectorProfileConnectionModeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectionModePtrOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorTypeOutput{})
	pulumi.RegisterOutputType(ConnectorProfileConnectorTypePtrOutput{})
	pulumi.RegisterOutputType(FlowAggregationTypeOutput{})
	pulumi.RegisterOutputType(FlowAggregationTypePtrOutput{})
	pulumi.RegisterOutputType(FlowAmplitudeConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowAmplitudeConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowConnectorTypeOutput{})
	pulumi.RegisterOutputType(FlowConnectorTypePtrOutput{})
	pulumi.RegisterOutputType(FlowDatadogConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowDatadogConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowDynatraceConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowDynatraceConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowFileTypeOutput{})
	pulumi.RegisterOutputType(FlowFileTypePtrOutput{})
	pulumi.RegisterOutputType(FlowGoogleAnalyticsConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowGoogleAnalyticsConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowInforNexusConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowInforNexusConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowMarketoConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowMarketoConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowOperatorPropertiesKeysOutput{})
	pulumi.RegisterOutputType(FlowOperatorPropertiesKeysPtrOutput{})
	pulumi.RegisterOutputType(FlowPrefixFormatOutput{})
	pulumi.RegisterOutputType(FlowPrefixFormatPtrOutput{})
	pulumi.RegisterOutputType(FlowPrefixTypeOutput{})
	pulumi.RegisterOutputType(FlowPrefixTypePtrOutput{})
	pulumi.RegisterOutputType(FlowS3ConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowS3ConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowS3InputFormatConfigS3InputFileTypeOutput{})
	pulumi.RegisterOutputType(FlowS3InputFormatConfigS3InputFileTypePtrOutput{})
	pulumi.RegisterOutputType(FlowSAPODataConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowSAPODataConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowSalesforceConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowSalesforceConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowScheduledTriggerPropertiesDataPullModeOutput{})
	pulumi.RegisterOutputType(FlowScheduledTriggerPropertiesDataPullModePtrOutput{})
	pulumi.RegisterOutputType(FlowServiceNowConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowServiceNowConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowSingularConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowSingularConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowSlackConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowSlackConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowTaskTypeOutput{})
	pulumi.RegisterOutputType(FlowTaskTypePtrOutput{})
	pulumi.RegisterOutputType(FlowTrendmicroConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowTrendmicroConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowTriggerTypeOutput{})
	pulumi.RegisterOutputType(FlowTriggerTypePtrOutput{})
	pulumi.RegisterOutputType(FlowVeevaConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowVeevaConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(FlowWriteOperationTypeOutput{})
	pulumi.RegisterOutputType(FlowWriteOperationTypePtrOutput{})
	pulumi.RegisterOutputType(FlowZendeskConnectorOperatorOutput{})
	pulumi.RegisterOutputType(FlowZendeskConnectorOperatorPtrOutput{})
}
