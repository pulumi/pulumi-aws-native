// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamecast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::GameCast::Application
type Application struct {
	pulumi.CustomResourceState

	ApplicationSourceUri pulumi.StringPtrOutput                 `pulumi:"applicationSourceUri"`
	Arn                  pulumi.StringOutput                    `pulumi:"arn"`
	Description          pulumi.StringPtrOutput                 `pulumi:"description"`
	ExecutablePath       pulumi.StringPtrOutput                 `pulumi:"executablePath"`
	LogLocations         pulumi.StringArrayOutput               `pulumi:"logLocations"`
	RuntimeEnvironment   ApplicationRuntimeEnvironmentPtrOutput `pulumi:"runtimeEnvironment"`
	SaveConfiguration    ApplicationSaveConfigurationPtrOutput  `pulumi:"saveConfiguration"`
	SaveKey              pulumi.StringPtrOutput                 `pulumi:"saveKey"`
	Tags                 pulumi.AnyOutput                       `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	var resource Application
	err := ctx.RegisterResource("aws-native:gamecast:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:gamecast:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	ApplicationSourceUri *string                        `pulumi:"applicationSourceUri"`
	Description          *string                        `pulumi:"description"`
	ExecutablePath       *string                        `pulumi:"executablePath"`
	LogLocations         []string                       `pulumi:"logLocations"`
	RuntimeEnvironment   *ApplicationRuntimeEnvironment `pulumi:"runtimeEnvironment"`
	SaveConfiguration    *ApplicationSaveConfiguration  `pulumi:"saveConfiguration"`
	SaveKey              *string                        `pulumi:"saveKey"`
	Tags                 interface{}                    `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	ApplicationSourceUri pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	ExecutablePath       pulumi.StringPtrInput
	LogLocations         pulumi.StringArrayInput
	RuntimeEnvironment   ApplicationRuntimeEnvironmentPtrInput
	SaveConfiguration    ApplicationSaveConfigurationPtrInput
	SaveKey              pulumi.StringPtrInput
	Tags                 pulumi.Input
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ApplicationSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationSourceUri }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) ExecutablePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ExecutablePath }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) LogLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.LogLocations }).(pulumi.StringArrayOutput)
}

func (o ApplicationOutput) RuntimeEnvironment() ApplicationRuntimeEnvironmentPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationRuntimeEnvironmentPtrOutput { return v.RuntimeEnvironment }).(ApplicationRuntimeEnvironmentPtrOutput)
}

func (o ApplicationOutput) SaveConfiguration() ApplicationSaveConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationSaveConfigurationPtrOutput { return v.SaveConfiguration }).(ApplicationSaveConfigurationPtrOutput)
}

func (o ApplicationOutput) SaveKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SaveKey }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Application) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
