// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamecast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::GameCast::Application Resource Type
type Application struct {
	pulumi.CustomResourceState

	// ApplicationSourceUri points to a S3 Uri to replicate game files from customer S3 bucket into Motif internal S3 bucket.
	// The uri points to a S3 prefix that could contain many objects. Motif will attempt to copy all the S3 objects under that prefix.
	ApplicationSourceUri pulumi.StringPtrOutput `pulumi:"applicationSourceUri"`
	// ARN of the resource.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Descriptive label for the resource, not a unique ID.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Executable path is a relative path to the game launcher executable.
	ExecutablePath pulumi.StringPtrOutput `pulumi:"executablePath"`
	// A list of save file, registry key or log paths that are absolute paths that store game save files when the games
	// are running on a Windows environment.
	LogLocations       pulumi.StringArrayOutput               `pulumi:"logLocations"`
	RuntimeEnvironment ApplicationRuntimeEnvironmentPtrOutput `pulumi:"runtimeEnvironment"`
	SaveConfiguration  ApplicationSaveConfigurationPtrOutput  `pulumi:"saveConfiguration"`
	// SaveKey is used as key to manage save files, meaning that different applications with the
	// same SaveKey can share game save files generated by the game itself.
	SaveKey pulumi.StringPtrOutput   `pulumi:"saveKey"`
	Tags    ApplicationTagsPtrOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:gamecast:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:gamecast:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// ApplicationSourceUri points to a S3 Uri to replicate game files from customer S3 bucket into Motif internal S3 bucket.
	// The uri points to a S3 prefix that could contain many objects. Motif will attempt to copy all the S3 objects under that prefix.
	ApplicationSourceUri *string `pulumi:"applicationSourceUri"`
	// Descriptive label for the resource, not a unique ID.
	Description *string `pulumi:"description"`
	// Executable path is a relative path to the game launcher executable.
	ExecutablePath *string `pulumi:"executablePath"`
	// A list of save file, registry key or log paths that are absolute paths that store game save files when the games
	// are running on a Windows environment.
	LogLocations       []string                       `pulumi:"logLocations"`
	RuntimeEnvironment *ApplicationRuntimeEnvironment `pulumi:"runtimeEnvironment"`
	SaveConfiguration  *ApplicationSaveConfiguration  `pulumi:"saveConfiguration"`
	// SaveKey is used as key to manage save files, meaning that different applications with the
	// same SaveKey can share game save files generated by the game itself.
	SaveKey *string          `pulumi:"saveKey"`
	Tags    *ApplicationTags `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// ApplicationSourceUri points to a S3 Uri to replicate game files from customer S3 bucket into Motif internal S3 bucket.
	// The uri points to a S3 prefix that could contain many objects. Motif will attempt to copy all the S3 objects under that prefix.
	ApplicationSourceUri pulumi.StringPtrInput
	// Descriptive label for the resource, not a unique ID.
	Description pulumi.StringPtrInput
	// Executable path is a relative path to the game launcher executable.
	ExecutablePath pulumi.StringPtrInput
	// A list of save file, registry key or log paths that are absolute paths that store game save files when the games
	// are running on a Windows environment.
	LogLocations       pulumi.StringArrayInput
	RuntimeEnvironment ApplicationRuntimeEnvironmentPtrInput
	SaveConfiguration  ApplicationSaveConfigurationPtrInput
	// SaveKey is used as key to manage save files, meaning that different applications with the
	// same SaveKey can share game save files generated by the game itself.
	SaveKey pulumi.StringPtrInput
	Tags    ApplicationTagsPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// ApplicationSourceUri points to a S3 Uri to replicate game files from customer S3 bucket into Motif internal S3 bucket.
// The uri points to a S3 prefix that could contain many objects. Motif will attempt to copy all the S3 objects under that prefix.
func (o ApplicationOutput) ApplicationSourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationSourceUri }).(pulumi.StringPtrOutput)
}

// ARN of the resource.
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Descriptive label for the resource, not a unique ID.
func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Executable path is a relative path to the game launcher executable.
func (o ApplicationOutput) ExecutablePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ExecutablePath }).(pulumi.StringPtrOutput)
}

// A list of save file, registry key or log paths that are absolute paths that store game save files when the games
// are running on a Windows environment.
func (o ApplicationOutput) LogLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.LogLocations }).(pulumi.StringArrayOutput)
}

func (o ApplicationOutput) RuntimeEnvironment() ApplicationRuntimeEnvironmentPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationRuntimeEnvironmentPtrOutput { return v.RuntimeEnvironment }).(ApplicationRuntimeEnvironmentPtrOutput)
}

func (o ApplicationOutput) SaveConfiguration() ApplicationSaveConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationSaveConfigurationPtrOutput { return v.SaveConfiguration }).(ApplicationSaveConfigurationPtrOutput)
}

// SaveKey is used as key to manage save files, meaning that different applications with the
// same SaveKey can share game save files generated by the game itself.
func (o ApplicationOutput) SaveKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SaveKey }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) Tags() ApplicationTagsPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationTagsPtrOutput { return v.Tags }).(ApplicationTagsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
